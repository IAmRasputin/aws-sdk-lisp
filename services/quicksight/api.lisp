;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/quicksight/api
  (:use)
  (:nicknames #:aws/quicksight)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/quicksight/api)
(common-lisp:progn
 (common-lisp:defclass quicksight-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "quicksight"))
 (common-lisp:export 'quicksight-request))
(common-lisp:progn
 (common-lisp:define-condition quicksight-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'quicksight-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConcurrentUpdatingException" . concurrent-updating-exception)
    ("ConflictException" . conflict-exception)
    ("DomainNotWhitelistedException" . domain-not-whitelisted-exception)
    ("IdentityTypeNotSupportedException"
     . identity-type-not-supported-exception)
    ("InternalFailureException" . internal-failure-exception)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("InvalidParameterValueException" . invalid-parameter-value-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("PreconditionNotMetException" . precondition-not-met-exception)
    ("QuickSightUserNotFoundException" . quick-sight-user-not-found-exception)
    ("ResourceExistsException" . resource-exists-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourceUnavailableException" . resource-unavailable-exception)
    ("SessionLifetimeInMinutesInvalidException"
     . session-lifetime-in-minutes-invalid-exception)
    ("ThrottlingException" . throttling-exception)
    ("UnsupportedPricingPlanException" . unsupported-pricing-plan-exception)
    ("UnsupportedUserEditionException" . unsupported-user-edition-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       access-denied-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message
                    'access-denied-exception-request-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (account-customization (:copier common-lisp:nil)
      (:conc-name "struct-shape-account-customization-"))
   (default-theme common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (default-email-customization-template common-lisp:nil :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'account-customization 'make-account-customization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          account-customization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          account-customization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-theme))
      (common-lisp:list
       (common-lisp:cons "DefaultTheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-email-customization-template))
      (common-lisp:list
       (common-lisp:cons "DefaultEmailCustomizationTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          account-customization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (account-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-account-info-"))
   (account-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (edition common-lisp:nil :type (common-lisp:or edition common-lisp:null))
   (notification-email common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (authentication-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (account-subscription-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'account-info 'make-account-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-name))
      (common-lisp:list
       (common-lisp:cons "AccountName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edition))
      (common-lisp:list
       (common-lisp:cons "Edition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-email))
      (common-lisp:list
       (common-lisp:cons "NotificationEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "AuthenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-subscription-status))
      (common-lisp:list
       (common-lisp:cons "AccountSubscriptionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (account-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-account-settings-"))
   (account-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (edition common-lisp:nil :type (common-lisp:or edition common-lisp:null))
   (default-namespace common-lisp:nil :type
    (common-lisp:or namespace common-lisp:null))
   (notification-email common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (public-sharing-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (termination-protection-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'account-settings 'make-account-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-name))
      (common-lisp:list
       (common-lisp:cons "AccountName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edition))
      (common-lisp:list
       (common-lisp:cons "Edition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-namespace))
      (common-lisp:list
       (common-lisp:cons "DefaultNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-email))
      (common-lisp:list
       (common-lisp:cons "NotificationEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-sharing-enabled))
      (common-lisp:list
       (common-lisp:cons "PublicSharingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'termination-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "TerminationProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-action-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (active-iampolicy-assignment (:copier common-lisp:nil)
      (:conc-name "struct-shape-active-iampolicy-assignment-"))
   (assignment-name common-lisp:nil :type
    (common-lisp:or iampolicy-assignment-name common-lisp:null))
   (policy-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'active-iampolicy-assignment
                    'make-active-iampolicy-assignment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          active-iampolicy-assignment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          active-iampolicy-assignment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-name))
      (common-lisp:list
       (common-lisp:cons "AssignmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          active-iampolicy-assignment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype active-iampolicy-assignment-list ()
   '(trivial-types:proper-list active-iampolicy-assignment))
 (common-lisp:defun |make-active-iampolicy-assignment-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            active-iampolicy-assignment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (ad-hoc-filtering-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-ad-hoc-filtering-option-"))
   (availability-status common-lisp:nil :type
    (common-lisp:or dashboard-behavior common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ad-hoc-filtering-option 'make-ad-hoc-filtering-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ad-hoc-filtering-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ad-hoc-filtering-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-status))
      (common-lisp:list
       (common-lisp:cons "AvailabilityStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ad-hoc-filtering-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype additional-dashboard-id-list ()
   '(trivial-types:proper-list short-restrictive-resource-id))
 (common-lisp:defun |make-additional-dashboard-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            short-restrictive-resource-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aggregation-function (:copier common-lisp:nil)
      (:conc-name "struct-shape-aggregation-function-"))
   (numerical-aggregation-function common-lisp:nil :type
    (common-lisp:or numerical-aggregation-function common-lisp:null))
   (categorical-aggregation-function common-lisp:nil :type
    (common-lisp:or categorical-aggregation-function common-lisp:null))
   (date-aggregation-function common-lisp:nil :type
    (common-lisp:or date-aggregation-function common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aggregation-function 'make-aggregation-function))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aggregation-function))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aggregation-function))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'numerical-aggregation-function))
      (common-lisp:list
       (common-lisp:cons "NumericalAggregationFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'categorical-aggregation-function))
      (common-lisp:list
       (common-lisp:cons "CategoricalAggregationFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'date-aggregation-function))
      (common-lisp:list
       (common-lisp:cons "DateAggregationFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aggregation-function))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aggregation-sort-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-aggregation-sort-configuration-"))
   (column (common-lisp:error ":column is required") :type
    (common-lisp:or column-identifier common-lisp:null))
   (sort-direction (common-lisp:error ":sort-direction is required") :type
    (common-lisp:or sort-direction common-lisp:null))
   (aggregation-function
    (common-lisp:error ":aggregation-function is required") :type
    (common-lisp:or aggregation-function common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aggregation-sort-configuration
                    'make-aggregation-sort-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregation-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregation-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-direction))
      (common-lisp:list
       (common-lisp:cons "SortDirection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-function))
      (common-lisp:list
       (common-lisp:cons "AggregationFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregation-sort-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aggregation-sort-configuration-list ()
   '(trivial-types:proper-list aggregation-sort-configuration))
 (common-lisp:defun |make-aggregation-sort-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aggregation-sort-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype alias-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (amazon-elasticsearch-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-amazon-elasticsearch-parameters-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'amazon-elasticsearch-parameters
                    'make-amazon-elasticsearch-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          amazon-elasticsearch-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          amazon-elasticsearch-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          amazon-elasticsearch-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (amazon-open-search-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-amazon-open-search-parameters-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'amazon-open-search-parameters
                    'make-amazon-open-search-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          amazon-open-search-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          amazon-open-search-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          amazon-open-search-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (analysis (:copier common-lisp:nil) (:conc-name "struct-shape-analysis-"))
   (analysis-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or analysis-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or resource-status common-lisp:null))
   (errors common-lisp:nil :type
    (common-lisp:or analysis-error-list common-lisp:null))
   (data-set-arns common-lisp:nil :type
    (common-lisp:or data-set-arns-list common-lisp:null))
   (theme-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (sheets common-lisp:nil :type (common-lisp:or sheet-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'analysis 'make-analysis))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analysis))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analysis))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-id))
      (common-lisp:list
       (common-lisp:cons "AnalysisId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-arns))
      (common-lisp:list
       (common-lisp:cons "DataSetArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-arn))
      (common-lisp:list
       (common-lisp:cons "ThemeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sheets))
      (common-lisp:list
       (common-lisp:cons "Sheets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analysis))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (analysis-defaults (:copier common-lisp:nil)
      (:conc-name "struct-shape-analysis-defaults-"))
   (default-new-sheet-configuration
    (common-lisp:error ":default-new-sheet-configuration is required") :type
    (common-lisp:or default-new-sheet-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'analysis-defaults 'make-analysis-defaults))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analysis-defaults))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analysis-defaults))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-new-sheet-configuration))
      (common-lisp:list
       (common-lisp:cons "DefaultNewSheetConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analysis-defaults))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (analysis-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-analysis-definition-"))
   (data-set-identifier-declarations
    (common-lisp:error ":data-set-identifier-declarations is required") :type
    (common-lisp:or data-set-identifier-declaration-list common-lisp:null))
   (sheets common-lisp:nil :type
    (common-lisp:or sheet-definition-list common-lisp:null))
   (calculated-fields common-lisp:nil :type
    (common-lisp:or calculated-fields common-lisp:null))
   (parameter-declarations common-lisp:nil :type
    (common-lisp:or parameter-declaration-list common-lisp:null))
   (filter-groups common-lisp:nil :type
    (common-lisp:or filter-group-list common-lisp:null))
   (column-configurations common-lisp:nil :type
    (common-lisp:or column-configuration-list common-lisp:null))
   (analysis-defaults common-lisp:nil :type
    (common-lisp:or analysis-defaults common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'analysis-definition 'make-analysis-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analysis-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analysis-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-set-identifier-declarations))
      (common-lisp:list
       (common-lisp:cons "DataSetIdentifierDeclarations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sheets))
      (common-lisp:list
       (common-lisp:cons "Sheets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'calculated-fields))
      (common-lisp:list
       (common-lisp:cons "CalculatedFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-declarations))
      (common-lisp:list
       (common-lisp:cons "ParameterDeclarations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-groups))
      (common-lisp:list
       (common-lisp:cons "FilterGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-configurations))
      (common-lisp:list
       (common-lisp:cons "ColumnConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-defaults))
      (common-lisp:list
       (common-lisp:cons "AnalysisDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analysis-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (analysis-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-analysis-error-"))
   (type common-lisp:nil :type
    (common-lisp:or analysis-error-type common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (violated-entities common-lisp:nil :type
    (common-lisp:or entity-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'analysis-error 'make-analysis-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analysis-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analysis-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violated-entities))
      (common-lisp:list
       (common-lisp:cons "ViolatedEntities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analysis-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analysis-error-list ()
   '(trivial-types:proper-list analysis-error))
 (common-lisp:defun |make-analysis-error-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list analysis-error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype analysis-error-type () 'common-lisp:string)
(common-lisp:deftype analysis-filter-attribute () 'common-lisp:string)
(common-lisp:deftype analysis-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (analysis-search-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-analysis-search-filter-"))
   (operator common-lisp:nil :type
    (common-lisp:or filter-operator common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or analysis-filter-attribute common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'analysis-search-filter 'make-analysis-search-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analysis-search-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analysis-search-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "Operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analysis-search-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analysis-search-filter-list ()
   '(trivial-types:proper-list analysis-search-filter))
 (common-lisp:defun |make-analysis-search-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list analysis-search-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (analysis-source-entity (:copier common-lisp:nil)
      (:conc-name "struct-shape-analysis-source-entity-"))
   (source-template common-lisp:nil :type
    (common-lisp:or analysis-source-template common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'analysis-source-entity 'make-analysis-source-entity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analysis-source-entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analysis-source-entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-template))
      (common-lisp:list
       (common-lisp:cons "SourceTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analysis-source-entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (analysis-source-template (:copier common-lisp:nil)
      (:conc-name "struct-shape-analysis-source-template-"))
   (data-set-references (common-lisp:error ":data-set-references is required")
    :type (common-lisp:or data-set-reference-list common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'analysis-source-template 'make-analysis-source-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analysis-source-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analysis-source-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-references))
      (common-lisp:list
       (common-lisp:cons "DataSetReferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analysis-source-template))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (analysis-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-analysis-summary-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (analysis-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or analysis-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or resource-status common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'analysis-summary 'make-analysis-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analysis-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analysis-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-id))
      (common-lisp:list
       (common-lisp:cons "AnalysisId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analysis-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analysis-summary-list ()
   '(trivial-types:proper-list analysis-summary))
 (common-lisp:defun |make-analysis-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list analysis-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (anchor-date-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-anchor-date-configuration-"))
   (anchor-option common-lisp:nil :type
    (common-lisp:or anchor-option common-lisp:null))
   (parameter-name common-lisp:nil :type
    (common-lisp:or parameter-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'anchor-date-configuration
                    'make-anchor-date-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          anchor-date-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          anchor-date-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anchor-option))
      (common-lisp:list
       (common-lisp:cons "AnchorOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          anchor-date-configuration))
   common-lisp:nil))
(common-lisp:deftype anchor-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (anonymous-user-dashboard-embedding-configuration
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-anonymous-user-dashboard-embedding-configuration-"))
   (initial-dashboard-id
    (common-lisp:error ":initial-dashboard-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'anonymous-user-dashboard-embedding-configuration
                    'make-anonymous-user-dashboard-embedding-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          anonymous-user-dashboard-embedding-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          anonymous-user-dashboard-embedding-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initial-dashboard-id))
      (common-lisp:list
       (common-lisp:cons "InitialDashboardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          anonymous-user-dashboard-embedding-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (anonymous-user-dashboard-visual-embedding-configuration
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-anonymous-user-dashboard-visual-embedding-configuration-"))
   (initial-dashboard-visual-id
    (common-lisp:error ":initial-dashboard-visual-id is required") :type
    (common-lisp:or dashboard-visual-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'anonymous-user-dashboard-visual-embedding-configuration
                    'make-anonymous-user-dashboard-visual-embedding-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          anonymous-user-dashboard-visual-embedding-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          anonymous-user-dashboard-visual-embedding-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initial-dashboard-visual-id))
      (common-lisp:list
       (common-lisp:cons "InitialDashboardVisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          anonymous-user-dashboard-visual-embedding-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (anonymous-user-embedding-experience-configuration
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-anonymous-user-embedding-experience-configuration-"))
   (dashboard common-lisp:nil :type
    (common-lisp:or anonymous-user-dashboard-embedding-configuration
                    common-lisp:null))
   (dashboard-visual common-lisp:nil :type
    (common-lisp:or anonymous-user-dashboard-visual-embedding-configuration
                    common-lisp:null))
   (qsearch-bar common-lisp:nil :type
    (common-lisp:or anonymous-user-qsearch-bar-embedding-configuration
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'anonymous-user-embedding-experience-configuration
                    'make-anonymous-user-embedding-experience-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          anonymous-user-embedding-experience-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          anonymous-user-embedding-experience-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard))
      (common-lisp:list
       (common-lisp:cons "Dashboard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-visual))
      (common-lisp:list
       (common-lisp:cons "DashboardVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qsearch-bar))
      (common-lisp:list
       (common-lisp:cons "QSearchBar"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          anonymous-user-embedding-experience-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (anonymous-user-qsearch-bar-embedding-configuration
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-anonymous-user-qsearch-bar-embedding-configuration-"))
   (initial-topic-id (common-lisp:error ":initial-topic-id is required") :type
    (common-lisp:or restrictive-resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'anonymous-user-qsearch-bar-embedding-configuration
                    'make-anonymous-user-qsearch-bar-embedding-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          anonymous-user-qsearch-bar-embedding-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          anonymous-user-qsearch-bar-embedding-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-topic-id))
      (common-lisp:list
       (common-lisp:cons "InitialTopicId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          anonymous-user-qsearch-bar-embedding-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (arc-axis-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-arc-axis-configuration-"))
   (range common-lisp:nil :type
    (common-lisp:or arc-axis-display-range common-lisp:null))
   (reserve-range common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'arc-axis-configuration 'make-arc-axis-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          arc-axis-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          arc-axis-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range))
      (common-lisp:list
       (common-lisp:cons "Range"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserve-range))
      (common-lisp:list
       (common-lisp:cons "ReserveRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          arc-axis-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (arc-axis-display-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-arc-axis-display-range-"))
   (min common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (max common-lisp:nil :type (common-lisp:or double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'arc-axis-display-range 'make-arc-axis-display-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          arc-axis-display-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          arc-axis-display-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          arc-axis-display-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (arc-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-arc-configuration-"))
   (arc-angle common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (arc-thickness common-lisp:nil :type
    (common-lisp:or arc-thickness-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'arc-configuration 'make-arc-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input arc-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input arc-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arc-angle))
      (common-lisp:list
       (common-lisp:cons "ArcAngle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arc-thickness))
      (common-lisp:list
       (common-lisp:cons "ArcThickness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input arc-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (arc-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-arc-options-"))
   (arc-thickness common-lisp:nil :type
    (common-lisp:or arc-thickness common-lisp:null)))
 (common-lisp:export (common-lisp:list 'arc-options 'make-arc-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input arc-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input arc-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arc-thickness))
      (common-lisp:list
       (common-lisp:cons "ArcThickness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input arc-options))
   common-lisp:nil))
(common-lisp:deftype arc-thickness () 'common-lisp:string)
(common-lisp:deftype arc-thickness-options () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype arn-list () '(trivial-types:proper-list arn))
 (common-lisp:defun |make-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype assignment-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (athena-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-athena-parameters-"))
   (work-group common-lisp:nil :type
    (common-lisp:or work-group common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'athena-parameters 'make-athena-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input athena-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input athena-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input athena-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aurora-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-aurora-parameters-"))
   (host (common-lisp:error ":host is required") :type
    (common-lisp:or host common-lisp:null))
   (port (common-lisp:error ":port is required") :type
    (common-lisp:or port common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or database common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aurora-parameters 'make-aurora-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aurora-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aurora-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aurora-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aurora-postgre-sql-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-aurora-postgre-sql-parameters-"))
   (host (common-lisp:error ":host is required") :type
    (common-lisp:or host common-lisp:null))
   (port (common-lisp:error ":port is required") :type
    (common-lisp:or port common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or database common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aurora-postgre-sql-parameters
                    'make-aurora-postgre-sql-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aurora-postgre-sql-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aurora-postgre-sql-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aurora-postgre-sql-parameters))
   common-lisp:nil))
(common-lisp:deftype authentication-method-option () 'common-lisp:string)
(common-lisp:deftype aws-account-id () 'common-lisp:string)
(common-lisp:deftype aws-and-account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (aws-iot-analytics-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-iot-analytics-parameters-"))
   (data-set-name (common-lisp:error ":data-set-name is required") :type
    (common-lisp:or data-set-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-iot-analytics-parameters
                    'make-aws-iot-analytics-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-iot-analytics-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-iot-analytics-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-name))
      (common-lisp:list
       (common-lisp:cons "DataSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-iot-analytics-parameters))
   common-lisp:nil))
(common-lisp:deftype axis-binding () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (axis-data-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-axis-data-options-"))
   (numeric-axis-options common-lisp:nil :type
    (common-lisp:or numeric-axis-options common-lisp:null))
   (date-axis-options common-lisp:nil :type
    (common-lisp:or date-axis-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'axis-data-options 'make-axis-data-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input axis-data-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input axis-data-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'numeric-axis-options))
      (common-lisp:list
       (common-lisp:cons "NumericAxisOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-axis-options))
      (common-lisp:list
       (common-lisp:cons "DateAxisOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input axis-data-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (axis-display-data-driven-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-axis-display-data-driven-range-")))
 (common-lisp:export
  (common-lisp:list 'axis-display-data-driven-range
                    'make-axis-display-data-driven-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          axis-display-data-driven-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          axis-display-data-driven-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          axis-display-data-driven-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (axis-display-min-max-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-axis-display-min-max-range-"))
   (minimum common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (maximum common-lisp:nil :type (common-lisp:or double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'axis-display-min-max-range
                    'make-axis-display-min-max-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          axis-display-min-max-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          axis-display-min-max-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum))
      (common-lisp:list
       (common-lisp:cons "Minimum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum))
      (common-lisp:list
       (common-lisp:cons "Maximum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          axis-display-min-max-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (axis-display-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-axis-display-options-"))
   (tick-label-options common-lisp:nil :type
    (common-lisp:or axis-tick-label-options common-lisp:null))
   (axis-line-visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (grid-line-visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (data-options common-lisp:nil :type
    (common-lisp:or axis-data-options common-lisp:null))
   (scrollbar-options common-lisp:nil :type
    (common-lisp:or scroll-bar-options common-lisp:null))
   (axis-offset common-lisp:nil :type
    (common-lisp:or pixel-length common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'axis-display-options 'make-axis-display-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input axis-display-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input axis-display-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tick-label-options))
      (common-lisp:list
       (common-lisp:cons "TickLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'axis-line-visibility))
      (common-lisp:list
       (common-lisp:cons "AxisLineVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'grid-line-visibility))
      (common-lisp:list
       (common-lisp:cons "GridLineVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-options))
      (common-lisp:list
       (common-lisp:cons "DataOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scrollbar-options))
      (common-lisp:list
       (common-lisp:cons "ScrollbarOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'axis-offset))
      (common-lisp:list
       (common-lisp:cons "AxisOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input axis-display-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (axis-display-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-axis-display-range-"))
   (min-max common-lisp:nil :type
    (common-lisp:or axis-display-min-max-range common-lisp:null))
   (data-driven common-lisp:nil :type
    (common-lisp:or axis-display-data-driven-range common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'axis-display-range 'make-axis-display-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input axis-display-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input axis-display-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-max))
      (common-lisp:list
       (common-lisp:cons "MinMax"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-driven))
      (common-lisp:list
       (common-lisp:cons "DataDriven"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input axis-display-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (axis-label-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-axis-label-options-"))
   (font-configuration common-lisp:nil :type
    (common-lisp:or font-configuration common-lisp:null))
   (custom-label common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (apply-to common-lisp:nil :type
    (common-lisp:or axis-label-reference-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'axis-label-options 'make-axis-label-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input axis-label-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input axis-label-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-configuration))
      (common-lisp:list
       (common-lisp:cons "FontConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-label))
      (common-lisp:list
       (common-lisp:cons "CustomLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-to))
      (common-lisp:list
       (common-lisp:cons "ApplyTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input axis-label-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype axis-label-options-list ()
   '(trivial-types:proper-list axis-label-options))
 (common-lisp:defun |make-axis-label-options-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list axis-label-options))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (axis-label-reference-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-axis-label-reference-options-"))
   (field-id (common-lisp:error ":field-id is required") :type
    (common-lisp:or field-id common-lisp:null))
   (column (common-lisp:error ":column is required") :type
    (common-lisp:or column-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'axis-label-reference-options
                    'make-axis-label-reference-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          axis-label-reference-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          axis-label-reference-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          axis-label-reference-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (axis-linear-scale (:copier common-lisp:nil)
      (:conc-name "struct-shape-axis-linear-scale-"))
   (step-count common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (step-size common-lisp:nil :type (common-lisp:or double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'axis-linear-scale 'make-axis-linear-scale))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input axis-linear-scale))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input axis-linear-scale))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-count))
      (common-lisp:list
       (common-lisp:cons "StepCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-size))
      (common-lisp:list
       (common-lisp:cons "StepSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input axis-linear-scale))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (axis-logarithmic-scale (:copier common-lisp:nil)
      (:conc-name "struct-shape-axis-logarithmic-scale-"))
   (base common-lisp:nil :type (common-lisp:or double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'axis-logarithmic-scale 'make-axis-logarithmic-scale))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          axis-logarithmic-scale))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          axis-logarithmic-scale))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base))
      (common-lisp:list
       (common-lisp:cons "Base"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          axis-logarithmic-scale))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (axis-scale (:copier common-lisp:nil)
      (:conc-name "struct-shape-axis-scale-"))
   (linear common-lisp:nil :type
    (common-lisp:or axis-linear-scale common-lisp:null))
   (logarithmic common-lisp:nil :type
    (common-lisp:or axis-logarithmic-scale common-lisp:null)))
 (common-lisp:export (common-lisp:list 'axis-scale 'make-axis-scale))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input axis-scale))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input axis-scale))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'linear))
      (common-lisp:list
       (common-lisp:cons "Linear"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logarithmic))
      (common-lisp:list
       (common-lisp:cons "Logarithmic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input axis-scale))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (axis-tick-label-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-axis-tick-label-options-"))
   (label-options common-lisp:nil :type
    (common-lisp:or label-options common-lisp:null))
   (rotation-angle common-lisp:nil :type
    (common-lisp:or double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'axis-tick-label-options 'make-axis-tick-label-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          axis-tick-label-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          axis-tick-label-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-options))
      (common-lisp:list
       (common-lisp:cons "LabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-angle))
      (common-lisp:list
       (common-lisp:cons "RotationAngle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          axis-tick-label-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (bar-chart-aggregated-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-bar-chart-aggregated-field-wells-"))
   (category common-lisp:nil :type
    (common-lisp:or dimension-field-list common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or measure-field-list common-lisp:null))
   (colors common-lisp:nil :type
    (common-lisp:or dimension-field-list common-lisp:null))
   (small-multiples common-lisp:nil :type
    (common-lisp:or small-multiples-dimension-field-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'bar-chart-aggregated-field-wells
                    'make-bar-chart-aggregated-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bar-chart-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bar-chart-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'colors))
      (common-lisp:list
       (common-lisp:cons "Colors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'small-multiples))
      (common-lisp:list
       (common-lisp:cons "SmallMultiples"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bar-chart-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (bar-chart-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-bar-chart-configuration-"))
   (field-wells common-lisp:nil :type
    (common-lisp:or bar-chart-field-wells common-lisp:null))
   (sort-configuration common-lisp:nil :type
    (common-lisp:or bar-chart-sort-configuration common-lisp:null))
   (orientation common-lisp:nil :type
    (common-lisp:or bar-chart-orientation common-lisp:null))
   (bars-arrangement common-lisp:nil :type
    (common-lisp:or bars-arrangement common-lisp:null))
   (visual-palette common-lisp:nil :type
    (common-lisp:or visual-palette common-lisp:null))
   (small-multiples-options common-lisp:nil :type
    (common-lisp:or small-multiples-options common-lisp:null))
   (category-axis common-lisp:nil :type
    (common-lisp:or axis-display-options common-lisp:null))
   (category-label-options common-lisp:nil :type
    (common-lisp:or chart-axis-label-options common-lisp:null))
   (value-axis common-lisp:nil :type
    (common-lisp:or axis-display-options common-lisp:null))
   (value-label-options common-lisp:nil :type
    (common-lisp:or chart-axis-label-options common-lisp:null))
   (color-label-options common-lisp:nil :type
    (common-lisp:or chart-axis-label-options common-lisp:null))
   (legend common-lisp:nil :type
    (common-lisp:or legend-options common-lisp:null))
   (data-labels common-lisp:nil :type
    (common-lisp:or data-label-options common-lisp:null))
   (tooltip common-lisp:nil :type
    (common-lisp:or tooltip-options common-lisp:null))
   (reference-lines common-lisp:nil :type
    (common-lisp:or reference-line-list common-lisp:null))
   (contribution-analysis-defaults common-lisp:nil :type
    (common-lisp:or contribution-analysis-default-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'bar-chart-configuration 'make-bar-chart-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bar-chart-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bar-chart-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'orientation))
      (common-lisp:list
       (common-lisp:cons "Orientation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bars-arrangement))
      (common-lisp:list
       (common-lisp:cons "BarsArrangement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-palette))
      (common-lisp:list
       (common-lisp:cons "VisualPalette"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'small-multiples-options))
      (common-lisp:list
       (common-lisp:cons "SmallMultiplesOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-axis))
      (common-lisp:list
       (common-lisp:cons "CategoryAxis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-label-options))
      (common-lisp:list
       (common-lisp:cons "CategoryLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-axis))
      (common-lisp:list
       (common-lisp:cons "ValueAxis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-label-options))
      (common-lisp:list
       (common-lisp:cons "ValueLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-label-options))
      (common-lisp:list
       (common-lisp:cons "ColorLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legend))
      (common-lisp:list
       (common-lisp:cons "Legend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-labels))
      (common-lisp:list
       (common-lisp:cons "DataLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip))
      (common-lisp:list
       (common-lisp:cons "Tooltip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-lines))
      (common-lisp:list
       (common-lisp:cons "ReferenceLines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contribution-analysis-defaults))
      (common-lisp:list
       (common-lisp:cons "ContributionAnalysisDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bar-chart-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (bar-chart-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-bar-chart-field-wells-"))
   (bar-chart-aggregated-field-wells common-lisp:nil :type
    (common-lisp:or bar-chart-aggregated-field-wells common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'bar-chart-field-wells 'make-bar-chart-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bar-chart-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bar-chart-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bar-chart-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "BarChartAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bar-chart-field-wells))
   common-lisp:nil))
(common-lisp:deftype bar-chart-orientation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (bar-chart-sort-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-bar-chart-sort-configuration-"))
   (category-sort common-lisp:nil :type
    (common-lisp:or field-sort-options-list common-lisp:null))
   (category-items-limit common-lisp:nil :type
    (common-lisp:or items-limit-configuration common-lisp:null))
   (color-sort common-lisp:nil :type
    (common-lisp:or field-sort-options-list common-lisp:null))
   (color-items-limit common-lisp:nil :type
    (common-lisp:or items-limit-configuration common-lisp:null))
   (small-multiples-sort common-lisp:nil :type
    (common-lisp:or field-sort-options-list common-lisp:null))
   (small-multiples-limit-configuration common-lisp:nil :type
    (common-lisp:or items-limit-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'bar-chart-sort-configuration
                    'make-bar-chart-sort-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bar-chart-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bar-chart-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-sort))
      (common-lisp:list
       (common-lisp:cons "CategorySort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-items-limit))
      (common-lisp:list
       (common-lisp:cons "CategoryItemsLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-sort))
      (common-lisp:list
       (common-lisp:cons "ColorSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-items-limit))
      (common-lisp:list
       (common-lisp:cons "ColorItemsLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'small-multiples-sort))
      (common-lisp:list
       (common-lisp:cons "SmallMultiplesSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'small-multiples-limit-configuration))
      (common-lisp:list
       (common-lisp:cons "SmallMultiplesLimitConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bar-chart-sort-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (bar-chart-visual (:copier common-lisp:nil)
      (:conc-name "struct-shape-bar-chart-visual-"))
   (visual-id (common-lisp:error ":visual-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or visual-title-label-options common-lisp:null))
   (subtitle common-lisp:nil :type
    (common-lisp:or visual-subtitle-label-options common-lisp:null))
   (chart-configuration common-lisp:nil :type
    (common-lisp:or bar-chart-configuration common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or visual-custom-action-list common-lisp:null))
   (column-hierarchies common-lisp:nil :type
    (common-lisp:or column-hierarchy-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'bar-chart-visual 'make-bar-chart-visual))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bar-chart-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bar-chart-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-hierarchies))
      (common-lisp:list
       (common-lisp:cons "ColumnHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bar-chart-visual))
   common-lisp:nil))
(common-lisp:deftype bars-arrangement () 'common-lisp:string)
(common-lisp:deftype base-map-style-type () 'common-lisp:string)
(common-lisp:deftype bin-count-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (bin-count-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-bin-count-options-"))
   (value common-lisp:nil :type
    (common-lisp:or bin-count-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'bin-count-options 'make-bin-count-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bin-count-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bin-count-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bin-count-options))
   common-lisp:nil))
(common-lisp:deftype bin-count-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (bin-width-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-bin-width-options-"))
   (value common-lisp:nil :type
    (common-lisp:or bin-width-value common-lisp:null))
   (bin-count-limit common-lisp:nil :type
    (common-lisp:or bin-count-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'bin-width-options 'make-bin-width-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bin-width-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bin-width-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bin-count-limit))
      (common-lisp:list
       (common-lisp:cons "BinCountLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bin-width-options))
   common-lisp:nil))
(common-lisp:deftype bin-width-value () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (body-section-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-body-section-configuration-"))
   (section-id (common-lisp:error ":section-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (content (common-lisp:error ":content is required") :type
    (common-lisp:or body-section-content common-lisp:null))
   (style common-lisp:nil :type
    (common-lisp:or section-style common-lisp:null))
   (page-break-configuration common-lisp:nil :type
    (common-lisp:or section-page-break-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'body-section-configuration
                    'make-body-section-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          body-section-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          body-section-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'section-id))
      (common-lisp:list
       (common-lisp:cons "SectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style))
      (common-lisp:list
       (common-lisp:cons "Style"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'page-break-configuration))
      (common-lisp:list
       (common-lisp:cons "PageBreakConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          body-section-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype body-section-configuration-list ()
   '(trivial-types:proper-list body-section-configuration))
 (common-lisp:defun |make-body-section-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            body-section-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (body-section-content (:copier common-lisp:nil)
      (:conc-name "struct-shape-body-section-content-"))
   (layout common-lisp:nil :type
    (common-lisp:or section-layout-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'body-section-content 'make-body-section-content))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input body-section-content))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input body-section-content))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layout))
      (common-lisp:list
       (common-lisp:cons "Layout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input body-section-content))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boolean-object () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (border-style (:copier common-lisp:nil)
      (:conc-name "struct-shape-border-style-"))
   (show common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'border-style 'make-border-style))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input border-style))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input border-style))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'show))
      (common-lisp:list
       (common-lisp:cons "Show"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input border-style))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (box-plot-aggregated-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-box-plot-aggregated-field-wells-"))
   (group-by common-lisp:nil :type
    (common-lisp:or box-plot-dimension-field-list common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or box-plot-measure-field-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'box-plot-aggregated-field-wells
                    'make-box-plot-aggregated-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          box-plot-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          box-plot-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "GroupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          box-plot-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (box-plot-chart-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-box-plot-chart-configuration-"))
   (field-wells common-lisp:nil :type
    (common-lisp:or box-plot-field-wells common-lisp:null))
   (sort-configuration common-lisp:nil :type
    (common-lisp:or box-plot-sort-configuration common-lisp:null))
   (box-plot-options common-lisp:nil :type
    (common-lisp:or box-plot-options common-lisp:null))
   (category-axis common-lisp:nil :type
    (common-lisp:or axis-display-options common-lisp:null))
   (category-label-options common-lisp:nil :type
    (common-lisp:or chart-axis-label-options common-lisp:null))
   (primary-yaxis-display-options common-lisp:nil :type
    (common-lisp:or axis-display-options common-lisp:null))
   (primary-yaxis-label-options common-lisp:nil :type
    (common-lisp:or chart-axis-label-options common-lisp:null))
   (legend common-lisp:nil :type
    (common-lisp:or legend-options common-lisp:null))
   (tooltip common-lisp:nil :type
    (common-lisp:or tooltip-options common-lisp:null))
   (reference-lines common-lisp:nil :type
    (common-lisp:or reference-line-list common-lisp:null))
   (visual-palette common-lisp:nil :type
    (common-lisp:or visual-palette common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'box-plot-chart-configuration
                    'make-box-plot-chart-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          box-plot-chart-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          box-plot-chart-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'box-plot-options))
      (common-lisp:list
       (common-lisp:cons "BoxPlotOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-axis))
      (common-lisp:list
       (common-lisp:cons "CategoryAxis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-label-options))
      (common-lisp:list
       (common-lisp:cons "CategoryLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-yaxis-display-options))
      (common-lisp:list
       (common-lisp:cons "PrimaryYAxisDisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-yaxis-label-options))
      (common-lisp:list
       (common-lisp:cons "PrimaryYAxisLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legend))
      (common-lisp:list
       (common-lisp:cons "Legend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip))
      (common-lisp:list
       (common-lisp:cons "Tooltip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-lines))
      (common-lisp:list
       (common-lisp:cons "ReferenceLines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-palette))
      (common-lisp:list
       (common-lisp:cons "VisualPalette"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          box-plot-chart-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype box-plot-dimension-field-list ()
   '(trivial-types:proper-list dimension-field))
 (common-lisp:defun |make-box-plot-dimension-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (box-plot-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-box-plot-field-wells-"))
   (box-plot-aggregated-field-wells common-lisp:nil :type
    (common-lisp:or box-plot-aggregated-field-wells common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'box-plot-field-wells 'make-box-plot-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input box-plot-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input box-plot-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'box-plot-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "BoxPlotAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input box-plot-field-wells))
   common-lisp:nil))
(common-lisp:deftype box-plot-fill-style () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype box-plot-measure-field-list ()
   '(trivial-types:proper-list measure-field))
 (common-lisp:defun |make-box-plot-measure-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list measure-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (box-plot-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-box-plot-options-"))
   (style-options common-lisp:nil :type
    (common-lisp:or box-plot-style-options common-lisp:null))
   (outlier-visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (all-data-points-visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'box-plot-options 'make-box-plot-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input box-plot-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input box-plot-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style-options))
      (common-lisp:list
       (common-lisp:cons "StyleOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outlier-visibility))
      (common-lisp:list
       (common-lisp:cons "OutlierVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'all-data-points-visibility))
      (common-lisp:list
       (common-lisp:cons "AllDataPointsVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input box-plot-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (box-plot-sort-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-box-plot-sort-configuration-"))
   (category-sort common-lisp:nil :type
    (common-lisp:or field-sort-options-list common-lisp:null))
   (pagination-configuration common-lisp:nil :type
    (common-lisp:or pagination-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'box-plot-sort-configuration
                    'make-box-plot-sort-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          box-plot-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          box-plot-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-sort))
      (common-lisp:list
       (common-lisp:cons "CategorySort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pagination-configuration))
      (common-lisp:list
       (common-lisp:cons "PaginationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          box-plot-sort-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (box-plot-style-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-box-plot-style-options-"))
   (fill-style common-lisp:nil :type
    (common-lisp:or box-plot-fill-style common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'box-plot-style-options 'make-box-plot-style-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          box-plot-style-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          box-plot-style-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fill-style))
      (common-lisp:list
       (common-lisp:cons "FillStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          box-plot-style-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (box-plot-visual (:copier common-lisp:nil)
      (:conc-name "struct-shape-box-plot-visual-"))
   (visual-id (common-lisp:error ":visual-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or visual-title-label-options common-lisp:null))
   (subtitle common-lisp:nil :type
    (common-lisp:or visual-subtitle-label-options common-lisp:null))
   (chart-configuration common-lisp:nil :type
    (common-lisp:or box-plot-chart-configuration common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or visual-custom-action-list common-lisp:null))
   (column-hierarchies common-lisp:nil :type
    (common-lisp:or column-hierarchy-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'box-plot-visual 'make-box-plot-visual))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input box-plot-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input box-plot-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-hierarchies))
      (common-lisp:list
       (common-lisp:cons "ColumnHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input box-plot-visual))
   common-lisp:nil))
(common-lisp:deftype cidr () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (calculated-column (:copier common-lisp:nil)
      (:conc-name "struct-shape-calculated-column-"))
   (column-name (common-lisp:error ":column-name is required") :type
    (common-lisp:or column-name common-lisp:null))
   (column-id (common-lisp:error ":column-id is required") :type
    (common-lisp:or column-id common-lisp:null))
   (expression (common-lisp:error ":expression is required") :type
    (common-lisp:or expression common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'calculated-column 'make-calculated-column))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input calculated-column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input calculated-column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "ColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-id))
      (common-lisp:list
       (common-lisp:cons "ColumnId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input calculated-column))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype calculated-column-list ()
   '(trivial-types:proper-list calculated-column))
 (common-lisp:defun |make-calculated-column-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list calculated-column))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (calculated-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-calculated-field-"))
   (data-set-identifier (common-lisp:error ":data-set-identifier is required")
    :type (common-lisp:or data-set-identifier common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or column-name common-lisp:null))
   (expression (common-lisp:error ":expression is required") :type
    (common-lisp:or expression common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'calculated-field 'make-calculated-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input calculated-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input calculated-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-identifier))
      (common-lisp:list
       (common-lisp:cons "DataSetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input calculated-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype calculated-fields ()
   '(trivial-types:proper-list calculated-field))
 (common-lisp:defun |make-calculated-fields|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list calculated-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (calculated-measure-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-calculated-measure-field-"))
   (field-id (common-lisp:error ":field-id is required") :type
    (common-lisp:or field-id common-lisp:null))
   (expression (common-lisp:error ":expression is required") :type
    (common-lisp:or expression common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'calculated-measure-field 'make-calculated-measure-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          calculated-measure-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          calculated-measure-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          calculated-measure-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-ingestion-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-ingestion-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (data-set-id (common-lisp:error ":data-set-id is required") :type
    (common-lisp:or string common-lisp:null))
   (ingestion-id (common-lisp:error ":ingestion-id is required") :type
    (common-lisp:or ingestion-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-ingestion-request 'make-cancel-ingestion-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-ingestion-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-ingestion-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-ingestion-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-ingestion-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-ingestion-response-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (ingestion-id common-lisp:nil :type
    (common-lisp:or ingestion-id common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-ingestion-response
                    'make-cancel-ingestion-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-ingestion-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-ingestion-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-id))
      (common-lisp:list
       (common-lisp:cons "IngestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-ingestion-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cascading-control-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-cascading-control-configuration-"))
   (source-controls common-lisp:nil :type
    (common-lisp:or cascading-control-source-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cascading-control-configuration
                    'make-cascading-control-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cascading-control-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cascading-control-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-controls))
      (common-lisp:list
       (common-lisp:cons "SourceControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cascading-control-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cascading-control-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-cascading-control-source-"))
   (source-sheet-control-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (column-to-match common-lisp:nil :type
    (common-lisp:or column-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cascading-control-source 'make-cascading-control-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cascading-control-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cascading-control-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-sheet-control-id))
      (common-lisp:list
       (common-lisp:cons "SourceSheetControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-to-match))
      (common-lisp:list
       (common-lisp:cons "ColumnToMatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cascading-control-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cascading-control-source-list ()
   '(trivial-types:proper-list cascading-control-source))
 (common-lisp:defun |make-cascading-control-source-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cascading-control-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cast-column-type-operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-cast-column-type-operation-"))
   (column-name (common-lisp:error ":column-name is required") :type
    (common-lisp:or column-name common-lisp:null))
   (new-column-type (common-lisp:error ":new-column-type is required") :type
    (common-lisp:or column-data-type common-lisp:null))
   (format common-lisp:nil :type
    (common-lisp:or type-cast-format common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cast-column-type-operation
                    'make-cast-column-type-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cast-column-type-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cast-column-type-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "ColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-column-type))
      (common-lisp:list
       (common-lisp:cons "NewColumnType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cast-column-type-operation))
   common-lisp:nil))
(common-lisp:deftype catalog () 'common-lisp:string)
(common-lisp:deftype categorical-aggregation-function () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (categorical-dimension-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-categorical-dimension-field-"))
   (field-id (common-lisp:error ":field-id is required") :type
    (common-lisp:or field-id common-lisp:null))
   (column (common-lisp:error ":column is required") :type
    (common-lisp:or column-identifier common-lisp:null))
   (hierarchy-id common-lisp:nil :type
    (common-lisp:or hierarchy-id common-lisp:null))
   (format-configuration common-lisp:nil :type
    (common-lisp:or string-format-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'categorical-dimension-field
                    'make-categorical-dimension-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          categorical-dimension-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          categorical-dimension-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-id))
      (common-lisp:list
       (common-lisp:cons "HierarchyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'format-configuration))
      (common-lisp:list
       (common-lisp:cons "FormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          categorical-dimension-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (categorical-measure-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-categorical-measure-field-"))
   (field-id (common-lisp:error ":field-id is required") :type
    (common-lisp:or field-id common-lisp:null))
   (column (common-lisp:error ":column is required") :type
    (common-lisp:or column-identifier common-lisp:null))
   (aggregation-function common-lisp:nil :type
    (common-lisp:or categorical-aggregation-function common-lisp:null))
   (format-configuration common-lisp:nil :type
    (common-lisp:or string-format-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'categorical-measure-field
                    'make-categorical-measure-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          categorical-measure-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          categorical-measure-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-function))
      (common-lisp:list
       (common-lisp:cons "AggregationFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'format-configuration))
      (common-lisp:list
       (common-lisp:cons "FormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          categorical-measure-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (category-drill-down-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-category-drill-down-filter-"))
   (column (common-lisp:error ":column is required") :type
    (common-lisp:or column-identifier common-lisp:null))
   (category-values (common-lisp:error ":category-values is required") :type
    (common-lisp:or category-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'category-drill-down-filter
                    'make-category-drill-down-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          category-drill-down-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          category-drill-down-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-values))
      (common-lisp:list
       (common-lisp:cons "CategoryValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          category-drill-down-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (category-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-category-filter-"))
   (filter-id (common-lisp:error ":filter-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (column (common-lisp:error ":column is required") :type
    (common-lisp:or column-identifier common-lisp:null))
   (configuration (common-lisp:error ":configuration is required") :type
    (common-lisp:or category-filter-configuration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'category-filter 'make-category-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input category-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input category-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-id))
      (common-lisp:list
       (common-lisp:cons "FilterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input category-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (category-filter-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-category-filter-configuration-"))
   (filter-list-configuration common-lisp:nil :type
    (common-lisp:or filter-list-configuration common-lisp:null))
   (custom-filter-list-configuration common-lisp:nil :type
    (common-lisp:or custom-filter-list-configuration common-lisp:null))
   (custom-filter-configuration common-lisp:nil :type
    (common-lisp:or custom-filter-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'category-filter-configuration
                    'make-category-filter-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          category-filter-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          category-filter-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'filter-list-configuration))
      (common-lisp:list
       (common-lisp:cons "FilterListConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-filter-list-configuration))
      (common-lisp:list
       (common-lisp:cons "CustomFilterListConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-filter-configuration))
      (common-lisp:list
       (common-lisp:cons "CustomFilterConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          category-filter-configuration))
   common-lisp:nil))
(common-lisp:deftype category-filter-match-operator () 'common-lisp:string)
(common-lisp:deftype category-filter-select-all-options () 'common-lisp:string)
(common-lisp:deftype category-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype category-value-list ()
   '(trivial-types:proper-list category-value))
 (common-lisp:defun |make-category-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list category-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (chart-axis-label-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-chart-axis-label-options-"))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (sort-icon-visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (axis-label-options common-lisp:nil :type
    (common-lisp:or axis-label-options-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'chart-axis-label-options 'make-chart-axis-label-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          chart-axis-label-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          chart-axis-label-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sort-icon-visibility))
      (common-lisp:list
       (common-lisp:cons "SortIconVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'axis-label-options))
      (common-lisp:list
       (common-lisp:cons "AxisLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          chart-axis-label-options))
   common-lisp:nil))
(common-lisp:deftype cluster-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cluster-marker (:copier common-lisp:nil)
      (:conc-name "struct-shape-cluster-marker-"))
   (simple-cluster-marker common-lisp:nil :type
    (common-lisp:or simple-cluster-marker common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cluster-marker 'make-cluster-marker))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-marker))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-marker))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'simple-cluster-marker))
      (common-lisp:list
       (common-lisp:cons "SimpleClusterMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-marker))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cluster-marker-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-cluster-marker-configuration-"))
   (cluster-marker common-lisp:nil :type
    (common-lisp:or cluster-marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cluster-marker-configuration
                    'make-cluster-marker-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-marker-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-marker-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-marker))
      (common-lisp:list
       (common-lisp:cons "ClusterMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-marker-configuration))
   common-lisp:nil))
(common-lisp:deftype color-fill-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype color-list () '(trivial-types:proper-list hex-color))
 (common-lisp:defun |make-color-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hex-color))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (color-scale (:copier common-lisp:nil)
      (:conc-name "struct-shape-color-scale-"))
   (colors (common-lisp:error ":colors is required") :type
    (common-lisp:or color-scale-color-list common-lisp:null))
   (color-fill-type (common-lisp:error ":color-fill-type is required") :type
    (common-lisp:or color-fill-type common-lisp:null))
   (null-value-color common-lisp:nil :type
    (common-lisp:or data-color common-lisp:null)))
 (common-lisp:export (common-lisp:list 'color-scale 'make-color-scale))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input color-scale))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input color-scale))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'colors))
      (common-lisp:list
       (common-lisp:cons "Colors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-fill-type))
      (common-lisp:list
       (common-lisp:cons "ColorFillType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'null-value-color))
      (common-lisp:list
       (common-lisp:cons "NullValueColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input color-scale))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype color-scale-color-list ()
   '(trivial-types:proper-list data-color))
 (common-lisp:defun |make-color-scale-color-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-color))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (column-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-column-configuration-"))
   (column (common-lisp:error ":column is required") :type
    (common-lisp:or column-identifier common-lisp:null))
   (format-configuration common-lisp:nil :type
    (common-lisp:or format-configuration common-lisp:null))
   (role common-lisp:nil :type (common-lisp:or column-role common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'column-configuration 'make-column-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'format-configuration))
      (common-lisp:list
       (common-lisp:cons "FormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-configuration-list ()
   '(trivial-types:proper-list column-configuration))
 (common-lisp:defun |make-column-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype column-data-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (column-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-column-description-"))
   (text common-lisp:nil :type
    (common-lisp:or column-descriptive-text common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'column-description 'make-column-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-description))
   common-lisp:nil))
(common-lisp:deftype column-descriptive-text () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (column-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-column-group-"))
   (geo-spatial-column-group common-lisp:nil :type
    (common-lisp:or geo-spatial-column-group common-lisp:null)))
 (common-lisp:export (common-lisp:list 'column-group 'make-column-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'geo-spatial-column-group))
      (common-lisp:list
       (common-lisp:cons "GeoSpatialColumnGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (column-group-column-schema (:copier common-lisp:nil)
      (:conc-name "struct-shape-column-group-column-schema-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'column-group-column-schema
                    'make-column-group-column-schema))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          column-group-column-schema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          column-group-column-schema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          column-group-column-schema))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-group-column-schema-list ()
   '(trivial-types:proper-list column-group-column-schema))
 (common-lisp:defun |make-column-group-column-schema-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            column-group-column-schema))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype column-group-list ()
   '(trivial-types:proper-list column-group))
 (common-lisp:defun |make-column-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype column-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (column-group-schema (:copier common-lisp:nil)
      (:conc-name "struct-shape-column-group-schema-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (column-group-column-schema-list common-lisp:nil :type
    (common-lisp:or column-group-column-schema-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'column-group-schema 'make-column-group-schema))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-group-schema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-group-schema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-group-column-schema-list))
      (common-lisp:list
       (common-lisp:cons "ColumnGroupColumnSchemaList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-group-schema))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-group-schema-list ()
   '(trivial-types:proper-list column-group-schema))
 (common-lisp:defun |make-column-group-schema-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-group-schema))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (column-hierarchy (:copier common-lisp:nil)
      (:conc-name "struct-shape-column-hierarchy-"))
   (explicit-hierarchy common-lisp:nil :type
    (common-lisp:or explicit-hierarchy common-lisp:null))
   (date-time-hierarchy common-lisp:nil :type
    (common-lisp:or date-time-hierarchy common-lisp:null))
   (predefined-hierarchy common-lisp:nil :type
    (common-lisp:or predefined-hierarchy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'column-hierarchy 'make-column-hierarchy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-hierarchy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-hierarchy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explicit-hierarchy))
      (common-lisp:list
       (common-lisp:cons "ExplicitHierarchy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-time-hierarchy))
      (common-lisp:list
       (common-lisp:cons "DateTimeHierarchy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predefined-hierarchy))
      (common-lisp:list
       (common-lisp:cons "PredefinedHierarchy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-hierarchy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-hierarchy-list ()
   '(trivial-types:proper-list column-hierarchy))
 (common-lisp:defun |make-column-hierarchy-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-hierarchy))
   aws-sdk/generator/shape::members))
(common-lisp:deftype column-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (column-identifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-column-identifier-"))
   (data-set-identifier (common-lisp:error ":data-set-identifier is required")
    :type (common-lisp:or data-set-identifier common-lisp:null))
   (column-name (common-lisp:error ":column-name is required") :type
    (common-lisp:or column-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'column-identifier 'make-column-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-identifier))
      (common-lisp:list
       (common-lisp:cons "DataSetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "ColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (column-level-permission-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-column-level-permission-rule-"))
   (principals common-lisp:nil :type
    (common-lisp:or principal-list common-lisp:null))
   (column-names common-lisp:nil :type
    (common-lisp:or column-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'column-level-permission-rule
                    'make-column-level-permission-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          column-level-permission-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          column-level-permission-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principals))
      (common-lisp:list
       (common-lisp:cons "Principals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-names))
      (common-lisp:list
       (common-lisp:cons "ColumnNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          column-level-permission-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-level-permission-rule-list ()
   '(trivial-types:proper-list column-level-permission-rule))
 (common-lisp:defun |make-column-level-permission-rule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            column-level-permission-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype column-list () '(trivial-types:proper-list column-name))
 (common-lisp:defun |make-column-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype column-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype column-name-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-column-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype column-role () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (column-schema (:copier common-lisp:nil)
      (:conc-name "struct-shape-column-schema-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (data-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (geographic-role common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'column-schema 'make-column-schema))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-schema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-schema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geographic-role))
      (common-lisp:list
       (common-lisp:cons "GeographicRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-schema))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-schema-list ()
   '(trivial-types:proper-list column-schema))
 (common-lisp:defun |make-column-schema-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-schema))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (column-sort (:copier common-lisp:nil)
      (:conc-name "struct-shape-column-sort-"))
   (sort-by (common-lisp:error ":sort-by is required") :type
    (common-lisp:or column-identifier common-lisp:null))
   (direction (common-lisp:error ":direction is required") :type
    (common-lisp:or sort-direction common-lisp:null))
   (aggregation-function common-lisp:nil :type
    (common-lisp:or aggregation-function common-lisp:null)))
 (common-lisp:export (common-lisp:list 'column-sort 'make-column-sort))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-sort))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-sort))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'direction))
      (common-lisp:list
       (common-lisp:cons "Direction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-function))
      (common-lisp:list
       (common-lisp:cons "AggregationFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-sort))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (column-tag (:copier common-lisp:nil)
      (:conc-name "struct-shape-column-tag-"))
   (column-geographic-role common-lisp:nil :type
    (common-lisp:or geo-spatial-data-role common-lisp:null))
   (column-description common-lisp:nil :type
    (common-lisp:or column-description common-lisp:null)))
 (common-lisp:export (common-lisp:list 'column-tag 'make-column-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-geographic-role))
      (common-lisp:list
       (common-lisp:cons "ColumnGeographicRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-description))
      (common-lisp:list
       (common-lisp:cons "ColumnDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-tag-list ()
   '(trivial-types:proper-list column-tag))
 (common-lisp:defun |make-column-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype column-tag-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype column-tag-names ()
   '(trivial-types:proper-list column-tag-name))
 (common-lisp:defun |make-column-tag-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-tag-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (column-tooltip-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-column-tooltip-item-"))
   (column (common-lisp:error ":column is required") :type
    (common-lisp:or column-identifier common-lisp:null))
   (label common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (aggregation common-lisp:nil :type
    (common-lisp:or aggregation-function common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'column-tooltip-item 'make-column-tooltip-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-tooltip-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-tooltip-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "Label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation))
      (common-lisp:list
       (common-lisp:cons "Aggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-tooltip-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (combo-chart-aggregated-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-combo-chart-aggregated-field-wells-"))
   (category common-lisp:nil :type
    (common-lisp:or dimension-field-list common-lisp:null))
   (bar-values common-lisp:nil :type
    (common-lisp:or measure-field-list common-lisp:null))
   (colors common-lisp:nil :type
    (common-lisp:or dimension-field-list common-lisp:null))
   (line-values common-lisp:nil :type
    (common-lisp:or measure-field-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'combo-chart-aggregated-field-wells
                    'make-combo-chart-aggregated-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          combo-chart-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          combo-chart-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bar-values))
      (common-lisp:list
       (common-lisp:cons "BarValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'colors))
      (common-lisp:list
       (common-lisp:cons "Colors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-values))
      (common-lisp:list
       (common-lisp:cons "LineValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          combo-chart-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (combo-chart-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-combo-chart-configuration-"))
   (field-wells common-lisp:nil :type
    (common-lisp:or combo-chart-field-wells common-lisp:null))
   (sort-configuration common-lisp:nil :type
    (common-lisp:or combo-chart-sort-configuration common-lisp:null))
   (bars-arrangement common-lisp:nil :type
    (common-lisp:or bars-arrangement common-lisp:null))
   (category-axis common-lisp:nil :type
    (common-lisp:or axis-display-options common-lisp:null))
   (category-label-options common-lisp:nil :type
    (common-lisp:or chart-axis-label-options common-lisp:null))
   (primary-yaxis-display-options common-lisp:nil :type
    (common-lisp:or axis-display-options common-lisp:null))
   (primary-yaxis-label-options common-lisp:nil :type
    (common-lisp:or chart-axis-label-options common-lisp:null))
   (secondary-yaxis-display-options common-lisp:nil :type
    (common-lisp:or axis-display-options common-lisp:null))
   (secondary-yaxis-label-options common-lisp:nil :type
    (common-lisp:or chart-axis-label-options common-lisp:null))
   (color-label-options common-lisp:nil :type
    (common-lisp:or chart-axis-label-options common-lisp:null))
   (legend common-lisp:nil :type
    (common-lisp:or legend-options common-lisp:null))
   (bar-data-labels common-lisp:nil :type
    (common-lisp:or data-label-options common-lisp:null))
   (line-data-labels common-lisp:nil :type
    (common-lisp:or data-label-options common-lisp:null))
   (tooltip common-lisp:nil :type
    (common-lisp:or tooltip-options common-lisp:null))
   (reference-lines common-lisp:nil :type
    (common-lisp:or reference-line-list common-lisp:null))
   (visual-palette common-lisp:nil :type
    (common-lisp:or visual-palette common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'combo-chart-configuration
                    'make-combo-chart-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          combo-chart-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          combo-chart-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bars-arrangement))
      (common-lisp:list
       (common-lisp:cons "BarsArrangement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-axis))
      (common-lisp:list
       (common-lisp:cons "CategoryAxis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-label-options))
      (common-lisp:list
       (common-lisp:cons "CategoryLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-yaxis-display-options))
      (common-lisp:list
       (common-lisp:cons "PrimaryYAxisDisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-yaxis-label-options))
      (common-lisp:list
       (common-lisp:cons "PrimaryYAxisLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secondary-yaxis-display-options))
      (common-lisp:list
       (common-lisp:cons "SecondaryYAxisDisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secondary-yaxis-label-options))
      (common-lisp:list
       (common-lisp:cons "SecondaryYAxisLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-label-options))
      (common-lisp:list
       (common-lisp:cons "ColorLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legend))
      (common-lisp:list
       (common-lisp:cons "Legend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bar-data-labels))
      (common-lisp:list
       (common-lisp:cons "BarDataLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-data-labels))
      (common-lisp:list
       (common-lisp:cons "LineDataLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip))
      (common-lisp:list
       (common-lisp:cons "Tooltip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-lines))
      (common-lisp:list
       (common-lisp:cons "ReferenceLines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-palette))
      (common-lisp:list
       (common-lisp:cons "VisualPalette"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          combo-chart-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (combo-chart-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-combo-chart-field-wells-"))
   (combo-chart-aggregated-field-wells common-lisp:nil :type
    (common-lisp:or combo-chart-aggregated-field-wells common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'combo-chart-field-wells 'make-combo-chart-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          combo-chart-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          combo-chart-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'combo-chart-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "ComboChartAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          combo-chart-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (combo-chart-sort-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-combo-chart-sort-configuration-"))
   (category-sort common-lisp:nil :type
    (common-lisp:or field-sort-options-list common-lisp:null))
   (category-items-limit common-lisp:nil :type
    (common-lisp:or items-limit-configuration common-lisp:null))
   (color-sort common-lisp:nil :type
    (common-lisp:or field-sort-options-list common-lisp:null))
   (color-items-limit common-lisp:nil :type
    (common-lisp:or items-limit-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'combo-chart-sort-configuration
                    'make-combo-chart-sort-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          combo-chart-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          combo-chart-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-sort))
      (common-lisp:list
       (common-lisp:cons "CategorySort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-items-limit))
      (common-lisp:list
       (common-lisp:cons "CategoryItemsLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-sort))
      (common-lisp:list
       (common-lisp:cons "ColorSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-items-limit))
      (common-lisp:list
       (common-lisp:cons "ColorItemsLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          combo-chart-sort-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (combo-chart-visual (:copier common-lisp:nil)
      (:conc-name "struct-shape-combo-chart-visual-"))
   (visual-id (common-lisp:error ":visual-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or visual-title-label-options common-lisp:null))
   (subtitle common-lisp:nil :type
    (common-lisp:or visual-subtitle-label-options common-lisp:null))
   (chart-configuration common-lisp:nil :type
    (common-lisp:or combo-chart-configuration common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or visual-custom-action-list common-lisp:null))
   (column-hierarchies common-lisp:nil :type
    (common-lisp:or column-hierarchy-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'combo-chart-visual 'make-combo-chart-visual))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input combo-chart-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input combo-chart-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-hierarchies))
      (common-lisp:list
       (common-lisp:cons "ColumnHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input combo-chart-visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (comparison-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-comparison-configuration-"))
   (comparison-method common-lisp:nil :type
    (common-lisp:or comparison-method common-lisp:null))
   (comparison-format common-lisp:nil :type
    (common-lisp:or comparison-format-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'comparison-configuration 'make-comparison-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          comparison-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          comparison-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-method))
      (common-lisp:list
       (common-lisp:cons "ComparisonMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-format))
      (common-lisp:list
       (common-lisp:cons "ComparisonFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          comparison-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (comparison-format-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-comparison-format-configuration-"))
   (number-display-format-configuration common-lisp:nil :type
    (common-lisp:or number-display-format-configuration common-lisp:null))
   (percentage-display-format-configuration common-lisp:nil :type
    (common-lisp:or percentage-display-format-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'comparison-format-configuration
                    'make-comparison-format-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          comparison-format-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          comparison-format-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-display-format-configuration))
      (common-lisp:list
       (common-lisp:cons "NumberDisplayFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'percentage-display-format-configuration))
      (common-lisp:list
       (common-lisp:cons "PercentageDisplayFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          comparison-format-configuration))
   common-lisp:nil))
(common-lisp:deftype comparison-method () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (computation (:copier common-lisp:nil)
      (:conc-name "struct-shape-computation-"))
   (top-bottom-ranked common-lisp:nil :type
    (common-lisp:or top-bottom-ranked-computation common-lisp:null))
   (top-bottom-movers common-lisp:nil :type
    (common-lisp:or top-bottom-movers-computation common-lisp:null))
   (total-aggregation common-lisp:nil :type
    (common-lisp:or total-aggregation-computation common-lisp:null))
   (maximum-minimum common-lisp:nil :type
    (common-lisp:or maximum-minimum-computation common-lisp:null))
   (metric-comparison common-lisp:nil :type
    (common-lisp:or metric-comparison-computation common-lisp:null))
   (period-over-period common-lisp:nil :type
    (common-lisp:or period-over-period-computation common-lisp:null))
   (period-to-date common-lisp:nil :type
    (common-lisp:or period-to-date-computation common-lisp:null))
   (growth-rate common-lisp:nil :type
    (common-lisp:or growth-rate-computation common-lisp:null))
   (unique-values common-lisp:nil :type
    (common-lisp:or unique-values-computation common-lisp:null))
   (forecast common-lisp:nil :type
    (common-lisp:or forecast-computation common-lisp:null)))
 (common-lisp:export (common-lisp:list 'computation 'make-computation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input computation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input computation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'top-bottom-ranked))
      (common-lisp:list
       (common-lisp:cons "TopBottomRanked"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'top-bottom-movers))
      (common-lisp:list
       (common-lisp:cons "TopBottomMovers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-aggregation))
      (common-lisp:list
       (common-lisp:cons "TotalAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-minimum))
      (common-lisp:list
       (common-lisp:cons "MaximumMinimum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-comparison))
      (common-lisp:list
       (common-lisp:cons "MetricComparison"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period-over-period))
      (common-lisp:list
       (common-lisp:cons "PeriodOverPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period-to-date))
      (common-lisp:list
       (common-lisp:cons "PeriodToDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'growth-rate))
      (common-lisp:list
       (common-lisp:cons "GrowthRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unique-values))
      (common-lisp:list
       (common-lisp:cons "UniqueValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast))
      (common-lisp:list
       (common-lisp:cons "Forecast"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input computation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype computation-list ()
   '(trivial-types:proper-list computation))
 (common-lisp:defun |make-computation-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list computation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition concurrent-updating-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-updating-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       concurrent-updating-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'concurrent-updating-exception
                    'concurrent-updating-exception-message
                    'concurrent-updating-exception-request-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (conditional-formatting-color (:copier common-lisp:nil)
      (:conc-name "struct-shape-conditional-formatting-color-"))
   (solid common-lisp:nil :type
    (common-lisp:or conditional-formatting-solid-color common-lisp:null))
   (gradient common-lisp:nil :type
    (common-lisp:or conditional-formatting-gradient-color common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'conditional-formatting-color
                    'make-conditional-formatting-color))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-color))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-color))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solid))
      (common-lisp:list
       (common-lisp:cons "Solid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gradient))
      (common-lisp:list
       (common-lisp:cons "Gradient"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-color))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (conditional-formatting-custom-icon-condition (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-conditional-formatting-custom-icon-condition-"))
   (expression (common-lisp:error ":expression is required") :type
    (common-lisp:or expression common-lisp:null))
   (icon-options (common-lisp:error ":icon-options is required") :type
    (common-lisp:or conditional-formatting-custom-icon-options
                    common-lisp:null))
   (color common-lisp:nil :type (common-lisp:or hex-color common-lisp:null))
   (display-configuration common-lisp:nil :type
    (common-lisp:or conditional-formatting-icon-display-configuration
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'conditional-formatting-custom-icon-condition
                    'make-conditional-formatting-custom-icon-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-custom-icon-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-custom-icon-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icon-options))
      (common-lisp:list
       (common-lisp:cons "IconOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color))
      (common-lisp:list
       (common-lisp:cons "Color"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'display-configuration))
      (common-lisp:list
       (common-lisp:cons "DisplayConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-custom-icon-condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (conditional-formatting-custom-icon-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-conditional-formatting-custom-icon-options-"))
   (icon common-lisp:nil :type (common-lisp:or icon common-lisp:null))
   (unicode-icon common-lisp:nil :type
    (common-lisp:or unicode-icon common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'conditional-formatting-custom-icon-options
                    'make-conditional-formatting-custom-icon-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-custom-icon-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-custom-icon-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icon))
      (common-lisp:list
       (common-lisp:cons "Icon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unicode-icon))
      (common-lisp:list
       (common-lisp:cons "UnicodeIcon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-custom-icon-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (conditional-formatting-gradient-color (:copier common-lisp:nil)
      (:conc-name "struct-shape-conditional-formatting-gradient-color-"))
   (expression (common-lisp:error ":expression is required") :type
    (common-lisp:or expression common-lisp:null))
   (color (common-lisp:error ":color is required") :type
    (common-lisp:or gradient-color common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'conditional-formatting-gradient-color
                    'make-conditional-formatting-gradient-color))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-gradient-color))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-gradient-color))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color))
      (common-lisp:list
       (common-lisp:cons "Color"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-gradient-color))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (conditional-formatting-icon (:copier common-lisp:nil)
      (:conc-name "struct-shape-conditional-formatting-icon-"))
   (icon-set common-lisp:nil :type
    (common-lisp:or conditional-formatting-icon-set common-lisp:null))
   (custom-condition common-lisp:nil :type
    (common-lisp:or conditional-formatting-custom-icon-condition
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'conditional-formatting-icon
                    'make-conditional-formatting-icon))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-icon))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-icon))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icon-set))
      (common-lisp:list
       (common-lisp:cons "IconSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-condition))
      (common-lisp:list
       (common-lisp:cons "CustomCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-icon))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (conditional-formatting-icon-display-configuration
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-conditional-formatting-icon-display-configuration-"))
   (icon-display-option common-lisp:nil :type
    (common-lisp:or conditional-formatting-icon-display-option
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'conditional-formatting-icon-display-configuration
                    'make-conditional-formatting-icon-display-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-icon-display-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-icon-display-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icon-display-option))
      (common-lisp:list
       (common-lisp:cons "IconDisplayOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-icon-display-configuration))
   common-lisp:nil))
(common-lisp:deftype conditional-formatting-icon-display-option ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (conditional-formatting-icon-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-conditional-formatting-icon-set-"))
   (expression (common-lisp:error ":expression is required") :type
    (common-lisp:or expression common-lisp:null))
   (icon-set-type common-lisp:nil :type
    (common-lisp:or conditional-formatting-icon-set-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'conditional-formatting-icon-set
                    'make-conditional-formatting-icon-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-icon-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-icon-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icon-set-type))
      (common-lisp:list
       (common-lisp:cons "IconSetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-icon-set))
   common-lisp:nil))
(common-lisp:deftype conditional-formatting-icon-set-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (conditional-formatting-solid-color (:copier common-lisp:nil)
      (:conc-name "struct-shape-conditional-formatting-solid-color-"))
   (expression (common-lisp:error ":expression is required") :type
    (common-lisp:or expression common-lisp:null))
   (color common-lisp:nil :type (common-lisp:or hex-color common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'conditional-formatting-solid-color
                    'make-conditional-formatting-solid-color))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-solid-color))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-solid-color))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color))
      (common-lisp:list
       (common-lisp:cons "Color"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-solid-color))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       conflict-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-request-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (contribution-analysis-default (:copier common-lisp:nil)
      (:conc-name "struct-shape-contribution-analysis-default-"))
   (measure-field-id (common-lisp:error ":measure-field-id is required") :type
    (common-lisp:or field-id common-lisp:null))
   (contributor-dimensions
    (common-lisp:error ":contributor-dimensions is required") :type
    (common-lisp:or contributor-dimension-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'contribution-analysis-default
                    'make-contribution-analysis-default))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          contribution-analysis-default))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          contribution-analysis-default))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'measure-field-id))
      (common-lisp:list
       (common-lisp:cons "MeasureFieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contributor-dimensions))
      (common-lisp:list
       (common-lisp:cons "ContributorDimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          contribution-analysis-default))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype contribution-analysis-default-list ()
   '(trivial-types:proper-list contribution-analysis-default))
 (common-lisp:defun |make-contribution-analysis-default-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            contribution-analysis-default))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype contributor-dimension-list ()
   '(trivial-types:proper-list column-identifier))
 (common-lisp:defun |make-contributor-dimension-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype copy-source-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-account-customization-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-account-customization-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or namespace common-lisp:null))
   (account-customization
    (common-lisp:error ":account-customization is required") :type
    (common-lisp:or account-customization common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-account-customization-request
                    'make-create-account-customization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-account-customization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-account-customization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-customization))
      (common-lisp:list
       (common-lisp:cons "AccountCustomization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-account-customization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-account-customization-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-account-customization-response-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or namespace common-lisp:null))
   (account-customization common-lisp:nil :type
    (common-lisp:or account-customization common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-account-customization-response
                    'make-create-account-customization-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-account-customization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-account-customization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "AwsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-customization))
      (common-lisp:list
       (common-lisp:cons "AccountCustomization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-account-customization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-account-subscription-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-account-subscription-request-"))
   (edition (common-lisp:error ":edition is required") :type
    (common-lisp:or edition common-lisp:null))
   (authentication-method
    (common-lisp:error ":authentication-method is required") :type
    (common-lisp:or authentication-method-option common-lisp:null))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (account-name (common-lisp:error ":account-name is required") :type
    (common-lisp:or string common-lisp:null))
   (notification-email (common-lisp:error ":notification-email is required")
    :type (common-lisp:or string common-lisp:null))
   (active-directory-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (realm common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (directory-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (admin-group common-lisp:nil :type
    (common-lisp:or groups-list common-lisp:null))
   (author-group common-lisp:nil :type
    (common-lisp:or groups-list common-lisp:null))
   (reader-group common-lisp:nil :type
    (common-lisp:or groups-list common-lisp:null))
   (first-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (last-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (email-address common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (contact-number common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-account-subscription-request
                    'make-create-account-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-account-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-account-subscription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edition))
      (common-lisp:list
       (common-lisp:cons "Edition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-method))
      (common-lisp:list
       (common-lisp:cons "AuthenticationMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-name))
      (common-lisp:list
       (common-lisp:cons "AccountName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-email))
      (common-lisp:list
       (common-lisp:cons "NotificationEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-directory-name))
      (common-lisp:list
       (common-lisp:cons "ActiveDirectoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'realm))
      (common-lisp:list
       (common-lisp:cons "Realm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-group))
      (common-lisp:list
       (common-lisp:cons "AdminGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'author-group))
      (common-lisp:list
       (common-lisp:cons "AuthorGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reader-group))
      (common-lisp:list
       (common-lisp:cons "ReaderGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "FirstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "LastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "EmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-number))
      (common-lisp:list
       (common-lisp:cons "ContactNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-account-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-account-subscription-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-account-subscription-response-"))
   (signup-response common-lisp:nil :type
    (common-lisp:or signup-response common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-account-subscription-response
                    'make-create-account-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-account-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-account-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signup-response))
      (common-lisp:list
       (common-lisp:cons "SignupResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-account-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-analysis-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-analysis-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (analysis-id (common-lisp:error ":analysis-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or analysis-name common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or resource-permission-list common-lisp:null))
   (source-entity common-lisp:nil :type
    (common-lisp:or analysis-source-entity common-lisp:null))
   (theme-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (definition common-lisp:nil :type
    (common-lisp:or analysis-definition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-analysis-request 'make-create-analysis-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-analysis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-analysis-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-entity))
      (common-lisp:list
       (common-lisp:cons "SourceEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-arn))
      (common-lisp:list
       (common-lisp:cons "ThemeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-analysis-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-analysis-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-analysis-response-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (analysis-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (creation-status common-lisp:nil :type
    (common-lisp:or resource-status common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-analysis-response 'make-create-analysis-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-analysis-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-analysis-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-id))
      (common-lisp:list
       (common-lisp:cons "AnalysisId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-status))
      (common-lisp:list
       (common-lisp:cons "CreationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-analysis-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-columns-operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-columns-operation-"))
   (columns (common-lisp:error ":columns is required") :type
    (common-lisp:or calculated-column-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-columns-operation 'make-create-columns-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-columns-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-columns-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "Columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-columns-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dashboard-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dashboard-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (dashboard-id (common-lisp:error ":dashboard-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or dashboard-name common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or resource-permission-list common-lisp:null))
   (source-entity common-lisp:nil :type
    (common-lisp:or dashboard-source-entity common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (version-description common-lisp:nil :type
    (common-lisp:or version-description common-lisp:null))
   (dashboard-publish-options common-lisp:nil :type
    (common-lisp:or dashboard-publish-options common-lisp:null))
   (theme-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (definition common-lisp:nil :type
    (common-lisp:or dashboard-version-definition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dashboard-request 'make-create-dashboard-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dashboard-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dashboard-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-entity))
      (common-lisp:list
       (common-lisp:cons "SourceEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-description))
      (common-lisp:list
       (common-lisp:cons "VersionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dashboard-publish-options))
      (common-lisp:list
       (common-lisp:cons "DashboardPublishOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-arn))
      (common-lisp:list
       (common-lisp:cons "ThemeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dashboard-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dashboard-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dashboard-response-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (version-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (dashboard-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (creation-status common-lisp:nil :type
    (common-lisp:or resource-status common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dashboard-response
                    'make-create-dashboard-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dashboard-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dashboard-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-arn))
      (common-lisp:list
       (common-lisp:cons "VersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-id))
      (common-lisp:list
       (common-lisp:cons "DashboardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-status))
      (common-lisp:list
       (common-lisp:cons "CreationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dashboard-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-data-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-data-set-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (data-set-id (common-lisp:error ":data-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (physical-table-map (common-lisp:error ":physical-table-map is required")
    :type (common-lisp:or physical-table-map common-lisp:null))
   (logical-table-map common-lisp:nil :type
    (common-lisp:or logical-table-map common-lisp:null))
   (import-mode (common-lisp:error ":import-mode is required") :type
    (common-lisp:or data-set-import-mode common-lisp:null))
   (column-groups common-lisp:nil :type
    (common-lisp:or column-group-list common-lisp:null))
   (field-folders common-lisp:nil :type
    (common-lisp:or field-folder-map common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or resource-permission-list common-lisp:null))
   (row-level-permission-data-set common-lisp:nil :type
    (common-lisp:or row-level-permission-data-set common-lisp:null))
   (row-level-permission-tag-configuration common-lisp:nil :type
    (common-lisp:or row-level-permission-tag-configuration common-lisp:null))
   (column-level-permission-rules common-lisp:nil :type
    (common-lisp:or column-level-permission-rule-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (data-set-usage-configuration common-lisp:nil :type
    (common-lisp:or data-set-usage-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-data-set-request 'make-create-data-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'physical-table-map))
      (common-lisp:list
       (common-lisp:cons "PhysicalTableMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-table-map))
      (common-lisp:list
       (common-lisp:cons "LogicalTableMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-mode))
      (common-lisp:list
       (common-lisp:cons "ImportMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-groups))
      (common-lisp:list
       (common-lisp:cons "ColumnGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-folders))
      (common-lisp:list
       (common-lisp:cons "FieldFolders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'row-level-permission-data-set))
      (common-lisp:list
       (common-lisp:cons "RowLevelPermissionDataSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'row-level-permission-tag-configuration))
      (common-lisp:list
       (common-lisp:cons "RowLevelPermissionTagConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-level-permission-rules))
      (common-lisp:list
       (common-lisp:cons "ColumnLevelPermissionRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-set-usage-configuration))
      (common-lisp:list
       (common-lisp:cons "DataSetUsageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-data-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-data-set-response-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (data-set-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (ingestion-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (ingestion-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-data-set-response 'make-create-data-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-arn))
      (common-lisp:list
       (common-lisp:cons "IngestionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-id))
      (common-lisp:list
       (common-lisp:cons "IngestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-data-source-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-data-source-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (data-source-id (common-lisp:error ":data-source-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or data-source-type common-lisp:null))
   (data-source-parameters common-lisp:nil :type
    (common-lisp:or data-source-parameters common-lisp:null))
   (credentials common-lisp:nil :type
    (common-lisp:or data-source-credentials common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or resource-permission-list common-lisp:null))
   (vpc-connection-properties common-lisp:nil :type
    (common-lisp:or vpc-connection-properties common-lisp:null))
   (ssl-properties common-lisp:nil :type
    (common-lisp:or ssl-properties common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-data-source-request
                    'make-create-data-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-parameters))
      (common-lisp:list
       (common-lisp:cons "DataSourceParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-connection-properties))
      (common-lisp:list
       (common-lisp:cons "VpcConnectionProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-properties))
      (common-lisp:list
       (common-lisp:cons "SslProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-data-source-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-data-source-response-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (data-source-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (creation-status common-lisp:nil :type
    (common-lisp:or resource-status common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-data-source-response
                    'make-create-data-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-status))
      (common-lisp:list
       (common-lisp:cons "CreationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-folder-membership-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-folder-membership-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (folder-id (common-lisp:error ":folder-id is required") :type
    (common-lisp:or restrictive-resource-id common-lisp:null))
   (member-id (common-lisp:error ":member-id is required") :type
    (common-lisp:or restrictive-resource-id common-lisp:null))
   (member-type (common-lisp:error ":member-type is required") :type
    (common-lisp:or member-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-folder-membership-request
                    'make-create-folder-membership-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-membership-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-membership-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-membership-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-folder-membership-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-folder-membership-response-"))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (folder-member common-lisp:nil :type
    (common-lisp:or folder-member common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-folder-membership-response
                    'make-create-folder-membership-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-membership-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-membership-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-member))
      (common-lisp:list
       (common-lisp:cons "FolderMember"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-membership-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-folder-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-folder-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (folder-id (common-lisp:error ":folder-id is required") :type
    (common-lisp:or restrictive-resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or folder-name common-lisp:null))
   (folder-type common-lisp:nil :type
    (common-lisp:or folder-type common-lisp:null))
   (parent-folder-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or resource-permission-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-folder-request 'make-create-folder-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-type))
      (common-lisp:list
       (common-lisp:cons "FolderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-folder-arn))
      (common-lisp:list
       (common-lisp:cons "ParentFolderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-folder-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-folder-response-"))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (folder-id common-lisp:nil :type
    (common-lisp:or restrictive-resource-id common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-folder-response 'make-create-folder-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-id))
      (common-lisp:list
       (common-lisp:cons "FolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-group-membership-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-group-membership-request-"))
   (member-name (common-lisp:error ":member-name is required") :type
    (common-lisp:or group-member-name common-lisp:null))
   (group-name (common-lisp:error ":group-name is required") :type
    (common-lisp:or group-name common-lisp:null))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-group-membership-request
                    'make-create-group-membership-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-group-membership-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-group-membership-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-group-membership-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-group-membership-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-group-membership-response-"))
   (group-member common-lisp:nil :type
    (common-lisp:or group-member common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-group-membership-response
                    'make-create-group-membership-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-group-membership-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-group-membership-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-member))
      (common-lisp:list
       (common-lisp:cons "GroupMember"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-group-membership-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-group-request-"))
   (group-name (common-lisp:error ":group-name is required") :type
    (common-lisp:or group-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or group-description common-lisp:null))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-group-request 'make-create-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-group-response-"))
   (group common-lisp:nil :type (common-lisp:or group common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-group-response 'make-create-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "Group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-iampolicy-assignment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-iampolicy-assignment-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (assignment-name (common-lisp:error ":assignment-name is required") :type
    (common-lisp:or iampolicy-assignment-name common-lisp:null))
   (assignment-status (common-lisp:error ":assignment-status is required")
    :type (common-lisp:or assignment-status common-lisp:null))
   (policy-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (identities common-lisp:nil :type
    (common-lisp:or identity-map common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-iampolicy-assignment-request
                    'make-create-iampolicy-assignment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-iampolicy-assignment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-iampolicy-assignment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-name))
      (common-lisp:list
       (common-lisp:cons "AssignmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-status))
      (common-lisp:list
       (common-lisp:cons "AssignmentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identities))
      (common-lisp:list
       (common-lisp:cons "Identities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-iampolicy-assignment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-iampolicy-assignment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-iampolicy-assignment-response-"))
   (assignment-name common-lisp:nil :type
    (common-lisp:or iampolicy-assignment-name common-lisp:null))
   (assignment-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (assignment-status common-lisp:nil :type
    (common-lisp:or assignment-status common-lisp:null))
   (policy-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (identities common-lisp:nil :type
    (common-lisp:or identity-map common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-iampolicy-assignment-response
                    'make-create-iampolicy-assignment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-iampolicy-assignment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-iampolicy-assignment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-name))
      (common-lisp:list
       (common-lisp:cons "AssignmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-id))
      (common-lisp:list
       (common-lisp:cons "AssignmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-status))
      (common-lisp:list
       (common-lisp:cons "AssignmentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identities))
      (common-lisp:list
       (common-lisp:cons "Identities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-iampolicy-assignment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-ingestion-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-ingestion-request-"))
   (data-set-id (common-lisp:error ":data-set-id is required") :type
    (common-lisp:or string common-lisp:null))
   (ingestion-id (common-lisp:error ":ingestion-id is required") :type
    (common-lisp:or ingestion-id common-lisp:null))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (ingestion-type common-lisp:nil :type
    (common-lisp:or ingestion-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-ingestion-request 'make-create-ingestion-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-ingestion-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-ingestion-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-type))
      (common-lisp:list
       (common-lisp:cons "IngestionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-ingestion-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-ingestion-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-ingestion-response-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (ingestion-id common-lisp:nil :type
    (common-lisp:or ingestion-id common-lisp:null))
   (ingestion-status common-lisp:nil :type
    (common-lisp:or ingestion-status common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-ingestion-response
                    'make-create-ingestion-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-ingestion-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-ingestion-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-id))
      (common-lisp:list
       (common-lisp:cons "IngestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-status))
      (common-lisp:list
       (common-lisp:cons "IngestionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-ingestion-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-namespace-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-namespace-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null))
   (identity-store (common-lisp:error ":identity-store is required") :type
    (common-lisp:or identity-store common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-namespace-request 'make-create-namespace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-namespace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-namespace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store))
      (common-lisp:list
       (common-lisp:cons "IdentityStore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-namespace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-namespace-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-namespace-response-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or namespace common-lisp:null))
   (capacity-region common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (creation-status common-lisp:nil :type
    (common-lisp:or namespace-status common-lisp:null))
   (identity-store common-lisp:nil :type
    (common-lisp:or identity-store common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-namespace-response
                    'make-create-namespace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-namespace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-namespace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-region))
      (common-lisp:list
       (common-lisp:cons "CapacityRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-status))
      (common-lisp:list
       (common-lisp:cons "CreationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store))
      (common-lisp:list
       (common-lisp:cons "IdentityStore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-namespace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-template-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-template-alias-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (template-id (common-lisp:error ":template-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (alias-name (common-lisp:error ":alias-name is required") :type
    (common-lisp:or alias-name common-lisp:null))
   (template-version-number
    (common-lisp:error ":template-version-number is required") :type
    (common-lisp:or version-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-template-alias-request
                    'make-create-template-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-template-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-template-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-version-number))
      (common-lisp:list
       (common-lisp:cons "TemplateVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-template-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-template-alias-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-template-alias-response-"))
   (template-alias common-lisp:nil :type
    (common-lisp:or template-alias common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-template-alias-response
                    'make-create-template-alias-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-template-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-template-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-alias))
      (common-lisp:list
       (common-lisp:cons "TemplateAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-template-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-template-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (template-id (common-lisp:error ":template-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or template-name common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or resource-permission-list common-lisp:null))
   (source-entity common-lisp:nil :type
    (common-lisp:or template-source-entity common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (version-description common-lisp:nil :type
    (common-lisp:or version-description common-lisp:null))
   (definition common-lisp:nil :type
    (common-lisp:or template-version-definition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-template-request 'make-create-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-entity))
      (common-lisp:list
       (common-lisp:cons "SourceEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-description))
      (common-lisp:list
       (common-lisp:cons "VersionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-template-response-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (version-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (template-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (creation-status common-lisp:nil :type
    (common-lisp:or resource-status common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-template-response 'make-create-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-arn))
      (common-lisp:list
       (common-lisp:cons "VersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-status))
      (common-lisp:list
       (common-lisp:cons "CreationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-theme-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-theme-alias-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (theme-id (common-lisp:error ":theme-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (alias-name (common-lisp:error ":alias-name is required") :type
    (common-lisp:or alias-name common-lisp:null))
   (theme-version-number
    (common-lisp:error ":theme-version-number is required") :type
    (common-lisp:or version-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-theme-alias-request
                    'make-create-theme-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-theme-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-theme-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'theme-version-number))
      (common-lisp:list
       (common-lisp:cons "ThemeVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-theme-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-theme-alias-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-theme-alias-response-"))
   (theme-alias common-lisp:nil :type
    (common-lisp:or theme-alias common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-theme-alias-response
                    'make-create-theme-alias-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-theme-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-theme-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-alias))
      (common-lisp:list
       (common-lisp:cons "ThemeAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-theme-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-theme-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-theme-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (theme-id (common-lisp:error ":theme-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or theme-name common-lisp:null))
   (base-theme-id (common-lisp:error ":base-theme-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (version-description common-lisp:nil :type
    (common-lisp:or version-description common-lisp:null))
   (configuration (common-lisp:error ":configuration is required") :type
    (common-lisp:or theme-configuration common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or resource-permission-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-theme-request 'make-create-theme-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-theme-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-theme-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-theme-id))
      (common-lisp:list
       (common-lisp:cons "BaseThemeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-description))
      (common-lisp:list
       (common-lisp:cons "VersionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-theme-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-theme-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-theme-response-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (version-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (theme-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (creation-status common-lisp:nil :type
    (common-lisp:or resource-status common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-theme-response 'make-create-theme-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-theme-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-theme-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-arn))
      (common-lisp:list
       (common-lisp:cons "VersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-id))
      (common-lisp:list
       (common-lisp:cons "ThemeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-status))
      (common-lisp:list
       (common-lisp:cons "CreationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-theme-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (credential-pair (:copier common-lisp:nil)
      (:conc-name "struct-shape-credential-pair-"))
   (username (common-lisp:error ":username is required") :type
    (common-lisp:or username common-lisp:null))
   (password (common-lisp:error ":password is required") :type
    (common-lisp:or password common-lisp:null))
   (alternate-data-source-parameters common-lisp:nil :type
    (common-lisp:or data-source-parameters-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'credential-pair 'make-credential-pair))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input credential-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input credential-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alternate-data-source-parameters))
      (common-lisp:list
       (common-lisp:cons "AlternateDataSourceParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input credential-pair))
   common-lisp:nil))
(common-lisp:deftype cross-dataset-types () 'common-lisp:string)
(common-lisp:deftype currency-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (currency-display-format-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-currency-display-format-configuration-"))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null))
   (suffix common-lisp:nil :type (common-lisp:or suffix common-lisp:null))
   (separator-configuration common-lisp:nil :type
    (common-lisp:or numeric-separator-configuration common-lisp:null))
   (symbol common-lisp:nil :type
    (common-lisp:or currency-code common-lisp:null))
   (decimal-places-configuration common-lisp:nil :type
    (common-lisp:or decimal-places-configuration common-lisp:null))
   (number-scale common-lisp:nil :type
    (common-lisp:or number-scale common-lisp:null))
   (negative-value-configuration common-lisp:nil :type
    (common-lisp:or negative-value-configuration common-lisp:null))
   (null-value-format-configuration common-lisp:nil :type
    (common-lisp:or null-value-format-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'currency-display-format-configuration
                    'make-currency-display-format-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          currency-display-format-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          currency-display-format-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suffix))
      (common-lisp:list
       (common-lisp:cons "Suffix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'separator-configuration))
      (common-lisp:list
       (common-lisp:cons "SeparatorConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'symbol))
      (common-lisp:list
       (common-lisp:cons "Symbol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decimal-places-configuration))
      (common-lisp:list
       (common-lisp:cons "DecimalPlacesConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-scale))
      (common-lisp:list
       (common-lisp:cons "NumberScale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'negative-value-configuration))
      (common-lisp:list
       (common-lisp:cons "NegativeValueConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'null-value-format-configuration))
      (common-lisp:list
       (common-lisp:cons "NullValueFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          currency-display-format-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-action-filter-operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-action-filter-operation-"))
   (selected-fields-configuration
    (common-lisp:error ":selected-fields-configuration is required") :type
    (common-lisp:or filter-operation-selected-fields-configuration
                    common-lisp:null))
   (target-visuals-configuration
    (common-lisp:error ":target-visuals-configuration is required") :type
    (common-lisp:or filter-operation-target-visuals-configuration
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-action-filter-operation
                    'make-custom-action-filter-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-action-filter-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-action-filter-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'selected-fields-configuration))
      (common-lisp:list
       (common-lisp:cons "SelectedFieldsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-visuals-configuration))
      (common-lisp:list
       (common-lisp:cons "TargetVisualsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-action-filter-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-action-navigation-operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-action-navigation-operation-"))
   (local-navigation-configuration common-lisp:nil :type
    (common-lisp:or local-navigation-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-action-navigation-operation
                    'make-custom-action-navigation-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-action-navigation-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-action-navigation-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'local-navigation-configuration))
      (common-lisp:list
       (common-lisp:cons "LocalNavigationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-action-navigation-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-action-set-parameters-operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-action-set-parameters-operation-"))
   (parameter-value-configurations
    (common-lisp:error ":parameter-value-configurations is required") :type
    (common-lisp:or set-parameter-value-configuration-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-action-set-parameters-operation
                    'make-custom-action-set-parameters-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-action-set-parameters-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-action-set-parameters-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-value-configurations))
      (common-lisp:list
       (common-lisp:cons "ParameterValueConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-action-set-parameters-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-action-urloperation (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-action-urloperation-"))
   (urltemplate (common-lisp:error ":urltemplate is required") :type
    (common-lisp:or urloperation-template common-lisp:null))
   (urltarget (common-lisp:error ":urltarget is required") :type
    (common-lisp:or urltarget-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-action-urloperation
                    'make-custom-action-urloperation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-action-urloperation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-action-urloperation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'urltemplate))
      (common-lisp:list
       (common-lisp:cons "URLTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'urltarget))
      (common-lisp:list
       (common-lisp:cons "URLTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-action-urloperation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-content-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-content-configuration-"))
   (content-url common-lisp:nil :type
    (common-lisp:or urloperation-template common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or custom-content-type common-lisp:null))
   (image-scaling common-lisp:nil :type
    (common-lisp:or custom-content-image-scaling-configuration
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-content-configuration
                    'make-custom-content-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-content-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-content-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-url))
      (common-lisp:list
       (common-lisp:cons "ContentUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-scaling))
      (common-lisp:list
       (common-lisp:cons "ImageScaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-content-configuration))
   common-lisp:nil))
(common-lisp:deftype custom-content-image-scaling-configuration ()
  'common-lisp:string)
(common-lisp:deftype custom-content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (custom-content-visual (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-content-visual-"))
   (visual-id (common-lisp:error ":visual-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or visual-title-label-options common-lisp:null))
   (subtitle common-lisp:nil :type
    (common-lisp:or visual-subtitle-label-options common-lisp:null))
   (chart-configuration common-lisp:nil :type
    (common-lisp:or custom-content-configuration common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or visual-custom-action-list common-lisp:null))
   (data-set-identifier (common-lisp:error ":data-set-identifier is required")
    :type (common-lisp:or data-set-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-content-visual 'make-custom-content-visual))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-content-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-content-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-identifier))
      (common-lisp:list
       (common-lisp:cons "DataSetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-content-visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-filter-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-filter-configuration-"))
   (match-operator (common-lisp:error ":match-operator is required") :type
    (common-lisp:or category-filter-match-operator common-lisp:null))
   (category-value common-lisp:nil :type
    (common-lisp:or category-value common-lisp:null))
   (select-all-options common-lisp:nil :type
    (common-lisp:or category-filter-select-all-options common-lisp:null))
   (parameter-name common-lisp:nil :type
    (common-lisp:or parameter-name common-lisp:null))
   (null-option (common-lisp:error ":null-option is required") :type
    (common-lisp:or filter-null-option common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-filter-configuration
                    'make-custom-filter-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-filter-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-filter-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-operator))
      (common-lisp:list
       (common-lisp:cons "MatchOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-value))
      (common-lisp:list
       (common-lisp:cons "CategoryValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-all-options))
      (common-lisp:list
       (common-lisp:cons "SelectAllOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'null-option))
      (common-lisp:list
       (common-lisp:cons "NullOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-filter-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-filter-list-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-filter-list-configuration-"))
   (match-operator (common-lisp:error ":match-operator is required") :type
    (common-lisp:or category-filter-match-operator common-lisp:null))
   (category-values common-lisp:nil :type
    (common-lisp:or category-value-list common-lisp:null))
   (select-all-options common-lisp:nil :type
    (common-lisp:or category-filter-select-all-options common-lisp:null))
   (null-option (common-lisp:error ":null-option is required") :type
    (common-lisp:or filter-null-option common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-filter-list-configuration
                    'make-custom-filter-list-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-filter-list-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-filter-list-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-operator))
      (common-lisp:list
       (common-lisp:cons "MatchOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-values))
      (common-lisp:list
       (common-lisp:cons "CategoryValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-all-options))
      (common-lisp:list
       (common-lisp:cons "SelectAllOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'null-option))
      (common-lisp:list
       (common-lisp:cons "NullOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-filter-list-configuration))
   common-lisp:nil))
(common-lisp:deftype custom-label () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (custom-narrative-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-narrative-options-"))
   (narrative (common-lisp:error ":narrative is required") :type
    (common-lisp:or narrative-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-narrative-options 'make-custom-narrative-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-narrative-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-narrative-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'narrative))
      (common-lisp:list
       (common-lisp:cons "Narrative"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-narrative-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-parameter-values (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-parameter-values-"))
   (string-values common-lisp:nil :type
    (common-lisp:or string-default-value-list common-lisp:null))
   (integer-values common-lisp:nil :type
    (common-lisp:or integer-default-value-list common-lisp:null))
   (decimal-values common-lisp:nil :type
    (common-lisp:or decimal-default-value-list common-lisp:null))
   (date-time-values common-lisp:nil :type
    (common-lisp:or date-time-default-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-parameter-values 'make-custom-parameter-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-parameter-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-parameter-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-values))
      (common-lisp:list
       (common-lisp:cons "StringValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integer-values))
      (common-lisp:list
       (common-lisp:cons "IntegerValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decimal-values))
      (common-lisp:list
       (common-lisp:cons "DecimalValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-time-values))
      (common-lisp:list
       (common-lisp:cons "DateTimeValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-parameter-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-sql (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-sql-"))
   (data-source-arn (common-lisp:error ":data-source-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or custom-sql-name common-lisp:null))
   (sql-query (common-lisp:error ":sql-query is required") :type
    (common-lisp:or sql-query common-lisp:null))
   (columns common-lisp:nil :type
    (common-lisp:or input-column-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'custom-sql 'make-custom-sql))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-sql))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-sql))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-arn))
      (common-lisp:list
       (common-lisp:cons "DataSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql-query))
      (common-lisp:list
       (common-lisp:cons "SqlQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "Columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-sql))
   common-lisp:nil))
(common-lisp:deftype custom-sql-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (custom-values-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-values-configuration-"))
   (include-null-value common-lisp:nil :type
    (common-lisp:or boolean-object common-lisp:null))
   (custom-values (common-lisp:error ":custom-values is required") :type
    (common-lisp:or custom-parameter-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-values-configuration
                    'make-custom-values-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-values-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-values-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-null-value))
      (common-lisp:list
       (common-lisp:cons "IncludeNullValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-values))
      (common-lisp:list
       (common-lisp:cons "CustomValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-values-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dashboard (:copier common-lisp:nil)
      (:conc-name "struct-shape-dashboard-"))
   (dashboard-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or dashboard-name common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or dashboard-version common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-published-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dashboard 'make-dashboard))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dashboard))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dashboard))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-id))
      (common-lisp:list
       (common-lisp:cons "DashboardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-published-time))
      (common-lisp:list
       (common-lisp:cons "LastPublishedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dashboard))
   common-lisp:nil))
(common-lisp:deftype dashboard-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (dashboard-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-dashboard-error-"))
   (type common-lisp:nil :type
    (common-lisp:or dashboard-error-type common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (violated-entities common-lisp:nil :type
    (common-lisp:or entity-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dashboard-error 'make-dashboard-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dashboard-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dashboard-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violated-entities))
      (common-lisp:list
       (common-lisp:cons "ViolatedEntities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dashboard-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dashboard-error-list ()
   '(trivial-types:proper-list dashboard-error))
 (common-lisp:defun |make-dashboard-error-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dashboard-error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype dashboard-error-type () 'common-lisp:string)
(common-lisp:deftype dashboard-filter-attribute () 'common-lisp:string)
(common-lisp:deftype dashboard-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (dashboard-publish-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-dashboard-publish-options-"))
   (ad-hoc-filtering-option common-lisp:nil :type
    (common-lisp:or ad-hoc-filtering-option common-lisp:null))
   (export-to-csvoption common-lisp:nil :type
    (common-lisp:or export-to-csvoption common-lisp:null))
   (sheet-controls-option common-lisp:nil :type
    (common-lisp:or sheet-controls-option common-lisp:null))
   (visual-publish-options common-lisp:nil :type
    (common-lisp:or dashboard-visual-publish-options common-lisp:null))
   (sheet-layout-element-maximization-option common-lisp:nil :type
    (common-lisp:or sheet-layout-element-maximization-option common-lisp:null))
   (visual-menu-option common-lisp:nil :type
    (common-lisp:or visual-menu-option common-lisp:null))
   (visual-axis-sort-option common-lisp:nil :type
    (common-lisp:or visual-axis-sort-option common-lisp:null))
   (export-with-hidden-fields-option common-lisp:nil :type
    (common-lisp:or export-with-hidden-fields-option common-lisp:null))
   (data-point-drill-up-down-option common-lisp:nil :type
    (common-lisp:or data-point-drill-up-down-option common-lisp:null))
   (data-point-menu-label-option common-lisp:nil :type
    (common-lisp:or data-point-menu-label-option common-lisp:null))
   (data-point-tooltip-option common-lisp:nil :type
    (common-lisp:or data-point-tooltip-option common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dashboard-publish-options
                    'make-dashboard-publish-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-publish-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-publish-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ad-hoc-filtering-option))
      (common-lisp:list
       (common-lisp:cons "AdHocFilteringOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-to-csvoption))
      (common-lisp:list
       (common-lisp:cons "ExportToCSVOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sheet-controls-option))
      (common-lisp:list
       (common-lisp:cons "SheetControlsOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'visual-publish-options))
      (common-lisp:list
       (common-lisp:cons "VisualPublishOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sheet-layout-element-maximization-option))
      (common-lisp:list
       (common-lisp:cons "SheetLayoutElementMaximizationOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-menu-option))
      (common-lisp:list
       (common-lisp:cons "VisualMenuOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'visual-axis-sort-option))
      (common-lisp:list
       (common-lisp:cons "VisualAxisSortOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-with-hidden-fields-option))
      (common-lisp:list
       (common-lisp:cons "ExportWithHiddenFieldsOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-point-drill-up-down-option))
      (common-lisp:list
       (common-lisp:cons "DataPointDrillUpDownOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-point-menu-label-option))
      (common-lisp:list
       (common-lisp:cons "DataPointMenuLabelOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-point-tooltip-option))
      (common-lisp:list
       (common-lisp:cons "DataPointTooltipOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-publish-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dashboard-search-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-dashboard-search-filter-"))
   (operator (common-lisp:error ":operator is required") :type
    (common-lisp:or filter-operator common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or dashboard-filter-attribute common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dashboard-search-filter 'make-dashboard-search-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-search-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-search-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "Operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-search-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dashboard-search-filter-list ()
   '(trivial-types:proper-list dashboard-search-filter))
 (common-lisp:defun |make-dashboard-search-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dashboard-search-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dashboard-source-entity (:copier common-lisp:nil)
      (:conc-name "struct-shape-dashboard-source-entity-"))
   (source-template common-lisp:nil :type
    (common-lisp:or dashboard-source-template common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dashboard-source-entity 'make-dashboard-source-entity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-source-entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-source-entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-template))
      (common-lisp:list
       (common-lisp:cons "SourceTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-source-entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dashboard-source-template (:copier common-lisp:nil)
      (:conc-name "struct-shape-dashboard-source-template-"))
   (data-set-references (common-lisp:error ":data-set-references is required")
    :type (common-lisp:or data-set-reference-list common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dashboard-source-template
                    'make-dashboard-source-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-source-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-source-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-references))
      (common-lisp:list
       (common-lisp:cons "DataSetReferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-source-template))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dashboard-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-dashboard-summary-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (dashboard-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or dashboard-name common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (published-version-number common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null))
   (last-published-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dashboard-summary 'make-dashboard-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dashboard-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dashboard-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-id))
      (common-lisp:list
       (common-lisp:cons "DashboardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'published-version-number))
      (common-lisp:list
       (common-lisp:cons "PublishedVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-published-time))
      (common-lisp:list
       (common-lisp:cons "LastPublishedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dashboard-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dashboard-summary-list ()
   '(trivial-types:proper-list dashboard-summary))
 (common-lisp:defun |make-dashboard-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dashboard-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype dashboard-uistate () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (dashboard-version (:copier common-lisp:nil)
      (:conc-name "struct-shape-dashboard-version-"))
   (created-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (errors common-lisp:nil :type
    (common-lisp:or dashboard-error-list common-lisp:null))
   (version-number common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or resource-status common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (source-entity-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (data-set-arns common-lisp:nil :type
    (common-lisp:or data-set-arns-list common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or version-description common-lisp:null))
   (theme-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (sheets common-lisp:nil :type (common-lisp:or sheet-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dashboard-version 'make-dashboard-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dashboard-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dashboard-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-entity-arn))
      (common-lisp:list
       (common-lisp:cons "SourceEntityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-arns))
      (common-lisp:list
       (common-lisp:cons "DataSetArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-arn))
      (common-lisp:list
       (common-lisp:cons "ThemeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sheets))
      (common-lisp:list
       (common-lisp:cons "Sheets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dashboard-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dashboard-version-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-dashboard-version-definition-"))
   (data-set-identifier-declarations
    (common-lisp:error ":data-set-identifier-declarations is required") :type
    (common-lisp:or data-set-identifier-declaration-list common-lisp:null))
   (sheets common-lisp:nil :type
    (common-lisp:or sheet-definition-list common-lisp:null))
   (calculated-fields common-lisp:nil :type
    (common-lisp:or calculated-fields common-lisp:null))
   (parameter-declarations common-lisp:nil :type
    (common-lisp:or parameter-declaration-list common-lisp:null))
   (filter-groups common-lisp:nil :type
    (common-lisp:or filter-group-list common-lisp:null))
   (column-configurations common-lisp:nil :type
    (common-lisp:or column-configuration-list common-lisp:null))
   (analysis-defaults common-lisp:nil :type
    (common-lisp:or analysis-defaults common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dashboard-version-definition
                    'make-dashboard-version-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-version-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-version-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-set-identifier-declarations))
      (common-lisp:list
       (common-lisp:cons "DataSetIdentifierDeclarations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sheets))
      (common-lisp:list
       (common-lisp:cons "Sheets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'calculated-fields))
      (common-lisp:list
       (common-lisp:cons "CalculatedFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-declarations))
      (common-lisp:list
       (common-lisp:cons "ParameterDeclarations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-groups))
      (common-lisp:list
       (common-lisp:cons "FilterGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-configurations))
      (common-lisp:list
       (common-lisp:cons "ColumnConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-defaults))
      (common-lisp:list
       (common-lisp:cons "AnalysisDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-version-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dashboard-version-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-dashboard-version-summary-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (version-number common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or resource-status common-lisp:null))
   (source-entity-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or version-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dashboard-version-summary
                    'make-dashboard-version-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-version-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-version-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-entity-arn))
      (common-lisp:list
       (common-lisp:cons "SourceEntityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-version-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dashboard-version-summary-list ()
   '(trivial-types:proper-list dashboard-version-summary))
 (common-lisp:defun |make-dashboard-version-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dashboard-version-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dashboard-visual-id (:copier common-lisp:nil)
      (:conc-name "struct-shape-dashboard-visual-id-"))
   (dashboard-id (common-lisp:error ":dashboard-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (sheet-id (common-lisp:error ":sheet-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (visual-id (common-lisp:error ":visual-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dashboard-visual-id 'make-dashboard-visual-id))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dashboard-visual-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dashboard-visual-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-id))
      (common-lisp:list
       (common-lisp:cons "DashboardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sheet-id))
      (common-lisp:list
       (common-lisp:cons "SheetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dashboard-visual-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dashboard-visual-publish-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-dashboard-visual-publish-options-"))
   (export-hidden-fields-option common-lisp:nil :type
    (common-lisp:or export-hidden-fields-option common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dashboard-visual-publish-options
                    'make-dashboard-visual-publish-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-visual-publish-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-visual-publish-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-hidden-fields-option))
      (common-lisp:list
       (common-lisp:cons "ExportHiddenFieldsOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-visual-publish-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-bars-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-bars-options-"))
   (field-id (common-lisp:error ":field-id is required") :type
    (common-lisp:or field-id common-lisp:null))
   (positive-color common-lisp:nil :type
    (common-lisp:or hex-color common-lisp:null))
   (negative-color common-lisp:nil :type
    (common-lisp:or hex-color common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-bars-options 'make-data-bars-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-bars-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-bars-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'positive-color))
      (common-lisp:list
       (common-lisp:cons "PositiveColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'negative-color))
      (common-lisp:list
       (common-lisp:cons "NegativeColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-bars-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-color (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-color-"))
   (color common-lisp:nil :type (common-lisp:or hex-color common-lisp:null))
   (data-value common-lisp:nil :type (common-lisp:or double common-lisp:null)))
 (common-lisp:export (common-lisp:list 'data-color 'make-data-color))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-color))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-color))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color))
      (common-lisp:list
       (common-lisp:cons "Color"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-value))
      (common-lisp:list
       (common-lisp:cons "DataValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-color))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-color-palette (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-color-palette-"))
   (colors common-lisp:nil :type (common-lisp:or color-list common-lisp:null))
   (min-max-gradient common-lisp:nil :type
    (common-lisp:or color-list common-lisp:null))
   (empty-fill-color common-lisp:nil :type
    (common-lisp:or hex-color common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-color-palette 'make-data-color-palette))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-color-palette))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-color-palette))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'colors))
      (common-lisp:list
       (common-lisp:cons "Colors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-max-gradient))
      (common-lisp:list
       (common-lisp:cons "MinMaxGradient"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'empty-fill-color))
      (common-lisp:list
       (common-lisp:cons "EmptyFillColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-color-palette))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-field-series-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-field-series-item-"))
   (field-id (common-lisp:error ":field-id is required") :type
    (common-lisp:or field-id common-lisp:null))
   (field-value common-lisp:nil :type
    (common-lisp:or sensitive-string common-lisp:null))
   (axis-binding (common-lisp:error ":axis-binding is required") :type
    (common-lisp:or axis-binding common-lisp:null))
   (settings common-lisp:nil :type
    (common-lisp:or line-chart-series-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-field-series-item 'make-data-field-series-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-field-series-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-field-series-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-value))
      (common-lisp:list
       (common-lisp:cons "FieldValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'axis-binding))
      (common-lisp:list
       (common-lisp:cons "AxisBinding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-field-series-item))
   common-lisp:nil))
(common-lisp:deftype data-label-content () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (data-label-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-label-options-"))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (category-label-visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (measure-label-visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (data-label-types common-lisp:nil :type
    (common-lisp:or data-label-types common-lisp:null))
   (position common-lisp:nil :type
    (common-lisp:or data-label-position common-lisp:null))
   (label-content common-lisp:nil :type
    (common-lisp:or data-label-content common-lisp:null))
   (label-font-configuration common-lisp:nil :type
    (common-lisp:or font-configuration common-lisp:null))
   (label-color common-lisp:nil :type
    (common-lisp:or hex-color common-lisp:null))
   (overlap common-lisp:nil :type
    (common-lisp:or data-label-overlap common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-label-options 'make-data-label-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-label-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-label-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-label-visibility))
      (common-lisp:list
       (common-lisp:cons "CategoryLabelVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'measure-label-visibility))
      (common-lisp:list
       (common-lisp:cons "MeasureLabelVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-label-types))
      (common-lisp:list
       (common-lisp:cons "DataLabelTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "Position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-content))
      (common-lisp:list
       (common-lisp:cons "LabelContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'label-font-configuration))
      (common-lisp:list
       (common-lisp:cons "LabelFontConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-color))
      (common-lisp:list
       (common-lisp:cons "LabelColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overlap))
      (common-lisp:list
       (common-lisp:cons "Overlap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-label-options))
   common-lisp:nil))
(common-lisp:deftype data-label-overlap () 'common-lisp:string)
(common-lisp:deftype data-label-position () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (data-label-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-label-type-"))
   (field-label-type common-lisp:nil :type
    (common-lisp:or field-label-type common-lisp:null))
   (data-path-label-type common-lisp:nil :type
    (common-lisp:or data-path-label-type common-lisp:null))
   (range-ends-label-type common-lisp:nil :type
    (common-lisp:or range-ends-label-type common-lisp:null))
   (minimum-label-type common-lisp:nil :type
    (common-lisp:or minimum-label-type common-lisp:null))
   (maximum-label-type common-lisp:nil :type
    (common-lisp:or maximum-label-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'data-label-type 'make-data-label-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-label-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-label-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-label-type))
      (common-lisp:list
       (common-lisp:cons "FieldLabelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-path-label-type))
      (common-lisp:list
       (common-lisp:cons "DataPathLabelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'range-ends-label-type))
      (common-lisp:list
       (common-lisp:cons "RangeEndsLabelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-label-type))
      (common-lisp:list
       (common-lisp:cons "MinimumLabelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-label-type))
      (common-lisp:list
       (common-lisp:cons "MaximumLabelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-label-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-label-types ()
   '(trivial-types:proper-list data-label-type))
 (common-lisp:defun |make-data-label-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-label-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (data-path-color (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-path-color-"))
   (element (common-lisp:error ":element is required") :type
    (common-lisp:or data-path-value common-lisp:null))
   (color (common-lisp:error ":color is required") :type
    (common-lisp:or hex-color common-lisp:null))
   (time-granularity common-lisp:nil :type
    (common-lisp:or time-granularity common-lisp:null)))
 (common-lisp:export (common-lisp:list 'data-path-color 'make-data-path-color))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-path-color))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-path-color))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'element))
      (common-lisp:list
       (common-lisp:cons "Element"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color))
      (common-lisp:list
       (common-lisp:cons "Color"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-granularity))
      (common-lisp:list
       (common-lisp:cons "TimeGranularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-path-color))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-path-color-list ()
   '(trivial-types:proper-list data-path-color))
 (common-lisp:defun |make-data-path-color-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-path-color))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (data-path-label-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-path-label-type-"))
   (field-id common-lisp:nil :type (common-lisp:or field-id common-lisp:null))
   (field-value common-lisp:nil :type
    (common-lisp:or field-value common-lisp:null))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-path-label-type 'make-data-path-label-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-path-label-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-path-label-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-value))
      (common-lisp:list
       (common-lisp:cons "FieldValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-path-label-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-path-sort (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-path-sort-"))
   (direction (common-lisp:error ":direction is required") :type
    (common-lisp:or sort-direction common-lisp:null))
   (sort-paths (common-lisp:error ":sort-paths is required") :type
    (common-lisp:or data-path-value-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'data-path-sort 'make-data-path-sort))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-path-sort))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-path-sort))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'direction))
      (common-lisp:list
       (common-lisp:cons "Direction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-paths))
      (common-lisp:list
       (common-lisp:cons "SortPaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-path-sort))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-path-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-path-value-"))
   (field-id (common-lisp:error ":field-id is required") :type
    (common-lisp:or field-id common-lisp:null))
   (field-value (common-lisp:error ":field-value is required") :type
    (common-lisp:or field-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'data-path-value 'make-data-path-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-path-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-path-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-value))
      (common-lisp:list
       (common-lisp:cons "FieldValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-path-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-path-value-list ()
   '(trivial-types:proper-list data-path-value))
 (common-lisp:defun |make-data-path-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-path-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (data-point-drill-up-down-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-point-drill-up-down-option-"))
   (availability-status common-lisp:nil :type
    (common-lisp:or dashboard-behavior common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-point-drill-up-down-option
                    'make-data-point-drill-up-down-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-point-drill-up-down-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-point-drill-up-down-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-status))
      (common-lisp:list
       (common-lisp:cons "AvailabilityStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-point-drill-up-down-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-point-menu-label-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-point-menu-label-option-"))
   (availability-status common-lisp:nil :type
    (common-lisp:or dashboard-behavior common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-point-menu-label-option
                    'make-data-point-menu-label-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-point-menu-label-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-point-menu-label-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-status))
      (common-lisp:list
       (common-lisp:cons "AvailabilityStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-point-menu-label-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-point-tooltip-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-point-tooltip-option-"))
   (availability-status common-lisp:nil :type
    (common-lisp:or dashboard-behavior common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-point-tooltip-option
                    'make-data-point-tooltip-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-point-tooltip-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-point-tooltip-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-status))
      (common-lisp:list
       (common-lisp:cons "AvailabilityStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-point-tooltip-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-set (:copier common-lisp:nil) (:conc-name "struct-shape-data-set-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (data-set-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (physical-table-map common-lisp:nil :type
    (common-lisp:or physical-table-map common-lisp:null))
   (logical-table-map common-lisp:nil :type
    (common-lisp:or logical-table-map common-lisp:null))
   (output-columns common-lisp:nil :type
    (common-lisp:or output-column-list common-lisp:null))
   (import-mode common-lisp:nil :type
    (common-lisp:or data-set-import-mode common-lisp:null))
   (consumed-spice-capacity-in-bytes common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (column-groups common-lisp:nil :type
    (common-lisp:or column-group-list common-lisp:null))
   (field-folders common-lisp:nil :type
    (common-lisp:or field-folder-map common-lisp:null))
   (row-level-permission-data-set common-lisp:nil :type
    (common-lisp:or row-level-permission-data-set common-lisp:null))
   (row-level-permission-tag-configuration common-lisp:nil :type
    (common-lisp:or row-level-permission-tag-configuration common-lisp:null))
   (column-level-permission-rules common-lisp:nil :type
    (common-lisp:or column-level-permission-rule-list common-lisp:null))
   (data-set-usage-configuration common-lisp:nil :type
    (common-lisp:or data-set-usage-configuration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'data-set 'make-data-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'physical-table-map))
      (common-lisp:list
       (common-lisp:cons "PhysicalTableMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-table-map))
      (common-lisp:list
       (common-lisp:cons "LogicalTableMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-columns))
      (common-lisp:list
       (common-lisp:cons "OutputColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-mode))
      (common-lisp:list
       (common-lisp:cons "ImportMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'consumed-spice-capacity-in-bytes))
      (common-lisp:list
       (common-lisp:cons "ConsumedSpiceCapacityInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-groups))
      (common-lisp:list
       (common-lisp:cons "ColumnGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-folders))
      (common-lisp:list
       (common-lisp:cons "FieldFolders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'row-level-permission-data-set))
      (common-lisp:list
       (common-lisp:cons "RowLevelPermissionDataSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'row-level-permission-tag-configuration))
      (common-lisp:list
       (common-lisp:cons "RowLevelPermissionTagConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-level-permission-rules))
      (common-lisp:list
       (common-lisp:cons "ColumnLevelPermissionRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-set-usage-configuration))
      (common-lisp:list
       (common-lisp:cons "DataSetUsageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-set-arns-list () '(trivial-types:proper-list arn))
 (common-lisp:defun |make-data-set-arns-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (data-set-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-set-configuration-"))
   (placeholder common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (data-set-schema common-lisp:nil :type
    (common-lisp:or data-set-schema common-lisp:null))
   (column-group-schema-list common-lisp:nil :type
    (common-lisp:or column-group-schema-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-set-configuration 'make-data-set-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-set-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-set-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placeholder))
      (common-lisp:list
       (common-lisp:cons "Placeholder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-schema))
      (common-lisp:list
       (common-lisp:cons "DataSetSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-group-schema-list))
      (common-lisp:list
       (common-lisp:cons "ColumnGroupSchemaList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-set-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-set-configuration-list ()
   '(trivial-types:proper-list data-set-configuration))
 (common-lisp:defun |make-data-set-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-set-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-set-filter-attribute () 'common-lisp:string)
(common-lisp:deftype data-set-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (data-set-identifier-declaration (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-set-identifier-declaration-"))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or data-set-identifier common-lisp:null))
   (data-set-arn (common-lisp:error ":data-set-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-set-identifier-declaration
                    'make-data-set-identifier-declaration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-set-identifier-declaration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-set-identifier-declaration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-arn))
      (common-lisp:list
       (common-lisp:cons "DataSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-set-identifier-declaration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-set-identifier-declaration-list ()
   '(trivial-types:proper-list data-set-identifier-declaration))
 (common-lisp:defun |make-data-set-identifier-declaration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-set-identifier-declaration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-set-import-mode () 'common-lisp:string)
(common-lisp:deftype data-set-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (data-set-reference (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-set-reference-"))
   (data-set-placeholder
    (common-lisp:error ":data-set-placeholder is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (data-set-arn (common-lisp:error ":data-set-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-set-reference 'make-data-set-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-set-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-set-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-set-placeholder))
      (common-lisp:list
       (common-lisp:cons "DataSetPlaceholder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-arn))
      (common-lisp:list
       (common-lisp:cons "DataSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-set-reference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-set-reference-list ()
   '(trivial-types:proper-list data-set-reference))
 (common-lisp:defun |make-data-set-reference-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-set-reference))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (data-set-schema (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-set-schema-"))
   (column-schema-list common-lisp:nil :type
    (common-lisp:or column-schema-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'data-set-schema 'make-data-set-schema))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-set-schema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-set-schema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-schema-list))
      (common-lisp:list
       (common-lisp:cons "ColumnSchemaList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-set-schema))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-set-search-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-set-search-filter-"))
   (operator (common-lisp:error ":operator is required") :type
    (common-lisp:or filter-operator common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or data-set-filter-attribute common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-set-search-filter 'make-data-set-search-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-set-search-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-set-search-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "Operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-set-search-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-set-search-filter-list ()
   '(trivial-types:proper-list data-set-search-filter))
 (common-lisp:defun |make-data-set-search-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-set-search-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (data-set-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-set-summary-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (data-set-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (import-mode common-lisp:nil :type
    (common-lisp:or data-set-import-mode common-lisp:null))
   (row-level-permission-data-set common-lisp:nil :type
    (common-lisp:or row-level-permission-data-set common-lisp:null))
   (row-level-permission-tag-configuration-applied common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (column-level-permission-rules-applied common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-set-summary 'make-data-set-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-set-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-set-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-mode))
      (common-lisp:list
       (common-lisp:cons "ImportMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'row-level-permission-data-set))
      (common-lisp:list
       (common-lisp:cons "RowLevelPermissionDataSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'row-level-permission-tag-configuration-applied))
      (common-lisp:list
       (common-lisp:cons "RowLevelPermissionTagConfigurationApplied"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-level-permission-rules-applied))
      (common-lisp:list
       (common-lisp:cons "ColumnLevelPermissionRulesApplied"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-set-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-set-summary-list ()
   '(trivial-types:proper-list data-set-summary))
 (common-lisp:defun |make-data-set-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-set-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (data-set-usage-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-set-usage-configuration-"))
   (disable-use-as-direct-query-source common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (disable-use-as-imported-source common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-set-usage-configuration
                    'make-data-set-usage-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-set-usage-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-set-usage-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-use-as-direct-query-source))
      (common-lisp:list
       (common-lisp:cons "DisableUseAsDirectQuerySource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-use-as-imported-source))
      (common-lisp:list
       (common-lisp:cons "DisableUseAsImportedSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-set-usage-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (data-source-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or data-source-type common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or resource-status common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (data-source-parameters common-lisp:nil :type
    (common-lisp:or data-source-parameters common-lisp:null))
   (alternate-data-source-parameters common-lisp:nil :type
    (common-lisp:or data-source-parameters-list common-lisp:null))
   (vpc-connection-properties common-lisp:nil :type
    (common-lisp:or vpc-connection-properties common-lisp:null))
   (ssl-properties common-lisp:nil :type
    (common-lisp:or ssl-properties common-lisp:null))
   (error-info common-lisp:nil :type
    (common-lisp:or data-source-error-info common-lisp:null))
   (secret-arn common-lisp:nil :type
    (common-lisp:or secret-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'data-source 'make-data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-parameters))
      (common-lisp:list
       (common-lisp:cons "DataSourceParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alternate-data-source-parameters))
      (common-lisp:list
       (common-lisp:cons "AlternateDataSourceParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-connection-properties))
      (common-lisp:list
       (common-lisp:cons "VpcConnectionProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-properties))
      (common-lisp:list
       (common-lisp:cons "SslProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-info))
      (common-lisp:list
       (common-lisp:cons "ErrorInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-source-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-credentials-"))
   (credential-pair common-lisp:nil :type
    (common-lisp:or credential-pair common-lisp:null))
   (copy-source-arn common-lisp:nil :type
    (common-lisp:or copy-source-arn common-lisp:null))
   (secret-arn common-lisp:nil :type
    (common-lisp:or secret-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-source-credentials 'make-data-source-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credential-pair))
      (common-lisp:list
       (common-lisp:cons "CredentialPair"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-source-arn))
      (common-lisp:list
       (common-lisp:cons "CopySourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-source-error-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-error-info-"))
   (type common-lisp:nil :type
    (common-lisp:or data-source-error-info-type common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-source-error-info 'make-data-source-error-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-error-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-error-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-error-info))
   common-lisp:nil))
(common-lisp:deftype data-source-error-info-type () 'common-lisp:string)
(common-lisp:deftype data-source-filter-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-source-list ()
   '(trivial-types:proper-list data-source))
 (common-lisp:defun |make-data-source-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (data-source-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-parameters-"))
   (amazon-elasticsearch-parameters common-lisp:nil :type
    (common-lisp:or amazon-elasticsearch-parameters common-lisp:null))
   (athena-parameters common-lisp:nil :type
    (common-lisp:or athena-parameters common-lisp:null))
   (aurora-parameters common-lisp:nil :type
    (common-lisp:or aurora-parameters common-lisp:null))
   (aurora-postgre-sql-parameters common-lisp:nil :type
    (common-lisp:or aurora-postgre-sql-parameters common-lisp:null))
   (aws-iot-analytics-parameters common-lisp:nil :type
    (common-lisp:or aws-iot-analytics-parameters common-lisp:null))
   (jira-parameters common-lisp:nil :type
    (common-lisp:or jira-parameters common-lisp:null))
   (maria-db-parameters common-lisp:nil :type
    (common-lisp:or maria-db-parameters common-lisp:null))
   (my-sql-parameters common-lisp:nil :type
    (common-lisp:or my-sql-parameters common-lisp:null))
   (oracle-parameters common-lisp:nil :type
    (common-lisp:or oracle-parameters common-lisp:null))
   (postgre-sql-parameters common-lisp:nil :type
    (common-lisp:or postgre-sql-parameters common-lisp:null))
   (presto-parameters common-lisp:nil :type
    (common-lisp:or presto-parameters common-lisp:null))
   (rds-parameters common-lisp:nil :type
    (common-lisp:or rds-parameters common-lisp:null))
   (redshift-parameters common-lisp:nil :type
    (common-lisp:or redshift-parameters common-lisp:null))
   (s3parameters common-lisp:nil :type
    (common-lisp:or s3parameters common-lisp:null))
   (service-now-parameters common-lisp:nil :type
    (common-lisp:or service-now-parameters common-lisp:null))
   (snowflake-parameters common-lisp:nil :type
    (common-lisp:or snowflake-parameters common-lisp:null))
   (spark-parameters common-lisp:nil :type
    (common-lisp:or spark-parameters common-lisp:null))
   (sql-server-parameters common-lisp:nil :type
    (common-lisp:or sql-server-parameters common-lisp:null))
   (teradata-parameters common-lisp:nil :type
    (common-lisp:or teradata-parameters common-lisp:null))
   (twitter-parameters common-lisp:nil :type
    (common-lisp:or twitter-parameters common-lisp:null))
   (amazon-open-search-parameters common-lisp:nil :type
    (common-lisp:or amazon-open-search-parameters common-lisp:null))
   (exasol-parameters common-lisp:nil :type
    (common-lisp:or exasol-parameters common-lisp:null))
   (databricks-parameters common-lisp:nil :type
    (common-lisp:or databricks-parameters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-source-parameters 'make-data-source-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amazon-elasticsearch-parameters))
      (common-lisp:list
       (common-lisp:cons "AmazonElasticsearchParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'athena-parameters))
      (common-lisp:list
       (common-lisp:cons "AthenaParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aurora-parameters))
      (common-lisp:list
       (common-lisp:cons "AuroraParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aurora-postgre-sql-parameters))
      (common-lisp:list
       (common-lisp:cons "AuroraPostgreSqlParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-iot-analytics-parameters))
      (common-lisp:list
       (common-lisp:cons "AwsIotAnalyticsParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jira-parameters))
      (common-lisp:list
       (common-lisp:cons "JiraParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maria-db-parameters))
      (common-lisp:list
       (common-lisp:cons "MariaDbParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'my-sql-parameters))
      (common-lisp:list
       (common-lisp:cons "MySqlParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oracle-parameters))
      (common-lisp:list
       (common-lisp:cons "OracleParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'postgre-sql-parameters))
      (common-lisp:list
       (common-lisp:cons "PostgreSqlParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'presto-parameters))
      (common-lisp:list
       (common-lisp:cons "PrestoParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rds-parameters))
      (common-lisp:list
       (common-lisp:cons "RdsParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift-parameters))
      (common-lisp:list
       (common-lisp:cons "RedshiftParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3parameters))
      (common-lisp:list
       (common-lisp:cons "S3Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-now-parameters))
      (common-lisp:list
       (common-lisp:cons "ServiceNowParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snowflake-parameters))
      (common-lisp:list
       (common-lisp:cons "SnowflakeParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spark-parameters))
      (common-lisp:list
       (common-lisp:cons "SparkParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sql-server-parameters))
      (common-lisp:list
       (common-lisp:cons "SqlServerParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'teradata-parameters))
      (common-lisp:list
       (common-lisp:cons "TeradataParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'twitter-parameters))
      (common-lisp:list
       (common-lisp:cons "TwitterParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amazon-open-search-parameters))
      (common-lisp:list
       (common-lisp:cons "AmazonOpenSearchParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exasol-parameters))
      (common-lisp:list
       (common-lisp:cons "ExasolParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'databricks-parameters))
      (common-lisp:list
       (common-lisp:cons "DatabricksParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-source-parameters-list ()
   '(trivial-types:proper-list data-source-parameters))
 (common-lisp:defun |make-data-source-parameters-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-source-parameters))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (data-source-search-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-search-filter-"))
   (operator (common-lisp:error ":operator is required") :type
    (common-lisp:or filter-operator common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or data-source-filter-attribute common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-source-search-filter
                    'make-data-source-search-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-search-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-search-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "Operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-search-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-source-search-filter-list ()
   '(trivial-types:proper-list data-source-search-filter))
 (common-lisp:defun |make-data-source-search-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-source-search-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (data-source-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-summary-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (data-source-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or data-source-type common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-source-summary 'make-data-source-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-source-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-source-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-source-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-source-summary-list ()
   '(trivial-types:proper-list data-source-summary))
 (common-lisp:defun |make-data-source-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-source-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-source-type () 'common-lisp:string)
(common-lisp:deftype database () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (databricks-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-databricks-parameters-"))
   (host (common-lisp:error ":host is required") :type
    (common-lisp:or host common-lisp:null))
   (port (common-lisp:error ":port is required") :type
    (common-lisp:or port common-lisp:null))
   (sql-endpoint-path (common-lisp:error ":sql-endpoint-path is required")
    :type (common-lisp:or sql-endpoint-path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'databricks-parameters 'make-databricks-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          databricks-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          databricks-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql-endpoint-path))
      (common-lisp:list
       (common-lisp:cons "SqlEndpointPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          databricks-parameters))
   common-lisp:nil))
(common-lisp:deftype date-aggregation-function () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (date-axis-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-date-axis-options-"))
   (missing-date-visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'date-axis-options 'make-date-axis-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input date-axis-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input date-axis-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'missing-date-visibility))
      (common-lisp:list
       (common-lisp:cons "MissingDateVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input date-axis-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (date-dimension-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-date-dimension-field-"))
   (field-id (common-lisp:error ":field-id is required") :type
    (common-lisp:or field-id common-lisp:null))
   (column (common-lisp:error ":column is required") :type
    (common-lisp:or column-identifier common-lisp:null))
   (date-granularity common-lisp:nil :type
    (common-lisp:or time-granularity common-lisp:null))
   (hierarchy-id common-lisp:nil :type
    (common-lisp:or hierarchy-id common-lisp:null))
   (format-configuration common-lisp:nil :type
    (common-lisp:or date-time-format-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'date-dimension-field 'make-date-dimension-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input date-dimension-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input date-dimension-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-granularity))
      (common-lisp:list
       (common-lisp:cons "DateGranularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-id))
      (common-lisp:list
       (common-lisp:cons "HierarchyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'format-configuration))
      (common-lisp:list
       (common-lisp:cons "FormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input date-dimension-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (date-measure-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-date-measure-field-"))
   (field-id (common-lisp:error ":field-id is required") :type
    (common-lisp:or field-id common-lisp:null))
   (column (common-lisp:error ":column is required") :type
    (common-lisp:or column-identifier common-lisp:null))
   (aggregation-function common-lisp:nil :type
    (common-lisp:or date-aggregation-function common-lisp:null))
   (format-configuration common-lisp:nil :type
    (common-lisp:or date-time-format-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'date-measure-field 'make-date-measure-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input date-measure-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input date-measure-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-function))
      (common-lisp:list
       (common-lisp:cons "AggregationFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'format-configuration))
      (common-lisp:list
       (common-lisp:cons "FormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input date-measure-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype date-time-default-value-list ()
   '(trivial-types:proper-list sensitive-timestamp))
 (common-lisp:defun |make-date-time-default-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sensitive-timestamp))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (date-time-default-values (:copier common-lisp:nil)
      (:conc-name "struct-shape-date-time-default-values-"))
   (dynamic-value common-lisp:nil :type
    (common-lisp:or dynamic-default-value common-lisp:null))
   (static-values common-lisp:nil :type
    (common-lisp:or date-time-default-value-list common-lisp:null))
   (rolling-date common-lisp:nil :type
    (common-lisp:or rolling-date-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'date-time-default-values 'make-date-time-default-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          date-time-default-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          date-time-default-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamic-value))
      (common-lisp:list
       (common-lisp:cons "DynamicValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-values))
      (common-lisp:list
       (common-lisp:cons "StaticValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rolling-date))
      (common-lisp:list
       (common-lisp:cons "RollingDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          date-time-default-values))
   common-lisp:nil))
(common-lisp:deftype date-time-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (date-time-format-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-date-time-format-configuration-"))
   (date-time-format common-lisp:nil :type
    (common-lisp:or date-time-format common-lisp:null))
   (null-value-format-configuration common-lisp:nil :type
    (common-lisp:or null-value-format-configuration common-lisp:null))
   (numeric-format-configuration common-lisp:nil :type
    (common-lisp:or numeric-format-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'date-time-format-configuration
                    'make-date-time-format-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          date-time-format-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          date-time-format-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-time-format))
      (common-lisp:list
       (common-lisp:cons "DateTimeFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'null-value-format-configuration))
      (common-lisp:list
       (common-lisp:cons "NullValueFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'numeric-format-configuration))
      (common-lisp:list
       (common-lisp:cons "NumericFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          date-time-format-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (date-time-hierarchy (:copier common-lisp:nil)
      (:conc-name "struct-shape-date-time-hierarchy-"))
   (hierarchy-id (common-lisp:error ":hierarchy-id is required") :type
    (common-lisp:or hierarchy-id common-lisp:null))
   (drill-down-filters common-lisp:nil :type
    (common-lisp:or drill-down-filter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'date-time-hierarchy 'make-date-time-hierarchy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input date-time-hierarchy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input date-time-hierarchy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-id))
      (common-lisp:list
       (common-lisp:cons "HierarchyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drill-down-filters))
      (common-lisp:list
       (common-lisp:cons "DrillDownFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input date-time-hierarchy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (date-time-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-date-time-parameter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or sensitive-timestamp-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'date-time-parameter 'make-date-time-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input date-time-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input date-time-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input date-time-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (date-time-parameter-declaration (:copier common-lisp:nil)
      (:conc-name "struct-shape-date-time-parameter-declaration-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or parameter-name common-lisp:null))
   (default-values common-lisp:nil :type
    (common-lisp:or date-time-default-values common-lisp:null))
   (time-granularity common-lisp:nil :type
    (common-lisp:or time-granularity common-lisp:null))
   (value-when-unset common-lisp:nil :type
    (common-lisp:or date-time-value-when-unset-configuration
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'date-time-parameter-declaration
                    'make-date-time-parameter-declaration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          date-time-parameter-declaration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          date-time-parameter-declaration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-values))
      (common-lisp:list
       (common-lisp:cons "DefaultValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-granularity))
      (common-lisp:list
       (common-lisp:cons "TimeGranularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-when-unset))
      (common-lisp:list
       (common-lisp:cons "ValueWhenUnset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          date-time-parameter-declaration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype date-time-parameter-list ()
   '(trivial-types:proper-list date-time-parameter))
 (common-lisp:defun |make-date-time-parameter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list date-time-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (date-time-picker-control-display-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-date-time-picker-control-display-options-"))
   (title-options common-lisp:nil :type
    (common-lisp:or label-options common-lisp:null))
   (date-time-format common-lisp:nil :type
    (common-lisp:or date-time-format common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'date-time-picker-control-display-options
                    'make-date-time-picker-control-display-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          date-time-picker-control-display-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          date-time-picker-control-display-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title-options))
      (common-lisp:list
       (common-lisp:cons "TitleOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-time-format))
      (common-lisp:list
       (common-lisp:cons "DateTimeFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          date-time-picker-control-display-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (date-time-value-when-unset-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-date-time-value-when-unset-configuration-"))
   (value-when-unset-option common-lisp:nil :type
    (common-lisp:or value-when-unset-option common-lisp:null))
   (custom-value common-lisp:nil :type
    (common-lisp:or sensitive-timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'date-time-value-when-unset-configuration
                    'make-date-time-value-when-unset-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          date-time-value-when-unset-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          date-time-value-when-unset-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-when-unset-option))
      (common-lisp:list
       (common-lisp:cons "ValueWhenUnsetOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-value))
      (common-lisp:list
       (common-lisp:cons "CustomValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          date-time-value-when-unset-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype decimal-default-value-list ()
   '(trivial-types:proper-list sensitive-double-object))
 (common-lisp:defun |make-decimal-default-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sensitive-double-object))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (decimal-default-values (:copier common-lisp:nil)
      (:conc-name "struct-shape-decimal-default-values-"))
   (dynamic-value common-lisp:nil :type
    (common-lisp:or dynamic-default-value common-lisp:null))
   (static-values common-lisp:nil :type
    (common-lisp:or decimal-default-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'decimal-default-values 'make-decimal-default-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decimal-default-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decimal-default-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamic-value))
      (common-lisp:list
       (common-lisp:cons "DynamicValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-values))
      (common-lisp:list
       (common-lisp:cons "StaticValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decimal-default-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (decimal-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-decimal-parameter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or sensitive-double-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'decimal-parameter 'make-decimal-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input decimal-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input decimal-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input decimal-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (decimal-parameter-declaration (:copier common-lisp:nil)
      (:conc-name "struct-shape-decimal-parameter-declaration-"))
   (parameter-value-type
    (common-lisp:error ":parameter-value-type is required") :type
    (common-lisp:or parameter-value-type common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or parameter-name common-lisp:null))
   (default-values common-lisp:nil :type
    (common-lisp:or decimal-default-values common-lisp:null))
   (value-when-unset common-lisp:nil :type
    (common-lisp:or decimal-value-when-unset-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'decimal-parameter-declaration
                    'make-decimal-parameter-declaration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decimal-parameter-declaration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decimal-parameter-declaration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-value-type))
      (common-lisp:list
       (common-lisp:cons "ParameterValueType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-values))
      (common-lisp:list
       (common-lisp:cons "DefaultValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-when-unset))
      (common-lisp:list
       (common-lisp:cons "ValueWhenUnset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decimal-parameter-declaration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype decimal-parameter-list ()
   '(trivial-types:proper-list decimal-parameter))
 (common-lisp:defun |make-decimal-parameter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list decimal-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype decimal-places () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (decimal-places-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-decimal-places-configuration-"))
   (decimal-places (common-lisp:error ":decimal-places is required") :type
    (common-lisp:or decimal-places common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'decimal-places-configuration
                    'make-decimal-places-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decimal-places-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decimal-places-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decimal-places))
      (common-lisp:list
       (common-lisp:cons "DecimalPlaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decimal-places-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (decimal-value-when-unset-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-decimal-value-when-unset-configuration-"))
   (value-when-unset-option common-lisp:nil :type
    (common-lisp:or value-when-unset-option common-lisp:null))
   (custom-value common-lisp:nil :type
    (common-lisp:or sensitive-double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'decimal-value-when-unset-configuration
                    'make-decimal-value-when-unset-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decimal-value-when-unset-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decimal-value-when-unset-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-when-unset-option))
      (common-lisp:list
       (common-lisp:cons "ValueWhenUnsetOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-value))
      (common-lisp:list
       (common-lisp:cons "CustomValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decimal-value-when-unset-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (default-free-form-layout-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-default-free-form-layout-configuration-"))
   (canvas-size-options (common-lisp:error ":canvas-size-options is required")
    :type
    (common-lisp:or free-form-layout-canvas-size-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'default-free-form-layout-configuration
                    'make-default-free-form-layout-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          default-free-form-layout-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          default-free-form-layout-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canvas-size-options))
      (common-lisp:list
       (common-lisp:cons "CanvasSizeOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          default-free-form-layout-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (default-grid-layout-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-default-grid-layout-configuration-"))
   (canvas-size-options (common-lisp:error ":canvas-size-options is required")
    :type (common-lisp:or grid-layout-canvas-size-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'default-grid-layout-configuration
                    'make-default-grid-layout-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          default-grid-layout-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          default-grid-layout-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canvas-size-options))
      (common-lisp:list
       (common-lisp:cons "CanvasSizeOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          default-grid-layout-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (default-interactive-layout-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-default-interactive-layout-configuration-"))
   (grid common-lisp:nil :type
    (common-lisp:or default-grid-layout-configuration common-lisp:null))
   (free-form common-lisp:nil :type
    (common-lisp:or default-free-form-layout-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'default-interactive-layout-configuration
                    'make-default-interactive-layout-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          default-interactive-layout-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          default-interactive-layout-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grid))
      (common-lisp:list
       (common-lisp:cons "Grid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'free-form))
      (common-lisp:list
       (common-lisp:cons "FreeForm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          default-interactive-layout-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (default-new-sheet-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-default-new-sheet-configuration-"))
   (interactive-layout-configuration common-lisp:nil :type
    (common-lisp:or default-interactive-layout-configuration common-lisp:null))
   (paginated-layout-configuration common-lisp:nil :type
    (common-lisp:or default-paginated-layout-configuration common-lisp:null))
   (sheet-content-type common-lisp:nil :type
    (common-lisp:or sheet-content-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'default-new-sheet-configuration
                    'make-default-new-sheet-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          default-new-sheet-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          default-new-sheet-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'interactive-layout-configuration))
      (common-lisp:list
       (common-lisp:cons "InteractiveLayoutConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'paginated-layout-configuration))
      (common-lisp:list
       (common-lisp:cons "PaginatedLayoutConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sheet-content-type))
      (common-lisp:list
       (common-lisp:cons "SheetContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          default-new-sheet-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (default-paginated-layout-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-default-paginated-layout-configuration-"))
   (section-based common-lisp:nil :type
    (common-lisp:or default-section-based-layout-configuration
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'default-paginated-layout-configuration
                    'make-default-paginated-layout-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          default-paginated-layout-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          default-paginated-layout-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'section-based))
      (common-lisp:list
       (common-lisp:cons "SectionBased"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          default-paginated-layout-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (default-section-based-layout-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-default-section-based-layout-configuration-"))
   (canvas-size-options (common-lisp:error ":canvas-size-options is required")
    :type
    (common-lisp:or section-based-layout-canvas-size-options
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'default-section-based-layout-configuration
                    'make-default-section-based-layout-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          default-section-based-layout-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          default-section-based-layout-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canvas-size-options))
      (common-lisp:list
       (common-lisp:cons "CanvasSizeOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          default-section-based-layout-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-account-customization-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-account-customization-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-account-customization-request
                    'make-delete-account-customization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-customization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-customization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-customization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-account-customization-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-account-customization-response-"))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-account-customization-response
                    'make-delete-account-customization-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-customization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-customization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-customization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-account-subscription-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-account-subscription-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-account-subscription-request
                    'make-delete-account-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-account-subscription-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-account-subscription-response-"))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-account-subscription-response
                    'make-delete-account-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-analysis-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-analysis-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (analysis-id (common-lisp:error ":analysis-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (recovery-window-in-days common-lisp:nil :type
    (common-lisp:or recovery-window-in-days common-lisp:null))
   (force-delete-without-recovery common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-analysis-request 'make-delete-analysis-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-analysis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-analysis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-analysis-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-analysis-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-analysis-response-"))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (analysis-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (deletion-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-analysis-response 'make-delete-analysis-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-analysis-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-analysis-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-id))
      (common-lisp:list
       (common-lisp:cons "AnalysisId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-time))
      (common-lisp:list
       (common-lisp:cons "DeletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-analysis-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dashboard-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dashboard-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (dashboard-id (common-lisp:error ":dashboard-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (version-number common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dashboard-request 'make-delete-dashboard-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dashboard-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dashboard-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dashboard-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dashboard-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dashboard-response-"))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (dashboard-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dashboard-response
                    'make-delete-dashboard-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dashboard-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dashboard-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-id))
      (common-lisp:list
       (common-lisp:cons "DashboardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dashboard-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-data-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-data-set-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (data-set-id (common-lisp:error ":data-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-data-set-request 'make-delete-data-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-data-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-data-set-response-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (data-set-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-data-set-response 'make-delete-data-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-data-source-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-data-source-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (data-source-id (common-lisp:error ":data-source-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-data-source-request
                    'make-delete-data-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-data-source-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-data-source-response-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (data-source-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-data-source-response
                    'make-delete-data-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-folder-membership-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-folder-membership-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (folder-id (common-lisp:error ":folder-id is required") :type
    (common-lisp:or restrictive-resource-id common-lisp:null))
   (member-id (common-lisp:error ":member-id is required") :type
    (common-lisp:or restrictive-resource-id common-lisp:null))
   (member-type (common-lisp:error ":member-type is required") :type
    (common-lisp:or member-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-folder-membership-request
                    'make-delete-folder-membership-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-membership-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-membership-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-membership-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-folder-membership-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-folder-membership-response-"))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-folder-membership-response
                    'make-delete-folder-membership-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-membership-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-membership-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-membership-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-folder-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-folder-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (folder-id (common-lisp:error ":folder-id is required") :type
    (common-lisp:or restrictive-resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-folder-request 'make-delete-folder-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-folder-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-folder-response-"))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (folder-id common-lisp:nil :type
    (common-lisp:or restrictive-resource-id common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-folder-response 'make-delete-folder-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-id))
      (common-lisp:list
       (common-lisp:cons "FolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-group-membership-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-group-membership-request-"))
   (member-name (common-lisp:error ":member-name is required") :type
    (common-lisp:or group-member-name common-lisp:null))
   (group-name (common-lisp:error ":group-name is required") :type
    (common-lisp:or group-name common-lisp:null))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-group-membership-request
                    'make-delete-group-membership-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-membership-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-membership-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-membership-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-group-membership-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-group-membership-response-"))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-group-membership-response
                    'make-delete-group-membership-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-membership-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-membership-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-membership-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-group-request-"))
   (group-name (common-lisp:error ":group-name is required") :type
    (common-lisp:or group-name common-lisp:null))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-group-request 'make-delete-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-group-response-"))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-group-response 'make-delete-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-iampolicy-assignment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-iampolicy-assignment-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (assignment-name (common-lisp:error ":assignment-name is required") :type
    (common-lisp:or iampolicy-assignment-name common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-iampolicy-assignment-request
                    'make-delete-iampolicy-assignment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-iampolicy-assignment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-iampolicy-assignment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-iampolicy-assignment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-iampolicy-assignment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-iampolicy-assignment-response-"))
   (assignment-name common-lisp:nil :type
    (common-lisp:or iampolicy-assignment-name common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-iampolicy-assignment-response
                    'make-delete-iampolicy-assignment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-iampolicy-assignment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-iampolicy-assignment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-name))
      (common-lisp:list
       (common-lisp:cons "AssignmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-iampolicy-assignment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-namespace-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-namespace-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-namespace-request 'make-delete-namespace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-namespace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-namespace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-namespace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-namespace-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-namespace-response-"))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-namespace-response
                    'make-delete-namespace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-namespace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-namespace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-namespace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-template-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-template-alias-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (template-id (common-lisp:error ":template-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (alias-name (common-lisp:error ":alias-name is required") :type
    (common-lisp:or alias-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-template-alias-request
                    'make-delete-template-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-template-alias-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-template-alias-response-"))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (template-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (alias-name common-lisp:nil :type
    (common-lisp:or alias-name common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-template-alias-response
                    'make-delete-template-alias-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-name))
      (common-lisp:list
       (common-lisp:cons "AliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-template-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (template-id (common-lisp:error ":template-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (version-number common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-template-request 'make-delete-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-template-response-"))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (template-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-template-response 'make-delete-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-theme-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-theme-alias-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (theme-id (common-lisp:error ":theme-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (alias-name (common-lisp:error ":alias-name is required") :type
    (common-lisp:or alias-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-theme-alias-request
                    'make-delete-theme-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-theme-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-theme-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-theme-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-theme-alias-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-theme-alias-response-"))
   (alias-name common-lisp:nil :type
    (common-lisp:or alias-name common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (theme-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-theme-alias-response
                    'make-delete-theme-alias-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-theme-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-theme-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-name))
      (common-lisp:list
       (common-lisp:cons "AliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-id))
      (common-lisp:list
       (common-lisp:cons "ThemeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-theme-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-theme-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-theme-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (theme-id (common-lisp:error ":theme-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (version-number common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-theme-request 'make-delete-theme-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-theme-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-theme-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-theme-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-theme-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-theme-response-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (theme-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-theme-response 'make-delete-theme-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-theme-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-theme-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-id))
      (common-lisp:list
       (common-lisp:cons "ThemeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-theme-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-user-by-principal-id-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-user-by-principal-id-request-"))
   (principal-id (common-lisp:error ":principal-id is required") :type
    (common-lisp:or string common-lisp:null))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-user-by-principal-id-request
                    'make-delete-user-by-principal-id-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-by-principal-id-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-by-principal-id-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-by-principal-id-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-user-by-principal-id-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-user-by-principal-id-response-"))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-user-by-principal-id-response
                    'make-delete-user-by-principal-id-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-by-principal-id-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-by-principal-id-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-by-principal-id-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-user-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or user-name common-lisp:null))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-user-request 'make-delete-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-user-response-"))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-user-response 'make-delete-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-response))
   common-lisp:nil))
(common-lisp:deftype delimiter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (describe-account-customization-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-account-customization-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or namespace common-lisp:null))
   (resolved common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-account-customization-request
                    'make-describe-account-customization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-customization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-customization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-customization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-account-customization-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-account-customization-response-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or namespace common-lisp:null))
   (account-customization common-lisp:nil :type
    (common-lisp:or account-customization common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-account-customization-response
                    'make-describe-account-customization-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-customization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-customization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "AwsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-customization))
      (common-lisp:list
       (common-lisp:cons "AccountCustomization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-customization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-account-settings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-account-settings-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-account-settings-request
                    'make-describe-account-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-account-settings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-account-settings-response-"))
   (account-settings common-lisp:nil :type
    (common-lisp:or account-settings common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-account-settings-response
                    'make-describe-account-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-settings))
      (common-lisp:list
       (common-lisp:cons "AccountSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-account-subscription-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-account-subscription-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-account-subscription-request
                    'make-describe-account-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-account-subscription-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-account-subscription-response-"))
   (account-info common-lisp:nil :type
    (common-lisp:or account-info common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-account-subscription-response
                    'make-describe-account-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-info))
      (common-lisp:list
       (common-lisp:cons "AccountInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-analysis-definition-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-analysis-definition-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (analysis-id (common-lisp:error ":analysis-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-analysis-definition-request
                    'make-describe-analysis-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-analysis-definition-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-analysis-definition-response-"))
   (analysis-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or analysis-name common-lisp:null))
   (errors common-lisp:nil :type
    (common-lisp:or analysis-error-list common-lisp:null))
   (resource-status common-lisp:nil :type
    (common-lisp:or resource-status common-lisp:null))
   (theme-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (definition common-lisp:nil :type
    (common-lisp:or analysis-definition common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-analysis-definition-response
                    'make-describe-analysis-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-id))
      (common-lisp:list
       (common-lisp:cons "AnalysisId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-status))
      (common-lisp:list
       (common-lisp:cons "ResourceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-arn))
      (common-lisp:list
       (common-lisp:cons "ThemeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-analysis-permissions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-analysis-permissions-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (analysis-id (common-lisp:error ":analysis-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-analysis-permissions-request
                    'make-describe-analysis-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-analysis-permissions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-analysis-permissions-response-"))
   (analysis-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (analysis-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or resource-permission-list common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-analysis-permissions-response
                    'make-describe-analysis-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-id))
      (common-lisp:list
       (common-lisp:cons "AnalysisId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-arn))
      (common-lisp:list
       (common-lisp:cons "AnalysisArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-analysis-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-analysis-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (analysis-id (common-lisp:error ":analysis-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-analysis-request
                    'make-describe-analysis-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-analysis-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-analysis-response-"))
   (analysis common-lisp:nil :type (common-lisp:or analysis common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-analysis-response
                    'make-describe-analysis-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis))
      (common-lisp:list
       (common-lisp:cons "Analysis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dashboard-definition-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dashboard-definition-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (dashboard-id (common-lisp:error ":dashboard-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (version-number common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null))
   (alias-name common-lisp:nil :type
    (common-lisp:or alias-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dashboard-definition-request
                    'make-describe-dashboard-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dashboard-definition-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dashboard-definition-response-"))
   (dashboard-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (errors common-lisp:nil :type
    (common-lisp:or dashboard-error-list common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or dashboard-name common-lisp:null))
   (resource-status common-lisp:nil :type
    (common-lisp:or resource-status common-lisp:null))
   (theme-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (definition common-lisp:nil :type
    (common-lisp:or dashboard-version-definition common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dashboard-publish-options common-lisp:nil :type
    (common-lisp:or dashboard-publish-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dashboard-definition-response
                    'make-describe-dashboard-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-id))
      (common-lisp:list
       (common-lisp:cons "DashboardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-status))
      (common-lisp:list
       (common-lisp:cons "ResourceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-arn))
      (common-lisp:list
       (common-lisp:cons "ThemeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dashboard-publish-options))
      (common-lisp:list
       (common-lisp:cons "DashboardPublishOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dashboard-permissions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dashboard-permissions-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (dashboard-id (common-lisp:error ":dashboard-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dashboard-permissions-request
                    'make-describe-dashboard-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dashboard-permissions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dashboard-permissions-response-"))
   (dashboard-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (dashboard-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or resource-permission-list common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (link-sharing-configuration common-lisp:nil :type
    (common-lisp:or link-sharing-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dashboard-permissions-response
                    'make-describe-dashboard-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-id))
      (common-lisp:list
       (common-lisp:cons "DashboardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-arn))
      (common-lisp:list
       (common-lisp:cons "DashboardArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'link-sharing-configuration))
      (common-lisp:list
       (common-lisp:cons "LinkSharingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dashboard-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dashboard-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (dashboard-id (common-lisp:error ":dashboard-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (version-number common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null))
   (alias-name common-lisp:nil :type
    (common-lisp:or alias-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dashboard-request
                    'make-describe-dashboard-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dashboard-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dashboard-response-"))
   (dashboard common-lisp:nil :type
    (common-lisp:or dashboard common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dashboard-response
                    'make-describe-dashboard-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard))
      (common-lisp:list
       (common-lisp:cons "Dashboard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-data-set-permissions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-data-set-permissions-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (data-set-id (common-lisp:error ":data-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-data-set-permissions-request
                    'make-describe-data-set-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-set-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-set-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-set-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-data-set-permissions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-data-set-permissions-response-"))
   (data-set-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (data-set-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or resource-permission-list common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-data-set-permissions-response
                    'make-describe-data-set-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-set-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-set-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-arn))
      (common-lisp:list
       (common-lisp:cons "DataSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-set-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-data-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-data-set-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (data-set-id (common-lisp:error ":data-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-data-set-request
                    'make-describe-data-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-data-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-data-set-response-"))
   (data-set common-lisp:nil :type (common-lisp:or data-set common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-data-set-response
                    'make-describe-data-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set))
      (common-lisp:list
       (common-lisp:cons "DataSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-data-source-permissions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-data-source-permissions-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (data-source-id (common-lisp:error ":data-source-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-data-source-permissions-request
                    'make-describe-data-source-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-source-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-source-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-source-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-data-source-permissions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-data-source-permissions-response-"))
   (data-source-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (data-source-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or resource-permission-list common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-data-source-permissions-response
                    'make-describe-data-source-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-source-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-source-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-arn))
      (common-lisp:list
       (common-lisp:cons "DataSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-source-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-data-source-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-data-source-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (data-source-id (common-lisp:error ":data-source-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-data-source-request
                    'make-describe-data-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-data-source-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-data-source-response-"))
   (data-source common-lisp:nil :type
    (common-lisp:or data-source common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-data-source-response
                    'make-describe-data-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-folder-permissions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-folder-permissions-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (folder-id (common-lisp:error ":folder-id is required") :type
    (common-lisp:or restrictive-resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-folder-permissions-request
                    'make-describe-folder-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-folder-permissions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-folder-permissions-response-"))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (folder-id common-lisp:nil :type
    (common-lisp:or restrictive-resource-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or resource-permission-list common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-folder-permissions-response
                    'make-describe-folder-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-id))
      (common-lisp:list
       (common-lisp:cons "FolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-folder-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-folder-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (folder-id (common-lisp:error ":folder-id is required") :type
    (common-lisp:or restrictive-resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-folder-request 'make-describe-folder-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-folder-resolved-permissions-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-folder-resolved-permissions-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (folder-id (common-lisp:error ":folder-id is required") :type
    (common-lisp:or restrictive-resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-folder-resolved-permissions-request
                    'make-describe-folder-resolved-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-resolved-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-resolved-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-resolved-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-folder-resolved-permissions-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-folder-resolved-permissions-response-"))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (folder-id common-lisp:nil :type
    (common-lisp:or restrictive-resource-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or resource-permission-list common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-folder-resolved-permissions-response
                    'make-describe-folder-resolved-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-resolved-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-resolved-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-id))
      (common-lisp:list
       (common-lisp:cons "FolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-resolved-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-folder-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-folder-response-"))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (folder common-lisp:nil :type (common-lisp:or folder common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-folder-response 'make-describe-folder-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder))
      (common-lisp:list
       (common-lisp:cons "Folder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-group-membership-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-group-membership-request-"))
   (member-name (common-lisp:error ":member-name is required") :type
    (common-lisp:or group-member-name common-lisp:null))
   (group-name (common-lisp:error ":group-name is required") :type
    (common-lisp:or group-name common-lisp:null))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-group-membership-request
                    'make-describe-group-membership-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-membership-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-membership-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-membership-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-group-membership-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-group-membership-response-"))
   (group-member common-lisp:nil :type
    (common-lisp:or group-member common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-group-membership-response
                    'make-describe-group-membership-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-membership-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-membership-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-member))
      (common-lisp:list
       (common-lisp:cons "GroupMember"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-membership-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-group-request-"))
   (group-name (common-lisp:error ":group-name is required") :type
    (common-lisp:or group-name common-lisp:null))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-group-request 'make-describe-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-group-response-"))
   (group common-lisp:nil :type (common-lisp:or group common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-group-response 'make-describe-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "Group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-iampolicy-assignment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-iampolicy-assignment-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (assignment-name (common-lisp:error ":assignment-name is required") :type
    (common-lisp:or iampolicy-assignment-name common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-iampolicy-assignment-request
                    'make-describe-iampolicy-assignment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-iampolicy-assignment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-iampolicy-assignment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-iampolicy-assignment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-iampolicy-assignment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-iampolicy-assignment-response-"))
   (iampolicy-assignment common-lisp:nil :type
    (common-lisp:or iampolicy-assignment common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-iampolicy-assignment-response
                    'make-describe-iampolicy-assignment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-iampolicy-assignment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-iampolicy-assignment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iampolicy-assignment))
      (common-lisp:list
       (common-lisp:cons "IAMPolicyAssignment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-iampolicy-assignment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-ingestion-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-ingestion-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (data-set-id (common-lisp:error ":data-set-id is required") :type
    (common-lisp:or string common-lisp:null))
   (ingestion-id (common-lisp:error ":ingestion-id is required") :type
    (common-lisp:or ingestion-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-ingestion-request
                    'make-describe-ingestion-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-ingestion-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-ingestion-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-ingestion-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-ingestion-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-ingestion-response-"))
   (ingestion common-lisp:nil :type
    (common-lisp:or ingestion common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-ingestion-response
                    'make-describe-ingestion-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-ingestion-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-ingestion-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion))
      (common-lisp:list
       (common-lisp:cons "Ingestion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-ingestion-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-ip-restriction-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-ip-restriction-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-ip-restriction-request
                    'make-describe-ip-restriction-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-ip-restriction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-ip-restriction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-ip-restriction-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-ip-restriction-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-ip-restriction-response-"))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (ip-restriction-rule-map common-lisp:nil :type
    (common-lisp:or ip-restriction-rule-map common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-ip-restriction-response
                    'make-describe-ip-restriction-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-ip-restriction-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-ip-restriction-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "AwsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ip-restriction-rule-map))
      (common-lisp:list
       (common-lisp:cons "IpRestrictionRuleMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-ip-restriction-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-namespace-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-namespace-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-namespace-request
                    'make-describe-namespace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-namespace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-namespace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-namespace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-namespace-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-namespace-response-"))
   (namespace common-lisp:nil :type
    (common-lisp:or namespace-info-v2 common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-namespace-response
                    'make-describe-namespace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-namespace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-namespace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-namespace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-template-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-template-alias-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (template-id (common-lisp:error ":template-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (alias-name (common-lisp:error ":alias-name is required") :type
    (common-lisp:or alias-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-template-alias-request
                    'make-describe-template-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-template-alias-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-template-alias-response-"))
   (template-alias common-lisp:nil :type
    (common-lisp:or template-alias common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-template-alias-response
                    'make-describe-template-alias-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-alias))
      (common-lisp:list
       (common-lisp:cons "TemplateAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-template-definition-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-template-definition-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (template-id (common-lisp:error ":template-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (version-number common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null))
   (alias-name common-lisp:nil :type
    (common-lisp:or alias-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-template-definition-request
                    'make-describe-template-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-template-definition-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-template-definition-response-"))
   (name common-lisp:nil :type (common-lisp:or template-name common-lisp:null))
   (template-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (errors common-lisp:nil :type
    (common-lisp:or template-error-list common-lisp:null))
   (resource-status common-lisp:nil :type
    (common-lisp:or resource-status common-lisp:null))
   (theme-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (definition common-lisp:nil :type
    (common-lisp:or template-version-definition common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-template-definition-response
                    'make-describe-template-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-status))
      (common-lisp:list
       (common-lisp:cons "ResourceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-arn))
      (common-lisp:list
       (common-lisp:cons "ThemeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-template-permissions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-template-permissions-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (template-id (common-lisp:error ":template-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-template-permissions-request
                    'make-describe-template-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-template-permissions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-template-permissions-response-"))
   (template-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (template-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or resource-permission-list common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-template-permissions-response
                    'make-describe-template-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-template-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (template-id (common-lisp:error ":template-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (version-number common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null))
   (alias-name common-lisp:nil :type
    (common-lisp:or alias-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-template-request
                    'make-describe-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-template-response-"))
   (template common-lisp:nil :type (common-lisp:or template common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-template-response
                    'make-describe-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template))
      (common-lisp:list
       (common-lisp:cons "Template"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-theme-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-theme-alias-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (theme-id (common-lisp:error ":theme-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (alias-name (common-lisp:error ":alias-name is required") :type
    (common-lisp:or alias-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-theme-alias-request
                    'make-describe-theme-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-theme-alias-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-theme-alias-response-"))
   (theme-alias common-lisp:nil :type
    (common-lisp:or theme-alias common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-theme-alias-response
                    'make-describe-theme-alias-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-alias))
      (common-lisp:list
       (common-lisp:cons "ThemeAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-theme-permissions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-theme-permissions-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (theme-id (common-lisp:error ":theme-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-theme-permissions-request
                    'make-describe-theme-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-theme-permissions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-theme-permissions-response-"))
   (theme-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (theme-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or resource-permission-list common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-theme-permissions-response
                    'make-describe-theme-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-id))
      (common-lisp:list
       (common-lisp:cons "ThemeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-arn))
      (common-lisp:list
       (common-lisp:cons "ThemeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-theme-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-theme-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-and-account-id common-lisp:null))
   (theme-id (common-lisp:error ":theme-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (version-number common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null))
   (alias-name common-lisp:nil :type
    (common-lisp:or alias-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-theme-request 'make-describe-theme-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-theme-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-theme-response-"))
   (theme common-lisp:nil :type (common-lisp:or theme common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-theme-response 'make-describe-theme-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme))
      (common-lisp:list
       (common-lisp:cons "Theme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-user-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or user-name common-lisp:null))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-user-request 'make-describe-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-user-response-"))
   (user common-lisp:nil :type (common-lisp:or user common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-user-response 'make-describe-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (destination-parameter-value-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-destination-parameter-value-configuration-"))
   (custom-values-configuration common-lisp:nil :type
    (common-lisp:or custom-values-configuration common-lisp:null))
   (select-all-value-options common-lisp:nil :type
    (common-lisp:or select-all-value-options common-lisp:null))
   (source-parameter-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-field common-lisp:nil :type
    (common-lisp:or field-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'destination-parameter-value-configuration
                    'make-destination-parameter-value-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          destination-parameter-value-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          destination-parameter-value-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-values-configuration))
      (common-lisp:list
       (common-lisp:cons "CustomValuesConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'select-all-value-options))
      (common-lisp:list
       (common-lisp:cons "SelectAllValueOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-parameter-name))
      (common-lisp:list
       (common-lisp:cons "SourceParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-field))
      (common-lisp:list
       (common-lisp:cons "SourceField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          destination-parameter-value-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dimension-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-dimension-field-"))
   (numerical-dimension-field common-lisp:nil :type
    (common-lisp:or numerical-dimension-field common-lisp:null))
   (categorical-dimension-field common-lisp:nil :type
    (common-lisp:or categorical-dimension-field common-lisp:null))
   (date-dimension-field common-lisp:nil :type
    (common-lisp:or date-dimension-field common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dimension-field 'make-dimension-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dimension-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dimension-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'numerical-dimension-field))
      (common-lisp:list
       (common-lisp:cons "NumericalDimensionField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'categorical-dimension-field))
      (common-lisp:list
       (common-lisp:cons "CategoricalDimensionField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'date-dimension-field))
      (common-lisp:list
       (common-lisp:cons "DateDimensionField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dimension-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dimension-field-list ()
   '(trivial-types:proper-list dimension-field))
 (common-lisp:defun |make-dimension-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype domain () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition domain-not-whitelisted-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       domain-not-whitelisted-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       domain-not-whitelisted-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'domain-not-whitelisted-exception
                    'domain-not-whitelisted-exception-message
                    'domain-not-whitelisted-exception-request-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (donut-center-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-donut-center-options-"))
   (label-visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'donut-center-options 'make-donut-center-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input donut-center-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input donut-center-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-visibility))
      (common-lisp:list
       (common-lisp:cons "LabelVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input donut-center-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (donut-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-donut-options-"))
   (arc-options common-lisp:nil :type
    (common-lisp:or arc-options common-lisp:null))
   (donut-center-options common-lisp:nil :type
    (common-lisp:or donut-center-options common-lisp:null)))
 (common-lisp:export (common-lisp:list 'donut-options 'make-donut-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input donut-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input donut-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arc-options))
      (common-lisp:list
       (common-lisp:cons "ArcOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'donut-center-options))
      (common-lisp:list
       (common-lisp:cons "DonutCenterOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input donut-options))
   common-lisp:nil))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (drill-down-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-drill-down-filter-"))
   (numeric-equality-filter common-lisp:nil :type
    (common-lisp:or numeric-equality-drill-down-filter common-lisp:null))
   (category-filter common-lisp:nil :type
    (common-lisp:or category-drill-down-filter common-lisp:null))
   (time-range-filter common-lisp:nil :type
    (common-lisp:or time-range-drill-down-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'drill-down-filter 'make-drill-down-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input drill-down-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input drill-down-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'numeric-equality-filter))
      (common-lisp:list
       (common-lisp:cons "NumericEqualityFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-filter))
      (common-lisp:list
       (common-lisp:cons "CategoryFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-range-filter))
      (common-lisp:list
       (common-lisp:cons "TimeRangeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input drill-down-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype drill-down-filter-list ()
   '(trivial-types:proper-list drill-down-filter))
 (common-lisp:defun |make-drill-down-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list drill-down-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (drop-down-control-display-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-drop-down-control-display-options-"))
   (select-all-options common-lisp:nil :type
    (common-lisp:or list-control-select-all-options common-lisp:null))
   (title-options common-lisp:nil :type
    (common-lisp:or label-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'drop-down-control-display-options
                    'make-drop-down-control-display-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          drop-down-control-display-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          drop-down-control-display-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-all-options))
      (common-lisp:list
       (common-lisp:cons "SelectAllOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title-options))
      (common-lisp:list
       (common-lisp:cons "TitleOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          drop-down-control-display-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dynamic-default-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-dynamic-default-value-"))
   (user-name-column common-lisp:nil :type
    (common-lisp:or column-identifier common-lisp:null))
   (group-name-column common-lisp:nil :type
    (common-lisp:or column-identifier common-lisp:null))
   (default-value-column
    (common-lisp:error ":default-value-column is required") :type
    (common-lisp:or column-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dynamic-default-value 'make-dynamic-default-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dynamic-default-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dynamic-default-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name-column))
      (common-lisp:list
       (common-lisp:cons "UserNameColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name-column))
      (common-lisp:list
       (common-lisp:cons "GroupNameColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-value-column))
      (common-lisp:list
       (common-lisp:cons "DefaultValueColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dynamic-default-value))
   common-lisp:nil))
(common-lisp:deftype edition () 'common-lisp:string)
(common-lisp:deftype embedding-identity-type () 'common-lisp:string)
(common-lisp:deftype embedding-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (empty-visual (:copier common-lisp:nil)
      (:conc-name "struct-shape-empty-visual-"))
   (visual-id (common-lisp:error ":visual-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (data-set-identifier (common-lisp:error ":data-set-identifier is required")
    :type (common-lisp:or data-set-identifier common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or visual-custom-action-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'empty-visual 'make-empty-visual))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input empty-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input empty-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-identifier))
      (common-lisp:list
       (common-lisp:cons "DataSetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input empty-visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (entity (:copier common-lisp:nil) (:conc-name "struct-shape-entity-"))
   (path common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'entity 'make-entity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype entity-list () '(trivial-types:proper-list entity))
 (common-lisp:defun |make-entity-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity))
   aws-sdk/generator/shape::members))
(common-lisp:deftype entry-path () 'common-lisp:string)
(common-lisp:deftype entry-point () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (error-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-error-info-"))
   (type common-lisp:nil :type
    (common-lisp:or ingestion-error-type common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'error-info 'make-error-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (exasol-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-exasol-parameters-"))
   (host (common-lisp:error ":host is required") :type
    (common-lisp:or host common-lisp:null))
   (port (common-lisp:error ":port is required") :type
    (common-lisp:or port common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'exasol-parameters 'make-exasol-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input exasol-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input exasol-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input exasol-parameters))
   common-lisp:nil))
(common-lisp:deftype exception-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (exclude-period-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-exclude-period-configuration-"))
   (amount (common-lisp:error ":amount is required") :type
    (common-lisp:or integer common-lisp:null))
   (granularity (common-lisp:error ":granularity is required") :type
    (common-lisp:or time-granularity common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or widget-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'exclude-period-configuration
                    'make-exclude-period-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          exclude-period-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          exclude-period-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amount))
      (common-lisp:list
       (common-lisp:cons "Amount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularity))
      (common-lisp:list
       (common-lisp:cons "Granularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          exclude-period-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (explicit-hierarchy (:copier common-lisp:nil)
      (:conc-name "struct-shape-explicit-hierarchy-"))
   (hierarchy-id (common-lisp:error ":hierarchy-id is required") :type
    (common-lisp:or hierarchy-id common-lisp:null))
   (columns (common-lisp:error ":columns is required") :type
    (common-lisp:or explicit-hierarchy-column-list common-lisp:null))
   (drill-down-filters common-lisp:nil :type
    (common-lisp:or drill-down-filter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'explicit-hierarchy 'make-explicit-hierarchy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input explicit-hierarchy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input explicit-hierarchy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-id))
      (common-lisp:list
       (common-lisp:cons "HierarchyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "Columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drill-down-filters))
      (common-lisp:list
       (common-lisp:cons "DrillDownFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input explicit-hierarchy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype explicit-hierarchy-column-list ()
   '(trivial-types:proper-list column-identifier))
 (common-lisp:defun |make-explicit-hierarchy-column-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (export-hidden-fields-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-hidden-fields-option-"))
   (availability-status common-lisp:nil :type
    (common-lisp:or dashboard-behavior common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-hidden-fields-option
                    'make-export-hidden-fields-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-hidden-fields-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-hidden-fields-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-status))
      (common-lisp:list
       (common-lisp:cons "AvailabilityStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-hidden-fields-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (export-to-csvoption (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-to-csvoption-"))
   (availability-status common-lisp:nil :type
    (common-lisp:or dashboard-behavior common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-to-csvoption 'make-export-to-csvoption))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-to-csvoption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-to-csvoption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-status))
      (common-lisp:list
       (common-lisp:cons "AvailabilityStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-to-csvoption))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (export-with-hidden-fields-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-with-hidden-fields-option-"))
   (availability-status common-lisp:nil :type
    (common-lisp:or dashboard-behavior common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-with-hidden-fields-option
                    'make-export-with-hidden-fields-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-with-hidden-fields-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-with-hidden-fields-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-status))
      (common-lisp:list
       (common-lisp:cons "AvailabilityStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-with-hidden-fields-option))
   common-lisp:nil))
(common-lisp:deftype expression () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (field-based-tooltip (:copier common-lisp:nil)
      (:conc-name "struct-shape-field-based-tooltip-"))
   (aggregation-visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (tooltip-title-type common-lisp:nil :type
    (common-lisp:or tooltip-title-type common-lisp:null))
   (tooltip-fields common-lisp:nil :type
    (common-lisp:or tooltip-item-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'field-based-tooltip 'make-field-based-tooltip))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-based-tooltip))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-based-tooltip))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-visibility))
      (common-lisp:list
       (common-lisp:cons "AggregationVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip-title-type))
      (common-lisp:list
       (common-lisp:cons "TooltipTitleType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip-fields))
      (common-lisp:list
       (common-lisp:cons "TooltipFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-based-tooltip))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (field-folder (:copier common-lisp:nil)
      (:conc-name "struct-shape-field-folder-"))
   (description common-lisp:nil :type
    (common-lisp:or field-folder-description common-lisp:null))
   (columns common-lisp:nil :type
    (common-lisp:or folder-column-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'field-folder 'make-field-folder))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-folder))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-folder))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-folder))
   common-lisp:nil))
(common-lisp:deftype field-folder-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype field-folder-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-field-folder-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype field-folder-path () 'common-lisp:string)
(common-lisp:deftype field-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (field-label-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-field-label-type-"))
   (field-id common-lisp:nil :type (common-lisp:or field-id common-lisp:null))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'field-label-type 'make-field-label-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-label-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-label-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-label-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype field-order-list ()
   '(trivial-types:proper-list field-id))
 (common-lisp:defun |make-field-order-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (field-series-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-field-series-item-"))
   (field-id (common-lisp:error ":field-id is required") :type
    (common-lisp:or field-id common-lisp:null))
   (axis-binding (common-lisp:error ":axis-binding is required") :type
    (common-lisp:or axis-binding common-lisp:null))
   (settings common-lisp:nil :type
    (common-lisp:or line-chart-series-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'field-series-item 'make-field-series-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-series-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-series-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'axis-binding))
      (common-lisp:list
       (common-lisp:cons "AxisBinding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-series-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (field-sort (:copier common-lisp:nil)
      (:conc-name "struct-shape-field-sort-"))
   (field-id (common-lisp:error ":field-id is required") :type
    (common-lisp:or field-id common-lisp:null))
   (direction (common-lisp:error ":direction is required") :type
    (common-lisp:or sort-direction common-lisp:null)))
 (common-lisp:export (common-lisp:list 'field-sort 'make-field-sort))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-sort))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-sort))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'direction))
      (common-lisp:list
       (common-lisp:cons "Direction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-sort))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (field-sort-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-field-sort-options-"))
   (field-sort common-lisp:nil :type
    (common-lisp:or field-sort common-lisp:null))
   (column-sort common-lisp:nil :type
    (common-lisp:or column-sort common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'field-sort-options 'make-field-sort-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-sort-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-sort-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-sort))
      (common-lisp:list
       (common-lisp:cons "FieldSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-sort))
      (common-lisp:list
       (common-lisp:cons "ColumnSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-sort-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype field-sort-options-list ()
   '(trivial-types:proper-list field-sort-options))
 (common-lisp:defun |make-field-sort-options-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-sort-options))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (field-tooltip-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-field-tooltip-item-"))
   (field-id (common-lisp:error ":field-id is required") :type
    (common-lisp:or field-id common-lisp:null))
   (label common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'field-tooltip-item 'make-field-tooltip-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-tooltip-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-tooltip-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "Label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-tooltip-item))
   common-lisp:nil))
(common-lisp:deftype field-value () 'common-lisp:string)
(common-lisp:deftype file-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (filled-map-aggregated-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-filled-map-aggregated-field-wells-"))
   (geospatial common-lisp:nil :type
    (common-lisp:or filled-map-dimension-field-list common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or filled-map-measure-field-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'filled-map-aggregated-field-wells
                    'make-filled-map-aggregated-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geospatial))
      (common-lisp:list
       (common-lisp:cons "Geospatial"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (filled-map-conditional-formatting (:copier common-lisp:nil)
      (:conc-name "struct-shape-filled-map-conditional-formatting-"))
   (conditional-formatting-options
    (common-lisp:error ":conditional-formatting-options is required") :type
    (common-lisp:or filled-map-conditional-formatting-option-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'filled-map-conditional-formatting
                    'make-filled-map-conditional-formatting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-conditional-formatting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-conditional-formatting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-formatting-options))
      (common-lisp:list
       (common-lisp:cons "ConditionalFormattingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-conditional-formatting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (filled-map-conditional-formatting-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-filled-map-conditional-formatting-option-"))
   (shape (common-lisp:error ":shape is required") :type
    (common-lisp:or filled-map-shape-conditional-formatting common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'filled-map-conditional-formatting-option
                    'make-filled-map-conditional-formatting-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-conditional-formatting-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-conditional-formatting-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shape))
      (common-lisp:list
       (common-lisp:cons "Shape"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-conditional-formatting-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filled-map-conditional-formatting-option-list ()
   '(trivial-types:proper-list filled-map-conditional-formatting-option))
 (common-lisp:defun |make-filled-map-conditional-formatting-option-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            filled-map-conditional-formatting-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (filled-map-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-filled-map-configuration-"))
   (field-wells common-lisp:nil :type
    (common-lisp:or filled-map-field-wells common-lisp:null))
   (sort-configuration common-lisp:nil :type
    (common-lisp:or filled-map-sort-configuration common-lisp:null))
   (legend common-lisp:nil :type
    (common-lisp:or legend-options common-lisp:null))
   (tooltip common-lisp:nil :type
    (common-lisp:or tooltip-options common-lisp:null))
   (window-options common-lisp:nil :type
    (common-lisp:or geospatial-window-options common-lisp:null))
   (map-style-options common-lisp:nil :type
    (common-lisp:or geospatial-map-style-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'filled-map-configuration 'make-filled-map-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legend))
      (common-lisp:list
       (common-lisp:cons "Legend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip))
      (common-lisp:list
       (common-lisp:cons "Tooltip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-options))
      (common-lisp:list
       (common-lisp:cons "WindowOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-style-options))
      (common-lisp:list
       (common-lisp:cons "MapStyleOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filled-map-dimension-field-list ()
   '(trivial-types:proper-list dimension-field))
 (common-lisp:defun |make-filled-map-dimension-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (filled-map-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-filled-map-field-wells-"))
   (filled-map-aggregated-field-wells common-lisp:nil :type
    (common-lisp:or filled-map-aggregated-field-wells common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'filled-map-field-wells 'make-filled-map-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'filled-map-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "FilledMapAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filled-map-measure-field-list ()
   '(trivial-types:proper-list measure-field))
 (common-lisp:defun |make-filled-map-measure-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list measure-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (filled-map-shape-conditional-formatting (:copier common-lisp:nil)
      (:conc-name "struct-shape-filled-map-shape-conditional-formatting-"))
   (field-id (common-lisp:error ":field-id is required") :type
    (common-lisp:or field-id common-lisp:null))
   (format common-lisp:nil :type
    (common-lisp:or shape-conditional-format common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'filled-map-shape-conditional-formatting
                    'make-filled-map-shape-conditional-formatting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-shape-conditional-formatting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-shape-conditional-formatting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-shape-conditional-formatting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (filled-map-sort-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-filled-map-sort-configuration-"))
   (category-sort common-lisp:nil :type
    (common-lisp:or field-sort-options-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'filled-map-sort-configuration
                    'make-filled-map-sort-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-sort))
      (common-lisp:list
       (common-lisp:cons "CategorySort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-sort-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (filled-map-visual (:copier common-lisp:nil)
      (:conc-name "struct-shape-filled-map-visual-"))
   (visual-id (common-lisp:error ":visual-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or visual-title-label-options common-lisp:null))
   (subtitle common-lisp:nil :type
    (common-lisp:or visual-subtitle-label-options common-lisp:null))
   (chart-configuration common-lisp:nil :type
    (common-lisp:or filled-map-configuration common-lisp:null))
   (conditional-formatting common-lisp:nil :type
    (common-lisp:or filled-map-conditional-formatting common-lisp:null))
   (column-hierarchies common-lisp:nil :type
    (common-lisp:or column-hierarchy-list common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or visual-custom-action-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'filled-map-visual 'make-filled-map-visual))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filled-map-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filled-map-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-formatting))
      (common-lisp:list
       (common-lisp:cons "ConditionalFormatting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-hierarchies))
      (common-lisp:list
       (common-lisp:cons "ColumnHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filled-map-visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (filter (:copier common-lisp:nil) (:conc-name "struct-shape-filter-"))
   (category-filter common-lisp:nil :type
    (common-lisp:or category-filter common-lisp:null))
   (numeric-range-filter common-lisp:nil :type
    (common-lisp:or numeric-range-filter common-lisp:null))
   (numeric-equality-filter common-lisp:nil :type
    (common-lisp:or numeric-equality-filter common-lisp:null))
   (time-equality-filter common-lisp:nil :type
    (common-lisp:or time-equality-filter common-lisp:null))
   (time-range-filter common-lisp:nil :type
    (common-lisp:or time-range-filter common-lisp:null))
   (relative-dates-filter common-lisp:nil :type
    (common-lisp:or relative-dates-filter common-lisp:null))
   (top-bottom-filter common-lisp:nil :type
    (common-lisp:or top-bottom-filter common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-filter))
      (common-lisp:list
       (common-lisp:cons "CategoryFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'numeric-range-filter))
      (common-lisp:list
       (common-lisp:cons "NumericRangeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'numeric-equality-filter))
      (common-lisp:list
       (common-lisp:cons "NumericEqualityFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-equality-filter))
      (common-lisp:list
       (common-lisp:cons "TimeEqualityFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-range-filter))
      (common-lisp:list
       (common-lisp:cons "TimeRangeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relative-dates-filter))
      (common-lisp:list
       (common-lisp:cons "RelativeDatesFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'top-bottom-filter))
      (common-lisp:list
       (common-lisp:cons "TopBottomFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (filter-control (:copier common-lisp:nil)
      (:conc-name "struct-shape-filter-control-"))
   (date-time-picker common-lisp:nil :type
    (common-lisp:or filter-date-time-picker-control common-lisp:null))
   (list common-lisp:nil :type
    (common-lisp:or filter-list-control common-lisp:null))
   (dropdown common-lisp:nil :type
    (common-lisp:or filter-drop-down-control common-lisp:null))
   (text-field common-lisp:nil :type
    (common-lisp:or filter-text-field-control common-lisp:null))
   (text-area common-lisp:nil :type
    (common-lisp:or filter-text-area-control common-lisp:null))
   (slider common-lisp:nil :type
    (common-lisp:or filter-slider-control common-lisp:null))
   (relative-date-time common-lisp:nil :type
    (common-lisp:or filter-relative-date-time-control common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filter-control 'make-filter-control))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-time-picker))
      (common-lisp:list
       (common-lisp:cons "DateTimePicker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list))
      (common-lisp:list
       (common-lisp:cons "List"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dropdown))
      (common-lisp:list
       (common-lisp:cons "Dropdown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-field))
      (common-lisp:list
       (common-lisp:cons "TextField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-area))
      (common-lisp:list
       (common-lisp:cons "TextArea"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slider))
      (common-lisp:list
       (common-lisp:cons "Slider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relative-date-time))
      (common-lisp:list
       (common-lisp:cons "RelativeDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-control-list ()
   '(trivial-types:proper-list filter-control))
 (common-lisp:defun |make-filter-control-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-control))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (filter-date-time-picker-control (:copier common-lisp:nil)
      (:conc-name "struct-shape-filter-date-time-picker-control-"))
   (filter-control-id (common-lisp:error ":filter-control-id is required")
    :type (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or sheet-control-title common-lisp:null))
   (source-filter-id (common-lisp:error ":source-filter-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (display-options common-lisp:nil :type
    (common-lisp:or date-time-picker-control-display-options common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or sheet-control-date-time-picker-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'filter-date-time-picker-control
                    'make-filter-date-time-picker-control))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filter-date-time-picker-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filter-date-time-picker-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-control-id))
      (common-lisp:list
       (common-lisp:cons "FilterControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-filter-id))
      (common-lisp:list
       (common-lisp:cons "SourceFilterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-options))
      (common-lisp:list
       (common-lisp:cons "DisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filter-date-time-picker-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (filter-drop-down-control (:copier common-lisp:nil)
      (:conc-name "struct-shape-filter-drop-down-control-"))
   (filter-control-id (common-lisp:error ":filter-control-id is required")
    :type (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or sheet-control-title common-lisp:null))
   (source-filter-id (common-lisp:error ":source-filter-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (display-options common-lisp:nil :type
    (common-lisp:or drop-down-control-display-options common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or sheet-control-list-type common-lisp:null))
   (selectable-values common-lisp:nil :type
    (common-lisp:or filter-selectable-values common-lisp:null))
   (cascading-control-configuration common-lisp:nil :type
    (common-lisp:or cascading-control-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'filter-drop-down-control 'make-filter-drop-down-control))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filter-drop-down-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filter-drop-down-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-control-id))
      (common-lisp:list
       (common-lisp:cons "FilterControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-filter-id))
      (common-lisp:list
       (common-lisp:cons "SourceFilterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-options))
      (common-lisp:list
       (common-lisp:cons "DisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selectable-values))
      (common-lisp:list
       (common-lisp:cons "SelectableValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cascading-control-configuration))
      (common-lisp:list
       (common-lisp:cons "CascadingControlConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filter-drop-down-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (filter-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-filter-group-"))
   (filter-group-id (common-lisp:error ":filter-group-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (filters (common-lisp:error ":filters is required") :type
    (common-lisp:or filter-list common-lisp:null))
   (scope-configuration (common-lisp:error ":scope-configuration is required")
    :type (common-lisp:or filter-scope-configuration common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or widget-status common-lisp:null))
   (cross-dataset (common-lisp:error ":cross-dataset is required") :type
    (common-lisp:or cross-dataset-types common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filter-group 'make-filter-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-group-id))
      (common-lisp:list
       (common-lisp:cons "FilterGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope-configuration))
      (common-lisp:list
       (common-lisp:cons "ScopeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cross-dataset))
      (common-lisp:list
       (common-lisp:cons "CrossDataset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-group-list ()
   '(trivial-types:proper-list filter-group))
 (common-lisp:defun |make-filter-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun |make-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (filter-list-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-filter-list-configuration-"))
   (match-operator (common-lisp:error ":match-operator is required") :type
    (common-lisp:or category-filter-match-operator common-lisp:null))
   (category-values common-lisp:nil :type
    (common-lisp:or category-value-list common-lisp:null))
   (select-all-options common-lisp:nil :type
    (common-lisp:or category-filter-select-all-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'filter-list-configuration
                    'make-filter-list-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filter-list-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filter-list-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-operator))
      (common-lisp:list
       (common-lisp:cons "MatchOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-values))
      (common-lisp:list
       (common-lisp:cons "CategoryValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-all-options))
      (common-lisp:list
       (common-lisp:cons "SelectAllOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filter-list-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (filter-list-control (:copier common-lisp:nil)
      (:conc-name "struct-shape-filter-list-control-"))
   (filter-control-id (common-lisp:error ":filter-control-id is required")
    :type (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or sheet-control-title common-lisp:null))
   (source-filter-id (common-lisp:error ":source-filter-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (display-options common-lisp:nil :type
    (common-lisp:or list-control-display-options common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or sheet-control-list-type common-lisp:null))
   (selectable-values common-lisp:nil :type
    (common-lisp:or filter-selectable-values common-lisp:null))
   (cascading-control-configuration common-lisp:nil :type
    (common-lisp:or cascading-control-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'filter-list-control 'make-filter-list-control))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-list-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-list-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-control-id))
      (common-lisp:list
       (common-lisp:cons "FilterControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-filter-id))
      (common-lisp:list
       (common-lisp:cons "SourceFilterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-options))
      (common-lisp:list
       (common-lisp:cons "DisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selectable-values))
      (common-lisp:list
       (common-lisp:cons "SelectableValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cascading-control-configuration))
      (common-lisp:list
       (common-lisp:cons "CascadingControlConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-list-control))
   common-lisp:nil))
(common-lisp:deftype filter-null-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (filter-operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-filter-operation-"))
   (condition-expression
    (common-lisp:error ":condition-expression is required") :type
    (common-lisp:or expression common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'filter-operation 'make-filter-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'condition-expression))
      (common-lisp:list
       (common-lisp:cons "ConditionExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (filter-operation-selected-fields-configuration (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-filter-operation-selected-fields-configuration-"))
   (selected-fields common-lisp:nil :type
    (common-lisp:or selected-field-list common-lisp:null))
   (selected-field-options common-lisp:nil :type
    (common-lisp:or selected-field-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'filter-operation-selected-fields-configuration
                    'make-filter-operation-selected-fields-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filter-operation-selected-fields-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filter-operation-selected-fields-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-fields))
      (common-lisp:list
       (common-lisp:cons "SelectedFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'selected-field-options))
      (common-lisp:list
       (common-lisp:cons "SelectedFieldOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filter-operation-selected-fields-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (filter-operation-target-visuals-configuration (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-filter-operation-target-visuals-configuration-"))
   (same-sheet-target-visual-configuration common-lisp:nil :type
    (common-lisp:or same-sheet-target-visual-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'filter-operation-target-visuals-configuration
                    'make-filter-operation-target-visuals-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filter-operation-target-visuals-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filter-operation-target-visuals-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'same-sheet-target-visual-configuration))
      (common-lisp:list
       (common-lisp:cons "SameSheetTargetVisualConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filter-operation-target-visuals-configuration))
   common-lisp:nil))
(common-lisp:deftype filter-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (filter-relative-date-time-control (:copier common-lisp:nil)
      (:conc-name "struct-shape-filter-relative-date-time-control-"))
   (filter-control-id (common-lisp:error ":filter-control-id is required")
    :type (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or sheet-control-title common-lisp:null))
   (source-filter-id (common-lisp:error ":source-filter-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (display-options common-lisp:nil :type
    (common-lisp:or relative-date-time-control-display-options
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'filter-relative-date-time-control
                    'make-filter-relative-date-time-control))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filter-relative-date-time-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filter-relative-date-time-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-control-id))
      (common-lisp:list
       (common-lisp:cons "FilterControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-filter-id))
      (common-lisp:list
       (common-lisp:cons "SourceFilterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-options))
      (common-lisp:list
       (common-lisp:cons "DisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filter-relative-date-time-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (filter-scope-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-filter-scope-configuration-"))
   (selected-sheets common-lisp:nil :type
    (common-lisp:or selected-sheets-filter-scope-configuration
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'filter-scope-configuration
                    'make-filter-scope-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filter-scope-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filter-scope-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-sheets))
      (common-lisp:list
       (common-lisp:cons "SelectedSheets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filter-scope-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (filter-selectable-values (:copier common-lisp:nil)
      (:conc-name "struct-shape-filter-selectable-values-"))
   (values common-lisp:nil :type
    (common-lisp:or parameter-selectable-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'filter-selectable-values 'make-filter-selectable-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filter-selectable-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filter-selectable-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filter-selectable-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (filter-slider-control (:copier common-lisp:nil)
      (:conc-name "struct-shape-filter-slider-control-"))
   (filter-control-id (common-lisp:error ":filter-control-id is required")
    :type (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or sheet-control-title common-lisp:null))
   (source-filter-id (common-lisp:error ":source-filter-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (display-options common-lisp:nil :type
    (common-lisp:or slider-control-display-options common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or sheet-control-slider-type common-lisp:null))
   (maximum-value (common-lisp:error ":maximum-value is required") :type
    (common-lisp:or double common-lisp:null))
   (minimum-value (common-lisp:error ":minimum-value is required") :type
    (common-lisp:or double common-lisp:null))
   (step-size (common-lisp:error ":step-size is required") :type
    (common-lisp:or double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'filter-slider-control 'make-filter-slider-control))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filter-slider-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filter-slider-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-control-id))
      (common-lisp:list
       (common-lisp:cons "FilterControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-filter-id))
      (common-lisp:list
       (common-lisp:cons "SourceFilterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-options))
      (common-lisp:list
       (common-lisp:cons "DisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-value))
      (common-lisp:list
       (common-lisp:cons "MaximumValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-value))
      (common-lisp:list
       (common-lisp:cons "MinimumValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-size))
      (common-lisp:list
       (common-lisp:cons "StepSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filter-slider-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (filter-text-area-control (:copier common-lisp:nil)
      (:conc-name "struct-shape-filter-text-area-control-"))
   (filter-control-id (common-lisp:error ":filter-control-id is required")
    :type (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or sheet-control-title common-lisp:null))
   (source-filter-id (common-lisp:error ":source-filter-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (delimiter common-lisp:nil :type
    (common-lisp:or text-area-control-delimiter common-lisp:null))
   (display-options common-lisp:nil :type
    (common-lisp:or text-area-control-display-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'filter-text-area-control 'make-filter-text-area-control))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filter-text-area-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filter-text-area-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-control-id))
      (common-lisp:list
       (common-lisp:cons "FilterControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-filter-id))
      (common-lisp:list
       (common-lisp:cons "SourceFilterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-options))
      (common-lisp:list
       (common-lisp:cons "DisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filter-text-area-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (filter-text-field-control (:copier common-lisp:nil)
      (:conc-name "struct-shape-filter-text-field-control-"))
   (filter-control-id (common-lisp:error ":filter-control-id is required")
    :type (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or sheet-control-title common-lisp:null))
   (source-filter-id (common-lisp:error ":source-filter-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (display-options common-lisp:nil :type
    (common-lisp:or text-field-control-display-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'filter-text-field-control
                    'make-filter-text-field-control))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filter-text-field-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filter-text-field-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-control-id))
      (common-lisp:list
       (common-lisp:cons "FilterControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-filter-id))
      (common-lisp:list
       (common-lisp:cons "SourceFilterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-options))
      (common-lisp:list
       (common-lisp:cons "DisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filter-text-field-control))
   common-lisp:nil))
(common-lisp:deftype filter-visual-scope () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filtered-visuals-list ()
   '(trivial-types:proper-list short-restrictive-resource-id))
 (common-lisp:defun |make-filtered-visuals-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            short-restrictive-resource-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (folder (:copier common-lisp:nil) (:conc-name "struct-shape-folder-"))
   (folder-id common-lisp:nil :type
    (common-lisp:or restrictive-resource-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or folder-name common-lisp:null))
   (folder-type common-lisp:nil :type
    (common-lisp:or folder-type common-lisp:null))
   (folder-path common-lisp:nil :type (common-lisp:or path common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'folder 'make-folder))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input folder))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input folder))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-id))
      (common-lisp:list
       (common-lisp:cons "FolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-type))
      (common-lisp:list
       (common-lisp:cons "FolderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-path))
      (common-lisp:list
       (common-lisp:cons "FolderPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input folder))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype folder-column-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-folder-column-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype folder-filter-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (folder-member (:copier common-lisp:nil)
      (:conc-name "struct-shape-folder-member-"))
   (member-id common-lisp:nil :type
    (common-lisp:or restrictive-resource-id common-lisp:null))
   (member-type common-lisp:nil :type
    (common-lisp:or member-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'folder-member 'make-folder-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input folder-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input folder-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-type))
      (common-lisp:list
       (common-lisp:cons "MemberType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input folder-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype folder-member-list ()
   '(trivial-types:proper-list member-id-arn-pair))
 (common-lisp:defun |make-folder-member-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member-id-arn-pair))
   aws-sdk/generator/shape::members))
(common-lisp:deftype folder-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (folder-search-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-folder-search-filter-"))
   (operator common-lisp:nil :type
    (common-lisp:or filter-operator common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or folder-filter-attribute common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'folder-search-filter 'make-folder-search-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input folder-search-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input folder-search-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "Operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input folder-search-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype folder-search-filter-list ()
   '(trivial-types:proper-list folder-search-filter))
 (common-lisp:defun |make-folder-search-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list folder-search-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (folder-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-folder-summary-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (folder-id common-lisp:nil :type
    (common-lisp:or restrictive-resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or folder-name common-lisp:null))
   (folder-type common-lisp:nil :type
    (common-lisp:or folder-type common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'folder-summary 'make-folder-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input folder-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input folder-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-id))
      (common-lisp:list
       (common-lisp:cons "FolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-type))
      (common-lisp:list
       (common-lisp:cons "FolderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input folder-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype folder-summary-list ()
   '(trivial-types:proper-list folder-summary))
 (common-lisp:defun |make-folder-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list folder-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype folder-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (font (:copier common-lisp:nil) (:conc-name "struct-shape-font-"))
   (font-family common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'font 'make-font))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input font))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input font))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-family))
      (common-lisp:list
       (common-lisp:cons "FontFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input font))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (font-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-font-configuration-"))
   (font-size common-lisp:nil :type
    (common-lisp:or font-size common-lisp:null))
   (font-decoration common-lisp:nil :type
    (common-lisp:or font-decoration common-lisp:null))
   (font-color common-lisp:nil :type
    (common-lisp:or hex-color common-lisp:null))
   (font-weight common-lisp:nil :type
    (common-lisp:or font-weight common-lisp:null))
   (font-style common-lisp:nil :type
    (common-lisp:or font-style common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'font-configuration 'make-font-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input font-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input font-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-size))
      (common-lisp:list
       (common-lisp:cons "FontSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-decoration))
      (common-lisp:list
       (common-lisp:cons "FontDecoration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-color))
      (common-lisp:list
       (common-lisp:cons "FontColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-weight))
      (common-lisp:list
       (common-lisp:cons "FontWeight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-style))
      (common-lisp:list
       (common-lisp:cons "FontStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input font-configuration))
   common-lisp:nil))
(common-lisp:deftype font-decoration () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype font-list () '(trivial-types:proper-list font))
 (common-lisp:defun |make-font-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list font))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (font-size (:copier common-lisp:nil)
      (:conc-name "struct-shape-font-size-"))
   (relative common-lisp:nil :type
    (common-lisp:or relative-font-size common-lisp:null)))
 (common-lisp:export (common-lisp:list 'font-size 'make-font-size))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input font-size))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input font-size))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relative))
      (common-lisp:list
       (common-lisp:cons "Relative"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input font-size))
   common-lisp:nil))
(common-lisp:deftype font-style () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (font-weight (:copier common-lisp:nil)
      (:conc-name "struct-shape-font-weight-"))
   (name common-lisp:nil :type
    (common-lisp:or font-weight-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'font-weight 'make-font-weight))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input font-weight))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input font-weight))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input font-weight))
   common-lisp:nil))
(common-lisp:deftype font-weight-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (forecast-computation (:copier common-lisp:nil)
      (:conc-name "struct-shape-forecast-computation-"))
   (computation-id (common-lisp:error ":computation-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (time (common-lisp:error ":time is required") :type
    (common-lisp:or dimension-field common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or measure-field common-lisp:null))
   (periods-forward common-lisp:nil :type
    (common-lisp:or periods-forward common-lisp:null))
   (periods-backward common-lisp:nil :type
    (common-lisp:or periods-backward common-lisp:null))
   (upper-boundary common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (lower-boundary common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (prediction-interval common-lisp:nil :type
    (common-lisp:or prediction-interval common-lisp:null))
   (seasonality common-lisp:nil :type
    (common-lisp:or forecast-computation-seasonality common-lisp:null))
   (custom-seasonality-value common-lisp:nil :type
    (common-lisp:or forecast-computation-custom-seasonality-value
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'forecast-computation 'make-forecast-computation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input forecast-computation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input forecast-computation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computation-id))
      (common-lisp:list
       (common-lisp:cons "ComputationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'periods-forward))
      (common-lisp:list
       (common-lisp:cons "PeriodsForward"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'periods-backward))
      (common-lisp:list
       (common-lisp:cons "PeriodsBackward"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upper-boundary))
      (common-lisp:list
       (common-lisp:cons "UpperBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lower-boundary))
      (common-lisp:list
       (common-lisp:cons "LowerBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prediction-interval))
      (common-lisp:list
       (common-lisp:cons "PredictionInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'seasonality))
      (common-lisp:list
       (common-lisp:cons "Seasonality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-seasonality-value))
      (common-lisp:list
       (common-lisp:cons "CustomSeasonalityValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input forecast-computation))
   common-lisp:nil))
(common-lisp:deftype forecast-computation-custom-seasonality-value ()
  'common-lisp:integer)
(common-lisp:deftype forecast-computation-seasonality () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (forecast-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-forecast-configuration-"))
   (forecast-properties common-lisp:nil :type
    (common-lisp:or time-based-forecast-properties common-lisp:null))
   (scenario common-lisp:nil :type
    (common-lisp:or forecast-scenario common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'forecast-configuration 'make-forecast-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          forecast-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          forecast-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-properties))
      (common-lisp:list
       (common-lisp:cons "ForecastProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scenario))
      (common-lisp:list
       (common-lisp:cons "Scenario"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          forecast-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype forecast-configuration-list ()
   '(trivial-types:proper-list forecast-configuration))
 (common-lisp:defun |make-forecast-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list forecast-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (forecast-scenario (:copier common-lisp:nil)
      (:conc-name "struct-shape-forecast-scenario-"))
   (what-if-point-scenario common-lisp:nil :type
    (common-lisp:or what-if-point-scenario common-lisp:null))
   (what-if-range-scenario common-lisp:nil :type
    (common-lisp:or what-if-range-scenario common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'forecast-scenario 'make-forecast-scenario))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input forecast-scenario))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input forecast-scenario))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-point-scenario))
      (common-lisp:list
       (common-lisp:cons "WhatIfPointScenario"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-range-scenario))
      (common-lisp:list
       (common-lisp:cons "WhatIfRangeScenario"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input forecast-scenario))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (format-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-format-configuration-"))
   (string-format-configuration common-lisp:nil :type
    (common-lisp:or string-format-configuration common-lisp:null))
   (number-format-configuration common-lisp:nil :type
    (common-lisp:or number-format-configuration common-lisp:null))
   (date-time-format-configuration common-lisp:nil :type
    (common-lisp:or date-time-format-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'format-configuration 'make-format-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input format-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input format-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'string-format-configuration))
      (common-lisp:list
       (common-lisp:cons "StringFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-format-configuration))
      (common-lisp:list
       (common-lisp:cons "NumberFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'date-time-format-configuration))
      (common-lisp:list
       (common-lisp:cons "DateTimeFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input format-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (free-form-layout-canvas-size-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-free-form-layout-canvas-size-options-"))
   (screen-canvas-size-options common-lisp:nil :type
    (common-lisp:or free-form-layout-screen-canvas-size-options
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'free-form-layout-canvas-size-options
                    'make-free-form-layout-canvas-size-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-canvas-size-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-canvas-size-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'screen-canvas-size-options))
      (common-lisp:list
       (common-lisp:cons "ScreenCanvasSizeOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-canvas-size-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (free-form-layout-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-free-form-layout-configuration-"))
   (elements (common-lisp:error ":elements is required") :type
    (common-lisp:or free-from-layout-element-list common-lisp:null))
   (canvas-size-options common-lisp:nil :type
    (common-lisp:or free-form-layout-canvas-size-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'free-form-layout-configuration
                    'make-free-form-layout-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elements))
      (common-lisp:list
       (common-lisp:cons "Elements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canvas-size-options))
      (common-lisp:list
       (common-lisp:cons "CanvasSizeOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (free-form-layout-element (:copier common-lisp:nil)
      (:conc-name "struct-shape-free-form-layout-element-"))
   (element-id (common-lisp:error ":element-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (element-type (common-lisp:error ":element-type is required") :type
    (common-lisp:or layout-element-type common-lisp:null))
   (xaxis-location (common-lisp:error ":xaxis-location is required") :type
    (common-lisp:or pixel-length common-lisp:null))
   (yaxis-location (common-lisp:error ":yaxis-location is required") :type
    (common-lisp:or unlimited-pixel-length common-lisp:null))
   (width (common-lisp:error ":width is required") :type
    (common-lisp:or pixel-length common-lisp:null))
   (height (common-lisp:error ":height is required") :type
    (common-lisp:or pixel-length common-lisp:null))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (rendering-rules common-lisp:nil :type
    (common-lisp:or sheet-element-rendering-rule-list common-lisp:null))
   (border-style common-lisp:nil :type
    (common-lisp:or free-form-layout-element-border-style common-lisp:null))
   (selected-border-style common-lisp:nil :type
    (common-lisp:or free-form-layout-element-border-style common-lisp:null))
   (background-style common-lisp:nil :type
    (common-lisp:or free-form-layout-element-background-style
                    common-lisp:null))
   (loading-animation common-lisp:nil :type
    (common-lisp:or loading-animation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'free-form-layout-element 'make-free-form-layout-element))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-element))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-element))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'element-id))
      (common-lisp:list
       (common-lisp:cons "ElementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'element-type))
      (common-lisp:list
       (common-lisp:cons "ElementType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xaxis-location))
      (common-lisp:list
       (common-lisp:cons "XAxisLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'yaxis-location))
      (common-lisp:list
       (common-lisp:cons "YAxisLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rendering-rules))
      (common-lisp:list
       (common-lisp:cons "RenderingRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'border-style))
      (common-lisp:list
       (common-lisp:cons "BorderStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'selected-border-style))
      (common-lisp:list
       (common-lisp:cons "SelectedBorderStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background-style))
      (common-lisp:list
       (common-lisp:cons "BackgroundStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'loading-animation))
      (common-lisp:list
       (common-lisp:cons "LoadingAnimation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-element))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (free-form-layout-element-background-style (:copier common-lisp:nil)
      (:conc-name "struct-shape-free-form-layout-element-background-style-"))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (color common-lisp:nil :type
    (common-lisp:or hex-color-with-transparency common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'free-form-layout-element-background-style
                    'make-free-form-layout-element-background-style))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-element-background-style))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-element-background-style))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color))
      (common-lisp:list
       (common-lisp:cons "Color"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-element-background-style))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (free-form-layout-element-border-style (:copier common-lisp:nil)
      (:conc-name "struct-shape-free-form-layout-element-border-style-"))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (color common-lisp:nil :type
    (common-lisp:or hex-color-with-transparency common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'free-form-layout-element-border-style
                    'make-free-form-layout-element-border-style))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-element-border-style))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-element-border-style))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color))
      (common-lisp:list
       (common-lisp:cons "Color"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-element-border-style))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (free-form-layout-screen-canvas-size-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-free-form-layout-screen-canvas-size-options-"))
   (optimized-view-port-width
    (common-lisp:error ":optimized-view-port-width is required") :type
    (common-lisp:or pixel-length common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'free-form-layout-screen-canvas-size-options
                    'make-free-form-layout-screen-canvas-size-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-screen-canvas-size-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-screen-canvas-size-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'optimized-view-port-width))
      (common-lisp:list
       (common-lisp:cons "OptimizedViewPortWidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-screen-canvas-size-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (free-form-section-layout-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-free-form-section-layout-configuration-"))
   (elements (common-lisp:error ":elements is required") :type
    (common-lisp:or free-from-layout-element-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'free-form-section-layout-configuration
                    'make-free-form-section-layout-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          free-form-section-layout-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          free-form-section-layout-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elements))
      (common-lisp:list
       (common-lisp:cons "Elements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          free-form-section-layout-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype free-from-layout-element-list ()
   '(trivial-types:proper-list free-form-layout-element))
 (common-lisp:defun |make-free-from-layout-element-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            free-form-layout-element))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (funnel-chart-aggregated-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-funnel-chart-aggregated-field-wells-"))
   (category common-lisp:nil :type
    (common-lisp:or funnel-chart-dimension-field-list common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or funnel-chart-measure-field-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'funnel-chart-aggregated-field-wells
                    'make-funnel-chart-aggregated-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          funnel-chart-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          funnel-chart-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          funnel-chart-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (funnel-chart-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-funnel-chart-configuration-"))
   (field-wells common-lisp:nil :type
    (common-lisp:or funnel-chart-field-wells common-lisp:null))
   (sort-configuration common-lisp:nil :type
    (common-lisp:or funnel-chart-sort-configuration common-lisp:null))
   (category-label-options common-lisp:nil :type
    (common-lisp:or chart-axis-label-options common-lisp:null))
   (value-label-options common-lisp:nil :type
    (common-lisp:or chart-axis-label-options common-lisp:null))
   (tooltip common-lisp:nil :type
    (common-lisp:or tooltip-options common-lisp:null))
   (data-label-options common-lisp:nil :type
    (common-lisp:or funnel-chart-data-label-options common-lisp:null))
   (visual-palette common-lisp:nil :type
    (common-lisp:or visual-palette common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'funnel-chart-configuration
                    'make-funnel-chart-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          funnel-chart-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          funnel-chart-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-label-options))
      (common-lisp:list
       (common-lisp:cons "CategoryLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-label-options))
      (common-lisp:list
       (common-lisp:cons "ValueLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip))
      (common-lisp:list
       (common-lisp:cons "Tooltip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-label-options))
      (common-lisp:list
       (common-lisp:cons "DataLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-palette))
      (common-lisp:list
       (common-lisp:cons "VisualPalette"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          funnel-chart-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (funnel-chart-data-label-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-funnel-chart-data-label-options-"))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (category-label-visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (measure-label-visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (position common-lisp:nil :type
    (common-lisp:or data-label-position common-lisp:null))
   (label-font-configuration common-lisp:nil :type
    (common-lisp:or font-configuration common-lisp:null))
   (label-color common-lisp:nil :type
    (common-lisp:or hex-color common-lisp:null))
   (measure-data-label-style common-lisp:nil :type
    (common-lisp:or funnel-chart-measure-data-label-style common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'funnel-chart-data-label-options
                    'make-funnel-chart-data-label-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          funnel-chart-data-label-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          funnel-chart-data-label-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-label-visibility))
      (common-lisp:list
       (common-lisp:cons "CategoryLabelVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'measure-label-visibility))
      (common-lisp:list
       (common-lisp:cons "MeasureLabelVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "Position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'label-font-configuration))
      (common-lisp:list
       (common-lisp:cons "LabelFontConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-color))
      (common-lisp:list
       (common-lisp:cons "LabelColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'measure-data-label-style))
      (common-lisp:list
       (common-lisp:cons "MeasureDataLabelStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          funnel-chart-data-label-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype funnel-chart-dimension-field-list ()
   '(trivial-types:proper-list dimension-field))
 (common-lisp:defun |make-funnel-chart-dimension-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (funnel-chart-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-funnel-chart-field-wells-"))
   (funnel-chart-aggregated-field-wells common-lisp:nil :type
    (common-lisp:or funnel-chart-aggregated-field-wells common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'funnel-chart-field-wells 'make-funnel-chart-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          funnel-chart-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          funnel-chart-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'funnel-chart-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "FunnelChartAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          funnel-chart-field-wells))
   common-lisp:nil))
(common-lisp:deftype funnel-chart-measure-data-label-style ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype funnel-chart-measure-field-list ()
   '(trivial-types:proper-list measure-field))
 (common-lisp:defun |make-funnel-chart-measure-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list measure-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (funnel-chart-sort-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-funnel-chart-sort-configuration-"))
   (category-sort common-lisp:nil :type
    (common-lisp:or field-sort-options-list common-lisp:null))
   (category-items-limit common-lisp:nil :type
    (common-lisp:or items-limit-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'funnel-chart-sort-configuration
                    'make-funnel-chart-sort-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          funnel-chart-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          funnel-chart-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-sort))
      (common-lisp:list
       (common-lisp:cons "CategorySort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-items-limit))
      (common-lisp:list
       (common-lisp:cons "CategoryItemsLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          funnel-chart-sort-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (funnel-chart-visual (:copier common-lisp:nil)
      (:conc-name "struct-shape-funnel-chart-visual-"))
   (visual-id (common-lisp:error ":visual-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or visual-title-label-options common-lisp:null))
   (subtitle common-lisp:nil :type
    (common-lisp:or visual-subtitle-label-options common-lisp:null))
   (chart-configuration common-lisp:nil :type
    (common-lisp:or funnel-chart-configuration common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or visual-custom-action-list common-lisp:null))
   (column-hierarchies common-lisp:nil :type
    (common-lisp:or column-hierarchy-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'funnel-chart-visual 'make-funnel-chart-visual))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input funnel-chart-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input funnel-chart-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-hierarchies))
      (common-lisp:list
       (common-lisp:cons "ColumnHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input funnel-chart-visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (gauge-chart-arc-conditional-formatting (:copier common-lisp:nil)
      (:conc-name "struct-shape-gauge-chart-arc-conditional-formatting-"))
   (foreground-color common-lisp:nil :type
    (common-lisp:or conditional-formatting-color common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'gauge-chart-arc-conditional-formatting
                    'make-gauge-chart-arc-conditional-formatting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-arc-conditional-formatting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-arc-conditional-formatting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'foreground-color))
      (common-lisp:list
       (common-lisp:cons "ForegroundColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-arc-conditional-formatting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (gauge-chart-conditional-formatting (:copier common-lisp:nil)
      (:conc-name "struct-shape-gauge-chart-conditional-formatting-"))
   (conditional-formatting-options common-lisp:nil :type
    (common-lisp:or gauge-chart-conditional-formatting-option-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'gauge-chart-conditional-formatting
                    'make-gauge-chart-conditional-formatting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-conditional-formatting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-conditional-formatting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-formatting-options))
      (common-lisp:list
       (common-lisp:cons "ConditionalFormattingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-conditional-formatting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (gauge-chart-conditional-formatting-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-gauge-chart-conditional-formatting-option-"))
   (primary-value common-lisp:nil :type
    (common-lisp:or gauge-chart-primary-value-conditional-formatting
                    common-lisp:null))
   (arc common-lisp:nil :type
    (common-lisp:or gauge-chart-arc-conditional-formatting common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'gauge-chart-conditional-formatting-option
                    'make-gauge-chart-conditional-formatting-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-conditional-formatting-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-conditional-formatting-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-value))
      (common-lisp:list
       (common-lisp:cons "PrimaryValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arc))
      (common-lisp:list
       (common-lisp:cons "Arc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-conditional-formatting-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype gauge-chart-conditional-formatting-option-list ()
   '(trivial-types:proper-list gauge-chart-conditional-formatting-option))
 (common-lisp:defun |make-gauge-chart-conditional-formatting-option-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            gauge-chart-conditional-formatting-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (gauge-chart-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-gauge-chart-configuration-"))
   (field-wells common-lisp:nil :type
    (common-lisp:or gauge-chart-field-wells common-lisp:null))
   (gauge-chart-options common-lisp:nil :type
    (common-lisp:or gauge-chart-options common-lisp:null))
   (data-labels common-lisp:nil :type
    (common-lisp:or data-label-options common-lisp:null))
   (tooltip-options common-lisp:nil :type
    (common-lisp:or tooltip-options common-lisp:null))
   (visual-palette common-lisp:nil :type
    (common-lisp:or visual-palette common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'gauge-chart-configuration
                    'make-gauge-chart-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gauge-chart-options))
      (common-lisp:list
       (common-lisp:cons "GaugeChartOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-labels))
      (common-lisp:list
       (common-lisp:cons "DataLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip-options))
      (common-lisp:list
       (common-lisp:cons "TooltipOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-palette))
      (common-lisp:list
       (common-lisp:cons "VisualPalette"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (gauge-chart-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-gauge-chart-field-wells-"))
   (values common-lisp:nil :type
    (common-lisp:or measure-field-list common-lisp:null))
   (target-values common-lisp:nil :type
    (common-lisp:or measure-field-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'gauge-chart-field-wells 'make-gauge-chart-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-values))
      (common-lisp:list
       (common-lisp:cons "TargetValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (gauge-chart-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-gauge-chart-options-"))
   (primary-value-display-type common-lisp:nil :type
    (common-lisp:or primary-value-display-type common-lisp:null))
   (comparison common-lisp:nil :type
    (common-lisp:or comparison-configuration common-lisp:null))
   (arc-axis common-lisp:nil :type
    (common-lisp:or arc-axis-configuration common-lisp:null))
   (arc common-lisp:nil :type
    (common-lisp:or arc-configuration common-lisp:null))
   (primary-value-font-configuration common-lisp:nil :type
    (common-lisp:or font-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'gauge-chart-options 'make-gauge-chart-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gauge-chart-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gauge-chart-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-value-display-type))
      (common-lisp:list
       (common-lisp:cons "PrimaryValueDisplayType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison))
      (common-lisp:list
       (common-lisp:cons "Comparison"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arc-axis))
      (common-lisp:list
       (common-lisp:cons "ArcAxis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arc))
      (common-lisp:list
       (common-lisp:cons "Arc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-value-font-configuration))
      (common-lisp:list
       (common-lisp:cons "PrimaryValueFontConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gauge-chart-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (gauge-chart-primary-value-conditional-formatting
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-gauge-chart-primary-value-conditional-formatting-"))
   (text-color common-lisp:nil :type
    (common-lisp:or conditional-formatting-color common-lisp:null))
   (icon common-lisp:nil :type
    (common-lisp:or conditional-formatting-icon common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'gauge-chart-primary-value-conditional-formatting
                    'make-gauge-chart-primary-value-conditional-formatting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-primary-value-conditional-formatting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-primary-value-conditional-formatting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-color))
      (common-lisp:list
       (common-lisp:cons "TextColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icon))
      (common-lisp:list
       (common-lisp:cons "Icon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-primary-value-conditional-formatting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (gauge-chart-visual (:copier common-lisp:nil)
      (:conc-name "struct-shape-gauge-chart-visual-"))
   (visual-id (common-lisp:error ":visual-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or visual-title-label-options common-lisp:null))
   (subtitle common-lisp:nil :type
    (common-lisp:or visual-subtitle-label-options common-lisp:null))
   (chart-configuration common-lisp:nil :type
    (common-lisp:or gauge-chart-configuration common-lisp:null))
   (conditional-formatting common-lisp:nil :type
    (common-lisp:or gauge-chart-conditional-formatting common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or visual-custom-action-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'gauge-chart-visual 'make-gauge-chart-visual))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gauge-chart-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gauge-chart-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-formatting))
      (common-lisp:list
       (common-lisp:cons "ConditionalFormatting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gauge-chart-visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (generate-embed-url-for-anonymous-user-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-generate-embed-url-for-anonymous-user-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (session-lifetime-in-minutes common-lisp:nil :type
    (common-lisp:or session-lifetime-in-minutes common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null))
   (session-tags common-lisp:nil :type
    (common-lisp:or session-tag-list common-lisp:null))
   (authorized-resource-arns
    (common-lisp:error ":authorized-resource-arns is required") :type
    (common-lisp:or arn-list common-lisp:null))
   (experience-configuration
    (common-lisp:error ":experience-configuration is required") :type
    (common-lisp:or anonymous-user-embedding-experience-configuration
                    common-lisp:null))
   (allowed-domains common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generate-embed-url-for-anonymous-user-request
                    'make-generate-embed-url-for-anonymous-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-embed-url-for-anonymous-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-embed-url-for-anonymous-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-lifetime-in-minutes))
      (common-lisp:list
       (common-lisp:cons "SessionLifetimeInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-tags))
      (common-lisp:list
       (common-lisp:cons "SessionTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorized-resource-arns))
      (common-lisp:list
       (common-lisp:cons "AuthorizedResourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'experience-configuration))
      (common-lisp:list
       (common-lisp:cons "ExperienceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-domains))
      (common-lisp:list
       (common-lisp:cons "AllowedDomains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-embed-url-for-anonymous-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (generate-embed-url-for-anonymous-user-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-generate-embed-url-for-anonymous-user-response-"))
   (embed-url (common-lisp:error ":embed-url is required") :type
    (common-lisp:or embedding-url common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or status-code common-lisp:null))
   (request-id (common-lisp:error ":request-id is required") :type
    (common-lisp:or string common-lisp:null))
   (anonymous-user-arn (common-lisp:error ":anonymous-user-arn is required")
    :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generate-embed-url-for-anonymous-user-response
                    'make-generate-embed-url-for-anonymous-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-embed-url-for-anonymous-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-embed-url-for-anonymous-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'embed-url))
      (common-lisp:list
       (common-lisp:cons "EmbedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anonymous-user-arn))
      (common-lisp:list
       (common-lisp:cons "AnonymousUserArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-embed-url-for-anonymous-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (generate-embed-url-for-registered-user-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-generate-embed-url-for-registered-user-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (session-lifetime-in-minutes common-lisp:nil :type
    (common-lisp:or session-lifetime-in-minutes common-lisp:null))
   (user-arn (common-lisp:error ":user-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (experience-configuration
    (common-lisp:error ":experience-configuration is required") :type
    (common-lisp:or registered-user-embedding-experience-configuration
                    common-lisp:null))
   (allowed-domains common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generate-embed-url-for-registered-user-request
                    'make-generate-embed-url-for-registered-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-embed-url-for-registered-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-embed-url-for-registered-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-lifetime-in-minutes))
      (common-lisp:list
       (common-lisp:cons "SessionLifetimeInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn))
      (common-lisp:list
       (common-lisp:cons "UserArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'experience-configuration))
      (common-lisp:list
       (common-lisp:cons "ExperienceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-domains))
      (common-lisp:list
       (common-lisp:cons "AllowedDomains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-embed-url-for-registered-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (generate-embed-url-for-registered-user-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-generate-embed-url-for-registered-user-response-"))
   (embed-url (common-lisp:error ":embed-url is required") :type
    (common-lisp:or embedding-url common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or status-code common-lisp:null))
   (request-id (common-lisp:error ":request-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generate-embed-url-for-registered-user-response
                    'make-generate-embed-url-for-registered-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-embed-url-for-registered-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-embed-url-for-registered-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'embed-url))
      (common-lisp:list
       (common-lisp:cons "EmbedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-embed-url-for-registered-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (geo-spatial-column-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-geo-spatial-column-group-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or column-group-name common-lisp:null))
   (country-code common-lisp:nil :type
    (common-lisp:or geo-spatial-country-code common-lisp:null))
   (columns (common-lisp:error ":columns is required") :type
    (common-lisp:or column-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'geo-spatial-column-group 'make-geo-spatial-column-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          geo-spatial-column-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          geo-spatial-column-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country-code))
      (common-lisp:list
       (common-lisp:cons "CountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "Columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          geo-spatial-column-group))
   common-lisp:nil))
(common-lisp:deftype geo-spatial-country-code () 'common-lisp:string)
(common-lisp:deftype geo-spatial-data-role () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (geospatial-coordinate-bounds (:copier common-lisp:nil)
      (:conc-name "struct-shape-geospatial-coordinate-bounds-"))
   (north (common-lisp:error ":north is required") :type
    (common-lisp:or latitude common-lisp:null))
   (south (common-lisp:error ":south is required") :type
    (common-lisp:or latitude common-lisp:null))
   (west (common-lisp:error ":west is required") :type
    (common-lisp:or longitude common-lisp:null))
   (east (common-lisp:error ":east is required") :type
    (common-lisp:or longitude common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'geospatial-coordinate-bounds
                    'make-geospatial-coordinate-bounds))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-coordinate-bounds))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-coordinate-bounds))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'north))
      (common-lisp:list
       (common-lisp:cons "North"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'south))
      (common-lisp:list
       (common-lisp:cons "South"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'west))
      (common-lisp:list
       (common-lisp:cons "West"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'east))
      (common-lisp:list
       (common-lisp:cons "East"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-coordinate-bounds))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (geospatial-map-aggregated-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-geospatial-map-aggregated-field-wells-"))
   (geospatial common-lisp:nil :type
    (common-lisp:or dimension-field-list common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or measure-field-list common-lisp:null))
   (colors common-lisp:nil :type
    (common-lisp:or dimension-field-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'geospatial-map-aggregated-field-wells
                    'make-geospatial-map-aggregated-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-map-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-map-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geospatial))
      (common-lisp:list
       (common-lisp:cons "Geospatial"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'colors))
      (common-lisp:list
       (common-lisp:cons "Colors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-map-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (geospatial-map-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-geospatial-map-configuration-"))
   (field-wells common-lisp:nil :type
    (common-lisp:or geospatial-map-field-wells common-lisp:null))
   (legend common-lisp:nil :type
    (common-lisp:or legend-options common-lisp:null))
   (tooltip common-lisp:nil :type
    (common-lisp:or tooltip-options common-lisp:null))
   (window-options common-lisp:nil :type
    (common-lisp:or geospatial-window-options common-lisp:null))
   (map-style-options common-lisp:nil :type
    (common-lisp:or geospatial-map-style-options common-lisp:null))
   (point-style-options common-lisp:nil :type
    (common-lisp:or geospatial-point-style-options common-lisp:null))
   (visual-palette common-lisp:nil :type
    (common-lisp:or visual-palette common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'geospatial-map-configuration
                    'make-geospatial-map-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-map-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-map-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legend))
      (common-lisp:list
       (common-lisp:cons "Legend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip))
      (common-lisp:list
       (common-lisp:cons "Tooltip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-options))
      (common-lisp:list
       (common-lisp:cons "WindowOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-style-options))
      (common-lisp:list
       (common-lisp:cons "MapStyleOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'point-style-options))
      (common-lisp:list
       (common-lisp:cons "PointStyleOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-palette))
      (common-lisp:list
       (common-lisp:cons "VisualPalette"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-map-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (geospatial-map-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-geospatial-map-field-wells-"))
   (geospatial-map-aggregated-field-wells common-lisp:nil :type
    (common-lisp:or geospatial-map-aggregated-field-wells common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'geospatial-map-field-wells
                    'make-geospatial-map-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-map-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-map-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'geospatial-map-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "GeospatialMapAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-map-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (geospatial-map-style-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-geospatial-map-style-options-"))
   (base-map-style common-lisp:nil :type
    (common-lisp:or base-map-style-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'geospatial-map-style-options
                    'make-geospatial-map-style-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-map-style-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-map-style-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-map-style))
      (common-lisp:list
       (common-lisp:cons "BaseMapStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-map-style-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (geospatial-map-visual (:copier common-lisp:nil)
      (:conc-name "struct-shape-geospatial-map-visual-"))
   (visual-id (common-lisp:error ":visual-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or visual-title-label-options common-lisp:null))
   (subtitle common-lisp:nil :type
    (common-lisp:or visual-subtitle-label-options common-lisp:null))
   (chart-configuration common-lisp:nil :type
    (common-lisp:or geospatial-map-configuration common-lisp:null))
   (column-hierarchies common-lisp:nil :type
    (common-lisp:or column-hierarchy-list common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or visual-custom-action-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'geospatial-map-visual 'make-geospatial-map-visual))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-map-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-map-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-hierarchies))
      (common-lisp:list
       (common-lisp:cons "ColumnHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-map-visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (geospatial-point-style-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-geospatial-point-style-options-"))
   (selected-point-style common-lisp:nil :type
    (common-lisp:or geospatial-selected-point-style common-lisp:null))
   (cluster-marker-configuration common-lisp:nil :type
    (common-lisp:or cluster-marker-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'geospatial-point-style-options
                    'make-geospatial-point-style-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-point-style-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-point-style-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'selected-point-style))
      (common-lisp:list
       (common-lisp:cons "SelectedPointStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-marker-configuration))
      (common-lisp:list
       (common-lisp:cons "ClusterMarkerConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-point-style-options))
   common-lisp:nil))
(common-lisp:deftype geospatial-selected-point-style () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (geospatial-window-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-geospatial-window-options-"))
   (bounds common-lisp:nil :type
    (common-lisp:or geospatial-coordinate-bounds common-lisp:null))
   (map-zoom-mode common-lisp:nil :type
    (common-lisp:or map-zoom-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'geospatial-window-options
                    'make-geospatial-window-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-window-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-window-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bounds))
      (common-lisp:list
       (common-lisp:cons "Bounds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-zoom-mode))
      (common-lisp:list
       (common-lisp:cons "MapZoomMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-window-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-dashboard-embed-url-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-dashboard-embed-url-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (dashboard-id (common-lisp:error ":dashboard-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (identity-type (common-lisp:error ":identity-type is required") :type
    (common-lisp:or embedding-identity-type common-lisp:null))
   (session-lifetime-in-minutes common-lisp:nil :type
    (common-lisp:or session-lifetime-in-minutes common-lisp:null))
   (undo-redo-disabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (reset-disabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (state-persistence-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (user-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or namespace common-lisp:null))
   (additional-dashboard-ids common-lisp:nil :type
    (common-lisp:or additional-dashboard-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-dashboard-embed-url-request
                    'make-get-dashboard-embed-url-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dashboard-embed-url-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dashboard-embed-url-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dashboard-embed-url-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-dashboard-embed-url-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-dashboard-embed-url-response-"))
   (embed-url common-lisp:nil :type
    (common-lisp:or embedding-url common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-dashboard-embed-url-response
                    'make-get-dashboard-embed-url-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dashboard-embed-url-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dashboard-embed-url-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'embed-url))
      (common-lisp:list
       (common-lisp:cons "EmbedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dashboard-embed-url-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-session-embed-url-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-session-embed-url-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (entry-point common-lisp:nil :type
    (common-lisp:or entry-point common-lisp:null))
   (session-lifetime-in-minutes common-lisp:nil :type
    (common-lisp:or session-lifetime-in-minutes common-lisp:null))
   (user-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-session-embed-url-request
                    'make-get-session-embed-url-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-session-embed-url-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-session-embed-url-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-session-embed-url-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-session-embed-url-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-session-embed-url-response-"))
   (embed-url common-lisp:nil :type
    (common-lisp:or embedding-url common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-session-embed-url-response
                    'make-get-session-embed-url-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-session-embed-url-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-session-embed-url-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'embed-url))
      (common-lisp:list
       (common-lisp:cons "EmbedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-session-embed-url-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (global-table-border-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-global-table-border-options-"))
   (uniform-border common-lisp:nil :type
    (common-lisp:or table-border-options common-lisp:null))
   (side-specific-border common-lisp:nil :type
    (common-lisp:or table-side-border-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'global-table-border-options
                    'make-global-table-border-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          global-table-border-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          global-table-border-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uniform-border))
      (common-lisp:list
       (common-lisp:cons "UniformBorder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'side-specific-border))
      (common-lisp:list
       (common-lisp:cons "SideSpecificBorder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          global-table-border-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (gradient-color (:copier common-lisp:nil)
      (:conc-name "struct-shape-gradient-color-"))
   (stops common-lisp:nil :type
    (common-lisp:or gradient-stop-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'gradient-color 'make-gradient-color))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gradient-color))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gradient-color))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stops))
      (common-lisp:list
       (common-lisp:cons "Stops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gradient-color))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (gradient-stop (:copier common-lisp:nil)
      (:conc-name "struct-shape-gradient-stop-"))
   (gradient-offset (common-lisp:error ":gradient-offset is required") :type
    (common-lisp:or double common-lisp:null))
   (data-value common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (color common-lisp:nil :type (common-lisp:or hex-color common-lisp:null)))
 (common-lisp:export (common-lisp:list 'gradient-stop 'make-gradient-stop))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gradient-stop))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gradient-stop))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gradient-offset))
      (common-lisp:list
       (common-lisp:cons "GradientOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-value))
      (common-lisp:list
       (common-lisp:cons "DataValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color))
      (common-lisp:list
       (common-lisp:cons "Color"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gradient-stop))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype gradient-stop-list ()
   '(trivial-types:proper-list gradient-stop))
 (common-lisp:defun |make-gradient-stop-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list gradient-stop))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (grid-layout-canvas-size-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-grid-layout-canvas-size-options-"))
   (screen-canvas-size-options common-lisp:nil :type
    (common-lisp:or grid-layout-screen-canvas-size-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'grid-layout-canvas-size-options
                    'make-grid-layout-canvas-size-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grid-layout-canvas-size-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grid-layout-canvas-size-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'screen-canvas-size-options))
      (common-lisp:list
       (common-lisp:cons "ScreenCanvasSizeOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grid-layout-canvas-size-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (grid-layout-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-grid-layout-configuration-"))
   (elements (common-lisp:error ":elements is required") :type
    (common-lisp:or grid-layout-element-list common-lisp:null))
   (canvas-size-options common-lisp:nil :type
    (common-lisp:or grid-layout-canvas-size-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'grid-layout-configuration
                    'make-grid-layout-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grid-layout-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grid-layout-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elements))
      (common-lisp:list
       (common-lisp:cons "Elements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canvas-size-options))
      (common-lisp:list
       (common-lisp:cons "CanvasSizeOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grid-layout-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (grid-layout-element (:copier common-lisp:nil)
      (:conc-name "struct-shape-grid-layout-element-"))
   (element-id (common-lisp:error ":element-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (element-type (common-lisp:error ":element-type is required") :type
    (common-lisp:or layout-element-type common-lisp:null))
   (column-index common-lisp:nil :type
    (common-lisp:or grid-layout-element-column-index common-lisp:null))
   (column-span (common-lisp:error ":column-span is required") :type
    (common-lisp:or grid-layout-element-column-span common-lisp:null))
   (row-index common-lisp:nil :type
    (common-lisp:or grid-layout-element-row-index common-lisp:null))
   (row-span (common-lisp:error ":row-span is required") :type
    (common-lisp:or grid-layout-element-row-span common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'grid-layout-element 'make-grid-layout-element))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grid-layout-element))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grid-layout-element))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'element-id))
      (common-lisp:list
       (common-lisp:cons "ElementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'element-type))
      (common-lisp:list
       (common-lisp:cons "ElementType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-index))
      (common-lisp:list
       (common-lisp:cons "ColumnIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-span))
      (common-lisp:list
       (common-lisp:cons "ColumnSpan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-index))
      (common-lisp:list
       (common-lisp:cons "RowIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-span))
      (common-lisp:list
       (common-lisp:cons "RowSpan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grid-layout-element))
   common-lisp:nil))
(common-lisp:deftype grid-layout-element-column-index () 'common-lisp:integer)
(common-lisp:deftype grid-layout-element-column-span () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype grid-layout-element-list ()
   '(trivial-types:proper-list grid-layout-element))
 (common-lisp:defun |make-grid-layout-element-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list grid-layout-element))
   aws-sdk/generator/shape::members))
(common-lisp:deftype grid-layout-element-row-index () 'common-lisp:integer)
(common-lisp:deftype grid-layout-element-row-span () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (grid-layout-screen-canvas-size-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-grid-layout-screen-canvas-size-options-"))
   (resize-option (common-lisp:error ":resize-option is required") :type
    (common-lisp:or resize-option common-lisp:null))
   (optimized-view-port-width common-lisp:nil :type
    (common-lisp:or pixel-length common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'grid-layout-screen-canvas-size-options
                    'make-grid-layout-screen-canvas-size-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grid-layout-screen-canvas-size-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grid-layout-screen-canvas-size-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resize-option))
      (common-lisp:list
       (common-lisp:cons "ResizeOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'optimized-view-port-width))
      (common-lisp:list
       (common-lisp:cons "OptimizedViewPortWidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grid-layout-screen-canvas-size-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (group (:copier common-lisp:nil) (:conc-name "struct-shape-group-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (group-name common-lisp:nil :type
    (common-lisp:or group-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or group-description common-lisp:null))
   (principal-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'group 'make-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "PrincipalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group))
   common-lisp:nil))
(common-lisp:deftype group-description () 'common-lisp:string)
(common-lisp:deftype group-filter-attribute () 'common-lisp:string)
(common-lisp:deftype group-filter-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype group-list () '(trivial-types:proper-list group))
 (common-lisp:defun |make-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (group-member (:copier common-lisp:nil)
      (:conc-name "struct-shape-group-member-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (member-name common-lisp:nil :type
    (common-lisp:or group-member-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'group-member 'make-group-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-name))
      (common-lisp:list
       (common-lisp:cons "MemberName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype group-member-list ()
   '(trivial-types:proper-list group-member))
 (common-lisp:defun |make-group-member-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group-member))
   aws-sdk/generator/shape::members))
(common-lisp:deftype group-member-name () 'common-lisp:string)
(common-lisp:deftype group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (group-search-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-group-search-filter-"))
   (operator (common-lisp:error ":operator is required") :type
    (common-lisp:or group-filter-operator common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or group-filter-attribute common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'group-search-filter 'make-group-search-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-search-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-search-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "Operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-search-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype group-search-filter-list ()
   '(trivial-types:proper-list group-search-filter))
 (common-lisp:defun |make-group-search-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group-search-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype groups-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-groups-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (growth-rate-computation (:copier common-lisp:nil)
      (:conc-name "struct-shape-growth-rate-computation-"))
   (computation-id (common-lisp:error ":computation-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (time (common-lisp:error ":time is required") :type
    (common-lisp:or dimension-field common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or measure-field common-lisp:null))
   (period-size common-lisp:nil :type
    (common-lisp:or growth-rate-period-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'growth-rate-computation 'make-growth-rate-computation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          growth-rate-computation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          growth-rate-computation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computation-id))
      (common-lisp:list
       (common-lisp:cons "ComputationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period-size))
      (common-lisp:list
       (common-lisp:cons "PeriodSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          growth-rate-computation))
   common-lisp:nil))
(common-lisp:deftype growth-rate-period-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (gutter-style (:copier common-lisp:nil)
      (:conc-name "struct-shape-gutter-style-"))
   (show common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'gutter-style 'make-gutter-style))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gutter-style))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gutter-style))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'show))
      (common-lisp:list
       (common-lisp:cons "Show"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gutter-style))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (header-footer-section-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-header-footer-section-configuration-"))
   (section-id (common-lisp:error ":section-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (layout (common-lisp:error ":layout is required") :type
    (common-lisp:or section-layout-configuration common-lisp:null))
   (style common-lisp:nil :type
    (common-lisp:or section-style common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'header-footer-section-configuration
                    'make-header-footer-section-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          header-footer-section-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          header-footer-section-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'section-id))
      (common-lisp:list
       (common-lisp:cons "SectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layout))
      (common-lisp:list
       (common-lisp:cons "Layout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style))
      (common-lisp:list
       (common-lisp:cons "Style"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          header-footer-section-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype header-footer-section-configuration-list ()
   '(trivial-types:proper-list header-footer-section-configuration))
 (common-lisp:defun |make-header-footer-section-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            header-footer-section-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (heat-map-aggregated-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-heat-map-aggregated-field-wells-"))
   (rows common-lisp:nil :type
    (common-lisp:or heat-map-dimension-field-list common-lisp:null))
   (columns common-lisp:nil :type
    (common-lisp:or heat-map-dimension-field-list common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or heat-map-measure-field-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'heat-map-aggregated-field-wells
                    'make-heat-map-aggregated-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          heat-map-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          heat-map-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rows))
      (common-lisp:list
       (common-lisp:cons "Rows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "Columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          heat-map-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (heat-map-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-heat-map-configuration-"))
   (field-wells common-lisp:nil :type
    (common-lisp:or heat-map-field-wells common-lisp:null))
   (sort-configuration common-lisp:nil :type
    (common-lisp:or heat-map-sort-configuration common-lisp:null))
   (row-label-options common-lisp:nil :type
    (common-lisp:or chart-axis-label-options common-lisp:null))
   (column-label-options common-lisp:nil :type
    (common-lisp:or chart-axis-label-options common-lisp:null))
   (color-scale common-lisp:nil :type
    (common-lisp:or color-scale common-lisp:null))
   (legend common-lisp:nil :type
    (common-lisp:or legend-options common-lisp:null))
   (data-labels common-lisp:nil :type
    (common-lisp:or data-label-options common-lisp:null))
   (tooltip common-lisp:nil :type
    (common-lisp:or tooltip-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'heat-map-configuration 'make-heat-map-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          heat-map-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          heat-map-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-label-options))
      (common-lisp:list
       (common-lisp:cons "RowLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-label-options))
      (common-lisp:list
       (common-lisp:cons "ColumnLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-scale))
      (common-lisp:list
       (common-lisp:cons "ColorScale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legend))
      (common-lisp:list
       (common-lisp:cons "Legend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-labels))
      (common-lisp:list
       (common-lisp:cons "DataLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip))
      (common-lisp:list
       (common-lisp:cons "Tooltip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          heat-map-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype heat-map-dimension-field-list ()
   '(trivial-types:proper-list dimension-field))
 (common-lisp:defun |make-heat-map-dimension-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (heat-map-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-heat-map-field-wells-"))
   (heat-map-aggregated-field-wells common-lisp:nil :type
    (common-lisp:or heat-map-aggregated-field-wells common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'heat-map-field-wells 'make-heat-map-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input heat-map-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input heat-map-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'heat-map-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "HeatMapAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input heat-map-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype heat-map-measure-field-list ()
   '(trivial-types:proper-list measure-field))
 (common-lisp:defun |make-heat-map-measure-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list measure-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (heat-map-sort-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-heat-map-sort-configuration-"))
   (heat-map-row-sort common-lisp:nil :type
    (common-lisp:or field-sort-options-list common-lisp:null))
   (heat-map-column-sort common-lisp:nil :type
    (common-lisp:or field-sort-options-list common-lisp:null))
   (heat-map-row-items-limit-configuration common-lisp:nil :type
    (common-lisp:or items-limit-configuration common-lisp:null))
   (heat-map-column-items-limit-configuration common-lisp:nil :type
    (common-lisp:or items-limit-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'heat-map-sort-configuration
                    'make-heat-map-sort-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          heat-map-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          heat-map-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'heat-map-row-sort))
      (common-lisp:list
       (common-lisp:cons "HeatMapRowSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'heat-map-column-sort))
      (common-lisp:list
       (common-lisp:cons "HeatMapColumnSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'heat-map-row-items-limit-configuration))
      (common-lisp:list
       (common-lisp:cons "HeatMapRowItemsLimitConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'heat-map-column-items-limit-configuration))
      (common-lisp:list
       (common-lisp:cons "HeatMapColumnItemsLimitConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          heat-map-sort-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (heat-map-visual (:copier common-lisp:nil)
      (:conc-name "struct-shape-heat-map-visual-"))
   (visual-id (common-lisp:error ":visual-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or visual-title-label-options common-lisp:null))
   (subtitle common-lisp:nil :type
    (common-lisp:or visual-subtitle-label-options common-lisp:null))
   (chart-configuration common-lisp:nil :type
    (common-lisp:or heat-map-configuration common-lisp:null))
   (column-hierarchies common-lisp:nil :type
    (common-lisp:or column-hierarchy-list common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or visual-custom-action-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'heat-map-visual 'make-heat-map-visual))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input heat-map-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input heat-map-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-hierarchies))
      (common-lisp:list
       (common-lisp:cons "ColumnHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input heat-map-visual))
   common-lisp:nil))
(common-lisp:deftype hex-color () 'common-lisp:string)
(common-lisp:deftype hex-color-with-transparency () 'common-lisp:string)
(common-lisp:deftype hierarchy-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (histogram-aggregated-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-histogram-aggregated-field-wells-"))
   (values common-lisp:nil :type
    (common-lisp:or histogram-measure-field-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'histogram-aggregated-field-wells
                    'make-histogram-aggregated-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          histogram-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          histogram-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          histogram-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (histogram-bin-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-histogram-bin-options-"))
   (selected-bin-type common-lisp:nil :type
    (common-lisp:or histogram-bin-type common-lisp:null))
   (bin-count common-lisp:nil :type
    (common-lisp:or bin-count-options common-lisp:null))
   (bin-width common-lisp:nil :type
    (common-lisp:or bin-width-options common-lisp:null))
   (start-value common-lisp:nil :type
    (common-lisp:or double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'histogram-bin-options 'make-histogram-bin-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          histogram-bin-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          histogram-bin-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-bin-type))
      (common-lisp:list
       (common-lisp:cons "SelectedBinType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bin-count))
      (common-lisp:list
       (common-lisp:cons "BinCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bin-width))
      (common-lisp:list
       (common-lisp:cons "BinWidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-value))
      (common-lisp:list
       (common-lisp:cons "StartValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          histogram-bin-options))
   common-lisp:nil))
(common-lisp:deftype histogram-bin-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (histogram-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-histogram-configuration-"))
   (field-wells common-lisp:nil :type
    (common-lisp:or histogram-field-wells common-lisp:null))
   (xaxis-display-options common-lisp:nil :type
    (common-lisp:or axis-display-options common-lisp:null))
   (xaxis-label-options common-lisp:nil :type
    (common-lisp:or chart-axis-label-options common-lisp:null))
   (yaxis-display-options common-lisp:nil :type
    (common-lisp:or axis-display-options common-lisp:null))
   (bin-options common-lisp:nil :type
    (common-lisp:or histogram-bin-options common-lisp:null))
   (data-labels common-lisp:nil :type
    (common-lisp:or data-label-options common-lisp:null))
   (tooltip common-lisp:nil :type
    (common-lisp:or tooltip-options common-lisp:null))
   (visual-palette common-lisp:nil :type
    (common-lisp:or visual-palette common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'histogram-configuration 'make-histogram-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          histogram-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          histogram-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'xaxis-display-options))
      (common-lisp:list
       (common-lisp:cons "XAxisDisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xaxis-label-options))
      (common-lisp:list
       (common-lisp:cons "XAxisLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'yaxis-display-options))
      (common-lisp:list
       (common-lisp:cons "YAxisDisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bin-options))
      (common-lisp:list
       (common-lisp:cons "BinOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-labels))
      (common-lisp:list
       (common-lisp:cons "DataLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip))
      (common-lisp:list
       (common-lisp:cons "Tooltip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-palette))
      (common-lisp:list
       (common-lisp:cons "VisualPalette"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          histogram-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (histogram-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-histogram-field-wells-"))
   (histogram-aggregated-field-wells common-lisp:nil :type
    (common-lisp:or histogram-aggregated-field-wells common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'histogram-field-wells 'make-histogram-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          histogram-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          histogram-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'histogram-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "HistogramAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          histogram-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype histogram-measure-field-list ()
   '(trivial-types:proper-list measure-field))
 (common-lisp:defun |make-histogram-measure-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list measure-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (histogram-visual (:copier common-lisp:nil)
      (:conc-name "struct-shape-histogram-visual-"))
   (visual-id (common-lisp:error ":visual-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or visual-title-label-options common-lisp:null))
   (subtitle common-lisp:nil :type
    (common-lisp:or visual-subtitle-label-options common-lisp:null))
   (chart-configuration common-lisp:nil :type
    (common-lisp:or histogram-configuration common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or visual-custom-action-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'histogram-visual 'make-histogram-visual))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input histogram-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input histogram-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input histogram-visual))
   common-lisp:nil))
(common-lisp:deftype horizontal-text-alignment () 'common-lisp:string)
(common-lisp:deftype host () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (iampolicy-assignment (:copier common-lisp:nil)
      (:conc-name "struct-shape-iampolicy-assignment-"))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (assignment-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (assignment-name common-lisp:nil :type
    (common-lisp:or iampolicy-assignment-name common-lisp:null))
   (policy-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (identities common-lisp:nil :type
    (common-lisp:or identity-map common-lisp:null))
   (assignment-status common-lisp:nil :type
    (common-lisp:or assignment-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'iampolicy-assignment 'make-iampolicy-assignment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input iampolicy-assignment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input iampolicy-assignment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "AwsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-id))
      (common-lisp:list
       (common-lisp:cons "AssignmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-name))
      (common-lisp:list
       (common-lisp:cons "AssignmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identities))
      (common-lisp:list
       (common-lisp:cons "Identities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-status))
      (common-lisp:list
       (common-lisp:cons "AssignmentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input iampolicy-assignment))
   common-lisp:nil))
(common-lisp:deftype iampolicy-assignment-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (iampolicy-assignment-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-iampolicy-assignment-summary-"))
   (assignment-name common-lisp:nil :type
    (common-lisp:or iampolicy-assignment-name common-lisp:null))
   (assignment-status common-lisp:nil :type
    (common-lisp:or assignment-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'iampolicy-assignment-summary
                    'make-iampolicy-assignment-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          iampolicy-assignment-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          iampolicy-assignment-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-name))
      (common-lisp:list
       (common-lisp:cons "AssignmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-status))
      (common-lisp:list
       (common-lisp:cons "AssignmentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          iampolicy-assignment-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype iampolicy-assignment-summary-list ()
   '(trivial-types:proper-list iampolicy-assignment-summary))
 (common-lisp:defun |make-iampolicy-assignment-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            iampolicy-assignment-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype icon () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype identity-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-identity-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype identity-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype identity-name-list ()
   '(trivial-types:proper-list identity-name))
 (common-lisp:defun |make-identity-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list identity-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype identity-store () 'common-lisp:string)
(common-lisp:deftype identity-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition identity-type-not-supported-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       identity-type-not-supported-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       identity-type-not-supported-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'identity-type-not-supported-exception
                    'identity-type-not-supported-exception-message
                    'identity-type-not-supported-exception-request-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (ingestion (:copier common-lisp:nil)
      (:conc-name "struct-shape-ingestion-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (ingestion-id common-lisp:nil :type
    (common-lisp:or ingestion-id common-lisp:null))
   (ingestion-status (common-lisp:error ":ingestion-status is required") :type
    (common-lisp:or ingestion-status common-lisp:null))
   (error-info common-lisp:nil :type
    (common-lisp:or error-info common-lisp:null))
   (row-info common-lisp:nil :type (common-lisp:or row-info common-lisp:null))
   (queue-info common-lisp:nil :type
    (common-lisp:or queue-info common-lisp:null))
   (created-time (common-lisp:error ":created-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (ingestion-time-in-seconds common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (ingestion-size-in-bytes common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (request-source common-lisp:nil :type
    (common-lisp:or ingestion-request-source common-lisp:null))
   (request-type common-lisp:nil :type
    (common-lisp:or ingestion-request-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ingestion 'make-ingestion))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ingestion))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ingestion))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-id))
      (common-lisp:list
       (common-lisp:cons "IngestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-status))
      (common-lisp:list
       (common-lisp:cons "IngestionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-info))
      (common-lisp:list
       (common-lisp:cons "ErrorInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-info))
      (common-lisp:list
       (common-lisp:cons "RowInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-info))
      (common-lisp:list
       (common-lisp:cons "QueueInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingestion-time-in-seconds))
      (common-lisp:list
       (common-lisp:cons "IngestionTimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingestion-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "IngestionSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-source))
      (common-lisp:list
       (common-lisp:cons "RequestSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-type))
      (common-lisp:list
       (common-lisp:cons "RequestType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ingestion))
   common-lisp:nil))
(common-lisp:deftype ingestion-error-type () 'common-lisp:string)
(common-lisp:deftype ingestion-id () 'common-lisp:string)
(common-lisp:deftype ingestion-max-results () 'common-lisp:integer)
(common-lisp:deftype ingestion-request-source () 'common-lisp:string)
(common-lisp:deftype ingestion-request-type () 'common-lisp:string)
(common-lisp:deftype ingestion-status () 'common-lisp:string)
(common-lisp:deftype ingestion-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ingestions () '(trivial-types:proper-list ingestion))
 (common-lisp:defun |make-ingestions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ingestion))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (input-column (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-column-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or column-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or input-column-data-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'input-column 'make-input-column))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-column))
   common-lisp:nil))
(common-lisp:deftype input-column-data-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype input-column-list ()
   '(trivial-types:proper-list input-column))
 (common-lisp:defun |make-input-column-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-column))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (insight-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-insight-configuration-"))
   (computations common-lisp:nil :type
    (common-lisp:or computation-list common-lisp:null))
   (custom-narrative common-lisp:nil :type
    (common-lisp:or custom-narrative-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'insight-configuration 'make-insight-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          insight-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          insight-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computations))
      (common-lisp:list
       (common-lisp:cons "Computations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-narrative))
      (common-lisp:list
       (common-lisp:cons "CustomNarrative"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          insight-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (insight-visual (:copier common-lisp:nil)
      (:conc-name "struct-shape-insight-visual-"))
   (visual-id (common-lisp:error ":visual-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or visual-title-label-options common-lisp:null))
   (subtitle common-lisp:nil :type
    (common-lisp:or visual-subtitle-label-options common-lisp:null))
   (insight-configuration common-lisp:nil :type
    (common-lisp:or insight-configuration common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or visual-custom-action-list common-lisp:null))
   (data-set-identifier (common-lisp:error ":data-set-identifier is required")
    :type (common-lisp:or data-set-identifier common-lisp:null)))
 (common-lisp:export (common-lisp:list 'insight-visual 'make-insight-visual))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input insight-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input insight-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'insight-configuration))
      (common-lisp:list
       (common-lisp:cons "InsightConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-identifier))
      (common-lisp:list
       (common-lisp:cons "DataSetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input insight-visual))
   common-lisp:nil))
(common-lisp:deftype instance-id () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype integer-default-value-list ()
   '(trivial-types:proper-list sensitive-long-object))
 (common-lisp:defun |make-integer-default-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sensitive-long-object))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (integer-default-values (:copier common-lisp:nil)
      (:conc-name "struct-shape-integer-default-values-"))
   (dynamic-value common-lisp:nil :type
    (common-lisp:or dynamic-default-value common-lisp:null))
   (static-values common-lisp:nil :type
    (common-lisp:or integer-default-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'integer-default-values 'make-integer-default-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          integer-default-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          integer-default-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamic-value))
      (common-lisp:list
       (common-lisp:cons "DynamicValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-values))
      (common-lisp:list
       (common-lisp:cons "StaticValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          integer-default-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (integer-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-integer-parameter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or sensitive-long-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'integer-parameter 'make-integer-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input integer-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input integer-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input integer-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (integer-parameter-declaration (:copier common-lisp:nil)
      (:conc-name "struct-shape-integer-parameter-declaration-"))
   (parameter-value-type
    (common-lisp:error ":parameter-value-type is required") :type
    (common-lisp:or parameter-value-type common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or parameter-name common-lisp:null))
   (default-values common-lisp:nil :type
    (common-lisp:or integer-default-values common-lisp:null))
   (value-when-unset common-lisp:nil :type
    (common-lisp:or integer-value-when-unset-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'integer-parameter-declaration
                    'make-integer-parameter-declaration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          integer-parameter-declaration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          integer-parameter-declaration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-value-type))
      (common-lisp:list
       (common-lisp:cons "ParameterValueType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-values))
      (common-lisp:list
       (common-lisp:cons "DefaultValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-when-unset))
      (common-lisp:list
       (common-lisp:cons "ValueWhenUnset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          integer-parameter-declaration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype integer-parameter-list ()
   '(trivial-types:proper-list integer-parameter))
 (common-lisp:defun |make-integer-parameter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list integer-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (integer-value-when-unset-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-integer-value-when-unset-configuration-"))
   (value-when-unset-option common-lisp:nil :type
    (common-lisp:or value-when-unset-option common-lisp:null))
   (custom-value common-lisp:nil :type
    (common-lisp:or sensitive-long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'integer-value-when-unset-configuration
                    'make-integer-value-when-unset-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          integer-value-when-unset-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          integer-value-when-unset-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-when-unset-option))
      (common-lisp:list
       (common-lisp:cons "ValueWhenUnsetOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-value))
      (common-lisp:list
       (common-lisp:cons "CustomValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          integer-value-when-unset-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-failure-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-failure-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       internal-failure-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'internal-failure-exception
                    'internal-failure-exception-message
                    'internal-failure-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-next-token-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       invalid-next-token-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token-exception
                    'invalid-next-token-exception-message
                    'invalid-next-token-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-value-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-value-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       invalid-parameter-value-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-value-exception
                    'invalid-parameter-value-exception-message
                    'invalid-parameter-value-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       invalid-request-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message
                    'invalid-request-exception-request-id)))
(common-lisp:deftype ip-restriction-rule-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ip-restriction-rule-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-ip-restriction-rule-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (items-limit-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-items-limit-configuration-"))
   (items-limit common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (other-categories common-lisp:nil :type
    (common-lisp:or other-categories common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'items-limit-configuration
                    'make-items-limit-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          items-limit-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          items-limit-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items-limit))
      (common-lisp:list
       (common-lisp:cons "ItemsLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'other-categories))
      (common-lisp:list
       (common-lisp:cons "OtherCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          items-limit-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (jira-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-jira-parameters-"))
   (site-base-url (common-lisp:error ":site-base-url is required") :type
    (common-lisp:or site-base-url common-lisp:null)))
 (common-lisp:export (common-lisp:list 'jira-parameters 'make-jira-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input jira-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input jira-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'site-base-url))
      (common-lisp:list
       (common-lisp:cons "SiteBaseUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input jira-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (join-instruction (:copier common-lisp:nil)
      (:conc-name "struct-shape-join-instruction-"))
   (left-operand (common-lisp:error ":left-operand is required") :type
    (common-lisp:or logical-table-id common-lisp:null))
   (right-operand (common-lisp:error ":right-operand is required") :type
    (common-lisp:or logical-table-id common-lisp:null))
   (left-join-key-properties common-lisp:nil :type
    (common-lisp:or join-key-properties common-lisp:null))
   (right-join-key-properties common-lisp:nil :type
    (common-lisp:or join-key-properties common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or join-type common-lisp:null))
   (on-clause (common-lisp:error ":on-clause is required") :type
    (common-lisp:or on-clause common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'join-instruction 'make-join-instruction))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input join-instruction))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input join-instruction))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'left-operand))
      (common-lisp:list
       (common-lisp:cons "LeftOperand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'right-operand))
      (common-lisp:list
       (common-lisp:cons "RightOperand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'left-join-key-properties))
      (common-lisp:list
       (common-lisp:cons "LeftJoinKeyProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'right-join-key-properties))
      (common-lisp:list
       (common-lisp:cons "RightJoinKeyProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-clause))
      (common-lisp:list
       (common-lisp:cons "OnClause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input join-instruction))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (join-key-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-join-key-properties-"))
   (unique-key common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'join-key-properties 'make-join-key-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input join-key-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input join-key-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unique-key))
      (common-lisp:list
       (common-lisp:cons "UniqueKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input join-key-properties))
   common-lisp:nil))
(common-lisp:deftype join-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (kpiconditional-formatting (:copier common-lisp:nil)
      (:conc-name "struct-shape-kpiconditional-formatting-"))
   (conditional-formatting-options common-lisp:nil :type
    (common-lisp:or kpiconditional-formatting-option-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kpiconditional-formatting
                    'make-kpiconditional-formatting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kpiconditional-formatting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kpiconditional-formatting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-formatting-options))
      (common-lisp:list
       (common-lisp:cons "ConditionalFormattingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kpiconditional-formatting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kpiconditional-formatting-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-kpiconditional-formatting-option-"))
   (primary-value common-lisp:nil :type
    (common-lisp:or kpiprimary-value-conditional-formatting common-lisp:null))
   (progress-bar common-lisp:nil :type
    (common-lisp:or kpiprogress-bar-conditional-formatting common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kpiconditional-formatting-option
                    'make-kpiconditional-formatting-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kpiconditional-formatting-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kpiconditional-formatting-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-value))
      (common-lisp:list
       (common-lisp:cons "PrimaryValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress-bar))
      (common-lisp:list
       (common-lisp:cons "ProgressBar"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kpiconditional-formatting-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype kpiconditional-formatting-option-list ()
   '(trivial-types:proper-list kpiconditional-formatting-option))
 (common-lisp:defun |make-kpiconditional-formatting-option-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            kpiconditional-formatting-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (kpiconfiguration (:copier common-lisp:nil)
      (:conc-name "struct-shape-kpiconfiguration-"))
   (field-wells common-lisp:nil :type
    (common-lisp:or kpifield-wells common-lisp:null))
   (sort-configuration common-lisp:nil :type
    (common-lisp:or kpisort-configuration common-lisp:null))
   (kpioptions common-lisp:nil :type
    (common-lisp:or kpioptions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kpiconfiguration 'make-kpiconfiguration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kpiconfiguration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kpiconfiguration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kpioptions))
      (common-lisp:list
       (common-lisp:cons "KPIOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kpiconfiguration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kpifield-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-kpifield-wells-"))
   (values common-lisp:nil :type
    (common-lisp:or measure-field-list common-lisp:null))
   (target-values common-lisp:nil :type
    (common-lisp:or measure-field-list common-lisp:null))
   (trend-groups common-lisp:nil :type
    (common-lisp:or dimension-field-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'kpifield-wells 'make-kpifield-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kpifield-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kpifield-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-values))
      (common-lisp:list
       (common-lisp:cons "TargetValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trend-groups))
      (common-lisp:list
       (common-lisp:cons "TrendGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kpifield-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kpioptions (:copier common-lisp:nil)
      (:conc-name "struct-shape-kpioptions-"))
   (progress-bar common-lisp:nil :type
    (common-lisp:or progress-bar-options common-lisp:null))
   (trend-arrows common-lisp:nil :type
    (common-lisp:or trend-arrow-options common-lisp:null))
   (secondary-value common-lisp:nil :type
    (common-lisp:or secondary-value-options common-lisp:null))
   (comparison common-lisp:nil :type
    (common-lisp:or comparison-configuration common-lisp:null))
   (primary-value-display-type common-lisp:nil :type
    (common-lisp:or primary-value-display-type common-lisp:null))
   (primary-value-font-configuration common-lisp:nil :type
    (common-lisp:or font-configuration common-lisp:null))
   (secondary-value-font-configuration common-lisp:nil :type
    (common-lisp:or font-configuration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'kpioptions 'make-kpioptions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kpioptions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kpioptions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress-bar))
      (common-lisp:list
       (common-lisp:cons "ProgressBar"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trend-arrows))
      (common-lisp:list
       (common-lisp:cons "TrendArrows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secondary-value))
      (common-lisp:list
       (common-lisp:cons "SecondaryValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison))
      (common-lisp:list
       (common-lisp:cons "Comparison"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-value-display-type))
      (common-lisp:list
       (common-lisp:cons "PrimaryValueDisplayType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-value-font-configuration))
      (common-lisp:list
       (common-lisp:cons "PrimaryValueFontConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secondary-value-font-configuration))
      (common-lisp:list
       (common-lisp:cons "SecondaryValueFontConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kpioptions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kpiprimary-value-conditional-formatting (:copier common-lisp:nil)
      (:conc-name "struct-shape-kpiprimary-value-conditional-formatting-"))
   (text-color common-lisp:nil :type
    (common-lisp:or conditional-formatting-color common-lisp:null))
   (icon common-lisp:nil :type
    (common-lisp:or conditional-formatting-icon common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kpiprimary-value-conditional-formatting
                    'make-kpiprimary-value-conditional-formatting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kpiprimary-value-conditional-formatting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kpiprimary-value-conditional-formatting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-color))
      (common-lisp:list
       (common-lisp:cons "TextColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icon))
      (common-lisp:list
       (common-lisp:cons "Icon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kpiprimary-value-conditional-formatting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kpiprogress-bar-conditional-formatting (:copier common-lisp:nil)
      (:conc-name "struct-shape-kpiprogress-bar-conditional-formatting-"))
   (foreground-color common-lisp:nil :type
    (common-lisp:or conditional-formatting-color common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kpiprogress-bar-conditional-formatting
                    'make-kpiprogress-bar-conditional-formatting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kpiprogress-bar-conditional-formatting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kpiprogress-bar-conditional-formatting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'foreground-color))
      (common-lisp:list
       (common-lisp:cons "ForegroundColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kpiprogress-bar-conditional-formatting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kpisort-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-kpisort-configuration-"))
   (trend-group-sort common-lisp:nil :type
    (common-lisp:or field-sort-options-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kpisort-configuration 'make-kpisort-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kpisort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kpisort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trend-group-sort))
      (common-lisp:list
       (common-lisp:cons "TrendGroupSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kpisort-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kpivisual (:copier common-lisp:nil)
      (:conc-name "struct-shape-kpivisual-"))
   (visual-id (common-lisp:error ":visual-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or visual-title-label-options common-lisp:null))
   (subtitle common-lisp:nil :type
    (common-lisp:or visual-subtitle-label-options common-lisp:null))
   (chart-configuration common-lisp:nil :type
    (common-lisp:or kpiconfiguration common-lisp:null))
   (conditional-formatting common-lisp:nil :type
    (common-lisp:or kpiconditional-formatting common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or visual-custom-action-list common-lisp:null))
   (column-hierarchies common-lisp:nil :type
    (common-lisp:or column-hierarchy-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'kpivisual 'make-kpivisual))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kpivisual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kpivisual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-formatting))
      (common-lisp:list
       (common-lisp:cons "ConditionalFormatting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-hierarchies))
      (common-lisp:list
       (common-lisp:cons "ColumnHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kpivisual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (label-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-label-options-"))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (font-configuration common-lisp:nil :type
    (common-lisp:or font-configuration common-lisp:null))
   (custom-label common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'label-options 'make-label-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input label-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input label-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-configuration))
      (common-lisp:list
       (common-lisp:cons "FontConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-label))
      (common-lisp:list
       (common-lisp:cons "CustomLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input label-options))
   common-lisp:nil))
(common-lisp:deftype latitude () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (layout (:copier common-lisp:nil) (:conc-name "struct-shape-layout-"))
   (configuration (common-lisp:error ":configuration is required") :type
    (common-lisp:or layout-configuration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'layout 'make-layout))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input layout))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input layout))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input layout))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (layout-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-layout-configuration-"))
   (grid-layout common-lisp:nil :type
    (common-lisp:or grid-layout-configuration common-lisp:null))
   (free-form-layout common-lisp:nil :type
    (common-lisp:or free-form-layout-configuration common-lisp:null))
   (section-based-layout common-lisp:nil :type
    (common-lisp:or section-based-layout-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'layout-configuration 'make-layout-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input layout-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input layout-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grid-layout))
      (common-lisp:list
       (common-lisp:cons "GridLayout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'free-form-layout))
      (common-lisp:list
       (common-lisp:cons "FreeFormLayout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'section-based-layout))
      (common-lisp:list
       (common-lisp:cons "SectionBasedLayout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input layout-configuration))
   common-lisp:nil))
(common-lisp:deftype layout-element-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype layout-list () '(trivial-types:proper-list layout))
 (common-lisp:defun |make-layout-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list layout))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (legend-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-legend-options-"))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or label-options common-lisp:null))
   (position common-lisp:nil :type
    (common-lisp:or legend-position common-lisp:null))
   (width common-lisp:nil :type (common-lisp:or pixel-length common-lisp:null))
   (height common-lisp:nil :type
    (common-lisp:or pixel-length common-lisp:null)))
 (common-lisp:export (common-lisp:list 'legend-options 'make-legend-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input legend-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input legend-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "Position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input legend-options))
   common-lisp:nil))
(common-lisp:deftype legend-position () 'common-lisp:string)
(common-lisp:deftype length () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       limit-exceeded-exception-resource-type)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       limit-exceeded-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception 'limit-exceeded-exception-message
                    'limit-exceeded-exception-resource-type
                    'limit-exceeded-exception-request-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (line-chart-aggregated-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-line-chart-aggregated-field-wells-"))
   (category common-lisp:nil :type
    (common-lisp:or dimension-field-list common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or measure-field-list common-lisp:null))
   (colors common-lisp:nil :type
    (common-lisp:or dimension-field-list common-lisp:null))
   (small-multiples common-lisp:nil :type
    (common-lisp:or small-multiples-dimension-field-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'line-chart-aggregated-field-wells
                    'make-line-chart-aggregated-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'colors))
      (common-lisp:list
       (common-lisp:cons "Colors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'small-multiples))
      (common-lisp:list
       (common-lisp:cons "SmallMultiples"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (line-chart-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-line-chart-configuration-"))
   (field-wells common-lisp:nil :type
    (common-lisp:or line-chart-field-wells common-lisp:null))
   (sort-configuration common-lisp:nil :type
    (common-lisp:or line-chart-sort-configuration common-lisp:null))
   (forecast-configurations common-lisp:nil :type
    (common-lisp:or forecast-configuration-list common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or line-chart-type common-lisp:null))
   (small-multiples-options common-lisp:nil :type
    (common-lisp:or small-multiples-options common-lisp:null))
   (xaxis-display-options common-lisp:nil :type
    (common-lisp:or axis-display-options common-lisp:null))
   (xaxis-label-options common-lisp:nil :type
    (common-lisp:or chart-axis-label-options common-lisp:null))
   (primary-yaxis-display-options common-lisp:nil :type
    (common-lisp:or line-series-axis-display-options common-lisp:null))
   (primary-yaxis-label-options common-lisp:nil :type
    (common-lisp:or chart-axis-label-options common-lisp:null))
   (secondary-yaxis-display-options common-lisp:nil :type
    (common-lisp:or line-series-axis-display-options common-lisp:null))
   (secondary-yaxis-label-options common-lisp:nil :type
    (common-lisp:or chart-axis-label-options common-lisp:null))
   (default-series-settings common-lisp:nil :type
    (common-lisp:or line-chart-default-series-settings common-lisp:null))
   (series common-lisp:nil :type
    (common-lisp:or series-item-list common-lisp:null))
   (legend common-lisp:nil :type
    (common-lisp:or legend-options common-lisp:null))
   (data-labels common-lisp:nil :type
    (common-lisp:or data-label-options common-lisp:null))
   (reference-lines common-lisp:nil :type
    (common-lisp:or reference-line-list common-lisp:null))
   (tooltip common-lisp:nil :type
    (common-lisp:or tooltip-options common-lisp:null))
   (contribution-analysis-defaults common-lisp:nil :type
    (common-lisp:or contribution-analysis-default-list common-lisp:null))
   (visual-palette common-lisp:nil :type
    (common-lisp:or visual-palette common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'line-chart-configuration 'make-line-chart-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forecast-configurations))
      (common-lisp:list
       (common-lisp:cons "ForecastConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'small-multiples-options))
      (common-lisp:list
       (common-lisp:cons "SmallMultiplesOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'xaxis-display-options))
      (common-lisp:list
       (common-lisp:cons "XAxisDisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xaxis-label-options))
      (common-lisp:list
       (common-lisp:cons "XAxisLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-yaxis-display-options))
      (common-lisp:list
       (common-lisp:cons "PrimaryYAxisDisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-yaxis-label-options))
      (common-lisp:list
       (common-lisp:cons "PrimaryYAxisLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secondary-yaxis-display-options))
      (common-lisp:list
       (common-lisp:cons "SecondaryYAxisDisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secondary-yaxis-label-options))
      (common-lisp:list
       (common-lisp:cons "SecondaryYAxisLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-series-settings))
      (common-lisp:list
       (common-lisp:cons "DefaultSeriesSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'series))
      (common-lisp:list
       (common-lisp:cons "Series"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legend))
      (common-lisp:list
       (common-lisp:cons "Legend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-labels))
      (common-lisp:list
       (common-lisp:cons "DataLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-lines))
      (common-lisp:list
       (common-lisp:cons "ReferenceLines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip))
      (common-lisp:list
       (common-lisp:cons "Tooltip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contribution-analysis-defaults))
      (common-lisp:list
       (common-lisp:cons "ContributionAnalysisDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-palette))
      (common-lisp:list
       (common-lisp:cons "VisualPalette"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (line-chart-default-series-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-line-chart-default-series-settings-"))
   (axis-binding common-lisp:nil :type
    (common-lisp:or axis-binding common-lisp:null))
   (line-style-settings common-lisp:nil :type
    (common-lisp:or line-chart-line-style-settings common-lisp:null))
   (marker-style-settings common-lisp:nil :type
    (common-lisp:or line-chart-marker-style-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'line-chart-default-series-settings
                    'make-line-chart-default-series-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-default-series-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-default-series-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'axis-binding))
      (common-lisp:list
       (common-lisp:cons "AxisBinding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-style-settings))
      (common-lisp:list
       (common-lisp:cons "LineStyleSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'marker-style-settings))
      (common-lisp:list
       (common-lisp:cons "MarkerStyleSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-default-series-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (line-chart-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-line-chart-field-wells-"))
   (line-chart-aggregated-field-wells common-lisp:nil :type
    (common-lisp:or line-chart-aggregated-field-wells common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'line-chart-field-wells 'make-line-chart-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'line-chart-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "LineChartAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-field-wells))
   common-lisp:nil))
(common-lisp:deftype line-chart-line-style () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (line-chart-line-style-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-line-chart-line-style-settings-"))
   (line-visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (line-interpolation common-lisp:nil :type
    (common-lisp:or line-interpolation common-lisp:null))
   (line-style common-lisp:nil :type
    (common-lisp:or line-chart-line-style common-lisp:null))
   (line-width common-lisp:nil :type
    (common-lisp:or pixel-length common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'line-chart-line-style-settings
                    'make-line-chart-line-style-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-line-style-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-line-style-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-visibility))
      (common-lisp:list
       (common-lisp:cons "LineVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-interpolation))
      (common-lisp:list
       (common-lisp:cons "LineInterpolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-style))
      (common-lisp:list
       (common-lisp:cons "LineStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-width))
      (common-lisp:list
       (common-lisp:cons "LineWidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-line-style-settings))
   common-lisp:nil))
(common-lisp:deftype line-chart-marker-shape () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (line-chart-marker-style-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-line-chart-marker-style-settings-"))
   (marker-visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (marker-shape common-lisp:nil :type
    (common-lisp:or line-chart-marker-shape common-lisp:null))
   (marker-size common-lisp:nil :type
    (common-lisp:or pixel-length common-lisp:null))
   (marker-color common-lisp:nil :type
    (common-lisp:or hex-color common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'line-chart-marker-style-settings
                    'make-line-chart-marker-style-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-marker-style-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-marker-style-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker-visibility))
      (common-lisp:list
       (common-lisp:cons "MarkerVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker-shape))
      (common-lisp:list
       (common-lisp:cons "MarkerShape"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker-size))
      (common-lisp:list
       (common-lisp:cons "MarkerSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker-color))
      (common-lisp:list
       (common-lisp:cons "MarkerColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-marker-style-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (line-chart-series-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-line-chart-series-settings-"))
   (line-style-settings common-lisp:nil :type
    (common-lisp:or line-chart-line-style-settings common-lisp:null))
   (marker-style-settings common-lisp:nil :type
    (common-lisp:or line-chart-marker-style-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'line-chart-series-settings
                    'make-line-chart-series-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-series-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-series-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-style-settings))
      (common-lisp:list
       (common-lisp:cons "LineStyleSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'marker-style-settings))
      (common-lisp:list
       (common-lisp:cons "MarkerStyleSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-series-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (line-chart-sort-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-line-chart-sort-configuration-"))
   (category-sort common-lisp:nil :type
    (common-lisp:or field-sort-options-list common-lisp:null))
   (category-items-limit-configuration common-lisp:nil :type
    (common-lisp:or items-limit-configuration common-lisp:null))
   (color-items-limit-configuration common-lisp:nil :type
    (common-lisp:or items-limit-configuration common-lisp:null))
   (small-multiples-sort common-lisp:nil :type
    (common-lisp:or field-sort-options-list common-lisp:null))
   (small-multiples-limit-configuration common-lisp:nil :type
    (common-lisp:or items-limit-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'line-chart-sort-configuration
                    'make-line-chart-sort-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-sort))
      (common-lisp:list
       (common-lisp:cons "CategorySort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-items-limit-configuration))
      (common-lisp:list
       (common-lisp:cons "CategoryItemsLimitConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'color-items-limit-configuration))
      (common-lisp:list
       (common-lisp:cons "ColorItemsLimitConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'small-multiples-sort))
      (common-lisp:list
       (common-lisp:cons "SmallMultiplesSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'small-multiples-limit-configuration))
      (common-lisp:list
       (common-lisp:cons "SmallMultiplesLimitConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-sort-configuration))
   common-lisp:nil))
(common-lisp:deftype line-chart-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (line-chart-visual (:copier common-lisp:nil)
      (:conc-name "struct-shape-line-chart-visual-"))
   (visual-id (common-lisp:error ":visual-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or visual-title-label-options common-lisp:null))
   (subtitle common-lisp:nil :type
    (common-lisp:or visual-subtitle-label-options common-lisp:null))
   (chart-configuration common-lisp:nil :type
    (common-lisp:or line-chart-configuration common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or visual-custom-action-list common-lisp:null))
   (column-hierarchies common-lisp:nil :type
    (common-lisp:or column-hierarchy-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'line-chart-visual 'make-line-chart-visual))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input line-chart-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input line-chart-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-hierarchies))
      (common-lisp:list
       (common-lisp:cons "ColumnHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input line-chart-visual))
   common-lisp:nil))
(common-lisp:deftype line-interpolation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (line-series-axis-display-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-line-series-axis-display-options-"))
   (axis-options common-lisp:nil :type
    (common-lisp:or axis-display-options common-lisp:null))
   (missing-data-configurations common-lisp:nil :type
    (common-lisp:or missing-data-configuration-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'line-series-axis-display-options
                    'make-line-series-axis-display-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          line-series-axis-display-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          line-series-axis-display-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'axis-options))
      (common-lisp:list
       (common-lisp:cons "AxisOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'missing-data-configurations))
      (common-lisp:list
       (common-lisp:cons "MissingDataConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          line-series-axis-display-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (link-sharing-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-link-sharing-configuration-"))
   (permissions common-lisp:nil :type
    (common-lisp:or resource-permission-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'link-sharing-configuration
                    'make-link-sharing-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          link-sharing-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          link-sharing-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          link-sharing-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-analyses-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-analyses-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-analyses-request 'make-list-analyses-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-analyses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-analyses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-analyses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-analyses-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-analyses-response-"))
   (analysis-summary-list common-lisp:nil :type
    (common-lisp:or analysis-summary-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-analyses-response 'make-list-analyses-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-analyses-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-analyses-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analysis-summary-list))
      (common-lisp:list
       (common-lisp:cons "AnalysisSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-analyses-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-control-display-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-control-display-options-"))
   (search-options common-lisp:nil :type
    (common-lisp:or list-control-search-options common-lisp:null))
   (select-all-options common-lisp:nil :type
    (common-lisp:or list-control-select-all-options common-lisp:null))
   (title-options common-lisp:nil :type
    (common-lisp:or label-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-control-display-options
                    'make-list-control-display-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-control-display-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-control-display-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-options))
      (common-lisp:list
       (common-lisp:cons "SearchOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-all-options))
      (common-lisp:list
       (common-lisp:cons "SelectAllOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title-options))
      (common-lisp:list
       (common-lisp:cons "TitleOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-control-display-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-control-search-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-control-search-options-"))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-control-search-options
                    'make-list-control-search-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-control-search-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-control-search-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-control-search-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-control-select-all-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-control-select-all-options-"))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-control-select-all-options
                    'make-list-control-select-all-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-control-select-all-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-control-select-all-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-control-select-all-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-dashboard-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-dashboard-versions-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (dashboard-id (common-lisp:error ":dashboard-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-dashboard-versions-request
                    'make-list-dashboard-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboard-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboard-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboard-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-dashboard-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-dashboard-versions-response-"))
   (dashboard-version-summary-list common-lisp:nil :type
    (common-lisp:or dashboard-version-summary-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-dashboard-versions-response
                    'make-list-dashboard-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboard-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboard-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dashboard-version-summary-list))
      (common-lisp:list
       (common-lisp:cons "DashboardVersionSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboard-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-dashboards-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-dashboards-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-dashboards-request 'make-list-dashboards-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboards-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboards-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboards-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-dashboards-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-dashboards-response-"))
   (dashboard-summary-list common-lisp:nil :type
    (common-lisp:or dashboard-summary-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-dashboards-response 'make-list-dashboards-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboards-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboards-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dashboard-summary-list))
      (common-lisp:list
       (common-lisp:cons "DashboardSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboards-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-sets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-sets-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-sets-request 'make-list-data-sets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-sets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-sets-response-"))
   (data-set-summaries common-lisp:nil :type
    (common-lisp:or data-set-summary-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-sets-response 'make-list-data-sets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-summaries))
      (common-lisp:list
       (common-lisp:cons "DataSetSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-sources-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-sources-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-sources-request
                    'make-list-data-sources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-sources-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-sources-response-"))
   (data-sources common-lisp:nil :type
    (common-lisp:or data-source-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-sources-response
                    'make-list-data-sources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-sources))
      (common-lisp:list
       (common-lisp:cons "DataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-folder-members-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-folder-members-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (folder-id (common-lisp:error ":folder-id is required") :type
    (common-lisp:or restrictive-resource-id common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-folder-members-request
                    'make-list-folder-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-folder-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-folder-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-folder-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-folder-members-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-folder-members-response-"))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (folder-member-list common-lisp:nil :type
    (common-lisp:or folder-member-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-folder-members-response
                    'make-list-folder-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-folder-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-folder-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-member-list))
      (common-lisp:list
       (common-lisp:cons "FolderMemberList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-folder-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-folders-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-folders-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-folders-request 'make-list-folders-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-folders-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-folders-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-folders-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-folders-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-folders-response-"))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (folder-summary-list common-lisp:nil :type
    (common-lisp:or folder-summary-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-folders-response 'make-list-folders-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-folders-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-folders-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-summary-list))
      (common-lisp:list
       (common-lisp:cons "FolderSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-folders-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-group-memberships-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-group-memberships-request-"))
   (group-name (common-lisp:error ":group-name is required") :type
    (common-lisp:or group-name common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-group-memberships-request
                    'make-list-group-memberships-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-group-memberships-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-group-memberships-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-group-memberships-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-group-memberships-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-group-memberships-response-"))
   (group-member-list common-lisp:nil :type
    (common-lisp:or group-member-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-group-memberships-response
                    'make-list-group-memberships-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-group-memberships-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-group-memberships-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-member-list))
      (common-lisp:list
       (common-lisp:cons "GroupMemberList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-group-memberships-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-groups-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-groups-request 'make-list-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-groups-response-"))
   (group-list common-lisp:nil :type
    (common-lisp:or group-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-groups-response 'make-list-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-list))
      (common-lisp:list
       (common-lisp:cons "GroupList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-iampolicy-assignments-for-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-iampolicy-assignments-for-user-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or user-name common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-iampolicy-assignments-for-user-request
                    'make-list-iampolicy-assignments-for-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-iampolicy-assignments-for-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-iampolicy-assignments-for-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-iampolicy-assignments-for-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-iampolicy-assignments-for-user-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-iampolicy-assignments-for-user-response-"))
   (active-assignments common-lisp:nil :type
    (common-lisp:or active-iampolicy-assignment-list common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-iampolicy-assignments-for-user-response
                    'make-list-iampolicy-assignments-for-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-iampolicy-assignments-for-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-iampolicy-assignments-for-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-assignments))
      (common-lisp:list
       (common-lisp:cons "ActiveAssignments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-iampolicy-assignments-for-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-iampolicy-assignments-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-iampolicy-assignments-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (assignment-status common-lisp:nil :type
    (common-lisp:or assignment-status common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-iampolicy-assignments-request
                    'make-list-iampolicy-assignments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-iampolicy-assignments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-iampolicy-assignments-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-status))
      (common-lisp:list
       (common-lisp:cons "AssignmentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-iampolicy-assignments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-iampolicy-assignments-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-iampolicy-assignments-response-"))
   (iampolicy-assignments common-lisp:nil :type
    (common-lisp:or iampolicy-assignment-summary-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-iampolicy-assignments-response
                    'make-list-iampolicy-assignments-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-iampolicy-assignments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-iampolicy-assignments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iampolicy-assignments))
      (common-lisp:list
       (common-lisp:cons "IAMPolicyAssignments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-iampolicy-assignments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-ingestions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-ingestions-request-"))
   (data-set-id (common-lisp:error ":data-set-id is required") :type
    (common-lisp:or string common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or ingestion-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-ingestions-request 'make-list-ingestions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-ingestions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-ingestions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-ingestions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-ingestions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-ingestions-response-"))
   (ingestions common-lisp:nil :type
    (common-lisp:or ingestions common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-ingestions-response 'make-list-ingestions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-ingestions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-ingestions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestions))
      (common-lisp:list
       (common-lisp:cons "Ingestions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-ingestions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-namespaces-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-namespaces-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-namespaces-request 'make-list-namespaces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-namespaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-namespaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-namespaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-namespaces-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-namespaces-response-"))
   (namespaces common-lisp:nil :type
    (common-lisp:or namespaces common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-namespaces-response 'make-list-namespaces-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-namespaces-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-namespaces-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespaces))
      (common-lisp:list
       (common-lisp:cons "Namespaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-namespaces-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-template-aliases-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-template-aliases-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (template-id (common-lisp:error ":template-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-template-aliases-request
                    'make-list-template-aliases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-template-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-template-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-template-aliases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-template-aliases-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-template-aliases-response-"))
   (template-alias-list common-lisp:nil :type
    (common-lisp:or template-alias-list common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-template-aliases-response
                    'make-list-template-aliases-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-template-aliases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-template-aliases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-alias-list))
      (common-lisp:list
       (common-lisp:cons "TemplateAliasList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-template-aliases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-template-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-template-versions-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (template-id (common-lisp:error ":template-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-template-versions-request
                    'make-list-template-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-template-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-template-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-template-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-template-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-template-versions-response-"))
   (template-version-summary-list common-lisp:nil :type
    (common-lisp:or template-version-summary-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-template-versions-response
                    'make-list-template-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-template-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-template-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-version-summary-list))
      (common-lisp:list
       (common-lisp:cons "TemplateVersionSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-template-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-templates-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-templates-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-templates-request 'make-list-templates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-templates-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-templates-response-"))
   (template-summary-list common-lisp:nil :type
    (common-lisp:or template-summary-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-templates-response 'make-list-templates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-summary-list))
      (common-lisp:list
       (common-lisp:cons "TemplateSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-theme-aliases-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-theme-aliases-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (theme-id (common-lisp:error ":theme-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-theme-aliases-request
                    'make-list-theme-aliases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-theme-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-theme-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-theme-aliases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-theme-aliases-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-theme-aliases-response-"))
   (theme-alias-list common-lisp:nil :type
    (common-lisp:or theme-alias-list common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-theme-aliases-response
                    'make-list-theme-aliases-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-theme-aliases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-theme-aliases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-alias-list))
      (common-lisp:list
       (common-lisp:cons "ThemeAliasList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-theme-aliases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-theme-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-theme-versions-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (theme-id (common-lisp:error ":theme-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-theme-versions-request
                    'make-list-theme-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-theme-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-theme-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-theme-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-theme-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-theme-versions-response-"))
   (theme-version-summary-list common-lisp:nil :type
    (common-lisp:or theme-version-summary-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-theme-versions-response
                    'make-list-theme-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-theme-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-theme-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'theme-version-summary-list))
      (common-lisp:list
       (common-lisp:cons "ThemeVersionSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-theme-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-themes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-themes-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or theme-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-themes-request 'make-list-themes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-themes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-themes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-themes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-themes-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-themes-response-"))
   (theme-summary-list common-lisp:nil :type
    (common-lisp:or theme-summary-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-themes-response 'make-list-themes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-themes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-themes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-summary-list))
      (common-lisp:list
       (common-lisp:cons "ThemeSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-themes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-user-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-user-groups-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or user-name common-lisp:null))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-user-groups-request 'make-list-user-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-user-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-user-groups-response-"))
   (group-list common-lisp:nil :type
    (common-lisp:or group-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-user-groups-response
                    'make-list-user-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-list))
      (common-lisp:list
       (common-lisp:cons "GroupList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-users-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-users-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-users-request 'make-list-users-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-users-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-users-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-users-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-users-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-users-response-"))
   (user-list common-lisp:nil :type
    (common-lisp:or user-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-users-response 'make-list-users-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-users-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-users-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-list))
      (common-lisp:list
       (common-lisp:cons "UserList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-users-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (loading-animation (:copier common-lisp:nil)
      (:conc-name "struct-shape-loading-animation-"))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'loading-animation 'make-loading-animation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input loading-animation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input loading-animation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input loading-animation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (local-navigation-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-local-navigation-configuration-"))
   (target-sheet-id (common-lisp:error ":target-sheet-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'local-navigation-configuration
                    'make-local-navigation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          local-navigation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          local-navigation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-sheet-id))
      (common-lisp:list
       (common-lisp:cons "TargetSheetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          local-navigation-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (logical-table (:copier common-lisp:nil)
      (:conc-name "struct-shape-logical-table-"))
   (alias (common-lisp:error ":alias is required") :type
    (common-lisp:or logical-table-alias common-lisp:null))
   (data-transforms common-lisp:nil :type
    (common-lisp:or transform-operation-list common-lisp:null))
   (source (common-lisp:error ":source is required") :type
    (common-lisp:or logical-table-source common-lisp:null)))
 (common-lisp:export (common-lisp:list 'logical-table 'make-logical-table))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logical-table))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logical-table))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-transforms))
      (common-lisp:list
       (common-lisp:cons "DataTransforms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logical-table))
   common-lisp:nil))
(common-lisp:deftype logical-table-alias () 'common-lisp:string)
(common-lisp:deftype logical-table-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype logical-table-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-logical-table-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (logical-table-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-logical-table-source-"))
   (join-instruction common-lisp:nil :type
    (common-lisp:or join-instruction common-lisp:null))
   (physical-table-id common-lisp:nil :type
    (common-lisp:or physical-table-id common-lisp:null))
   (data-set-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'logical-table-source 'make-logical-table-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logical-table-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logical-table-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'join-instruction))
      (common-lisp:list
       (common-lisp:cons "JoinInstruction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'physical-table-id))
      (common-lisp:list
       (common-lisp:cons "PhysicalTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-arn))
      (common-lisp:list
       (common-lisp:cons "DataSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logical-table-source))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (long-format-text (:copier common-lisp:nil)
      (:conc-name "struct-shape-long-format-text-"))
   (plain-text common-lisp:nil :type
    (common-lisp:or long-plain-text common-lisp:null))
   (rich-text common-lisp:nil :type
    (common-lisp:or long-rich-text common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'long-format-text 'make-long-format-text))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input long-format-text))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input long-format-text))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plain-text))
      (common-lisp:list
       (common-lisp:cons "PlainText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rich-text))
      (common-lisp:list
       (common-lisp:cons "RichText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input long-format-text))
   common-lisp:nil))
(common-lisp:deftype long-plain-text () 'common-lisp:string)
(common-lisp:deftype long-rich-text () 'common-lisp:string)
(common-lisp:deftype longitude () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (manifest-file-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-manifest-file-location-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or s3bucket common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or s3key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'manifest-file-location 'make-manifest-file-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          manifest-file-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          manifest-file-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          manifest-file-location))
   common-lisp:nil))
(common-lisp:deftype map-zoom-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (margin-style (:copier common-lisp:nil)
      (:conc-name "struct-shape-margin-style-"))
   (show common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'margin-style 'make-margin-style))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input margin-style))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input margin-style))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'show))
      (common-lisp:list
       (common-lisp:cons "Show"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input margin-style))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (maria-db-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-maria-db-parameters-"))
   (host (common-lisp:error ":host is required") :type
    (common-lisp:or host common-lisp:null))
   (port (common-lisp:error ":port is required") :type
    (common-lisp:or port common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or database common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'maria-db-parameters 'make-maria-db-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input maria-db-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input maria-db-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input maria-db-parameters))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (maximum-label-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-maximum-label-type-"))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'maximum-label-type 'make-maximum-label-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input maximum-label-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input maximum-label-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input maximum-label-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (maximum-minimum-computation (:copier common-lisp:nil)
      (:conc-name "struct-shape-maximum-minimum-computation-"))
   (computation-id (common-lisp:error ":computation-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (time (common-lisp:error ":time is required") :type
    (common-lisp:or dimension-field common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or measure-field common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or maximum-minimum-computation-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'maximum-minimum-computation
                    'make-maximum-minimum-computation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          maximum-minimum-computation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          maximum-minimum-computation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computation-id))
      (common-lisp:list
       (common-lisp:cons "ComputationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          maximum-minimum-computation))
   common-lisp:nil))
(common-lisp:deftype maximum-minimum-computation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (measure-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-measure-field-"))
   (numerical-measure-field common-lisp:nil :type
    (common-lisp:or numerical-measure-field common-lisp:null))
   (categorical-measure-field common-lisp:nil :type
    (common-lisp:or categorical-measure-field common-lisp:null))
   (date-measure-field common-lisp:nil :type
    (common-lisp:or date-measure-field common-lisp:null))
   (calculated-measure-field common-lisp:nil :type
    (common-lisp:or calculated-measure-field common-lisp:null)))
 (common-lisp:export (common-lisp:list 'measure-field 'make-measure-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input measure-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input measure-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'numerical-measure-field))
      (common-lisp:list
       (common-lisp:cons "NumericalMeasureField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'categorical-measure-field))
      (common-lisp:list
       (common-lisp:cons "CategoricalMeasureField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-measure-field))
      (common-lisp:list
       (common-lisp:cons "DateMeasureField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculated-measure-field))
      (common-lisp:list
       (common-lisp:cons "CalculatedMeasureField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input measure-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype measure-field-list ()
   '(trivial-types:proper-list measure-field))
 (common-lisp:defun |make-measure-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list measure-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (member-id-arn-pair (:copier common-lisp:nil)
      (:conc-name "struct-shape-member-id-arn-pair-"))
   (member-id common-lisp:nil :type
    (common-lisp:or restrictive-resource-id common-lisp:null))
   (member-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'member-id-arn-pair 'make-member-id-arn-pair))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member-id-arn-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member-id-arn-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-arn))
      (common-lisp:list
       (common-lisp:cons "MemberArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member-id-arn-pair))
   common-lisp:nil))
(common-lisp:deftype member-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (metric-comparison-computation (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-comparison-computation-"))
   (computation-id (common-lisp:error ":computation-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (time (common-lisp:error ":time is required") :type
    (common-lisp:or dimension-field common-lisp:null))
   (from-value (common-lisp:error ":from-value is required") :type
    (common-lisp:or measure-field common-lisp:null))
   (target-value (common-lisp:error ":target-value is required") :type
    (common-lisp:or measure-field common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'metric-comparison-computation
                    'make-metric-comparison-computation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metric-comparison-computation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metric-comparison-computation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computation-id))
      (common-lisp:list
       (common-lisp:cons "ComputationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-value))
      (common-lisp:list
       (common-lisp:cons "FromValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-value))
      (common-lisp:list
       (common-lisp:cons "TargetValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metric-comparison-computation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (minimum-label-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-minimum-label-type-"))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'minimum-label-type 'make-minimum-label-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input minimum-label-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input minimum-label-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input minimum-label-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (missing-data-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-missing-data-configuration-"))
   (treatment-option common-lisp:nil :type
    (common-lisp:or missing-data-treatment-option common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'missing-data-configuration
                    'make-missing-data-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          missing-data-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          missing-data-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'treatment-option))
      (common-lisp:list
       (common-lisp:cons "TreatmentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          missing-data-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype missing-data-configuration-list ()
   '(trivial-types:proper-list missing-data-configuration))
 (common-lisp:defun |make-missing-data-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            missing-data-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype missing-data-treatment-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (my-sql-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-my-sql-parameters-"))
   (host (common-lisp:error ":host is required") :type
    (common-lisp:or host common-lisp:null))
   (port (common-lisp:error ":port is required") :type
    (common-lisp:or port common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or database common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'my-sql-parameters 'make-my-sql-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input my-sql-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input my-sql-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input my-sql-parameters))
   common-lisp:nil))
(common-lisp:deftype namespace () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (namespace-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-namespace-error-"))
   (type common-lisp:nil :type
    (common-lisp:or namespace-error-type common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'namespace-error 'make-namespace-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input namespace-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input namespace-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input namespace-error))
   common-lisp:nil))
(common-lisp:deftype namespace-error-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (namespace-info-v2 (:copier common-lisp:nil)
      (:conc-name "struct-shape-namespace-info-v2-"))
   (name common-lisp:nil :type (common-lisp:or namespace common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (capacity-region common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (creation-status common-lisp:nil :type
    (common-lisp:or namespace-status common-lisp:null))
   (identity-store common-lisp:nil :type
    (common-lisp:or identity-store common-lisp:null))
   (namespace-error common-lisp:nil :type
    (common-lisp:or namespace-error common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'namespace-info-v2 'make-namespace-info-v2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input namespace-info-v2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input namespace-info-v2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-region))
      (common-lisp:list
       (common-lisp:cons "CapacityRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-status))
      (common-lisp:list
       (common-lisp:cons "CreationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store))
      (common-lisp:list
       (common-lisp:cons "IdentityStore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-error))
      (common-lisp:list
       (common-lisp:cons "NamespaceError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input namespace-info-v2))
   common-lisp:nil))
(common-lisp:deftype namespace-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype namespaces ()
   '(trivial-types:proper-list namespace-info-v2))
 (common-lisp:defun |make-namespaces|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list namespace-info-v2))
   aws-sdk/generator/shape::members))
(common-lisp:deftype narrative-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (negative-value-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-negative-value-configuration-"))
   (display-mode (common-lisp:error ":display-mode is required") :type
    (common-lisp:or negative-value-display-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'negative-value-configuration
                    'make-negative-value-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          negative-value-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          negative-value-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-mode))
      (common-lisp:list
       (common-lisp:cons "DisplayMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          negative-value-configuration))
   common-lisp:nil))
(common-lisp:deftype negative-value-display-mode () 'common-lisp:string)
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:deftype null-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (null-value-format-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-null-value-format-configuration-"))
   (null-string (common-lisp:error ":null-string is required") :type
    (common-lisp:or null-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'null-value-format-configuration
                    'make-null-value-format-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          null-value-format-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          null-value-format-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'null-string))
      (common-lisp:list
       (common-lisp:cons "NullString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          null-value-format-configuration))
   common-lisp:nil))
(common-lisp:deftype nullable-boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (number-display-format-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-number-display-format-configuration-"))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null))
   (suffix common-lisp:nil :type (common-lisp:or suffix common-lisp:null))
   (separator-configuration common-lisp:nil :type
    (common-lisp:or numeric-separator-configuration common-lisp:null))
   (decimal-places-configuration common-lisp:nil :type
    (common-lisp:or decimal-places-configuration common-lisp:null))
   (number-scale common-lisp:nil :type
    (common-lisp:or number-scale common-lisp:null))
   (negative-value-configuration common-lisp:nil :type
    (common-lisp:or negative-value-configuration common-lisp:null))
   (null-value-format-configuration common-lisp:nil :type
    (common-lisp:or null-value-format-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'number-display-format-configuration
                    'make-number-display-format-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          number-display-format-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          number-display-format-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suffix))
      (common-lisp:list
       (common-lisp:cons "Suffix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'separator-configuration))
      (common-lisp:list
       (common-lisp:cons "SeparatorConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decimal-places-configuration))
      (common-lisp:list
       (common-lisp:cons "DecimalPlacesConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-scale))
      (common-lisp:list
       (common-lisp:cons "NumberScale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'negative-value-configuration))
      (common-lisp:list
       (common-lisp:cons "NegativeValueConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'null-value-format-configuration))
      (common-lisp:list
       (common-lisp:cons "NullValueFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          number-display-format-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (number-format-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-number-format-configuration-"))
   (format-configuration common-lisp:nil :type
    (common-lisp:or numeric-format-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'number-format-configuration
                    'make-number-format-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          number-format-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          number-format-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'format-configuration))
      (common-lisp:list
       (common-lisp:cons "FormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          number-format-configuration))
   common-lisp:nil))
(common-lisp:deftype number-scale () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (numeric-axis-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-numeric-axis-options-"))
   (scale common-lisp:nil :type (common-lisp:or axis-scale common-lisp:null))
   (range common-lisp:nil :type
    (common-lisp:or axis-display-range common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'numeric-axis-options 'make-numeric-axis-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input numeric-axis-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input numeric-axis-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale))
      (common-lisp:list
       (common-lisp:cons "Scale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range))
      (common-lisp:list
       (common-lisp:cons "Range"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input numeric-axis-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (numeric-equality-drill-down-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-numeric-equality-drill-down-filter-"))
   (column (common-lisp:error ":column is required") :type
    (common-lisp:or column-identifier common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'numeric-equality-drill-down-filter
                    'make-numeric-equality-drill-down-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          numeric-equality-drill-down-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          numeric-equality-drill-down-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          numeric-equality-drill-down-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (numeric-equality-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-numeric-equality-filter-"))
   (filter-id (common-lisp:error ":filter-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (column (common-lisp:error ":column is required") :type
    (common-lisp:or column-identifier common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (select-all-options common-lisp:nil :type
    (common-lisp:or numeric-filter-select-all-options common-lisp:null))
   (match-operator (common-lisp:error ":match-operator is required") :type
    (common-lisp:or numeric-equality-match-operator common-lisp:null))
   (aggregation-function common-lisp:nil :type
    (common-lisp:or aggregation-function common-lisp:null))
   (parameter-name common-lisp:nil :type
    (common-lisp:or parameter-name common-lisp:null))
   (null-option (common-lisp:error ":null-option is required") :type
    (common-lisp:or filter-null-option common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'numeric-equality-filter 'make-numeric-equality-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          numeric-equality-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          numeric-equality-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-id))
      (common-lisp:list
       (common-lisp:cons "FilterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-all-options))
      (common-lisp:list
       (common-lisp:cons "SelectAllOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-operator))
      (common-lisp:list
       (common-lisp:cons "MatchOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-function))
      (common-lisp:list
       (common-lisp:cons "AggregationFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'null-option))
      (common-lisp:list
       (common-lisp:cons "NullOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          numeric-equality-filter))
   common-lisp:nil))
(common-lisp:deftype numeric-equality-match-operator () 'common-lisp:string)
(common-lisp:deftype numeric-filter-select-all-options () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (numeric-format-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-numeric-format-configuration-"))
   (number-display-format-configuration common-lisp:nil :type
    (common-lisp:or number-display-format-configuration common-lisp:null))
   (currency-display-format-configuration common-lisp:nil :type
    (common-lisp:or currency-display-format-configuration common-lisp:null))
   (percentage-display-format-configuration common-lisp:nil :type
    (common-lisp:or percentage-display-format-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'numeric-format-configuration
                    'make-numeric-format-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          numeric-format-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          numeric-format-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-display-format-configuration))
      (common-lisp:list
       (common-lisp:cons "NumberDisplayFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'currency-display-format-configuration))
      (common-lisp:list
       (common-lisp:cons "CurrencyDisplayFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'percentage-display-format-configuration))
      (common-lisp:list
       (common-lisp:cons "PercentageDisplayFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          numeric-format-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (numeric-range-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-numeric-range-filter-"))
   (filter-id (common-lisp:error ":filter-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (column (common-lisp:error ":column is required") :type
    (common-lisp:or column-identifier common-lisp:null))
   (include-minimum common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (include-maximum common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (range-minimum common-lisp:nil :type
    (common-lisp:or numeric-range-filter-value common-lisp:null))
   (range-maximum common-lisp:nil :type
    (common-lisp:or numeric-range-filter-value common-lisp:null))
   (select-all-options common-lisp:nil :type
    (common-lisp:or numeric-filter-select-all-options common-lisp:null))
   (aggregation-function common-lisp:nil :type
    (common-lisp:or aggregation-function common-lisp:null))
   (null-option (common-lisp:error ":null-option is required") :type
    (common-lisp:or filter-null-option common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'numeric-range-filter 'make-numeric-range-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input numeric-range-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input numeric-range-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-id))
      (common-lisp:list
       (common-lisp:cons "FilterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-minimum))
      (common-lisp:list
       (common-lisp:cons "IncludeMinimum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-maximum))
      (common-lisp:list
       (common-lisp:cons "IncludeMaximum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range-minimum))
      (common-lisp:list
       (common-lisp:cons "RangeMinimum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range-maximum))
      (common-lisp:list
       (common-lisp:cons "RangeMaximum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-all-options))
      (common-lisp:list
       (common-lisp:cons "SelectAllOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-function))
      (common-lisp:list
       (common-lisp:cons "AggregationFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'null-option))
      (common-lisp:list
       (common-lisp:cons "NullOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input numeric-range-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (numeric-range-filter-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-numeric-range-filter-value-"))
   (static-value common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (parameter common-lisp:nil :type
    (common-lisp:or parameter-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'numeric-range-filter-value
                    'make-numeric-range-filter-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          numeric-range-filter-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          numeric-range-filter-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-value))
      (common-lisp:list
       (common-lisp:cons "StaticValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter))
      (common-lisp:list
       (common-lisp:cons "Parameter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          numeric-range-filter-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (numeric-separator-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-numeric-separator-configuration-"))
   (decimal-separator common-lisp:nil :type
    (common-lisp:or numeric-separator-symbol common-lisp:null))
   (thousands-separator common-lisp:nil :type
    (common-lisp:or thousand-separator-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'numeric-separator-configuration
                    'make-numeric-separator-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          numeric-separator-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          numeric-separator-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decimal-separator))
      (common-lisp:list
       (common-lisp:cons "DecimalSeparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thousands-separator))
      (common-lisp:list
       (common-lisp:cons "ThousandsSeparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          numeric-separator-configuration))
   common-lisp:nil))
(common-lisp:deftype numeric-separator-symbol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (numerical-aggregation-function (:copier common-lisp:nil)
      (:conc-name "struct-shape-numerical-aggregation-function-"))
   (simple-numerical-aggregation common-lisp:nil :type
    (common-lisp:or simple-numerical-aggregation-function common-lisp:null))
   (percentile-aggregation common-lisp:nil :type
    (common-lisp:or percentile-aggregation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'numerical-aggregation-function
                    'make-numerical-aggregation-function))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          numerical-aggregation-function))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          numerical-aggregation-function))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'simple-numerical-aggregation))
      (common-lisp:list
       (common-lisp:cons "SimpleNumericalAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'percentile-aggregation))
      (common-lisp:list
       (common-lisp:cons "PercentileAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          numerical-aggregation-function))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (numerical-dimension-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-numerical-dimension-field-"))
   (field-id (common-lisp:error ":field-id is required") :type
    (common-lisp:or field-id common-lisp:null))
   (column (common-lisp:error ":column is required") :type
    (common-lisp:or column-identifier common-lisp:null))
   (hierarchy-id common-lisp:nil :type
    (common-lisp:or hierarchy-id common-lisp:null))
   (format-configuration common-lisp:nil :type
    (common-lisp:or number-format-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'numerical-dimension-field
                    'make-numerical-dimension-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          numerical-dimension-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          numerical-dimension-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-id))
      (common-lisp:list
       (common-lisp:cons "HierarchyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'format-configuration))
      (common-lisp:list
       (common-lisp:cons "FormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          numerical-dimension-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (numerical-measure-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-numerical-measure-field-"))
   (field-id (common-lisp:error ":field-id is required") :type
    (common-lisp:or field-id common-lisp:null))
   (column (common-lisp:error ":column is required") :type
    (common-lisp:or column-identifier common-lisp:null))
   (aggregation-function common-lisp:nil :type
    (common-lisp:or numerical-aggregation-function common-lisp:null))
   (format-configuration common-lisp:nil :type
    (common-lisp:or number-format-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'numerical-measure-field 'make-numerical-measure-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          numerical-measure-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          numerical-measure-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-function))
      (common-lisp:list
       (common-lisp:cons "AggregationFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'format-configuration))
      (common-lisp:list
       (common-lisp:cons "FormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          numerical-measure-field))
   common-lisp:nil))
(common-lisp:deftype on-clause () 'common-lisp:string)
(common-lisp:deftype optional-port () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (oracle-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-oracle-parameters-"))
   (host (common-lisp:error ":host is required") :type
    (common-lisp:or host common-lisp:null))
   (port (common-lisp:error ":port is required") :type
    (common-lisp:or port common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or database common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'oracle-parameters 'make-oracle-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input oracle-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input oracle-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input oracle-parameters))
   common-lisp:nil))
(common-lisp:deftype other-categories () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (output-column (:copier common-lisp:nil)
      (:conc-name "struct-shape-output-column-"))
   (name common-lisp:nil :type (common-lisp:or column-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or column-descriptive-text common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or column-data-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'output-column 'make-output-column))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-column))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype output-column-list ()
   '(trivial-types:proper-list output-column))
 (common-lisp:defun |make-output-column-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-column))
   aws-sdk/generator/shape::members))
(common-lisp:deftype page-number () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (pagination-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-pagination-configuration-"))
   (page-size (common-lisp:error ":page-size is required") :type
    (common-lisp:or long common-lisp:null))
   (page-number (common-lisp:error ":page-number is required") :type
    (common-lisp:or page-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pagination-configuration 'make-pagination-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pagination-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pagination-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-number))
      (common-lisp:list
       (common-lisp:cons "PageNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pagination-configuration))
   common-lisp:nil))
(common-lisp:deftype panel-border-style () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (panel-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-panel-configuration-"))
   (title common-lisp:nil :type
    (common-lisp:or panel-title-options common-lisp:null))
   (border-visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (border-thickness common-lisp:nil :type
    (common-lisp:or pixel-length common-lisp:null))
   (border-style common-lisp:nil :type
    (common-lisp:or panel-border-style common-lisp:null))
   (border-color common-lisp:nil :type
    (common-lisp:or hex-color-with-transparency common-lisp:null))
   (gutter-visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (gutter-spacing common-lisp:nil :type
    (common-lisp:or pixel-length common-lisp:null))
   (background-visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (background-color common-lisp:nil :type
    (common-lisp:or hex-color-with-transparency common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'panel-configuration 'make-panel-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input panel-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input panel-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'border-visibility))
      (common-lisp:list
       (common-lisp:cons "BorderVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'border-thickness))
      (common-lisp:list
       (common-lisp:cons "BorderThickness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'border-style))
      (common-lisp:list
       (common-lisp:cons "BorderStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'border-color))
      (common-lisp:list
       (common-lisp:cons "BorderColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gutter-visibility))
      (common-lisp:list
       (common-lisp:cons "GutterVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gutter-spacing))
      (common-lisp:list
       (common-lisp:cons "GutterSpacing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'background-visibility))
      (common-lisp:list
       (common-lisp:cons "BackgroundVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background-color))
      (common-lisp:list
       (common-lisp:cons "BackgroundColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input panel-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (panel-title-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-panel-title-options-"))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (font-configuration common-lisp:nil :type
    (common-lisp:or font-configuration common-lisp:null))
   (horizontal-text-alignment common-lisp:nil :type
    (common-lisp:or horizontal-text-alignment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'panel-title-options 'make-panel-title-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input panel-title-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input panel-title-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-configuration))
      (common-lisp:list
       (common-lisp:cons "FontConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'horizontal-text-alignment))
      (common-lisp:list
       (common-lisp:cons "HorizontalTextAlignment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input panel-title-options))
   common-lisp:nil))
(common-lisp:deftype paper-orientation () 'common-lisp:string)
(common-lisp:deftype paper-size () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (parameter-control (:copier common-lisp:nil)
      (:conc-name "struct-shape-parameter-control-"))
   (date-time-picker common-lisp:nil :type
    (common-lisp:or parameter-date-time-picker-control common-lisp:null))
   (list common-lisp:nil :type
    (common-lisp:or parameter-list-control common-lisp:null))
   (dropdown common-lisp:nil :type
    (common-lisp:or parameter-drop-down-control common-lisp:null))
   (text-field common-lisp:nil :type
    (common-lisp:or parameter-text-field-control common-lisp:null))
   (text-area common-lisp:nil :type
    (common-lisp:or parameter-text-area-control common-lisp:null))
   (slider common-lisp:nil :type
    (common-lisp:or parameter-slider-control common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'parameter-control 'make-parameter-control))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-time-picker))
      (common-lisp:list
       (common-lisp:cons "DateTimePicker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list))
      (common-lisp:list
       (common-lisp:cons "List"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dropdown))
      (common-lisp:list
       (common-lisp:cons "Dropdown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-field))
      (common-lisp:list
       (common-lisp:cons "TextField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-area))
      (common-lisp:list
       (common-lisp:cons "TextArea"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slider))
      (common-lisp:list
       (common-lisp:cons "Slider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parameter-control-list ()
   '(trivial-types:proper-list parameter-control))
 (common-lisp:defun |make-parameter-control-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-control))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (parameter-date-time-picker-control (:copier common-lisp:nil)
      (:conc-name "struct-shape-parameter-date-time-picker-control-"))
   (parameter-control-id
    (common-lisp:error ":parameter-control-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or sheet-control-title common-lisp:null))
   (source-parameter-name
    (common-lisp:error ":source-parameter-name is required") :type
    (common-lisp:or parameter-name common-lisp:null))
   (display-options common-lisp:nil :type
    (common-lisp:or date-time-picker-control-display-options
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'parameter-date-time-picker-control
                    'make-parameter-date-time-picker-control))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parameter-date-time-picker-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parameter-date-time-picker-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-control-id))
      (common-lisp:list
       (common-lisp:cons "ParameterControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-parameter-name))
      (common-lisp:list
       (common-lisp:cons "SourceParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-options))
      (common-lisp:list
       (common-lisp:cons "DisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parameter-date-time-picker-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (parameter-declaration (:copier common-lisp:nil)
      (:conc-name "struct-shape-parameter-declaration-"))
   (string-parameter-declaration common-lisp:nil :type
    (common-lisp:or string-parameter-declaration common-lisp:null))
   (decimal-parameter-declaration common-lisp:nil :type
    (common-lisp:or decimal-parameter-declaration common-lisp:null))
   (integer-parameter-declaration common-lisp:nil :type
    (common-lisp:or integer-parameter-declaration common-lisp:null))
   (date-time-parameter-declaration common-lisp:nil :type
    (common-lisp:or date-time-parameter-declaration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'parameter-declaration 'make-parameter-declaration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parameter-declaration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parameter-declaration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'string-parameter-declaration))
      (common-lisp:list
       (common-lisp:cons "StringParameterDeclaration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decimal-parameter-declaration))
      (common-lisp:list
       (common-lisp:cons "DecimalParameterDeclaration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'integer-parameter-declaration))
      (common-lisp:list
       (common-lisp:cons "IntegerParameterDeclaration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'date-time-parameter-declaration))
      (common-lisp:list
       (common-lisp:cons "DateTimeParameterDeclaration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parameter-declaration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parameter-declaration-list ()
   '(trivial-types:proper-list parameter-declaration))
 (common-lisp:defun |make-parameter-declaration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-declaration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (parameter-drop-down-control (:copier common-lisp:nil)
      (:conc-name "struct-shape-parameter-drop-down-control-"))
   (parameter-control-id
    (common-lisp:error ":parameter-control-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or sheet-control-title common-lisp:null))
   (source-parameter-name
    (common-lisp:error ":source-parameter-name is required") :type
    (common-lisp:or parameter-name common-lisp:null))
   (display-options common-lisp:nil :type
    (common-lisp:or drop-down-control-display-options common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or sheet-control-list-type common-lisp:null))
   (selectable-values common-lisp:nil :type
    (common-lisp:or parameter-selectable-values common-lisp:null))
   (cascading-control-configuration common-lisp:nil :type
    (common-lisp:or cascading-control-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'parameter-drop-down-control
                    'make-parameter-drop-down-control))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parameter-drop-down-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parameter-drop-down-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-control-id))
      (common-lisp:list
       (common-lisp:cons "ParameterControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-parameter-name))
      (common-lisp:list
       (common-lisp:cons "SourceParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-options))
      (common-lisp:list
       (common-lisp:cons "DisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selectable-values))
      (common-lisp:list
       (common-lisp:cons "SelectableValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cascading-control-configuration))
      (common-lisp:list
       (common-lisp:cons "CascadingControlConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parameter-drop-down-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (parameter-list-control (:copier common-lisp:nil)
      (:conc-name "struct-shape-parameter-list-control-"))
   (parameter-control-id
    (common-lisp:error ":parameter-control-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or sheet-control-title common-lisp:null))
   (source-parameter-name
    (common-lisp:error ":source-parameter-name is required") :type
    (common-lisp:or parameter-name common-lisp:null))
   (display-options common-lisp:nil :type
    (common-lisp:or list-control-display-options common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or sheet-control-list-type common-lisp:null))
   (selectable-values common-lisp:nil :type
    (common-lisp:or parameter-selectable-values common-lisp:null))
   (cascading-control-configuration common-lisp:nil :type
    (common-lisp:or cascading-control-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'parameter-list-control 'make-parameter-list-control))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parameter-list-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parameter-list-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-control-id))
      (common-lisp:list
       (common-lisp:cons "ParameterControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-parameter-name))
      (common-lisp:list
       (common-lisp:cons "SourceParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-options))
      (common-lisp:list
       (common-lisp:cons "DisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selectable-values))
      (common-lisp:list
       (common-lisp:cons "SelectableValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cascading-control-configuration))
      (common-lisp:list
       (common-lisp:cons "CascadingControlConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parameter-list-control))
   common-lisp:nil))
(common-lisp:deftype parameter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parameter-selectable-value-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-parameter-selectable-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (parameter-selectable-values (:copier common-lisp:nil)
      (:conc-name "struct-shape-parameter-selectable-values-"))
   (values common-lisp:nil :type
    (common-lisp:or parameter-selectable-value-list common-lisp:null))
   (link-to-data-set-column common-lisp:nil :type
    (common-lisp:or column-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'parameter-selectable-values
                    'make-parameter-selectable-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parameter-selectable-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parameter-selectable-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'link-to-data-set-column))
      (common-lisp:list
       (common-lisp:cons "LinkToDataSetColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parameter-selectable-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (parameter-slider-control (:copier common-lisp:nil)
      (:conc-name "struct-shape-parameter-slider-control-"))
   (parameter-control-id
    (common-lisp:error ":parameter-control-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or sheet-control-title common-lisp:null))
   (source-parameter-name
    (common-lisp:error ":source-parameter-name is required") :type
    (common-lisp:or parameter-name common-lisp:null))
   (display-options common-lisp:nil :type
    (common-lisp:or slider-control-display-options common-lisp:null))
   (maximum-value (common-lisp:error ":maximum-value is required") :type
    (common-lisp:or double common-lisp:null))
   (minimum-value (common-lisp:error ":minimum-value is required") :type
    (common-lisp:or double common-lisp:null))
   (step-size (common-lisp:error ":step-size is required") :type
    (common-lisp:or double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'parameter-slider-control 'make-parameter-slider-control))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parameter-slider-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parameter-slider-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-control-id))
      (common-lisp:list
       (common-lisp:cons "ParameterControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-parameter-name))
      (common-lisp:list
       (common-lisp:cons "SourceParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-options))
      (common-lisp:list
       (common-lisp:cons "DisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-value))
      (common-lisp:list
       (common-lisp:cons "MaximumValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-value))
      (common-lisp:list
       (common-lisp:cons "MinimumValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-size))
      (common-lisp:list
       (common-lisp:cons "StepSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parameter-slider-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (parameter-text-area-control (:copier common-lisp:nil)
      (:conc-name "struct-shape-parameter-text-area-control-"))
   (parameter-control-id
    (common-lisp:error ":parameter-control-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or sheet-control-title common-lisp:null))
   (source-parameter-name
    (common-lisp:error ":source-parameter-name is required") :type
    (common-lisp:or parameter-name common-lisp:null))
   (delimiter common-lisp:nil :type
    (common-lisp:or text-area-control-delimiter common-lisp:null))
   (display-options common-lisp:nil :type
    (common-lisp:or text-area-control-display-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'parameter-text-area-control
                    'make-parameter-text-area-control))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parameter-text-area-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parameter-text-area-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-control-id))
      (common-lisp:list
       (common-lisp:cons "ParameterControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-parameter-name))
      (common-lisp:list
       (common-lisp:cons "SourceParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-options))
      (common-lisp:list
       (common-lisp:cons "DisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parameter-text-area-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (parameter-text-field-control (:copier common-lisp:nil)
      (:conc-name "struct-shape-parameter-text-field-control-"))
   (parameter-control-id
    (common-lisp:error ":parameter-control-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or sheet-control-title common-lisp:null))
   (source-parameter-name
    (common-lisp:error ":source-parameter-name is required") :type
    (common-lisp:or parameter-name common-lisp:null))
   (display-options common-lisp:nil :type
    (common-lisp:or text-field-control-display-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'parameter-text-field-control
                    'make-parameter-text-field-control))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parameter-text-field-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parameter-text-field-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-control-id))
      (common-lisp:list
       (common-lisp:cons "ParameterControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-parameter-name))
      (common-lisp:list
       (common-lisp:cons "SourceParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-options))
      (common-lisp:list
       (common-lisp:cons "DisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parameter-text-field-control))
   common-lisp:nil))
(common-lisp:deftype parameter-value-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-parameters-"))
   (string-parameters common-lisp:nil :type
    (common-lisp:or string-parameter-list common-lisp:null))
   (integer-parameters common-lisp:nil :type
    (common-lisp:or integer-parameter-list common-lisp:null))
   (decimal-parameters common-lisp:nil :type
    (common-lisp:or decimal-parameter-list common-lisp:null))
   (date-time-parameters common-lisp:nil :type
    (common-lisp:or date-time-parameter-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'parameters 'make-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-parameters))
      (common-lisp:list
       (common-lisp:cons "StringParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integer-parameters))
      (common-lisp:list
       (common-lisp:cons "IntegerParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decimal-parameters))
      (common-lisp:list
       (common-lisp:cons "DecimalParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'date-time-parameters))
      (common-lisp:list
       (common-lisp:cons "DateTimeParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameters))
   common-lisp:nil))
(common-lisp:deftype password () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype path () '(trivial-types:proper-list arn))
 (common-lisp:defun |make-path|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype percent-number () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (percent-visible-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-percent-visible-range-"))
   (from common-lisp:nil :type
    (common-lisp:or percent-number common-lisp:null))
   (to common-lisp:nil :type (common-lisp:or percent-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'percent-visible-range 'make-percent-visible-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          percent-visible-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          percent-visible-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from))
      (common-lisp:list
       (common-lisp:cons "From"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to))
      (common-lisp:list
       (common-lisp:cons "To"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          percent-visible-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (percentage-display-format-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-percentage-display-format-configuration-"))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null))
   (suffix common-lisp:nil :type (common-lisp:or suffix common-lisp:null))
   (separator-configuration common-lisp:nil :type
    (common-lisp:or numeric-separator-configuration common-lisp:null))
   (decimal-places-configuration common-lisp:nil :type
    (common-lisp:or decimal-places-configuration common-lisp:null))
   (negative-value-configuration common-lisp:nil :type
    (common-lisp:or negative-value-configuration common-lisp:null))
   (null-value-format-configuration common-lisp:nil :type
    (common-lisp:or null-value-format-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'percentage-display-format-configuration
                    'make-percentage-display-format-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          percentage-display-format-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          percentage-display-format-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suffix))
      (common-lisp:list
       (common-lisp:cons "Suffix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'separator-configuration))
      (common-lisp:list
       (common-lisp:cons "SeparatorConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decimal-places-configuration))
      (common-lisp:list
       (common-lisp:cons "DecimalPlacesConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'negative-value-configuration))
      (common-lisp:list
       (common-lisp:cons "NegativeValueConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'null-value-format-configuration))
      (common-lisp:list
       (common-lisp:cons "NullValueFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          percentage-display-format-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (percentile-aggregation (:copier common-lisp:nil)
      (:conc-name "struct-shape-percentile-aggregation-"))
   (percentile-value common-lisp:nil :type
    (common-lisp:or percentile-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'percentile-aggregation 'make-percentile-aggregation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          percentile-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          percentile-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percentile-value))
      (common-lisp:list
       (common-lisp:cons "PercentileValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          percentile-aggregation))
   common-lisp:nil))
(common-lisp:deftype percentile-value () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (period-over-period-computation (:copier common-lisp:nil)
      (:conc-name "struct-shape-period-over-period-computation-"))
   (computation-id (common-lisp:error ":computation-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (time (common-lisp:error ":time is required") :type
    (common-lisp:or dimension-field common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or measure-field common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'period-over-period-computation
                    'make-period-over-period-computation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          period-over-period-computation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          period-over-period-computation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computation-id))
      (common-lisp:list
       (common-lisp:cons "ComputationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          period-over-period-computation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (period-to-date-computation (:copier common-lisp:nil)
      (:conc-name "struct-shape-period-to-date-computation-"))
   (computation-id (common-lisp:error ":computation-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (time (common-lisp:error ":time is required") :type
    (common-lisp:or dimension-field common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or measure-field common-lisp:null))
   (period-time-granularity common-lisp:nil :type
    (common-lisp:or time-granularity common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'period-to-date-computation
                    'make-period-to-date-computation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          period-to-date-computation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          period-to-date-computation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computation-id))
      (common-lisp:list
       (common-lisp:cons "ComputationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'period-time-granularity))
      (common-lisp:list
       (common-lisp:cons "PeriodTimeGranularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          period-to-date-computation))
   common-lisp:nil))
(common-lisp:deftype periods-backward () 'common-lisp:integer)
(common-lisp:deftype periods-forward () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (physical-table (:copier common-lisp:nil)
      (:conc-name "struct-shape-physical-table-"))
   (relational-table common-lisp:nil :type
    (common-lisp:or relational-table common-lisp:null))
   (custom-sql common-lisp:nil :type
    (common-lisp:or custom-sql common-lisp:null))
   (s3source common-lisp:nil :type (common-lisp:or s3source common-lisp:null)))
 (common-lisp:export (common-lisp:list 'physical-table 'make-physical-table))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input physical-table))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input physical-table))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relational-table))
      (common-lisp:list
       (common-lisp:cons "RelationalTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-sql))
      (common-lisp:list
       (common-lisp:cons "CustomSql"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3source))
      (common-lisp:list
       (common-lisp:cons "S3Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input physical-table))
   common-lisp:nil))
(common-lisp:deftype physical-table-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype physical-table-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-physical-table-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (pie-chart-aggregated-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-pie-chart-aggregated-field-wells-"))
   (category common-lisp:nil :type
    (common-lisp:or dimension-field-list common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or measure-field-list common-lisp:null))
   (small-multiples common-lisp:nil :type
    (common-lisp:or small-multiples-dimension-field-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pie-chart-aggregated-field-wells
                    'make-pie-chart-aggregated-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pie-chart-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pie-chart-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'small-multiples))
      (common-lisp:list
       (common-lisp:cons "SmallMultiples"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pie-chart-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pie-chart-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-pie-chart-configuration-"))
   (field-wells common-lisp:nil :type
    (common-lisp:or pie-chart-field-wells common-lisp:null))
   (sort-configuration common-lisp:nil :type
    (common-lisp:or pie-chart-sort-configuration common-lisp:null))
   (donut-options common-lisp:nil :type
    (common-lisp:or donut-options common-lisp:null))
   (small-multiples-options common-lisp:nil :type
    (common-lisp:or small-multiples-options common-lisp:null))
   (category-label-options common-lisp:nil :type
    (common-lisp:or chart-axis-label-options common-lisp:null))
   (value-label-options common-lisp:nil :type
    (common-lisp:or chart-axis-label-options common-lisp:null))
   (legend common-lisp:nil :type
    (common-lisp:or legend-options common-lisp:null))
   (data-labels common-lisp:nil :type
    (common-lisp:or data-label-options common-lisp:null))
   (tooltip common-lisp:nil :type
    (common-lisp:or tooltip-options common-lisp:null))
   (visual-palette common-lisp:nil :type
    (common-lisp:or visual-palette common-lisp:null))
   (contribution-analysis-defaults common-lisp:nil :type
    (common-lisp:or contribution-analysis-default-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pie-chart-configuration 'make-pie-chart-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pie-chart-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pie-chart-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'donut-options))
      (common-lisp:list
       (common-lisp:cons "DonutOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'small-multiples-options))
      (common-lisp:list
       (common-lisp:cons "SmallMultiplesOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-label-options))
      (common-lisp:list
       (common-lisp:cons "CategoryLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-label-options))
      (common-lisp:list
       (common-lisp:cons "ValueLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legend))
      (common-lisp:list
       (common-lisp:cons "Legend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-labels))
      (common-lisp:list
       (common-lisp:cons "DataLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip))
      (common-lisp:list
       (common-lisp:cons "Tooltip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-palette))
      (common-lisp:list
       (common-lisp:cons "VisualPalette"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contribution-analysis-defaults))
      (common-lisp:list
       (common-lisp:cons "ContributionAnalysisDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pie-chart-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pie-chart-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-pie-chart-field-wells-"))
   (pie-chart-aggregated-field-wells common-lisp:nil :type
    (common-lisp:or pie-chart-aggregated-field-wells common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pie-chart-field-wells 'make-pie-chart-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pie-chart-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pie-chart-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pie-chart-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "PieChartAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pie-chart-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pie-chart-sort-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-pie-chart-sort-configuration-"))
   (category-sort common-lisp:nil :type
    (common-lisp:or field-sort-options-list common-lisp:null))
   (category-items-limit common-lisp:nil :type
    (common-lisp:or items-limit-configuration common-lisp:null))
   (small-multiples-sort common-lisp:nil :type
    (common-lisp:or field-sort-options-list common-lisp:null))
   (small-multiples-limit-configuration common-lisp:nil :type
    (common-lisp:or items-limit-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pie-chart-sort-configuration
                    'make-pie-chart-sort-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pie-chart-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pie-chart-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-sort))
      (common-lisp:list
       (common-lisp:cons "CategorySort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-items-limit))
      (common-lisp:list
       (common-lisp:cons "CategoryItemsLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'small-multiples-sort))
      (common-lisp:list
       (common-lisp:cons "SmallMultiplesSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'small-multiples-limit-configuration))
      (common-lisp:list
       (common-lisp:cons "SmallMultiplesLimitConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pie-chart-sort-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pie-chart-visual (:copier common-lisp:nil)
      (:conc-name "struct-shape-pie-chart-visual-"))
   (visual-id (common-lisp:error ":visual-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or visual-title-label-options common-lisp:null))
   (subtitle common-lisp:nil :type
    (common-lisp:or visual-subtitle-label-options common-lisp:null))
   (chart-configuration common-lisp:nil :type
    (common-lisp:or pie-chart-configuration common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or visual-custom-action-list common-lisp:null))
   (column-hierarchies common-lisp:nil :type
    (common-lisp:or column-hierarchy-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pie-chart-visual 'make-pie-chart-visual))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pie-chart-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pie-chart-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-hierarchies))
      (common-lisp:list
       (common-lisp:cons "ColumnHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pie-chart-visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pivot-field-sort-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-pivot-field-sort-options-"))
   (field-id (common-lisp:error ":field-id is required") :type
    (common-lisp:or field-id common-lisp:null))
   (sort-by (common-lisp:error ":sort-by is required") :type
    (common-lisp:or pivot-table-sort-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pivot-field-sort-options 'make-pivot-field-sort-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pivot-field-sort-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pivot-field-sort-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pivot-field-sort-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pivot-field-sort-options-list ()
   '(trivial-types:proper-list pivot-field-sort-options))
 (common-lisp:defun |make-pivot-field-sort-options-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pivot-field-sort-options))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype pivot-measure-field-list ()
   '(trivial-types:proper-list measure-field))
 (common-lisp:defun |make-pivot-measure-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list measure-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (pivot-table-aggregated-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-pivot-table-aggregated-field-wells-"))
   (rows common-lisp:nil :type
    (common-lisp:or pivot-table-dimension-list common-lisp:null))
   (columns common-lisp:nil :type
    (common-lisp:or pivot-table-dimension-list common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or pivot-measure-field-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pivot-table-aggregated-field-wells
                    'make-pivot-table-aggregated-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rows))
      (common-lisp:list
       (common-lisp:cons "Rows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "Columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pivot-table-cell-conditional-formatting (:copier common-lisp:nil)
      (:conc-name "struct-shape-pivot-table-cell-conditional-formatting-"))
   (field-id (common-lisp:error ":field-id is required") :type
    (common-lisp:or field-id common-lisp:null))
   (text-format common-lisp:nil :type
    (common-lisp:or text-conditional-format common-lisp:null))
   (scope common-lisp:nil :type
    (common-lisp:or pivot-table-conditional-formatting-scope
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pivot-table-cell-conditional-formatting
                    'make-pivot-table-cell-conditional-formatting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-cell-conditional-formatting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-cell-conditional-formatting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-format))
      (common-lisp:list
       (common-lisp:cons "TextFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-cell-conditional-formatting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pivot-table-conditional-formatting (:copier common-lisp:nil)
      (:conc-name "struct-shape-pivot-table-conditional-formatting-"))
   (conditional-formatting-options common-lisp:nil :type
    (common-lisp:or pivot-table-conditional-formatting-option-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pivot-table-conditional-formatting
                    'make-pivot-table-conditional-formatting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-conditional-formatting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-conditional-formatting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-formatting-options))
      (common-lisp:list
       (common-lisp:cons "ConditionalFormattingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-conditional-formatting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pivot-table-conditional-formatting-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-pivot-table-conditional-formatting-option-"))
   (cell common-lisp:nil :type
    (common-lisp:or pivot-table-cell-conditional-formatting common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pivot-table-conditional-formatting-option
                    'make-pivot-table-conditional-formatting-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-conditional-formatting-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-conditional-formatting-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cell))
      (common-lisp:list
       (common-lisp:cons "Cell"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-conditional-formatting-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pivot-table-conditional-formatting-option-list ()
   '(trivial-types:proper-list pivot-table-conditional-formatting-option))
 (common-lisp:defun |make-pivot-table-conditional-formatting-option-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pivot-table-conditional-formatting-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (pivot-table-conditional-formatting-scope (:copier common-lisp:nil)
      (:conc-name "struct-shape-pivot-table-conditional-formatting-scope-"))
   (role common-lisp:nil :type
    (common-lisp:or pivot-table-conditional-formatting-scope-role
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pivot-table-conditional-formatting-scope
                    'make-pivot-table-conditional-formatting-scope))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-conditional-formatting-scope))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-conditional-formatting-scope))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-conditional-formatting-scope))
   common-lisp:nil))
(common-lisp:deftype pivot-table-conditional-formatting-scope-role ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (pivot-table-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-pivot-table-configuration-"))
   (field-wells common-lisp:nil :type
    (common-lisp:or pivot-table-field-wells common-lisp:null))
   (sort-configuration common-lisp:nil :type
    (common-lisp:or pivot-table-sort-configuration common-lisp:null))
   (table-options common-lisp:nil :type
    (common-lisp:or pivot-table-options common-lisp:null))
   (total-options common-lisp:nil :type
    (common-lisp:or pivot-table-total-options common-lisp:null))
   (field-options common-lisp:nil :type
    (common-lisp:or pivot-table-field-options common-lisp:null))
   (paginated-report-options common-lisp:nil :type
    (common-lisp:or pivot-table-paginated-report-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pivot-table-configuration
                    'make-pivot-table-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-options))
      (common-lisp:list
       (common-lisp:cons "TableOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-options))
      (common-lisp:list
       (common-lisp:cons "TotalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-options))
      (common-lisp:list
       (common-lisp:cons "FieldOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'paginated-report-options))
      (common-lisp:list
       (common-lisp:cons "PaginatedReportOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pivot-table-data-path-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-pivot-table-data-path-option-"))
   (data-path-list (common-lisp:error ":data-path-list is required") :type
    (common-lisp:or data-path-value-list common-lisp:null))
   (width common-lisp:nil :type
    (common-lisp:or pixel-length common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pivot-table-data-path-option
                    'make-pivot-table-data-path-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-data-path-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-data-path-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-path-list))
      (common-lisp:list
       (common-lisp:cons "DataPathList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-data-path-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pivot-table-data-path-option-list ()
   '(trivial-types:proper-list pivot-table-data-path-option))
 (common-lisp:defun |make-pivot-table-data-path-option-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pivot-table-data-path-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype pivot-table-dimension-list ()
   '(trivial-types:proper-list dimension-field))
 (common-lisp:defun |make-pivot-table-dimension-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (pivot-table-field-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-pivot-table-field-option-"))
   (field-id (common-lisp:error ":field-id is required") :type
    (common-lisp:or field-id common-lisp:null))
   (custom-label common-lisp:nil :type
    (common-lisp:or custom-label common-lisp:null))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pivot-table-field-option 'make-pivot-table-field-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-field-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-field-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-label))
      (common-lisp:list
       (common-lisp:cons "CustomLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-field-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pivot-table-field-option-list ()
   '(trivial-types:proper-list pivot-table-field-option))
 (common-lisp:defun |make-pivot-table-field-option-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pivot-table-field-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (pivot-table-field-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-pivot-table-field-options-"))
   (selected-field-options common-lisp:nil :type
    (common-lisp:or pivot-table-field-option-list common-lisp:null))
   (data-path-options common-lisp:nil :type
    (common-lisp:or pivot-table-data-path-option-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pivot-table-field-options
                    'make-pivot-table-field-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-field-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-field-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'selected-field-options))
      (common-lisp:list
       (common-lisp:cons "SelectedFieldOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-path-options))
      (common-lisp:list
       (common-lisp:cons "DataPathOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-field-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pivot-table-field-subtotal-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-pivot-table-field-subtotal-options-"))
   (field-id common-lisp:nil :type (common-lisp:or field-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pivot-table-field-subtotal-options
                    'make-pivot-table-field-subtotal-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-field-subtotal-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-field-subtotal-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-field-subtotal-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pivot-table-field-subtotal-options-list ()
   '(trivial-types:proper-list pivot-table-field-subtotal-options))
 (common-lisp:defun |make-pivot-table-field-subtotal-options-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pivot-table-field-subtotal-options))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (pivot-table-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-pivot-table-field-wells-"))
   (pivot-table-aggregated-field-wells common-lisp:nil :type
    (common-lisp:or pivot-table-aggregated-field-wells common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pivot-table-field-wells 'make-pivot-table-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pivot-table-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "PivotTableAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-field-wells))
   common-lisp:nil))
(common-lisp:deftype pivot-table-metric-placement () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (pivot-table-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-pivot-table-options-"))
   (metric-placement common-lisp:nil :type
    (common-lisp:or pivot-table-metric-placement common-lisp:null))
   (single-metric-visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (column-names-visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (toggle-buttons-visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (column-header-style common-lisp:nil :type
    (common-lisp:or table-cell-style common-lisp:null))
   (row-header-style common-lisp:nil :type
    (common-lisp:or table-cell-style common-lisp:null))
   (cell-style common-lisp:nil :type
    (common-lisp:or table-cell-style common-lisp:null))
   (row-field-names-style common-lisp:nil :type
    (common-lisp:or table-cell-style common-lisp:null))
   (row-alternate-color-options common-lisp:nil :type
    (common-lisp:or row-alternate-color-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pivot-table-options 'make-pivot-table-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pivot-table-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pivot-table-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-placement))
      (common-lisp:list
       (common-lisp:cons "MetricPlacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'single-metric-visibility))
      (common-lisp:list
       (common-lisp:cons "SingleMetricVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-names-visibility))
      (common-lisp:list
       (common-lisp:cons "ColumnNamesVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'toggle-buttons-visibility))
      (common-lisp:list
       (common-lisp:cons "ToggleButtonsVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-header-style))
      (common-lisp:list
       (common-lisp:cons "ColumnHeaderStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-header-style))
      (common-lisp:list
       (common-lisp:cons "RowHeaderStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cell-style))
      (common-lisp:list
       (common-lisp:cons "CellStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'row-field-names-style))
      (common-lisp:list
       (common-lisp:cons "RowFieldNamesStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'row-alternate-color-options))
      (common-lisp:list
       (common-lisp:cons "RowAlternateColorOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pivot-table-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pivot-table-paginated-report-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-pivot-table-paginated-report-options-"))
   (vertical-overflow-visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (overflow-column-header-visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pivot-table-paginated-report-options
                    'make-pivot-table-paginated-report-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-paginated-report-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-paginated-report-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vertical-overflow-visibility))
      (common-lisp:list
       (common-lisp:cons "VerticalOverflowVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'overflow-column-header-visibility))
      (common-lisp:list
       (common-lisp:cons "OverflowColumnHeaderVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-paginated-report-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pivot-table-sort-by (:copier common-lisp:nil)
      (:conc-name "struct-shape-pivot-table-sort-by-"))
   (field common-lisp:nil :type (common-lisp:or field-sort common-lisp:null))
   (column common-lisp:nil :type (common-lisp:or column-sort common-lisp:null))
   (data-path common-lisp:nil :type
    (common-lisp:or data-path-sort common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pivot-table-sort-by 'make-pivot-table-sort-by))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pivot-table-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pivot-table-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "Field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-path))
      (common-lisp:list
       (common-lisp:cons "DataPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pivot-table-sort-by))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pivot-table-sort-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-pivot-table-sort-configuration-"))
   (field-sort-options common-lisp:nil :type
    (common-lisp:or pivot-field-sort-options-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pivot-table-sort-configuration
                    'make-pivot-table-sort-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-sort-options))
      (common-lisp:list
       (common-lisp:cons "FieldSortOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-sort-configuration))
   common-lisp:nil))
(common-lisp:deftype pivot-table-subtotal-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (pivot-table-total-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-pivot-table-total-options-"))
   (row-subtotal-options common-lisp:nil :type
    (common-lisp:or subtotal-options common-lisp:null))
   (column-subtotal-options common-lisp:nil :type
    (common-lisp:or subtotal-options common-lisp:null))
   (row-total-options common-lisp:nil :type
    (common-lisp:or pivot-total-options common-lisp:null))
   (column-total-options common-lisp:nil :type
    (common-lisp:or pivot-total-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pivot-table-total-options
                    'make-pivot-table-total-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-total-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-total-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'row-subtotal-options))
      (common-lisp:list
       (common-lisp:cons "RowSubtotalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-subtotal-options))
      (common-lisp:list
       (common-lisp:cons "ColumnSubtotalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-total-options))
      (common-lisp:list
       (common-lisp:cons "RowTotalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-total-options))
      (common-lisp:list
       (common-lisp:cons "ColumnTotalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-total-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pivot-table-visual (:copier common-lisp:nil)
      (:conc-name "struct-shape-pivot-table-visual-"))
   (visual-id (common-lisp:error ":visual-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or visual-title-label-options common-lisp:null))
   (subtitle common-lisp:nil :type
    (common-lisp:or visual-subtitle-label-options common-lisp:null))
   (chart-configuration common-lisp:nil :type
    (common-lisp:or pivot-table-configuration common-lisp:null))
   (conditional-formatting common-lisp:nil :type
    (common-lisp:or pivot-table-conditional-formatting common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or visual-custom-action-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pivot-table-visual 'make-pivot-table-visual))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pivot-table-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pivot-table-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-formatting))
      (common-lisp:list
       (common-lisp:cons "ConditionalFormatting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pivot-table-visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pivot-total-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-pivot-total-options-"))
   (totals-visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (placement common-lisp:nil :type
    (common-lisp:or table-totals-placement common-lisp:null))
   (scroll-status common-lisp:nil :type
    (common-lisp:or table-totals-scroll-status common-lisp:null))
   (custom-label common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (total-cell-style common-lisp:nil :type
    (common-lisp:or table-cell-style common-lisp:null))
   (value-cell-style common-lisp:nil :type
    (common-lisp:or table-cell-style common-lisp:null))
   (metric-header-cell-style common-lisp:nil :type
    (common-lisp:or table-cell-style common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pivot-total-options 'make-pivot-total-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pivot-total-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pivot-total-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'totals-visibility))
      (common-lisp:list
       (common-lisp:cons "TotalsVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement))
      (common-lisp:list
       (common-lisp:cons "Placement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scroll-status))
      (common-lisp:list
       (common-lisp:cons "ScrollStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-label))
      (common-lisp:list
       (common-lisp:cons "CustomLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-cell-style))
      (common-lisp:list
       (common-lisp:cons "TotalCellStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-cell-style))
      (common-lisp:list
       (common-lisp:cons "ValueCellStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-header-cell-style))
      (common-lisp:list
       (common-lisp:cons "MetricHeaderCellStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pivot-total-options))
   common-lisp:nil))
(common-lisp:deftype pixel-length () 'common-lisp:string)
(common-lisp:deftype port () 'common-lisp:integer)
(common-lisp:deftype positive-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (postgre-sql-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-postgre-sql-parameters-"))
   (host (common-lisp:error ":host is required") :type
    (common-lisp:or host common-lisp:null))
   (port (common-lisp:error ":port is required") :type
    (common-lisp:or port common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or database common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'postgre-sql-parameters 'make-postgre-sql-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          postgre-sql-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          postgre-sql-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          postgre-sql-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition precondition-not-met-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       precondition-not-met-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       precondition-not-met-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'precondition-not-met-exception
                    'precondition-not-met-exception-message
                    'precondition-not-met-exception-request-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (predefined-hierarchy (:copier common-lisp:nil)
      (:conc-name "struct-shape-predefined-hierarchy-"))
   (hierarchy-id (common-lisp:error ":hierarchy-id is required") :type
    (common-lisp:or hierarchy-id common-lisp:null))
   (columns (common-lisp:error ":columns is required") :type
    (common-lisp:or predefined-hierarchy-column-list common-lisp:null))
   (drill-down-filters common-lisp:nil :type
    (common-lisp:or drill-down-filter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'predefined-hierarchy 'make-predefined-hierarchy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input predefined-hierarchy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input predefined-hierarchy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-id))
      (common-lisp:list
       (common-lisp:cons "HierarchyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "Columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drill-down-filters))
      (common-lisp:list
       (common-lisp:cons "DrillDownFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input predefined-hierarchy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype predefined-hierarchy-column-list ()
   '(trivial-types:proper-list column-identifier))
 (common-lisp:defun |make-predefined-hierarchy-column-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype prediction-interval () 'common-lisp:integer)
(common-lisp:deftype prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (presto-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-presto-parameters-"))
   (host (common-lisp:error ":host is required") :type
    (common-lisp:or host common-lisp:null))
   (port (common-lisp:error ":port is required") :type
    (common-lisp:or port common-lisp:null))
   (catalog (common-lisp:error ":catalog is required") :type
    (common-lisp:or catalog common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'presto-parameters 'make-presto-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input presto-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input presto-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog))
      (common-lisp:list
       (common-lisp:cons "Catalog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input presto-parameters))
   common-lisp:nil))
(common-lisp:deftype primary-value-display-type () 'common-lisp:string)
(common-lisp:deftype principal () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype principal-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-principal-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (progress-bar-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-progress-bar-options-"))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'progress-bar-options 'make-progress-bar-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input progress-bar-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input progress-bar-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input progress-bar-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (project-operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-project-operation-"))
   (projected-columns (common-lisp:error ":projected-columns is required")
    :type (common-lisp:or projected-column-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'project-operation 'make-project-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'projected-columns))
      (common-lisp:list
       (common-lisp:cons "ProjectedColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype projected-column-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-projected-column-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype query () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (queue-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-queue-info-"))
   (waiting-on-ingestion
    (common-lisp:error ":waiting-on-ingestion is required") :type
    (common-lisp:or string common-lisp:null))
   (queued-ingestion (common-lisp:error ":queued-ingestion is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'queue-info 'make-queue-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input queue-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input queue-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'waiting-on-ingestion))
      (common-lisp:list
       (common-lisp:cons "WaitingOnIngestion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queued-ingestion))
      (common-lisp:list
       (common-lisp:cons "QueuedIngestion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input queue-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition quick-sight-user-not-found-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       quick-sight-user-not-found-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       quick-sight-user-not-found-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'quick-sight-user-not-found-exception
                    'quick-sight-user-not-found-exception-message
                    'quick-sight-user-not-found-exception-request-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (radar-chart-aggregated-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-radar-chart-aggregated-field-wells-"))
   (category common-lisp:nil :type
    (common-lisp:or radar-chart-category-field-list common-lisp:null))
   (color common-lisp:nil :type
    (common-lisp:or radar-chart-color-field-list common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or radar-chart-values-field-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'radar-chart-aggregated-field-wells
                    'make-radar-chart-aggregated-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color))
      (common-lisp:list
       (common-lisp:cons "Color"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (radar-chart-area-style-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-radar-chart-area-style-settings-"))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'radar-chart-area-style-settings
                    'make-radar-chart-area-style-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-area-style-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-area-style-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-area-style-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype radar-chart-category-field-list ()
   '(trivial-types:proper-list dimension-field))
 (common-lisp:defun |make-radar-chart-category-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype radar-chart-color-field-list ()
   '(trivial-types:proper-list dimension-field))
 (common-lisp:defun |make-radar-chart-color-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (radar-chart-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-radar-chart-configuration-"))
   (field-wells common-lisp:nil :type
    (common-lisp:or radar-chart-field-wells common-lisp:null))
   (sort-configuration common-lisp:nil :type
    (common-lisp:or radar-chart-sort-configuration common-lisp:null))
   (shape common-lisp:nil :type
    (common-lisp:or radar-chart-shape common-lisp:null))
   (base-series-settings common-lisp:nil :type
    (common-lisp:or radar-chart-series-settings common-lisp:null))
   (start-angle common-lisp:nil :type
    (common-lisp:or radar-chart-start-angle common-lisp:null))
   (visual-palette common-lisp:nil :type
    (common-lisp:or visual-palette common-lisp:null))
   (alternate-band-colors-visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (alternate-band-even-color common-lisp:nil :type
    (common-lisp:or hex-color common-lisp:null))
   (alternate-band-odd-color common-lisp:nil :type
    (common-lisp:or hex-color common-lisp:null))
   (category-axis common-lisp:nil :type
    (common-lisp:or axis-display-options common-lisp:null))
   (category-label-options common-lisp:nil :type
    (common-lisp:or chart-axis-label-options common-lisp:null))
   (color-axis common-lisp:nil :type
    (common-lisp:or axis-display-options common-lisp:null))
   (color-label-options common-lisp:nil :type
    (common-lisp:or chart-axis-label-options common-lisp:null))
   (legend common-lisp:nil :type
    (common-lisp:or legend-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'radar-chart-configuration
                    'make-radar-chart-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shape))
      (common-lisp:list
       (common-lisp:cons "Shape"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'base-series-settings))
      (common-lisp:list
       (common-lisp:cons "BaseSeriesSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-angle))
      (common-lisp:list
       (common-lisp:cons "StartAngle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-palette))
      (common-lisp:list
       (common-lisp:cons "VisualPalette"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alternate-band-colors-visibility))
      (common-lisp:list
       (common-lisp:cons "AlternateBandColorsVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alternate-band-even-color))
      (common-lisp:list
       (common-lisp:cons "AlternateBandEvenColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alternate-band-odd-color))
      (common-lisp:list
       (common-lisp:cons "AlternateBandOddColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-axis))
      (common-lisp:list
       (common-lisp:cons "CategoryAxis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-label-options))
      (common-lisp:list
       (common-lisp:cons "CategoryLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-axis))
      (common-lisp:list
       (common-lisp:cons "ColorAxis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-label-options))
      (common-lisp:list
       (common-lisp:cons "ColorLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legend))
      (common-lisp:list
       (common-lisp:cons "Legend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (radar-chart-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-radar-chart-field-wells-"))
   (radar-chart-aggregated-field-wells common-lisp:nil :type
    (common-lisp:or radar-chart-aggregated-field-wells common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'radar-chart-field-wells 'make-radar-chart-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'radar-chart-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "RadarChartAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (radar-chart-series-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-radar-chart-series-settings-"))
   (area-style-settings common-lisp:nil :type
    (common-lisp:or radar-chart-area-style-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'radar-chart-series-settings
                    'make-radar-chart-series-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-series-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-series-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'area-style-settings))
      (common-lisp:list
       (common-lisp:cons "AreaStyleSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-series-settings))
   common-lisp:nil))
(common-lisp:deftype radar-chart-shape () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (radar-chart-sort-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-radar-chart-sort-configuration-"))
   (category-sort common-lisp:nil :type
    (common-lisp:or field-sort-options-list common-lisp:null))
   (category-items-limit common-lisp:nil :type
    (common-lisp:or items-limit-configuration common-lisp:null))
   (color-sort common-lisp:nil :type
    (common-lisp:or field-sort-options-list common-lisp:null))
   (color-items-limit common-lisp:nil :type
    (common-lisp:or items-limit-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'radar-chart-sort-configuration
                    'make-radar-chart-sort-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-sort))
      (common-lisp:list
       (common-lisp:cons "CategorySort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-items-limit))
      (common-lisp:list
       (common-lisp:cons "CategoryItemsLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-sort))
      (common-lisp:list
       (common-lisp:cons "ColorSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-items-limit))
      (common-lisp:list
       (common-lisp:cons "ColorItemsLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-sort-configuration))
   common-lisp:nil))
(common-lisp:deftype radar-chart-start-angle () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:deftype radar-chart-values-field-list ()
   '(trivial-types:proper-list measure-field))
 (common-lisp:defun |make-radar-chart-values-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list measure-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (radar-chart-visual (:copier common-lisp:nil)
      (:conc-name "struct-shape-radar-chart-visual-"))
   (visual-id (common-lisp:error ":visual-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or visual-title-label-options common-lisp:null))
   (subtitle common-lisp:nil :type
    (common-lisp:or visual-subtitle-label-options common-lisp:null))
   (chart-configuration common-lisp:nil :type
    (common-lisp:or radar-chart-configuration common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or visual-custom-action-list common-lisp:null))
   (column-hierarchies common-lisp:nil :type
    (common-lisp:or column-hierarchy-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'radar-chart-visual 'make-radar-chart-visual))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input radar-chart-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input radar-chart-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-hierarchies))
      (common-lisp:list
       (common-lisp:cons "ColumnHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input radar-chart-visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (range-ends-label-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-range-ends-label-type-"))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'range-ends-label-type 'make-range-ends-label-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          range-ends-label-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          range-ends-label-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          range-ends-label-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rds-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-rds-parameters-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or database common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rds-parameters 'make-rds-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rds-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rds-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rds-parameters))
   common-lisp:nil))
(common-lisp:deftype recovery-window-in-days () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (redshift-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-redshift-parameters-"))
   (host common-lisp:nil :type (common-lisp:or host common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or optional-port common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or database common-lisp:null))
   (cluster-id common-lisp:nil :type
    (common-lisp:or cluster-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'redshift-parameters 'make-redshift-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input redshift-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input redshift-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input redshift-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reference-line (:copier common-lisp:nil)
      (:conc-name "struct-shape-reference-line-"))
   (status common-lisp:nil :type
    (common-lisp:or widget-status common-lisp:null))
   (data-configuration (common-lisp:error ":data-configuration is required")
    :type (common-lisp:or reference-line-data-configuration common-lisp:null))
   (style-configuration common-lisp:nil :type
    (common-lisp:or reference-line-style-configuration common-lisp:null))
   (label-configuration common-lisp:nil :type
    (common-lisp:or reference-line-label-configuration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'reference-line 'make-reference-line))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reference-line))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reference-line))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-configuration))
      (common-lisp:list
       (common-lisp:cons "DataConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style-configuration))
      (common-lisp:list
       (common-lisp:cons "StyleConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-configuration))
      (common-lisp:list
       (common-lisp:cons "LabelConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reference-line))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reference-line-custom-label-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-reference-line-custom-label-configuration-"))
   (custom-label (common-lisp:error ":custom-label is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reference-line-custom-label-configuration
                    'make-reference-line-custom-label-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-custom-label-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-custom-label-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-label))
      (common-lisp:list
       (common-lisp:cons "CustomLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-custom-label-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reference-line-data-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-reference-line-data-configuration-"))
   (static-configuration common-lisp:nil :type
    (common-lisp:or reference-line-static-data-configuration common-lisp:null))
   (dynamic-configuration common-lisp:nil :type
    (common-lisp:or reference-line-dynamic-data-configuration
                    common-lisp:null))
   (axis-binding common-lisp:nil :type
    (common-lisp:or axis-binding common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reference-line-data-configuration
                    'make-reference-line-data-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-data-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-data-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'static-configuration))
      (common-lisp:list
       (common-lisp:cons "StaticConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dynamic-configuration))
      (common-lisp:list
       (common-lisp:cons "DynamicConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'axis-binding))
      (common-lisp:list
       (common-lisp:cons "AxisBinding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-data-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reference-line-dynamic-data-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-reference-line-dynamic-data-configuration-"))
   (column (common-lisp:error ":column is required") :type
    (common-lisp:or column-identifier common-lisp:null))
   (measure-aggregation-function
    (common-lisp:error ":measure-aggregation-function is required") :type
    (common-lisp:or aggregation-function common-lisp:null))
   (calculation (common-lisp:error ":calculation is required") :type
    (common-lisp:or numerical-aggregation-function common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reference-line-dynamic-data-configuration
                    'make-reference-line-dynamic-data-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-dynamic-data-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-dynamic-data-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'measure-aggregation-function))
      (common-lisp:list
       (common-lisp:cons "MeasureAggregationFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'calculation))
      (common-lisp:list
       (common-lisp:cons "Calculation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-dynamic-data-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reference-line-label-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-reference-line-label-configuration-"))
   (value-label-configuration common-lisp:nil :type
    (common-lisp:or reference-line-value-label-configuration common-lisp:null))
   (custom-label-configuration common-lisp:nil :type
    (common-lisp:or reference-line-custom-label-configuration
                    common-lisp:null))
   (font-configuration common-lisp:nil :type
    (common-lisp:or font-configuration common-lisp:null))
   (font-color common-lisp:nil :type
    (common-lisp:or hex-color common-lisp:null))
   (horizontal-position common-lisp:nil :type
    (common-lisp:or reference-line-label-horizontal-position common-lisp:null))
   (vertical-position common-lisp:nil :type
    (common-lisp:or reference-line-label-vertical-position common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reference-line-label-configuration
                    'make-reference-line-label-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-label-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-label-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-label-configuration))
      (common-lisp:list
       (common-lisp:cons "ValueLabelConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-label-configuration))
      (common-lisp:list
       (common-lisp:cons "CustomLabelConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-configuration))
      (common-lisp:list
       (common-lisp:cons "FontConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-color))
      (common-lisp:list
       (common-lisp:cons "FontColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'horizontal-position))
      (common-lisp:list
       (common-lisp:cons "HorizontalPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vertical-position))
      (common-lisp:list
       (common-lisp:cons "VerticalPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-label-configuration))
   common-lisp:nil))
(common-lisp:deftype reference-line-label-horizontal-position ()
  'common-lisp:string)
(common-lisp:deftype reference-line-label-vertical-position ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype reference-line-list ()
   '(trivial-types:proper-list reference-line))
 (common-lisp:defun |make-reference-line-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reference-line))
   aws-sdk/generator/shape::members))
(common-lisp:deftype reference-line-pattern-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (reference-line-static-data-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-reference-line-static-data-configuration-"))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or sensitive-double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reference-line-static-data-configuration
                    'make-reference-line-static-data-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-static-data-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-static-data-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-static-data-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reference-line-style-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-reference-line-style-configuration-"))
   (pattern common-lisp:nil :type
    (common-lisp:or reference-line-pattern-type common-lisp:null))
   (color common-lisp:nil :type (common-lisp:or hex-color common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reference-line-style-configuration
                    'make-reference-line-style-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-style-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-style-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern))
      (common-lisp:list
       (common-lisp:cons "Pattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color))
      (common-lisp:list
       (common-lisp:cons "Color"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-style-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reference-line-value-label-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-reference-line-value-label-configuration-"))
   (relative-position common-lisp:nil :type
    (common-lisp:or reference-line-value-label-relative-position
                    common-lisp:null))
   (format-configuration common-lisp:nil :type
    (common-lisp:or numeric-format-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reference-line-value-label-configuration
                    'make-reference-line-value-label-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-value-label-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-value-label-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relative-position))
      (common-lisp:list
       (common-lisp:cons "RelativePosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'format-configuration))
      (common-lisp:list
       (common-lisp:cons "FormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-value-label-configuration))
   common-lisp:nil))
(common-lisp:deftype reference-line-value-label-relative-position ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (register-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-user-request-"))
   (identity-type (common-lisp:error ":identity-type is required") :type
    (common-lisp:or identity-type common-lisp:null))
   (email (common-lisp:error ":email is required") :type
    (common-lisp:or string common-lisp:null))
   (user-role (common-lisp:error ":user-role is required") :type
    (common-lisp:or user-role common-lisp:null))
   (iam-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (session-name common-lisp:nil :type
    (common-lisp:or role-session-name common-lisp:null))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null))
   (user-name common-lisp:nil :type
    (common-lisp:or user-name common-lisp:null))
   (custom-permissions-name common-lisp:nil :type
    (common-lisp:or role-name common-lisp:null))
   (external-login-federation-provider-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (custom-federation-provider-url common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (external-login-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-user-request 'make-register-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-type))
      (common-lisp:list
       (common-lisp:cons "IdentityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-role))
      (common-lisp:list
       (common-lisp:cons "UserRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-arn))
      (common-lisp:list
       (common-lisp:cons "IamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-name))
      (common-lisp:list
       (common-lisp:cons "SessionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-permissions-name))
      (common-lisp:list
       (common-lisp:cons "CustomPermissionsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-login-federation-provider-type))
      (common-lisp:list
       (common-lisp:cons "ExternalLoginFederationProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-federation-provider-url))
      (common-lisp:list
       (common-lisp:cons "CustomFederationProviderUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-login-id))
      (common-lisp:list
       (common-lisp:cons "ExternalLoginId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-user-response-"))
   (user common-lisp:nil :type (common-lisp:or user common-lisp:null))
   (user-invitation-url common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-user-response 'make-register-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-invitation-url))
      (common-lisp:list
       (common-lisp:cons "UserInvitationUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (registered-user-dashboard-embedding-configuration
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-registered-user-dashboard-embedding-configuration-"))
   (initial-dashboard-id
    (common-lisp:error ":initial-dashboard-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'registered-user-dashboard-embedding-configuration
                    'make-registered-user-dashboard-embedding-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-dashboard-embedding-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-dashboard-embedding-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initial-dashboard-id))
      (common-lisp:list
       (common-lisp:cons "InitialDashboardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-dashboard-embedding-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (registered-user-dashboard-visual-embedding-configuration
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-registered-user-dashboard-visual-embedding-configuration-"))
   (initial-dashboard-visual-id
    (common-lisp:error ":initial-dashboard-visual-id is required") :type
    (common-lisp:or dashboard-visual-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'registered-user-dashboard-visual-embedding-configuration
                    'make-registered-user-dashboard-visual-embedding-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-dashboard-visual-embedding-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-dashboard-visual-embedding-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initial-dashboard-visual-id))
      (common-lisp:list
       (common-lisp:cons "InitialDashboardVisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-dashboard-visual-embedding-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (registered-user-embedding-experience-configuration
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-registered-user-embedding-experience-configuration-"))
   (dashboard common-lisp:nil :type
    (common-lisp:or registered-user-dashboard-embedding-configuration
                    common-lisp:null))
   (quick-sight-console common-lisp:nil :type
    (common-lisp:or registered-user-quick-sight-console-embedding-configuration
                    common-lisp:null))
   (qsearch-bar common-lisp:nil :type
    (common-lisp:or registered-user-qsearch-bar-embedding-configuration
                    common-lisp:null))
   (dashboard-visual common-lisp:nil :type
    (common-lisp:or registered-user-dashboard-visual-embedding-configuration
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'registered-user-embedding-experience-configuration
                    'make-registered-user-embedding-experience-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-embedding-experience-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-embedding-experience-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard))
      (common-lisp:list
       (common-lisp:cons "Dashboard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-sight-console))
      (common-lisp:list
       (common-lisp:cons "QuickSightConsole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qsearch-bar))
      (common-lisp:list
       (common-lisp:cons "QSearchBar"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-visual))
      (common-lisp:list
       (common-lisp:cons "DashboardVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-embedding-experience-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (registered-user-qsearch-bar-embedding-configuration
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-registered-user-qsearch-bar-embedding-configuration-"))
   (initial-topic-id common-lisp:nil :type
    (common-lisp:or restrictive-resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'registered-user-qsearch-bar-embedding-configuration
                    'make-registered-user-qsearch-bar-embedding-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-qsearch-bar-embedding-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-qsearch-bar-embedding-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-topic-id))
      (common-lisp:list
       (common-lisp:cons "InitialTopicId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-qsearch-bar-embedding-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (registered-user-quick-sight-console-embedding-configuration
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-registered-user-quick-sight-console-embedding-configuration-"))
   (initial-path common-lisp:nil :type
    (common-lisp:or entry-path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'registered-user-quick-sight-console-embedding-configuration
   'make-registered-user-quick-sight-console-embedding-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-quick-sight-console-embedding-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-quick-sight-console-embedding-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-path))
      (common-lisp:list
       (common-lisp:cons "InitialPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-quick-sight-console-embedding-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (relational-table (:copier common-lisp:nil)
      (:conc-name "struct-shape-relational-table-"))
   (data-source-arn (common-lisp:error ":data-source-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (catalog common-lisp:nil :type
    (common-lisp:or relational-table-catalog common-lisp:null))
   (schema common-lisp:nil :type
    (common-lisp:or relational-table-schema common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or relational-table-name common-lisp:null))
   (input-columns (common-lisp:error ":input-columns is required") :type
    (common-lisp:or input-column-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'relational-table 'make-relational-table))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input relational-table))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input relational-table))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-arn))
      (common-lisp:list
       (common-lisp:cons "DataSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog))
      (common-lisp:list
       (common-lisp:cons "Catalog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "Schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-columns))
      (common-lisp:list
       (common-lisp:cons "InputColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input relational-table))
   common-lisp:nil))
(common-lisp:deftype relational-table-catalog () 'common-lisp:string)
(common-lisp:deftype relational-table-name () 'common-lisp:string)
(common-lisp:deftype relational-table-schema () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (relative-date-time-control-display-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-relative-date-time-control-display-options-"))
   (title-options common-lisp:nil :type
    (common-lisp:or label-options common-lisp:null))
   (date-time-format common-lisp:nil :type
    (common-lisp:or date-time-format common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'relative-date-time-control-display-options
                    'make-relative-date-time-control-display-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          relative-date-time-control-display-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          relative-date-time-control-display-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title-options))
      (common-lisp:list
       (common-lisp:cons "TitleOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-time-format))
      (common-lisp:list
       (common-lisp:cons "DateTimeFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          relative-date-time-control-display-options))
   common-lisp:nil))
(common-lisp:deftype relative-date-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (relative-dates-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-relative-dates-filter-"))
   (filter-id (common-lisp:error ":filter-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (column (common-lisp:error ":column is required") :type
    (common-lisp:or column-identifier common-lisp:null))
   (anchor-date-configuration
    (common-lisp:error ":anchor-date-configuration is required") :type
    (common-lisp:or anchor-date-configuration common-lisp:null))
   (minimum-granularity common-lisp:nil :type
    (common-lisp:or time-granularity common-lisp:null))
   (time-granularity (common-lisp:error ":time-granularity is required") :type
    (common-lisp:or time-granularity common-lisp:null))
   (relative-date-type (common-lisp:error ":relative-date-type is required")
    :type (common-lisp:or relative-date-type common-lisp:null))
   (relative-date-value common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (parameter-name common-lisp:nil :type
    (common-lisp:or parameter-name common-lisp:null))
   (null-option (common-lisp:error ":null-option is required") :type
    (common-lisp:or filter-null-option common-lisp:null))
   (exclude-period-configuration common-lisp:nil :type
    (common-lisp:or exclude-period-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'relative-dates-filter 'make-relative-dates-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          relative-dates-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          relative-dates-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-id))
      (common-lisp:list
       (common-lisp:cons "FilterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anchor-date-configuration))
      (common-lisp:list
       (common-lisp:cons "AnchorDateConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-granularity))
      (common-lisp:list
       (common-lisp:cons "MinimumGranularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-granularity))
      (common-lisp:list
       (common-lisp:cons "TimeGranularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relative-date-type))
      (common-lisp:list
       (common-lisp:cons "RelativeDateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relative-date-value))
      (common-lisp:list
       (common-lisp:cons "RelativeDateValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'null-option))
      (common-lisp:list
       (common-lisp:cons "NullOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclude-period-configuration))
      (common-lisp:list
       (common-lisp:cons "ExcludePeriodConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          relative-dates-filter))
   common-lisp:nil))
(common-lisp:deftype relative-font-size () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (rename-column-operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-rename-column-operation-"))
   (column-name (common-lisp:error ":column-name is required") :type
    (common-lisp:or column-name common-lisp:null))
   (new-column-name (common-lisp:error ":new-column-name is required") :type
    (common-lisp:or column-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rename-column-operation 'make-rename-column-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rename-column-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rename-column-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "ColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-column-name))
      (common-lisp:list
       (common-lisp:cons "NewColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rename-column-operation))
   common-lisp:nil))
(common-lisp:deftype resize-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-exists-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-exists-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-exists-exception-resource-type)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       resource-exists-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'resource-exists-exception
                    'resource-exists-exception-message
                    'resource-exists-exception-resource-type
                    'resource-exists-exception-request-id)))
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       resource-not-found-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-type
                    'resource-not-found-exception-request-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-permission (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-permission-"))
   (principal (common-lisp:error ":principal is required") :type
    (common-lisp:or principal common-lisp:null))
   (actions (common-lisp:error ":actions is required") :type
    (common-lisp:or action-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-permission 'make-resource-permission))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-permission))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-permission))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-permission))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-permission-list ()
   '(trivial-types:proper-list resource-permission))
 (common-lisp:defun |make-resource-permission-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-permission))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-unavailable-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-unavailable-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-unavailable-exception-resource-type)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       resource-unavailable-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'resource-unavailable-exception
                    'resource-unavailable-exception-message
                    'resource-unavailable-exception-resource-type
                    'resource-unavailable-exception-request-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-analysis-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-analysis-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (analysis-id (common-lisp:error ":analysis-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-analysis-request 'make-restore-analysis-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-analysis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-analysis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-analysis-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-analysis-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-analysis-response-"))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (analysis-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-analysis-response
                    'make-restore-analysis-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-analysis-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-analysis-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-id))
      (common-lisp:list
       (common-lisp:cons "AnalysisId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-analysis-response))
   common-lisp:nil))
(common-lisp:deftype restrictive-resource-id () 'common-lisp:string)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype role-name () 'common-lisp:string)
(common-lisp:deftype role-session-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (rolling-date-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-rolling-date-configuration-"))
   (data-set-identifier common-lisp:nil :type
    (common-lisp:or data-set-identifier common-lisp:null))
   (expression (common-lisp:error ":expression is required") :type
    (common-lisp:or expression common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rolling-date-configuration
                    'make-rolling-date-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rolling-date-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rolling-date-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-identifier))
      (common-lisp:list
       (common-lisp:cons "DataSetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rolling-date-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype row-alternate-color-list ()
   '(trivial-types:proper-list hex-color))
 (common-lisp:defun |make-row-alternate-color-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hex-color))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (row-alternate-color-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-row-alternate-color-options-"))
   (status common-lisp:nil :type
    (common-lisp:or widget-status common-lisp:null))
   (row-alternate-colors common-lisp:nil :type
    (common-lisp:or row-alternate-color-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'row-alternate-color-options
                    'make-row-alternate-color-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          row-alternate-color-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          row-alternate-color-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'row-alternate-colors))
      (common-lisp:list
       (common-lisp:cons "RowAlternateColors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          row-alternate-color-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (row-info (:copier common-lisp:nil) (:conc-name "struct-shape-row-info-"))
   (rows-ingested common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (rows-dropped common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (total-rows-in-dataset common-lisp:nil :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export (common-lisp:list 'row-info 'make-row-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input row-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input row-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rows-ingested))
      (common-lisp:list
       (common-lisp:cons "RowsIngested"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rows-dropped))
      (common-lisp:list
       (common-lisp:cons "RowsDropped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-rows-in-dataset))
      (common-lisp:list
       (common-lisp:cons "TotalRowsInDataset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input row-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (row-level-permission-data-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-row-level-permission-data-set-"))
   (namespace common-lisp:nil :type
    (common-lisp:or namespace common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (permission-policy (common-lisp:error ":permission-policy is required")
    :type (common-lisp:or row-level-permission-policy common-lisp:null))
   (format-version common-lisp:nil :type
    (common-lisp:or row-level-permission-format-version common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'row-level-permission-data-set
                    'make-row-level-permission-data-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          row-level-permission-data-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          row-level-permission-data-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-policy))
      (common-lisp:list
       (common-lisp:cons "PermissionPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format-version))
      (common-lisp:list
       (common-lisp:cons "FormatVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          row-level-permission-data-set))
   common-lisp:nil))
(common-lisp:deftype row-level-permission-format-version () 'common-lisp:string)
(common-lisp:deftype row-level-permission-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (row-level-permission-tag-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-row-level-permission-tag-configuration-"))
   (status common-lisp:nil :type (common-lisp:or status common-lisp:null))
   (tag-rules (common-lisp:error ":tag-rules is required") :type
    (common-lisp:or row-level-permission-tag-rule-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'row-level-permission-tag-configuration
                    'make-row-level-permission-tag-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          row-level-permission-tag-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          row-level-permission-tag-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-rules))
      (common-lisp:list
       (common-lisp:cons "TagRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          row-level-permission-tag-configuration))
   common-lisp:nil))
(common-lisp:deftype row-level-permission-tag-delimiter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (row-level-permission-tag-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-row-level-permission-tag-rule-"))
   (tag-key (common-lisp:error ":tag-key is required") :type
    (common-lisp:or session-tag-key common-lisp:null))
   (column-name (common-lisp:error ":column-name is required") :type
    (common-lisp:or string common-lisp:null))
   (tag-multi-value-delimiter common-lisp:nil :type
    (common-lisp:or row-level-permission-tag-delimiter common-lisp:null))
   (match-all-value common-lisp:nil :type
    (common-lisp:or session-tag-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'row-level-permission-tag-rule
                    'make-row-level-permission-tag-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          row-level-permission-tag-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          row-level-permission-tag-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "ColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tag-multi-value-delimiter))
      (common-lisp:list
       (common-lisp:cons "TagMultiValueDelimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-all-value))
      (common-lisp:list
       (common-lisp:cons "MatchAllValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          row-level-permission-tag-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype row-level-permission-tag-rule-list ()
   '(trivial-types:proper-list row-level-permission-tag-rule))
 (common-lisp:defun |make-row-level-permission-tag-rule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            row-level-permission-tag-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype row-sort-list ()
   '(trivial-types:proper-list field-sort-options))
 (common-lisp:defun |make-row-sort-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-sort-options))
   aws-sdk/generator/shape::members))
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3parameters-"))
   (manifest-file-location
    (common-lisp:error ":manifest-file-location is required") :type
    (common-lisp:or manifest-file-location common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3parameters 'make-s3parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manifest-file-location))
      (common-lisp:list
       (common-lisp:cons "ManifestFileLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3source (:copier common-lisp:nil) (:conc-name "struct-shape-s3source-"))
   (data-source-arn (common-lisp:error ":data-source-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (upload-settings common-lisp:nil :type
    (common-lisp:or upload-settings common-lisp:null))
   (input-columns (common-lisp:error ":input-columns is required") :type
    (common-lisp:or input-column-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3source 'make-s3source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-arn))
      (common-lisp:list
       (common-lisp:cons "DataSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-settings))
      (common-lisp:list
       (common-lisp:cons "UploadSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-columns))
      (common-lisp:list
       (common-lisp:cons "InputColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (same-sheet-target-visual-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-same-sheet-target-visual-configuration-"))
   (target-visuals common-lisp:nil :type
    (common-lisp:or target-visual-list common-lisp:null))
   (target-visual-options common-lisp:nil :type
    (common-lisp:or target-visual-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'same-sheet-target-visual-configuration
                    'make-same-sheet-target-visual-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          same-sheet-target-visual-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          same-sheet-target-visual-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-visuals))
      (common-lisp:list
       (common-lisp:cons "TargetVisuals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-visual-options))
      (common-lisp:list
       (common-lisp:cons "TargetVisualOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          same-sheet-target-visual-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sankey-diagram-aggregated-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-sankey-diagram-aggregated-field-wells-"))
   (source common-lisp:nil :type
    (common-lisp:or dimension-field-list common-lisp:null))
   (destination common-lisp:nil :type
    (common-lisp:or dimension-field-list common-lisp:null))
   (weight common-lisp:nil :type
    (common-lisp:or measure-field-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sankey-diagram-aggregated-field-wells
                    'make-sankey-diagram-aggregated-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sankey-diagram-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sankey-diagram-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "Weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sankey-diagram-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sankey-diagram-chart-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-sankey-diagram-chart-configuration-"))
   (field-wells common-lisp:nil :type
    (common-lisp:or sankey-diagram-field-wells common-lisp:null))
   (sort-configuration common-lisp:nil :type
    (common-lisp:or sankey-diagram-sort-configuration common-lisp:null))
   (data-labels common-lisp:nil :type
    (common-lisp:or data-label-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sankey-diagram-chart-configuration
                    'make-sankey-diagram-chart-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sankey-diagram-chart-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sankey-diagram-chart-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-labels))
      (common-lisp:list
       (common-lisp:cons "DataLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sankey-diagram-chart-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sankey-diagram-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-sankey-diagram-field-wells-"))
   (sankey-diagram-aggregated-field-wells common-lisp:nil :type
    (common-lisp:or sankey-diagram-aggregated-field-wells common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sankey-diagram-field-wells
                    'make-sankey-diagram-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sankey-diagram-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sankey-diagram-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sankey-diagram-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "SankeyDiagramAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sankey-diagram-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sankey-diagram-sort-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-sankey-diagram-sort-configuration-"))
   (weight-sort common-lisp:nil :type
    (common-lisp:or field-sort-options-list common-lisp:null))
   (source-items-limit common-lisp:nil :type
    (common-lisp:or items-limit-configuration common-lisp:null))
   (destination-items-limit common-lisp:nil :type
    (common-lisp:or items-limit-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sankey-diagram-sort-configuration
                    'make-sankey-diagram-sort-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sankey-diagram-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sankey-diagram-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight-sort))
      (common-lisp:list
       (common-lisp:cons "WeightSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-items-limit))
      (common-lisp:list
       (common-lisp:cons "SourceItemsLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-items-limit))
      (common-lisp:list
       (common-lisp:cons "DestinationItemsLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sankey-diagram-sort-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sankey-diagram-visual (:copier common-lisp:nil)
      (:conc-name "struct-shape-sankey-diagram-visual-"))
   (visual-id (common-lisp:error ":visual-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or visual-title-label-options common-lisp:null))
   (subtitle common-lisp:nil :type
    (common-lisp:or visual-subtitle-label-options common-lisp:null))
   (chart-configuration common-lisp:nil :type
    (common-lisp:or sankey-diagram-chart-configuration common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or visual-custom-action-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sankey-diagram-visual 'make-sankey-diagram-visual))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sankey-diagram-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sankey-diagram-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sankey-diagram-visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scatter-plot-categorically-aggregated-field-wells
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-scatter-plot-categorically-aggregated-field-wells-"))
   (xaxis common-lisp:nil :type
    (common-lisp:or measure-field-list common-lisp:null))
   (yaxis common-lisp:nil :type
    (common-lisp:or measure-field-list common-lisp:null))
   (category common-lisp:nil :type
    (common-lisp:or dimension-field-list common-lisp:null))
   (size common-lisp:nil :type
    (common-lisp:or measure-field-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scatter-plot-categorically-aggregated-field-wells
                    'make-scatter-plot-categorically-aggregated-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scatter-plot-categorically-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scatter-plot-categorically-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xaxis))
      (common-lisp:list
       (common-lisp:cons "XAxis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'yaxis))
      (common-lisp:list
       (common-lisp:cons "YAxis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scatter-plot-categorically-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scatter-plot-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-scatter-plot-configuration-"))
   (field-wells common-lisp:nil :type
    (common-lisp:or scatter-plot-field-wells common-lisp:null))
   (xaxis-label-options common-lisp:nil :type
    (common-lisp:or chart-axis-label-options common-lisp:null))
   (xaxis-display-options common-lisp:nil :type
    (common-lisp:or axis-display-options common-lisp:null))
   (yaxis-label-options common-lisp:nil :type
    (common-lisp:or chart-axis-label-options common-lisp:null))
   (yaxis-display-options common-lisp:nil :type
    (common-lisp:or axis-display-options common-lisp:null))
   (legend common-lisp:nil :type
    (common-lisp:or legend-options common-lisp:null))
   (data-labels common-lisp:nil :type
    (common-lisp:or data-label-options common-lisp:null))
   (tooltip common-lisp:nil :type
    (common-lisp:or tooltip-options common-lisp:null))
   (visual-palette common-lisp:nil :type
    (common-lisp:or visual-palette common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scatter-plot-configuration
                    'make-scatter-plot-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scatter-plot-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scatter-plot-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xaxis-label-options))
      (common-lisp:list
       (common-lisp:cons "XAxisLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'xaxis-display-options))
      (common-lisp:list
       (common-lisp:cons "XAxisDisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'yaxis-label-options))
      (common-lisp:list
       (common-lisp:cons "YAxisLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'yaxis-display-options))
      (common-lisp:list
       (common-lisp:cons "YAxisDisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legend))
      (common-lisp:list
       (common-lisp:cons "Legend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-labels))
      (common-lisp:list
       (common-lisp:cons "DataLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip))
      (common-lisp:list
       (common-lisp:cons "Tooltip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-palette))
      (common-lisp:list
       (common-lisp:cons "VisualPalette"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scatter-plot-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scatter-plot-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-scatter-plot-field-wells-"))
   (scatter-plot-categorically-aggregated-field-wells common-lisp:nil :type
    (common-lisp:or scatter-plot-categorically-aggregated-field-wells
                    common-lisp:null))
   (scatter-plot-unaggregated-field-wells common-lisp:nil :type
    (common-lisp:or scatter-plot-unaggregated-field-wells common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scatter-plot-field-wells 'make-scatter-plot-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scatter-plot-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scatter-plot-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scatter-plot-categorically-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "ScatterPlotCategoricallyAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scatter-plot-unaggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "ScatterPlotUnaggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scatter-plot-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scatter-plot-unaggregated-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-scatter-plot-unaggregated-field-wells-"))
   (xaxis common-lisp:nil :type
    (common-lisp:or dimension-field-list common-lisp:null))
   (yaxis common-lisp:nil :type
    (common-lisp:or dimension-field-list common-lisp:null))
   (size common-lisp:nil :type
    (common-lisp:or measure-field-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scatter-plot-unaggregated-field-wells
                    'make-scatter-plot-unaggregated-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scatter-plot-unaggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scatter-plot-unaggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xaxis))
      (common-lisp:list
       (common-lisp:cons "XAxis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'yaxis))
      (common-lisp:list
       (common-lisp:cons "YAxis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scatter-plot-unaggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scatter-plot-visual (:copier common-lisp:nil)
      (:conc-name "struct-shape-scatter-plot-visual-"))
   (visual-id (common-lisp:error ":visual-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or visual-title-label-options common-lisp:null))
   (subtitle common-lisp:nil :type
    (common-lisp:or visual-subtitle-label-options common-lisp:null))
   (chart-configuration common-lisp:nil :type
    (common-lisp:or scatter-plot-configuration common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or visual-custom-action-list common-lisp:null))
   (column-hierarchies common-lisp:nil :type
    (common-lisp:or column-hierarchy-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scatter-plot-visual 'make-scatter-plot-visual))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scatter-plot-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scatter-plot-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-hierarchies))
      (common-lisp:list
       (common-lisp:cons "ColumnHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scatter-plot-visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scroll-bar-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-scroll-bar-options-"))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (visible-range common-lisp:nil :type
    (common-lisp:or visible-range-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scroll-bar-options 'make-scroll-bar-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scroll-bar-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scroll-bar-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visible-range))
      (common-lisp:list
       (common-lisp:cons "VisibleRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scroll-bar-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-analyses-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-analyses-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (filters (common-lisp:error ":filters is required") :type
    (common-lisp:or analysis-search-filter-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-analyses-request 'make-search-analyses-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-analyses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-analyses-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-analyses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-analyses-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-analyses-response-"))
   (analysis-summary-list common-lisp:nil :type
    (common-lisp:or analysis-summary-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-analyses-response 'make-search-analyses-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-analyses-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-analyses-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analysis-summary-list))
      (common-lisp:list
       (common-lisp:cons "AnalysisSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-analyses-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-dashboards-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-dashboards-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (filters (common-lisp:error ":filters is required") :type
    (common-lisp:or dashboard-search-filter-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-dashboards-request
                    'make-search-dashboards-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-dashboards-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-dashboards-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-dashboards-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-dashboards-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-dashboards-response-"))
   (dashboard-summary-list common-lisp:nil :type
    (common-lisp:or dashboard-summary-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-dashboards-response
                    'make-search-dashboards-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-dashboards-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-dashboards-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dashboard-summary-list))
      (common-lisp:list
       (common-lisp:cons "DashboardSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-dashboards-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-data-sets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-data-sets-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (filters (common-lisp:error ":filters is required") :type
    (common-lisp:or data-set-search-filter-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-data-sets-request 'make-search-data-sets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-data-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-data-sets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-data-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-data-sets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-data-sets-response-"))
   (data-set-summaries common-lisp:nil :type
    (common-lisp:or data-set-summary-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-data-sets-response
                    'make-search-data-sets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-data-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-data-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-summaries))
      (common-lisp:list
       (common-lisp:cons "DataSetSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-data-sets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-data-sources-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-data-sources-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (filters (common-lisp:error ":filters is required") :type
    (common-lisp:or data-source-search-filter-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-data-sources-request
                    'make-search-data-sources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-data-sources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-data-sources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-data-sources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-data-sources-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-data-sources-response-"))
   (data-source-summaries common-lisp:nil :type
    (common-lisp:or data-source-summary-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-data-sources-response
                    'make-search-data-sources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-data-sources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-data-sources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-summaries))
      (common-lisp:list
       (common-lisp:cons "DataSourceSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-data-sources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-folders-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-folders-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (filters (common-lisp:error ":filters is required") :type
    (common-lisp:or folder-search-filter-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-folders-request 'make-search-folders-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-folders-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-folders-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-folders-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-folders-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-folders-response-"))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (folder-summary-list common-lisp:nil :type
    (common-lisp:or folder-summary-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-folders-response 'make-search-folders-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-folders-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-folders-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-summary-list))
      (common-lisp:list
       (common-lisp:cons "FolderSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-folders-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-groups-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null))
   (filters (common-lisp:error ":filters is required") :type
    (common-lisp:or group-search-filter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-groups-request 'make-search-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-groups-response-"))
   (group-list common-lisp:nil :type
    (common-lisp:or group-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-groups-response 'make-search-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-list))
      (common-lisp:list
       (common-lisp:cons "GroupList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-groups-response))
   common-lisp:nil))
(common-lisp:deftype seasonality () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (secondary-value-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-secondary-value-options-"))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'secondary-value-options 'make-secondary-value-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          secondary-value-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          secondary-value-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          secondary-value-options))
   common-lisp:nil))
(common-lisp:deftype secret-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (section-after-page-break (:copier common-lisp:nil)
      (:conc-name "struct-shape-section-after-page-break-"))
   (status common-lisp:nil :type
    (common-lisp:or section-page-break-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'section-after-page-break 'make-section-after-page-break))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          section-after-page-break))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          section-after-page-break))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          section-after-page-break))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (section-based-layout-canvas-size-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-section-based-layout-canvas-size-options-"))
   (paper-canvas-size-options common-lisp:nil :type
    (common-lisp:or section-based-layout-paper-canvas-size-options
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'section-based-layout-canvas-size-options
                    'make-section-based-layout-canvas-size-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          section-based-layout-canvas-size-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          section-based-layout-canvas-size-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'paper-canvas-size-options))
      (common-lisp:list
       (common-lisp:cons "PaperCanvasSizeOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          section-based-layout-canvas-size-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (section-based-layout-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-section-based-layout-configuration-"))
   (header-sections (common-lisp:error ":header-sections is required") :type
    (common-lisp:or header-footer-section-configuration-list common-lisp:null))
   (body-sections (common-lisp:error ":body-sections is required") :type
    (common-lisp:or body-section-configuration-list common-lisp:null))
   (footer-sections (common-lisp:error ":footer-sections is required") :type
    (common-lisp:or header-footer-section-configuration-list common-lisp:null))
   (canvas-size-options (common-lisp:error ":canvas-size-options is required")
    :type
    (common-lisp:or section-based-layout-canvas-size-options
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'section-based-layout-configuration
                    'make-section-based-layout-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          section-based-layout-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          section-based-layout-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header-sections))
      (common-lisp:list
       (common-lisp:cons "HeaderSections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body-sections))
      (common-lisp:list
       (common-lisp:cons "BodySections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'footer-sections))
      (common-lisp:list
       (common-lisp:cons "FooterSections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canvas-size-options))
      (common-lisp:list
       (common-lisp:cons "CanvasSizeOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          section-based-layout-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (section-based-layout-paper-canvas-size-options (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-section-based-layout-paper-canvas-size-options-"))
   (paper-size common-lisp:nil :type
    (common-lisp:or paper-size common-lisp:null))
   (paper-orientation common-lisp:nil :type
    (common-lisp:or paper-orientation common-lisp:null))
   (paper-margin common-lisp:nil :type
    (common-lisp:or spacing common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'section-based-layout-paper-canvas-size-options
                    'make-section-based-layout-paper-canvas-size-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          section-based-layout-paper-canvas-size-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          section-based-layout-paper-canvas-size-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paper-size))
      (common-lisp:list
       (common-lisp:cons "PaperSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paper-orientation))
      (common-lisp:list
       (common-lisp:cons "PaperOrientation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paper-margin))
      (common-lisp:list
       (common-lisp:cons "PaperMargin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          section-based-layout-paper-canvas-size-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (section-layout-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-section-layout-configuration-"))
   (free-form-layout (common-lisp:error ":free-form-layout is required") :type
    (common-lisp:or free-form-section-layout-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'section-layout-configuration
                    'make-section-layout-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          section-layout-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          section-layout-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'free-form-layout))
      (common-lisp:list
       (common-lisp:cons "FreeFormLayout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          section-layout-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (section-page-break-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-section-page-break-configuration-"))
   (after common-lisp:nil :type
    (common-lisp:or section-after-page-break common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'section-page-break-configuration
                    'make-section-page-break-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          section-page-break-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          section-page-break-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after))
      (common-lisp:list
       (common-lisp:cons "After"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          section-page-break-configuration))
   common-lisp:nil))
(common-lisp:deftype section-page-break-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (section-style (:copier common-lisp:nil)
      (:conc-name "struct-shape-section-style-"))
   (height common-lisp:nil :type
    (common-lisp:or pixel-length common-lisp:null))
   (padding common-lisp:nil :type (common-lisp:or spacing common-lisp:null)))
 (common-lisp:export (common-lisp:list 'section-style 'make-section-style))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input section-style))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input section-style))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'padding))
      (common-lisp:list
       (common-lisp:cons "Padding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input section-style))
   common-lisp:nil))
(common-lisp:deftype select-all-value-options () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype selected-field-list ()
   '(trivial-types:proper-list field-id))
 (common-lisp:defun |make-selected-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype selected-field-options () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (selected-sheets-filter-scope-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-selected-sheets-filter-scope-configuration-"))
   (sheet-visual-scoping-configurations common-lisp:nil :type
    (common-lisp:or sheet-visual-scoping-configurations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'selected-sheets-filter-scope-configuration
                    'make-selected-sheets-filter-scope-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          selected-sheets-filter-scope-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          selected-sheets-filter-scope-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sheet-visual-scoping-configurations))
      (common-lisp:list
       (common-lisp:cons "SheetVisualScopingConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          selected-sheets-filter-scope-configuration))
   common-lisp:nil))
(common-lisp:deftype selected-tooltip-type () 'common-lisp:string)
(common-lisp:deftype sensitive-double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:deftype sensitive-double-list ()
   '(trivial-types:proper-list sensitive-double))
 (common-lisp:defun |make-sensitive-double-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sensitive-double))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sensitive-double-object () 'common-lisp:double-float)
(common-lisp:deftype sensitive-long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype sensitive-long-list ()
   '(trivial-types:proper-list sensitive-long))
 (common-lisp:defun |make-sensitive-long-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sensitive-long))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sensitive-long-object () 'common-lisp:integer)
(common-lisp:deftype sensitive-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype sensitive-string-list ()
   '(trivial-types:proper-list sensitive-string))
 (common-lisp:defun |make-sensitive-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sensitive-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sensitive-string-object () 'common-lisp:string)
(common-lisp:deftype sensitive-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype sensitive-timestamp-list ()
   '(trivial-types:proper-list sensitive-timestamp))
 (common-lisp:defun |make-sensitive-timestamp-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sensitive-timestamp))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (series-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-series-item-"))
   (field-series-item common-lisp:nil :type
    (common-lisp:or field-series-item common-lisp:null))
   (data-field-series-item common-lisp:nil :type
    (common-lisp:or data-field-series-item common-lisp:null)))
 (common-lisp:export (common-lisp:list 'series-item 'make-series-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input series-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input series-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-series-item))
      (common-lisp:list
       (common-lisp:cons "FieldSeriesItem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-field-series-item))
      (common-lisp:list
       (common-lisp:cons "DataFieldSeriesItem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input series-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype series-item-list ()
   '(trivial-types:proper-list series-item))
 (common-lisp:defun |make-series-item-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list series-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (service-now-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-now-parameters-"))
   (site-base-url (common-lisp:error ":site-base-url is required") :type
    (common-lisp:or site-base-url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-now-parameters 'make-service-now-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-now-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-now-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'site-base-url))
      (common-lisp:list
       (common-lisp:cons "SiteBaseUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-now-parameters))
   common-lisp:nil))
(common-lisp:deftype session-lifetime-in-minutes () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition session-lifetime-in-minutes-invalid-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       session-lifetime-in-minutes-invalid-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       session-lifetime-in-minutes-invalid-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'session-lifetime-in-minutes-invalid-exception
                    'session-lifetime-in-minutes-invalid-exception-message
                    'session-lifetime-in-minutes-invalid-exception-request-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (session-tag (:copier common-lisp:nil)
      (:conc-name "struct-shape-session-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or session-tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or session-tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'session-tag 'make-session-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session-tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session-tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session-tag))
   common-lisp:nil))
(common-lisp:deftype session-tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype session-tag-list ()
   '(trivial-types:proper-list session-tag))
 (common-lisp:defun |make-session-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list session-tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype session-tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (set-parameter-value-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-set-parameter-value-configuration-"))
   (destination-parameter-name
    (common-lisp:error ":destination-parameter-name is required") :type
    (common-lisp:or parameter-name common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or destination-parameter-value-configuration
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-parameter-value-configuration
                    'make-set-parameter-value-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-parameter-value-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-parameter-value-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-parameter-name))
      (common-lisp:list
       (common-lisp:cons "DestinationParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-parameter-value-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype set-parameter-value-configuration-list ()
   '(trivial-types:proper-list set-parameter-value-configuration))
 (common-lisp:defun |make-set-parameter-value-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            set-parameter-value-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (shape-conditional-format (:copier common-lisp:nil)
      (:conc-name "struct-shape-shape-conditional-format-"))
   (background-color (common-lisp:error ":background-color is required") :type
    (common-lisp:or conditional-formatting-color common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'shape-conditional-format 'make-shape-conditional-format))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          shape-conditional-format))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          shape-conditional-format))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background-color))
      (common-lisp:list
       (common-lisp:cons "BackgroundColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          shape-conditional-format))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sheet (:copier common-lisp:nil) (:conc-name "struct-shape-sheet-"))
   (sheet-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or sheet-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'sheet 'make-sheet))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sheet))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sheet))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sheet-id))
      (common-lisp:list
       (common-lisp:cons "SheetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sheet))
   common-lisp:nil))
(common-lisp:deftype sheet-content-type () 'common-lisp:string)
(common-lisp:deftype sheet-control-date-time-picker-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (sheet-control-layout (:copier common-lisp:nil)
      (:conc-name "struct-shape-sheet-control-layout-"))
   (configuration (common-lisp:error ":configuration is required") :type
    (common-lisp:or sheet-control-layout-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sheet-control-layout 'make-sheet-control-layout))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sheet-control-layout))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sheet-control-layout))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sheet-control-layout))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sheet-control-layout-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-sheet-control-layout-configuration-"))
   (grid-layout common-lisp:nil :type
    (common-lisp:or grid-layout-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sheet-control-layout-configuration
                    'make-sheet-control-layout-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sheet-control-layout-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sheet-control-layout-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grid-layout))
      (common-lisp:list
       (common-lisp:cons "GridLayout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sheet-control-layout-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sheet-control-layout-list ()
   '(trivial-types:proper-list sheet-control-layout))
 (common-lisp:defun |make-sheet-control-layout-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sheet-control-layout))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sheet-control-list-type () 'common-lisp:string)
(common-lisp:deftype sheet-control-slider-type () 'common-lisp:string)
(common-lisp:deftype sheet-control-title () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (sheet-controls-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-sheet-controls-option-"))
   (visibility-state common-lisp:nil :type
    (common-lisp:or dashboard-uistate common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sheet-controls-option 'make-sheet-controls-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sheet-controls-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sheet-controls-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility-state))
      (common-lisp:list
       (common-lisp:cons "VisibilityState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sheet-controls-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sheet-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-sheet-definition-"))
   (sheet-id (common-lisp:error ":sheet-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title common-lisp:nil :type (common-lisp:or sheet-title common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or sheet-description common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or sheet-name common-lisp:null))
   (parameter-controls common-lisp:nil :type
    (common-lisp:or parameter-control-list common-lisp:null))
   (filter-controls common-lisp:nil :type
    (common-lisp:or filter-control-list common-lisp:null))
   (visuals common-lisp:nil :type
    (common-lisp:or visual-list common-lisp:null))
   (text-boxes common-lisp:nil :type
    (common-lisp:or sheet-text-box-list common-lisp:null))
   (layouts common-lisp:nil :type
    (common-lisp:or layout-list common-lisp:null))
   (sheet-control-layouts common-lisp:nil :type
    (common-lisp:or sheet-control-layout-list common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or sheet-content-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sheet-definition 'make-sheet-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sheet-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sheet-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sheet-id))
      (common-lisp:list
       (common-lisp:cons "SheetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-controls))
      (common-lisp:list
       (common-lisp:cons "ParameterControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-controls))
      (common-lisp:list
       (common-lisp:cons "FilterControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visuals))
      (common-lisp:list
       (common-lisp:cons "Visuals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-boxes))
      (common-lisp:list
       (common-lisp:cons "TextBoxes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layouts))
      (common-lisp:list
       (common-lisp:cons "Layouts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sheet-control-layouts))
      (common-lisp:list
       (common-lisp:cons "SheetControlLayouts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sheet-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sheet-definition-list ()
   '(trivial-types:proper-list sheet-definition))
 (common-lisp:defun |make-sheet-definition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sheet-definition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sheet-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (sheet-element-configuration-overrides (:copier common-lisp:nil)
      (:conc-name "struct-shape-sheet-element-configuration-overrides-"))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sheet-element-configuration-overrides
                    'make-sheet-element-configuration-overrides))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sheet-element-configuration-overrides))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sheet-element-configuration-overrides))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sheet-element-configuration-overrides))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sheet-element-rendering-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-sheet-element-rendering-rule-"))
   (expression (common-lisp:error ":expression is required") :type
    (common-lisp:or expression common-lisp:null))
   (configuration-overrides
    (common-lisp:error ":configuration-overrides is required") :type
    (common-lisp:or sheet-element-configuration-overrides common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sheet-element-rendering-rule
                    'make-sheet-element-rendering-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sheet-element-rendering-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sheet-element-rendering-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-overrides))
      (common-lisp:list
       (common-lisp:cons "ConfigurationOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sheet-element-rendering-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sheet-element-rendering-rule-list ()
   '(trivial-types:proper-list sheet-element-rendering-rule))
 (common-lisp:defun |make-sheet-element-rendering-rule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            sheet-element-rendering-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (sheet-layout-element-maximization-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-sheet-layout-element-maximization-option-"))
   (availability-status common-lisp:nil :type
    (common-lisp:or dashboard-behavior common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sheet-layout-element-maximization-option
                    'make-sheet-layout-element-maximization-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sheet-layout-element-maximization-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sheet-layout-element-maximization-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-status))
      (common-lisp:list
       (common-lisp:cons "AvailabilityStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sheet-layout-element-maximization-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sheet-list () '(trivial-types:proper-list sheet))
 (common-lisp:defun |make-sheet-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sheet))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sheet-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (sheet-style (:copier common-lisp:nil)
      (:conc-name "struct-shape-sheet-style-"))
   (tile common-lisp:nil :type (common-lisp:or tile-style common-lisp:null))
   (tile-layout common-lisp:nil :type
    (common-lisp:or tile-layout-style common-lisp:null)))
 (common-lisp:export (common-lisp:list 'sheet-style 'make-sheet-style))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sheet-style))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sheet-style))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tile))
      (common-lisp:list
       (common-lisp:cons "Tile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tile-layout))
      (common-lisp:list
       (common-lisp:cons "TileLayout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sheet-style))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sheet-text-box (:copier common-lisp:nil)
      (:conc-name "struct-shape-sheet-text-box-"))
   (sheet-text-box-id (common-lisp:error ":sheet-text-box-id is required")
    :type (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (content common-lisp:nil :type
    (common-lisp:or sheet-text-box-content common-lisp:null)))
 (common-lisp:export (common-lisp:list 'sheet-text-box 'make-sheet-text-box))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sheet-text-box))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sheet-text-box))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sheet-text-box-id))
      (common-lisp:list
       (common-lisp:cons "SheetTextBoxId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sheet-text-box))
   common-lisp:nil))
(common-lisp:deftype sheet-text-box-content () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype sheet-text-box-list ()
   '(trivial-types:proper-list sheet-text-box))
 (common-lisp:defun |make-sheet-text-box-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sheet-text-box))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sheet-title () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (sheet-visual-scoping-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-sheet-visual-scoping-configuration-"))
   (sheet-id (common-lisp:error ":sheet-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or filter-visual-scope common-lisp:null))
   (visual-ids common-lisp:nil :type
    (common-lisp:or filtered-visuals-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sheet-visual-scoping-configuration
                    'make-sheet-visual-scoping-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sheet-visual-scoping-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sheet-visual-scoping-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sheet-id))
      (common-lisp:list
       (common-lisp:cons "SheetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-ids))
      (common-lisp:list
       (common-lisp:cons "VisualIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sheet-visual-scoping-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sheet-visual-scoping-configurations ()
   '(trivial-types:proper-list sheet-visual-scoping-configuration))
 (common-lisp:defun |make-sheet-visual-scoping-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            sheet-visual-scoping-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (short-format-text (:copier common-lisp:nil)
      (:conc-name "struct-shape-short-format-text-"))
   (plain-text common-lisp:nil :type
    (common-lisp:or short-plain-text common-lisp:null))
   (rich-text common-lisp:nil :type
    (common-lisp:or short-rich-text common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'short-format-text 'make-short-format-text))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input short-format-text))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input short-format-text))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plain-text))
      (common-lisp:list
       (common-lisp:cons "PlainText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rich-text))
      (common-lisp:list
       (common-lisp:cons "RichText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input short-format-text))
   common-lisp:nil))
(common-lisp:deftype short-plain-text () 'common-lisp:string)
(common-lisp:deftype short-restrictive-resource-id () 'common-lisp:string)
(common-lisp:deftype short-rich-text () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (signup-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-signup-response-"))
   (iamuser common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (user-login-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (account-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (directory-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'signup-response 'make-signup-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input signup-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input signup-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iamuser))
      (common-lisp:list
       (common-lisp:cons "IAMUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-login-name))
      (common-lisp:list
       (common-lisp:cons "userLoginName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-name))
      (common-lisp:list
       (common-lisp:cons "accountName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-type))
      (common-lisp:list
       (common-lisp:cons "directoryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input signup-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (simple-cluster-marker (:copier common-lisp:nil)
      (:conc-name "struct-shape-simple-cluster-marker-"))
   (color common-lisp:nil :type (common-lisp:or hex-color common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'simple-cluster-marker 'make-simple-cluster-marker))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          simple-cluster-marker))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          simple-cluster-marker))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color))
      (common-lisp:list
       (common-lisp:cons "Color"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          simple-cluster-marker))
   common-lisp:nil))
(common-lisp:deftype simple-numerical-aggregation-function ()
  'common-lisp:string)
(common-lisp:deftype site-base-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (slider-control-display-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-slider-control-display-options-"))
   (title-options common-lisp:nil :type
    (common-lisp:or label-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'slider-control-display-options
                    'make-slider-control-display-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          slider-control-display-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          slider-control-display-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title-options))
      (common-lisp:list
       (common-lisp:cons "TitleOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          slider-control-display-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype small-multiples-dimension-field-list ()
   '(trivial-types:proper-list dimension-field))
 (common-lisp:defun |make-small-multiples-dimension-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (small-multiples-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-small-multiples-options-"))
   (max-visible-rows common-lisp:nil :type
    (common-lisp:or visible-panel-rows common-lisp:null))
   (max-visible-columns common-lisp:nil :type
    (common-lisp:or visible-panel-columns common-lisp:null))
   (panel-configuration common-lisp:nil :type
    (common-lisp:or panel-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'small-multiples-options 'make-small-multiples-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          small-multiples-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          small-multiples-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-visible-rows))
      (common-lisp:list
       (common-lisp:cons "MaxVisibleRows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-visible-columns))
      (common-lisp:list
       (common-lisp:cons "MaxVisibleColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'panel-configuration))
      (common-lisp:list
       (common-lisp:cons "PanelConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          small-multiples-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (snowflake-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-snowflake-parameters-"))
   (host (common-lisp:error ":host is required") :type
    (common-lisp:or host common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or database common-lisp:null))
   (warehouse (common-lisp:error ":warehouse is required") :type
    (common-lisp:or warehouse common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'snowflake-parameters 'make-snowflake-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snowflake-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snowflake-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warehouse))
      (common-lisp:list
       (common-lisp:cons "Warehouse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snowflake-parameters))
   common-lisp:nil))
(common-lisp:deftype sort-direction () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (spacing (:copier common-lisp:nil) (:conc-name "struct-shape-spacing-"))
   (top common-lisp:nil :type (common-lisp:or length common-lisp:null))
   (bottom common-lisp:nil :type (common-lisp:or length common-lisp:null))
   (left common-lisp:nil :type (common-lisp:or length common-lisp:null))
   (right common-lisp:nil :type (common-lisp:or length common-lisp:null)))
 (common-lisp:export (common-lisp:list 'spacing 'make-spacing))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input spacing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input spacing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'top))
      (common-lisp:list
       (common-lisp:cons "Top"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bottom))
      (common-lisp:list
       (common-lisp:cons "Bottom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'left))
      (common-lisp:list
       (common-lisp:cons "Left"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'right))
      (common-lisp:list
       (common-lisp:cons "Right"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input spacing))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (spark-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-spark-parameters-"))
   (host (common-lisp:error ":host is required") :type
    (common-lisp:or host common-lisp:null))
   (port (common-lisp:error ":port is required") :type
    (common-lisp:or port common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'spark-parameters 'make-spark-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input spark-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input spark-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input spark-parameters))
   common-lisp:nil))
(common-lisp:deftype sql-endpoint-path () 'common-lisp:string)
(common-lisp:deftype sql-query () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (sql-server-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-sql-server-parameters-"))
   (host (common-lisp:error ":host is required") :type
    (common-lisp:or host common-lisp:null))
   (port (common-lisp:error ":port is required") :type
    (common-lisp:or port common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or database common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sql-server-parameters 'make-sql-server-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sql-server-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sql-server-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sql-server-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ssl-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-ssl-properties-"))
   (disable-ssl common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ssl-properties 'make-ssl-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ssl-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ssl-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-ssl))
      (common-lisp:list
       (common-lisp:cons "DisableSsl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ssl-properties))
   common-lisp:nil))
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:deftype status-code () 'common-lisp:integer)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-default-value-list ()
   '(trivial-types:proper-list sensitive-string-object))
 (common-lisp:defun |make-string-default-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sensitive-string-object))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (string-default-values (:copier common-lisp:nil)
      (:conc-name "struct-shape-string-default-values-"))
   (dynamic-value common-lisp:nil :type
    (common-lisp:or dynamic-default-value common-lisp:null))
   (static-values common-lisp:nil :type
    (common-lisp:or string-default-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'string-default-values 'make-string-default-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          string-default-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          string-default-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamic-value))
      (common-lisp:list
       (common-lisp:cons "DynamicValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-values))
      (common-lisp:list
       (common-lisp:cons "StaticValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          string-default-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (string-format-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-string-format-configuration-"))
   (null-value-format-configuration common-lisp:nil :type
    (common-lisp:or null-value-format-configuration common-lisp:null))
   (numeric-format-configuration common-lisp:nil :type
    (common-lisp:or numeric-format-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'string-format-configuration
                    'make-string-format-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          string-format-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          string-format-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'null-value-format-configuration))
      (common-lisp:list
       (common-lisp:cons "NullValueFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'numeric-format-configuration))
      (common-lisp:list
       (common-lisp:cons "NumericFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          string-format-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (string-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-string-parameter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or sensitive-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'string-parameter 'make-string-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input string-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input string-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input string-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (string-parameter-declaration (:copier common-lisp:nil)
      (:conc-name "struct-shape-string-parameter-declaration-"))
   (parameter-value-type
    (common-lisp:error ":parameter-value-type is required") :type
    (common-lisp:or parameter-value-type common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or parameter-name common-lisp:null))
   (default-values common-lisp:nil :type
    (common-lisp:or string-default-values common-lisp:null))
   (value-when-unset common-lisp:nil :type
    (common-lisp:or string-value-when-unset-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'string-parameter-declaration
                    'make-string-parameter-declaration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          string-parameter-declaration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          string-parameter-declaration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-value-type))
      (common-lisp:list
       (common-lisp:cons "ParameterValueType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-values))
      (common-lisp:list
       (common-lisp:cons "DefaultValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-when-unset))
      (common-lisp:list
       (common-lisp:cons "ValueWhenUnset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          string-parameter-declaration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype string-parameter-list ()
   '(trivial-types:proper-list string-parameter))
 (common-lisp:defun |make-string-parameter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (string-value-when-unset-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-string-value-when-unset-configuration-"))
   (value-when-unset-option common-lisp:nil :type
    (common-lisp:or value-when-unset-option common-lisp:null))
   (custom-value common-lisp:nil :type
    (common-lisp:or sensitive-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'string-value-when-unset-configuration
                    'make-string-value-when-unset-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          string-value-when-unset-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          string-value-when-unset-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-when-unset-option))
      (common-lisp:list
       (common-lisp:cons "ValueWhenUnsetOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-value))
      (common-lisp:list
       (common-lisp:cons "CustomValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          string-value-when-unset-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (subtotal-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-subtotal-options-"))
   (totals-visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (custom-label common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (field-level common-lisp:nil :type
    (common-lisp:or pivot-table-subtotal-level common-lisp:null))
   (field-level-options common-lisp:nil :type
    (common-lisp:or pivot-table-field-subtotal-options-list common-lisp:null))
   (total-cell-style common-lisp:nil :type
    (common-lisp:or table-cell-style common-lisp:null))
   (value-cell-style common-lisp:nil :type
    (common-lisp:or table-cell-style common-lisp:null))
   (metric-header-cell-style common-lisp:nil :type
    (common-lisp:or table-cell-style common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'subtotal-options 'make-subtotal-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subtotal-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subtotal-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'totals-visibility))
      (common-lisp:list
       (common-lisp:cons "TotalsVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-label))
      (common-lisp:list
       (common-lisp:cons "CustomLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-level))
      (common-lisp:list
       (common-lisp:cons "FieldLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-level-options))
      (common-lisp:list
       (common-lisp:cons "FieldLevelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-cell-style))
      (common-lisp:list
       (common-lisp:cons "TotalCellStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-cell-style))
      (common-lisp:list
       (common-lisp:cons "ValueCellStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-header-cell-style))
      (common-lisp:list
       (common-lisp:cons "MetricHeaderCellStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subtotal-options))
   common-lisp:nil))
(common-lisp:deftype suffix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (table-aggregated-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-aggregated-field-wells-"))
   (group-by common-lisp:nil :type
    (common-lisp:or dimension-field-list common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or measure-field-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-aggregated-field-wells
                    'make-table-aggregated-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "GroupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (table-border-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-border-options-"))
   (color common-lisp:nil :type (common-lisp:or hex-color common-lisp:null))
   (thickness common-lisp:nil :type
    (common-lisp:or table-border-thickness common-lisp:null))
   (style common-lisp:nil :type
    (common-lisp:or table-border-style common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-border-options 'make-table-border-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-border-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-border-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color))
      (common-lisp:list
       (common-lisp:cons "Color"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thickness))
      (common-lisp:list
       (common-lisp:cons "Thickness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style))
      (common-lisp:list
       (common-lisp:cons "Style"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-border-options))
   common-lisp:nil))
(common-lisp:deftype table-border-style () 'common-lisp:string)
(common-lisp:deftype table-border-thickness () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (table-cell-conditional-formatting (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-cell-conditional-formatting-"))
   (field-id (common-lisp:error ":field-id is required") :type
    (common-lisp:or field-id common-lisp:null))
   (text-format common-lisp:nil :type
    (common-lisp:or text-conditional-format common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-cell-conditional-formatting
                    'make-table-cell-conditional-formatting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-cell-conditional-formatting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-cell-conditional-formatting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-format))
      (common-lisp:list
       (common-lisp:cons "TextFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-cell-conditional-formatting))
   common-lisp:nil))
(common-lisp:deftype table-cell-image-scaling-configuration ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (table-cell-image-sizing-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-cell-image-sizing-configuration-"))
   (table-cell-image-scaling-configuration common-lisp:nil :type
    (common-lisp:or table-cell-image-scaling-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-cell-image-sizing-configuration
                    'make-table-cell-image-sizing-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-cell-image-sizing-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-cell-image-sizing-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'table-cell-image-scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "TableCellImageScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-cell-image-sizing-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (table-cell-style (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-cell-style-"))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (font-configuration common-lisp:nil :type
    (common-lisp:or font-configuration common-lisp:null))
   (text-wrap common-lisp:nil :type
    (common-lisp:or text-wrap common-lisp:null))
   (horizontal-text-alignment common-lisp:nil :type
    (common-lisp:or horizontal-text-alignment common-lisp:null))
   (vertical-text-alignment common-lisp:nil :type
    (common-lisp:or vertical-text-alignment common-lisp:null))
   (background-color common-lisp:nil :type
    (common-lisp:or hex-color common-lisp:null))
   (height common-lisp:nil :type
    (common-lisp:or table-field-height common-lisp:null))
   (border common-lisp:nil :type
    (common-lisp:or global-table-border-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-cell-style 'make-table-cell-style))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-cell-style))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-cell-style))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-configuration))
      (common-lisp:list
       (common-lisp:cons "FontConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-wrap))
      (common-lisp:list
       (common-lisp:cons "TextWrap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'horizontal-text-alignment))
      (common-lisp:list
       (common-lisp:cons "HorizontalTextAlignment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vertical-text-alignment))
      (common-lisp:list
       (common-lisp:cons "VerticalTextAlignment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background-color))
      (common-lisp:list
       (common-lisp:cons "BackgroundColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'border))
      (common-lisp:list
       (common-lisp:cons "Border"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-cell-style))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (table-conditional-formatting (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-conditional-formatting-"))
   (conditional-formatting-options common-lisp:nil :type
    (common-lisp:or table-conditional-formatting-option-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-conditional-formatting
                    'make-table-conditional-formatting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-conditional-formatting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-conditional-formatting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-formatting-options))
      (common-lisp:list
       (common-lisp:cons "ConditionalFormattingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-conditional-formatting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (table-conditional-formatting-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-conditional-formatting-option-"))
   (cell common-lisp:nil :type
    (common-lisp:or table-cell-conditional-formatting common-lisp:null))
   (row common-lisp:nil :type
    (common-lisp:or table-row-conditional-formatting common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-conditional-formatting-option
                    'make-table-conditional-formatting-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-conditional-formatting-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-conditional-formatting-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cell))
      (common-lisp:list
       (common-lisp:cons "Cell"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row))
      (common-lisp:list
       (common-lisp:cons "Row"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-conditional-formatting-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype table-conditional-formatting-option-list ()
   '(trivial-types:proper-list table-conditional-formatting-option))
 (common-lisp:defun |make-table-conditional-formatting-option-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            table-conditional-formatting-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (table-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-configuration-"))
   (field-wells common-lisp:nil :type
    (common-lisp:or table-field-wells common-lisp:null))
   (sort-configuration common-lisp:nil :type
    (common-lisp:or table-sort-configuration common-lisp:null))
   (table-options common-lisp:nil :type
    (common-lisp:or table-options common-lisp:null))
   (total-options common-lisp:nil :type
    (common-lisp:or total-options common-lisp:null))
   (field-options common-lisp:nil :type
    (common-lisp:or table-field-options common-lisp:null))
   (paginated-report-options common-lisp:nil :type
    (common-lisp:or table-paginated-report-options common-lisp:null))
   (table-inline-visualizations common-lisp:nil :type
    (common-lisp:or table-inline-visualization-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-configuration 'make-table-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-options))
      (common-lisp:list
       (common-lisp:cons "TableOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-options))
      (common-lisp:list
       (common-lisp:cons "TotalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-options))
      (common-lisp:list
       (common-lisp:cons "FieldOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'paginated-report-options))
      (common-lisp:list
       (common-lisp:cons "PaginatedReportOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'table-inline-visualizations))
      (common-lisp:list
       (common-lisp:cons "TableInlineVisualizations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (table-field-custom-icon-content (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-field-custom-icon-content-"))
   (icon common-lisp:nil :type
    (common-lisp:or table-field-icon-set-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-field-custom-icon-content
                    'make-table-field-custom-icon-content))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-field-custom-icon-content))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-field-custom-icon-content))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icon))
      (common-lisp:list
       (common-lisp:cons "Icon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-field-custom-icon-content))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (table-field-custom-text-content (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-field-custom-text-content-"))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (font-configuration (common-lisp:error ":font-configuration is required")
    :type (common-lisp:or font-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-field-custom-text-content
                    'make-table-field-custom-text-content))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-field-custom-text-content))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-field-custom-text-content))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-configuration))
      (common-lisp:list
       (common-lisp:cons "FontConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-field-custom-text-content))
   common-lisp:nil))
(common-lisp:deftype table-field-height () 'common-lisp:integer)
(common-lisp:deftype table-field-icon-set-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (table-field-image-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-field-image-configuration-"))
   (sizing-options common-lisp:nil :type
    (common-lisp:or table-cell-image-sizing-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-field-image-configuration
                    'make-table-field-image-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-field-image-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-field-image-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sizing-options))
      (common-lisp:list
       (common-lisp:cons "SizingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-field-image-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (table-field-link-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-field-link-configuration-"))
   (target (common-lisp:error ":target is required") :type
    (common-lisp:or urltarget-configuration common-lisp:null))
   (content (common-lisp:error ":content is required") :type
    (common-lisp:or table-field-link-content-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-field-link-configuration
                    'make-table-field-link-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-field-link-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-field-link-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-field-link-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (table-field-link-content-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-field-link-content-configuration-"))
   (custom-text-content common-lisp:nil :type
    (common-lisp:or table-field-custom-text-content common-lisp:null))
   (custom-icon-content common-lisp:nil :type
    (common-lisp:or table-field-custom-icon-content common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-field-link-content-configuration
                    'make-table-field-link-content-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-field-link-content-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-field-link-content-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-text-content))
      (common-lisp:list
       (common-lisp:cons "CustomTextContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-icon-content))
      (common-lisp:list
       (common-lisp:cons "CustomIconContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-field-link-content-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (table-field-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-field-option-"))
   (field-id (common-lisp:error ":field-id is required") :type
    (common-lisp:or field-id common-lisp:null))
   (width common-lisp:nil :type (common-lisp:or pixel-length common-lisp:null))
   (custom-label common-lisp:nil :type
    (common-lisp:or custom-label common-lisp:null))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (urlstyling common-lisp:nil :type
    (common-lisp:or table-field-urlconfiguration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-field-option 'make-table-field-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-field-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-field-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-label))
      (common-lisp:list
       (common-lisp:cons "CustomLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'urlstyling))
      (common-lisp:list
       (common-lisp:cons "URLStyling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-field-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype table-field-option-list ()
   '(trivial-types:proper-list table-field-option))
 (common-lisp:defun |make-table-field-option-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-field-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (table-field-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-field-options-"))
   (selected-field-options common-lisp:nil :type
    (common-lisp:or table-field-option-list common-lisp:null))
   (order common-lisp:nil :type
    (common-lisp:or field-order-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-field-options 'make-table-field-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-field-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-field-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'selected-field-options))
      (common-lisp:list
       (common-lisp:cons "SelectedFieldOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "Order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-field-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (table-field-urlconfiguration (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-field-urlconfiguration-"))
   (link-configuration common-lisp:nil :type
    (common-lisp:or table-field-link-configuration common-lisp:null))
   (image-configuration common-lisp:nil :type
    (common-lisp:or table-field-image-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-field-urlconfiguration
                    'make-table-field-urlconfiguration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-field-urlconfiguration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-field-urlconfiguration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-configuration))
      (common-lisp:list
       (common-lisp:cons "LinkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-configuration))
      (common-lisp:list
       (common-lisp:cons "ImageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-field-urlconfiguration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (table-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-field-wells-"))
   (table-aggregated-field-wells common-lisp:nil :type
    (common-lisp:or table-aggregated-field-wells common-lisp:null))
   (table-unaggregated-field-wells common-lisp:nil :type
    (common-lisp:or table-unaggregated-field-wells common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-field-wells 'make-table-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'table-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "TableAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'table-unaggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "TableUnaggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (table-inline-visualization (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-inline-visualization-"))
   (data-bars common-lisp:nil :type
    (common-lisp:or data-bars-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-inline-visualization
                    'make-table-inline-visualization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-inline-visualization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-inline-visualization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-bars))
      (common-lisp:list
       (common-lisp:cons "DataBars"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-inline-visualization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype table-inline-visualization-list ()
   '(trivial-types:proper-list table-inline-visualization))
 (common-lisp:defun |make-table-inline-visualization-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            table-inline-visualization))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (table-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-options-"))
   (orientation common-lisp:nil :type
    (common-lisp:or table-orientation common-lisp:null))
   (header-style common-lisp:nil :type
    (common-lisp:or table-cell-style common-lisp:null))
   (cell-style common-lisp:nil :type
    (common-lisp:or table-cell-style common-lisp:null))
   (row-alternate-color-options common-lisp:nil :type
    (common-lisp:or row-alternate-color-options common-lisp:null)))
 (common-lisp:export (common-lisp:list 'table-options 'make-table-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'orientation))
      (common-lisp:list
       (common-lisp:cons "Orientation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header-style))
      (common-lisp:list
       (common-lisp:cons "HeaderStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cell-style))
      (common-lisp:list
       (common-lisp:cons "CellStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'row-alternate-color-options))
      (common-lisp:list
       (common-lisp:cons "RowAlternateColorOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-options))
   common-lisp:nil))
(common-lisp:deftype table-orientation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (table-paginated-report-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-paginated-report-options-"))
   (vertical-overflow-visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (overflow-column-header-visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-paginated-report-options
                    'make-table-paginated-report-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-paginated-report-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-paginated-report-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vertical-overflow-visibility))
      (common-lisp:list
       (common-lisp:cons "VerticalOverflowVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'overflow-column-header-visibility))
      (common-lisp:list
       (common-lisp:cons "OverflowColumnHeaderVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-paginated-report-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (table-row-conditional-formatting (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-row-conditional-formatting-"))
   (background-color common-lisp:nil :type
    (common-lisp:or conditional-formatting-color common-lisp:null))
   (text-color common-lisp:nil :type
    (common-lisp:or conditional-formatting-color common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-row-conditional-formatting
                    'make-table-row-conditional-formatting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-row-conditional-formatting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-row-conditional-formatting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background-color))
      (common-lisp:list
       (common-lisp:cons "BackgroundColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-color))
      (common-lisp:list
       (common-lisp:cons "TextColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-row-conditional-formatting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (table-side-border-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-side-border-options-"))
   (inner-vertical common-lisp:nil :type
    (common-lisp:or table-border-options common-lisp:null))
   (inner-horizontal common-lisp:nil :type
    (common-lisp:or table-border-options common-lisp:null))
   (left common-lisp:nil :type
    (common-lisp:or table-border-options common-lisp:null))
   (right common-lisp:nil :type
    (common-lisp:or table-border-options common-lisp:null))
   (top common-lisp:nil :type
    (common-lisp:or table-border-options common-lisp:null))
   (bottom common-lisp:nil :type
    (common-lisp:or table-border-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-side-border-options
                    'make-table-side-border-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-side-border-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-side-border-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inner-vertical))
      (common-lisp:list
       (common-lisp:cons "InnerVertical"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inner-horizontal))
      (common-lisp:list
       (common-lisp:cons "InnerHorizontal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'left))
      (common-lisp:list
       (common-lisp:cons "Left"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'right))
      (common-lisp:list
       (common-lisp:cons "Right"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'top))
      (common-lisp:list
       (common-lisp:cons "Top"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bottom))
      (common-lisp:list
       (common-lisp:cons "Bottom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-side-border-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (table-sort-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-sort-configuration-"))
   (row-sort common-lisp:nil :type
    (common-lisp:or row-sort-list common-lisp:null))
   (pagination-configuration common-lisp:nil :type
    (common-lisp:or pagination-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-sort-configuration 'make-table-sort-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-sort))
      (common-lisp:list
       (common-lisp:cons "RowSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pagination-configuration))
      (common-lisp:list
       (common-lisp:cons "PaginationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-sort-configuration))
   common-lisp:nil))
(common-lisp:deftype table-totals-placement () 'common-lisp:string)
(common-lisp:deftype table-totals-scroll-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (table-unaggregated-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-unaggregated-field-wells-"))
   (values common-lisp:nil :type
    (common-lisp:or unaggregated-field-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-unaggregated-field-wells
                    'make-table-unaggregated-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-unaggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-unaggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-unaggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (table-visual (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-visual-"))
   (visual-id (common-lisp:error ":visual-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or visual-title-label-options common-lisp:null))
   (subtitle common-lisp:nil :type
    (common-lisp:or visual-subtitle-label-options common-lisp:null))
   (chart-configuration common-lisp:nil :type
    (common-lisp:or table-configuration common-lisp:null))
   (conditional-formatting common-lisp:nil :type
    (common-lisp:or table-conditional-formatting common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or visual-custom-action-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'table-visual 'make-table-visual))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-formatting))
      (common-lisp:list
       (common-lisp:cons "ConditionalFormatting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-column-operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-column-operation-"))
   (column-name (common-lisp:error ":column-name is required") :type
    (common-lisp:or column-name common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or column-tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-column-operation 'make-tag-column-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-column-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-column-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "ColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-column-operation))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-"))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-visual-list ()
   '(trivial-types:proper-list short-restrictive-resource-id))
 (common-lisp:defun |make-target-visual-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            short-restrictive-resource-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target-visual-options () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (template (:copier common-lisp:nil) (:conc-name "struct-shape-template-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or template-name common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or template-version common-lisp:null))
   (template-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'template 'make-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (template-alias (:copier common-lisp:nil)
      (:conc-name "struct-shape-template-alias-"))
   (alias-name common-lisp:nil :type
    (common-lisp:or alias-name common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (template-version-number common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null)))
 (common-lisp:export (common-lisp:list 'template-alias 'make-template-alias))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-alias))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-alias))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-name))
      (common-lisp:list
       (common-lisp:cons "AliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-version-number))
      (common-lisp:list
       (common-lisp:cons "TemplateVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-alias))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype template-alias-list ()
   '(trivial-types:proper-list template-alias))
 (common-lisp:defun |make-template-alias-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list template-alias))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (template-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-template-error-"))
   (type common-lisp:nil :type
    (common-lisp:or template-error-type common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (violated-entities common-lisp:nil :type
    (common-lisp:or entity-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'template-error 'make-template-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violated-entities))
      (common-lisp:list
       (common-lisp:cons "ViolatedEntities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype template-error-list ()
   '(trivial-types:proper-list template-error))
 (common-lisp:defun |make-template-error-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list template-error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype template-error-type () 'common-lisp:string)
(common-lisp:deftype template-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (template-source-analysis (:copier common-lisp:nil)
      (:conc-name "struct-shape-template-source-analysis-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (data-set-references (common-lisp:error ":data-set-references is required")
    :type (common-lisp:or data-set-reference-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'template-source-analysis 'make-template-source-analysis))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          template-source-analysis))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          template-source-analysis))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-references))
      (common-lisp:list
       (common-lisp:cons "DataSetReferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          template-source-analysis))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (template-source-entity (:copier common-lisp:nil)
      (:conc-name "struct-shape-template-source-entity-"))
   (source-analysis common-lisp:nil :type
    (common-lisp:or template-source-analysis common-lisp:null))
   (source-template common-lisp:nil :type
    (common-lisp:or template-source-template common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'template-source-entity 'make-template-source-entity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          template-source-entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          template-source-entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-analysis))
      (common-lisp:list
       (common-lisp:cons "SourceAnalysis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-template))
      (common-lisp:list
       (common-lisp:cons "SourceTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          template-source-entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (template-source-template (:copier common-lisp:nil)
      (:conc-name "struct-shape-template-source-template-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'template-source-template 'make-template-source-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          template-source-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          template-source-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          template-source-template))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (template-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-template-summary-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (template-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or template-name common-lisp:null))
   (latest-version-number common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'template-summary 'make-template-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-version-number))
      (common-lisp:list
       (common-lisp:cons "LatestVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype template-summary-list ()
   '(trivial-types:proper-list template-summary))
 (common-lisp:defun |make-template-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list template-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (template-version (:copier common-lisp:nil)
      (:conc-name "struct-shape-template-version-"))
   (created-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (errors common-lisp:nil :type
    (common-lisp:or template-error-list common-lisp:null))
   (version-number common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or resource-status common-lisp:null))
   (data-set-configurations common-lisp:nil :type
    (common-lisp:or data-set-configuration-list common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or version-description common-lisp:null))
   (source-entity-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (theme-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (sheets common-lisp:nil :type (common-lisp:or sheet-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'template-version 'make-template-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-set-configurations))
      (common-lisp:list
       (common-lisp:cons "DataSetConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-entity-arn))
      (common-lisp:list
       (common-lisp:cons "SourceEntityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-arn))
      (common-lisp:list
       (common-lisp:cons "ThemeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sheets))
      (common-lisp:list
       (common-lisp:cons "Sheets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (template-version-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-template-version-definition-"))
   (data-set-configurations
    (common-lisp:error ":data-set-configurations is required") :type
    (common-lisp:or data-set-configuration-list common-lisp:null))
   (sheets common-lisp:nil :type
    (common-lisp:or sheet-definition-list common-lisp:null))
   (calculated-fields common-lisp:nil :type
    (common-lisp:or calculated-fields common-lisp:null))
   (parameter-declarations common-lisp:nil :type
    (common-lisp:or parameter-declaration-list common-lisp:null))
   (filter-groups common-lisp:nil :type
    (common-lisp:or filter-group-list common-lisp:null))
   (column-configurations common-lisp:nil :type
    (common-lisp:or column-configuration-list common-lisp:null))
   (analysis-defaults common-lisp:nil :type
    (common-lisp:or analysis-defaults common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'template-version-definition
                    'make-template-version-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          template-version-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          template-version-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-set-configurations))
      (common-lisp:list
       (common-lisp:cons "DataSetConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sheets))
      (common-lisp:list
       (common-lisp:cons "Sheets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'calculated-fields))
      (common-lisp:list
       (common-lisp:cons "CalculatedFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-declarations))
      (common-lisp:list
       (common-lisp:cons "ParameterDeclarations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-groups))
      (common-lisp:list
       (common-lisp:cons "FilterGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-configurations))
      (common-lisp:list
       (common-lisp:cons "ColumnConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-defaults))
      (common-lisp:list
       (common-lisp:cons "AnalysisDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          template-version-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (template-version-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-template-version-summary-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (version-number common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or resource-status common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or version-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'template-version-summary 'make-template-version-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          template-version-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          template-version-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          template-version-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype template-version-summary-list ()
   '(trivial-types:proper-list template-version-summary))
 (common-lisp:defun |make-template-version-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            template-version-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (teradata-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-teradata-parameters-"))
   (host (common-lisp:error ":host is required") :type
    (common-lisp:or host common-lisp:null))
   (port (common-lisp:error ":port is required") :type
    (common-lisp:or port common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or database common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'teradata-parameters 'make-teradata-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input teradata-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input teradata-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input teradata-parameters))
   common-lisp:nil))
(common-lisp:deftype text-area-control-delimiter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (text-area-control-display-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-text-area-control-display-options-"))
   (title-options common-lisp:nil :type
    (common-lisp:or label-options common-lisp:null))
   (placeholder-options common-lisp:nil :type
    (common-lisp:or text-control-placeholder-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'text-area-control-display-options
                    'make-text-area-control-display-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          text-area-control-display-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          text-area-control-display-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title-options))
      (common-lisp:list
       (common-lisp:cons "TitleOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placeholder-options))
      (common-lisp:list
       (common-lisp:cons "PlaceholderOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          text-area-control-display-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (text-conditional-format (:copier common-lisp:nil)
      (:conc-name "struct-shape-text-conditional-format-"))
   (background-color common-lisp:nil :type
    (common-lisp:or conditional-formatting-color common-lisp:null))
   (text-color common-lisp:nil :type
    (common-lisp:or conditional-formatting-color common-lisp:null))
   (icon common-lisp:nil :type
    (common-lisp:or conditional-formatting-icon common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'text-conditional-format 'make-text-conditional-format))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          text-conditional-format))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          text-conditional-format))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background-color))
      (common-lisp:list
       (common-lisp:cons "BackgroundColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-color))
      (common-lisp:list
       (common-lisp:cons "TextColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icon))
      (common-lisp:list
       (common-lisp:cons "Icon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          text-conditional-format))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (text-control-placeholder-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-text-control-placeholder-options-"))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'text-control-placeholder-options
                    'make-text-control-placeholder-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          text-control-placeholder-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          text-control-placeholder-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          text-control-placeholder-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (text-field-control-display-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-text-field-control-display-options-"))
   (title-options common-lisp:nil :type
    (common-lisp:or label-options common-lisp:null))
   (placeholder-options common-lisp:nil :type
    (common-lisp:or text-control-placeholder-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'text-field-control-display-options
                    'make-text-field-control-display-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          text-field-control-display-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          text-field-control-display-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title-options))
      (common-lisp:list
       (common-lisp:cons "TitleOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placeholder-options))
      (common-lisp:list
       (common-lisp:cons "PlaceholderOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          text-field-control-display-options))
   common-lisp:nil))
(common-lisp:deftype text-qualifier () 'common-lisp:string)
(common-lisp:deftype text-wrap () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (theme (:copier common-lisp:nil) (:conc-name "struct-shape-theme-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or theme-name common-lisp:null))
   (theme-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or theme-version common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or theme-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'theme 'make-theme))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input theme))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input theme))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-id))
      (common-lisp:list
       (common-lisp:cons "ThemeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input theme))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (theme-alias (:copier common-lisp:nil)
      (:conc-name "struct-shape-theme-alias-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (alias-name common-lisp:nil :type
    (common-lisp:or alias-name common-lisp:null))
   (theme-version-number common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null)))
 (common-lisp:export (common-lisp:list 'theme-alias 'make-theme-alias))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input theme-alias))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input theme-alias))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-name))
      (common-lisp:list
       (common-lisp:cons "AliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'theme-version-number))
      (common-lisp:list
       (common-lisp:cons "ThemeVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input theme-alias))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype theme-alias-list ()
   '(trivial-types:proper-list theme-alias))
 (common-lisp:defun |make-theme-alias-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list theme-alias))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (theme-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-theme-configuration-"))
   (data-color-palette common-lisp:nil :type
    (common-lisp:or data-color-palette common-lisp:null))
   (uicolor-palette common-lisp:nil :type
    (common-lisp:or uicolor-palette common-lisp:null))
   (sheet common-lisp:nil :type (common-lisp:or sheet-style common-lisp:null))
   (typography common-lisp:nil :type
    (common-lisp:or typography common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'theme-configuration 'make-theme-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input theme-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input theme-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-color-palette))
      (common-lisp:list
       (common-lisp:cons "DataColorPalette"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uicolor-palette))
      (common-lisp:list
       (common-lisp:cons "UIColorPalette"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sheet))
      (common-lisp:list
       (common-lisp:cons "Sheet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'typography))
      (common-lisp:list
       (common-lisp:cons "Typography"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input theme-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (theme-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-theme-error-"))
   (type common-lisp:nil :type
    (common-lisp:or theme-error-type common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'theme-error 'make-theme-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input theme-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input theme-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input theme-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype theme-error-list ()
   '(trivial-types:proper-list theme-error))
 (common-lisp:defun |make-theme-error-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list theme-error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype theme-error-type () 'common-lisp:string)
(common-lisp:deftype theme-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (theme-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-theme-summary-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or theme-name common-lisp:null))
   (theme-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (latest-version-number common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'theme-summary 'make-theme-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input theme-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input theme-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-id))
      (common-lisp:list
       (common-lisp:cons "ThemeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-version-number))
      (common-lisp:list
       (common-lisp:cons "LatestVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input theme-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype theme-summary-list ()
   '(trivial-types:proper-list theme-summary))
 (common-lisp:defun |make-theme-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list theme-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype theme-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (theme-version (:copier common-lisp:nil)
      (:conc-name "struct-shape-theme-version-"))
   (version-number common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or version-description common-lisp:null))
   (base-theme-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or theme-configuration common-lisp:null))
   (errors common-lisp:nil :type
    (common-lisp:or theme-error-list common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or resource-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'theme-version 'make-theme-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input theme-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input theme-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-theme-id))
      (common-lisp:list
       (common-lisp:cons "BaseThemeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input theme-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (theme-version-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-theme-version-summary-"))
   (version-number common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or version-description common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or resource-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'theme-version-summary 'make-theme-version-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          theme-version-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          theme-version-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          theme-version-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype theme-version-summary-list ()
   '(trivial-types:proper-list theme-version-summary))
 (common-lisp:defun |make-theme-version-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list theme-version-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (thousand-separator-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-thousand-separator-options-"))
   (symbol common-lisp:nil :type
    (common-lisp:or numeric-separator-symbol common-lisp:null))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'thousand-separator-options
                    'make-thousand-separator-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          thousand-separator-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          thousand-separator-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'symbol))
      (common-lisp:list
       (common-lisp:cons "Symbol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          thousand-separator-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       throttling-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-request-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (tile-layout-style (:copier common-lisp:nil)
      (:conc-name "struct-shape-tile-layout-style-"))
   (gutter common-lisp:nil :type
    (common-lisp:or gutter-style common-lisp:null))
   (margin common-lisp:nil :type
    (common-lisp:or margin-style common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tile-layout-style 'make-tile-layout-style))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tile-layout-style))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tile-layout-style))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gutter))
      (common-lisp:list
       (common-lisp:cons "Gutter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'margin))
      (common-lisp:list
       (common-lisp:cons "Margin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tile-layout-style))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tile-style (:copier common-lisp:nil)
      (:conc-name "struct-shape-tile-style-"))
   (border common-lisp:nil :type
    (common-lisp:or border-style common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tile-style 'make-tile-style))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tile-style))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tile-style))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'border))
      (common-lisp:list
       (common-lisp:cons "Border"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tile-style))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (time-based-forecast-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-time-based-forecast-properties-"))
   (periods-forward common-lisp:nil :type
    (common-lisp:or periods-forward common-lisp:null))
   (periods-backward common-lisp:nil :type
    (common-lisp:or periods-backward common-lisp:null))
   (upper-boundary common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (lower-boundary common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (prediction-interval common-lisp:nil :type
    (common-lisp:or prediction-interval common-lisp:null))
   (seasonality common-lisp:nil :type
    (common-lisp:or seasonality common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'time-based-forecast-properties
                    'make-time-based-forecast-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          time-based-forecast-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          time-based-forecast-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'periods-forward))
      (common-lisp:list
       (common-lisp:cons "PeriodsForward"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'periods-backward))
      (common-lisp:list
       (common-lisp:cons "PeriodsBackward"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upper-boundary))
      (common-lisp:list
       (common-lisp:cons "UpperBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lower-boundary))
      (common-lisp:list
       (common-lisp:cons "LowerBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prediction-interval))
      (common-lisp:list
       (common-lisp:cons "PredictionInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'seasonality))
      (common-lisp:list
       (common-lisp:cons "Seasonality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          time-based-forecast-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (time-equality-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-time-equality-filter-"))
   (filter-id (common-lisp:error ":filter-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (column (common-lisp:error ":column is required") :type
    (common-lisp:or column-identifier common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (parameter-name common-lisp:nil :type
    (common-lisp:or parameter-name common-lisp:null))
   (time-granularity common-lisp:nil :type
    (common-lisp:or time-granularity common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'time-equality-filter 'make-time-equality-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-equality-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-equality-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-id))
      (common-lisp:list
       (common-lisp:cons "FilterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-granularity))
      (common-lisp:list
       (common-lisp:cons "TimeGranularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-equality-filter))
   common-lisp:nil))
(common-lisp:deftype time-granularity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (time-range-drill-down-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-time-range-drill-down-filter-"))
   (column (common-lisp:error ":column is required") :type
    (common-lisp:or column-identifier common-lisp:null))
   (range-minimum (common-lisp:error ":range-minimum is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (range-maximum (common-lisp:error ":range-maximum is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (time-granularity (common-lisp:error ":time-granularity is required") :type
    (common-lisp:or time-granularity common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'time-range-drill-down-filter
                    'make-time-range-drill-down-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          time-range-drill-down-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          time-range-drill-down-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range-minimum))
      (common-lisp:list
       (common-lisp:cons "RangeMinimum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range-maximum))
      (common-lisp:list
       (common-lisp:cons "RangeMaximum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-granularity))
      (common-lisp:list
       (common-lisp:cons "TimeGranularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          time-range-drill-down-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (time-range-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-time-range-filter-"))
   (filter-id (common-lisp:error ":filter-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (column (common-lisp:error ":column is required") :type
    (common-lisp:or column-identifier common-lisp:null))
   (include-minimum common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (include-maximum common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (range-minimum-value common-lisp:nil :type
    (common-lisp:or time-range-filter-value common-lisp:null))
   (range-maximum-value common-lisp:nil :type
    (common-lisp:or time-range-filter-value common-lisp:null))
   (null-option (common-lisp:error ":null-option is required") :type
    (common-lisp:or filter-null-option common-lisp:null))
   (exclude-period-configuration common-lisp:nil :type
    (common-lisp:or exclude-period-configuration common-lisp:null))
   (time-granularity common-lisp:nil :type
    (common-lisp:or time-granularity common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'time-range-filter 'make-time-range-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-range-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-range-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-id))
      (common-lisp:list
       (common-lisp:cons "FilterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-minimum))
      (common-lisp:list
       (common-lisp:cons "IncludeMinimum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-maximum))
      (common-lisp:list
       (common-lisp:cons "IncludeMaximum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range-minimum-value))
      (common-lisp:list
       (common-lisp:cons "RangeMinimumValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range-maximum-value))
      (common-lisp:list
       (common-lisp:cons "RangeMaximumValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'null-option))
      (common-lisp:list
       (common-lisp:cons "NullOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclude-period-configuration))
      (common-lisp:list
       (common-lisp:cons "ExcludePeriodConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-granularity))
      (common-lisp:list
       (common-lisp:cons "TimeGranularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-range-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (time-range-filter-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-time-range-filter-value-"))
   (static-value common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (rolling-date common-lisp:nil :type
    (common-lisp:or rolling-date-configuration common-lisp:null))
   (parameter common-lisp:nil :type
    (common-lisp:or parameter-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'time-range-filter-value 'make-time-range-filter-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          time-range-filter-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          time-range-filter-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-value))
      (common-lisp:list
       (common-lisp:cons "StaticValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rolling-date))
      (common-lisp:list
       (common-lisp:cons "RollingDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter))
      (common-lisp:list
       (common-lisp:cons "Parameter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          time-range-filter-value))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tooltip-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-tooltip-item-"))
   (field-tooltip-item common-lisp:nil :type
    (common-lisp:or field-tooltip-item common-lisp:null))
   (column-tooltip-item common-lisp:nil :type
    (common-lisp:or column-tooltip-item common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tooltip-item 'make-tooltip-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tooltip-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tooltip-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-tooltip-item))
      (common-lisp:list
       (common-lisp:cons "FieldTooltipItem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-tooltip-item))
      (common-lisp:list
       (common-lisp:cons "ColumnTooltipItem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tooltip-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tooltip-item-list ()
   '(trivial-types:proper-list tooltip-item))
 (common-lisp:defun |make-tooltip-item-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tooltip-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tooltip-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-tooltip-options-"))
   (tooltip-visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (selected-tooltip-type common-lisp:nil :type
    (common-lisp:or selected-tooltip-type common-lisp:null))
   (field-based-tooltip common-lisp:nil :type
    (common-lisp:or field-based-tooltip common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tooltip-options 'make-tooltip-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tooltip-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tooltip-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip-visibility))
      (common-lisp:list
       (common-lisp:cons "TooltipVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'selected-tooltip-type))
      (common-lisp:list
       (common-lisp:cons "SelectedTooltipType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-based-tooltip))
      (common-lisp:list
       (common-lisp:cons "FieldBasedTooltip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tooltip-options))
   common-lisp:nil))
(common-lisp:deftype tooltip-title-type () 'common-lisp:string)
(common-lisp:deftype top-bottom-computation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (top-bottom-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-top-bottom-filter-"))
   (filter-id (common-lisp:error ":filter-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (column (common-lisp:error ":column is required") :type
    (common-lisp:or column-identifier common-lisp:null))
   (limit common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (aggregation-sort-configurations
    (common-lisp:error ":aggregation-sort-configurations is required") :type
    (common-lisp:or aggregation-sort-configuration-list common-lisp:null))
   (time-granularity common-lisp:nil :type
    (common-lisp:or time-granularity common-lisp:null))
   (parameter-name common-lisp:nil :type
    (common-lisp:or parameter-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'top-bottom-filter 'make-top-bottom-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input top-bottom-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input top-bottom-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-id))
      (common-lisp:list
       (common-lisp:cons "FilterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-sort-configurations))
      (common-lisp:list
       (common-lisp:cons "AggregationSortConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-granularity))
      (common-lisp:list
       (common-lisp:cons "TimeGranularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input top-bottom-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (top-bottom-movers-computation (:copier common-lisp:nil)
      (:conc-name "struct-shape-top-bottom-movers-computation-"))
   (computation-id (common-lisp:error ":computation-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (time (common-lisp:error ":time is required") :type
    (common-lisp:or dimension-field common-lisp:null))
   (category (common-lisp:error ":category is required") :type
    (common-lisp:or dimension-field common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or measure-field common-lisp:null))
   (mover-size common-lisp:nil :type
    (common-lisp:or top-bottom-movers-computation-mover-size common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or top-bottom-sort-order common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or top-bottom-computation-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'top-bottom-movers-computation
                    'make-top-bottom-movers-computation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          top-bottom-movers-computation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          top-bottom-movers-computation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computation-id))
      (common-lisp:list
       (common-lisp:cons "ComputationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mover-size))
      (common-lisp:list
       (common-lisp:cons "MoverSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          top-bottom-movers-computation))
   common-lisp:nil))
(common-lisp:deftype top-bottom-movers-computation-mover-size ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (top-bottom-ranked-computation (:copier common-lisp:nil)
      (:conc-name "struct-shape-top-bottom-ranked-computation-"))
   (computation-id (common-lisp:error ":computation-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (category (common-lisp:error ":category is required") :type
    (common-lisp:or dimension-field common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or measure-field common-lisp:null))
   (result-size common-lisp:nil :type
    (common-lisp:or top-bottom-ranked-computation-result-size
                    common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or top-bottom-computation-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'top-bottom-ranked-computation
                    'make-top-bottom-ranked-computation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          top-bottom-ranked-computation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          top-bottom-ranked-computation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computation-id))
      (common-lisp:list
       (common-lisp:cons "ComputationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-size))
      (common-lisp:list
       (common-lisp:cons "ResultSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          top-bottom-ranked-computation))
   common-lisp:nil))
(common-lisp:deftype top-bottom-ranked-computation-result-size ()
  'common-lisp:integer)
(common-lisp:deftype top-bottom-sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (total-aggregation-computation (:copier common-lisp:nil)
      (:conc-name "struct-shape-total-aggregation-computation-"))
   (computation-id (common-lisp:error ":computation-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or measure-field common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'total-aggregation-computation
                    'make-total-aggregation-computation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          total-aggregation-computation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          total-aggregation-computation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computation-id))
      (common-lisp:list
       (common-lisp:cons "ComputationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          total-aggregation-computation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (total-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-total-options-"))
   (totals-visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (placement common-lisp:nil :type
    (common-lisp:or table-totals-placement common-lisp:null))
   (scroll-status common-lisp:nil :type
    (common-lisp:or table-totals-scroll-status common-lisp:null))
   (custom-label common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (total-cell-style common-lisp:nil :type
    (common-lisp:or table-cell-style common-lisp:null)))
 (common-lisp:export (common-lisp:list 'total-options 'make-total-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input total-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input total-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'totals-visibility))
      (common-lisp:list
       (common-lisp:cons "TotalsVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement))
      (common-lisp:list
       (common-lisp:cons "Placement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scroll-status))
      (common-lisp:list
       (common-lisp:cons "ScrollStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-label))
      (common-lisp:list
       (common-lisp:cons "CustomLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-cell-style))
      (common-lisp:list
       (common-lisp:cons "TotalCellStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input total-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (transform-operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-transform-operation-"))
   (project-operation common-lisp:nil :type
    (common-lisp:or project-operation common-lisp:null))
   (filter-operation common-lisp:nil :type
    (common-lisp:or filter-operation common-lisp:null))
   (create-columns-operation common-lisp:nil :type
    (common-lisp:or create-columns-operation common-lisp:null))
   (rename-column-operation common-lisp:nil :type
    (common-lisp:or rename-column-operation common-lisp:null))
   (cast-column-type-operation common-lisp:nil :type
    (common-lisp:or cast-column-type-operation common-lisp:null))
   (tag-column-operation common-lisp:nil :type
    (common-lisp:or tag-column-operation common-lisp:null))
   (untag-column-operation common-lisp:nil :type
    (common-lisp:or untag-column-operation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transform-operation 'make-transform-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transform-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transform-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-operation))
      (common-lisp:list
       (common-lisp:cons "ProjectOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-operation))
      (common-lisp:list
       (common-lisp:cons "FilterOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-columns-operation))
      (common-lisp:list
       (common-lisp:cons "CreateColumnsOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rename-column-operation))
      (common-lisp:list
       (common-lisp:cons "RenameColumnOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cast-column-type-operation))
      (common-lisp:list
       (common-lisp:cons "CastColumnTypeOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tag-column-operation))
      (common-lisp:list
       (common-lisp:cons "TagColumnOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'untag-column-operation))
      (common-lisp:list
       (common-lisp:cons "UntagColumnOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transform-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype transform-operation-list ()
   '(trivial-types:proper-list transform-operation))
 (common-lisp:defun |make-transform-operation-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list transform-operation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tree-map-aggregated-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-tree-map-aggregated-field-wells-"))
   (groups common-lisp:nil :type
    (common-lisp:or tree-map-dimension-field-list common-lisp:null))
   (sizes common-lisp:nil :type
    (common-lisp:or tree-map-measure-field-list common-lisp:null))
   (colors common-lisp:nil :type
    (common-lisp:or tree-map-measure-field-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tree-map-aggregated-field-wells
                    'make-tree-map-aggregated-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tree-map-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tree-map-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sizes))
      (common-lisp:list
       (common-lisp:cons "Sizes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'colors))
      (common-lisp:list
       (common-lisp:cons "Colors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tree-map-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tree-map-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-tree-map-configuration-"))
   (field-wells common-lisp:nil :type
    (common-lisp:or tree-map-field-wells common-lisp:null))
   (sort-configuration common-lisp:nil :type
    (common-lisp:or tree-map-sort-configuration common-lisp:null))
   (group-label-options common-lisp:nil :type
    (common-lisp:or chart-axis-label-options common-lisp:null))
   (size-label-options common-lisp:nil :type
    (common-lisp:or chart-axis-label-options common-lisp:null))
   (color-label-options common-lisp:nil :type
    (common-lisp:or chart-axis-label-options common-lisp:null))
   (color-scale common-lisp:nil :type
    (common-lisp:or color-scale common-lisp:null))
   (legend common-lisp:nil :type
    (common-lisp:or legend-options common-lisp:null))
   (data-labels common-lisp:nil :type
    (common-lisp:or data-label-options common-lisp:null))
   (tooltip common-lisp:nil :type
    (common-lisp:or tooltip-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tree-map-configuration 'make-tree-map-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tree-map-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tree-map-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-label-options))
      (common-lisp:list
       (common-lisp:cons "GroupLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-label-options))
      (common-lisp:list
       (common-lisp:cons "SizeLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-label-options))
      (common-lisp:list
       (common-lisp:cons "ColorLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-scale))
      (common-lisp:list
       (common-lisp:cons "ColorScale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legend))
      (common-lisp:list
       (common-lisp:cons "Legend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-labels))
      (common-lisp:list
       (common-lisp:cons "DataLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip))
      (common-lisp:list
       (common-lisp:cons "Tooltip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tree-map-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tree-map-dimension-field-list ()
   '(trivial-types:proper-list dimension-field))
 (common-lisp:defun |make-tree-map-dimension-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tree-map-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-tree-map-field-wells-"))
   (tree-map-aggregated-field-wells common-lisp:nil :type
    (common-lisp:or tree-map-aggregated-field-wells common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tree-map-field-wells 'make-tree-map-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tree-map-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tree-map-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tree-map-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "TreeMapAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tree-map-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tree-map-measure-field-list ()
   '(trivial-types:proper-list measure-field))
 (common-lisp:defun |make-tree-map-measure-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list measure-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tree-map-sort-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-tree-map-sort-configuration-"))
   (tree-map-sort common-lisp:nil :type
    (common-lisp:or field-sort-options-list common-lisp:null))
   (tree-map-group-items-limit-configuration common-lisp:nil :type
    (common-lisp:or items-limit-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tree-map-sort-configuration
                    'make-tree-map-sort-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tree-map-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tree-map-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tree-map-sort))
      (common-lisp:list
       (common-lisp:cons "TreeMapSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tree-map-group-items-limit-configuration))
      (common-lisp:list
       (common-lisp:cons "TreeMapGroupItemsLimitConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tree-map-sort-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tree-map-visual (:copier common-lisp:nil)
      (:conc-name "struct-shape-tree-map-visual-"))
   (visual-id (common-lisp:error ":visual-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or visual-title-label-options common-lisp:null))
   (subtitle common-lisp:nil :type
    (common-lisp:or visual-subtitle-label-options common-lisp:null))
   (chart-configuration common-lisp:nil :type
    (common-lisp:or tree-map-configuration common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or visual-custom-action-list common-lisp:null))
   (column-hierarchies common-lisp:nil :type
    (common-lisp:or column-hierarchy-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tree-map-visual 'make-tree-map-visual))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tree-map-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tree-map-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-hierarchies))
      (common-lisp:list
       (common-lisp:cons "ColumnHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tree-map-visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (trend-arrow-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-trend-arrow-options-"))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'trend-arrow-options 'make-trend-arrow-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trend-arrow-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trend-arrow-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trend-arrow-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (twitter-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-twitter-parameters-"))
   (query (common-lisp:error ":query is required") :type
    (common-lisp:or query common-lisp:null))
   (max-rows (common-lisp:error ":max-rows is required") :type
    (common-lisp:or positive-integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'twitter-parameters 'make-twitter-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input twitter-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input twitter-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query))
      (common-lisp:list
       (common-lisp:cons "Query"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-rows))
      (common-lisp:list
       (common-lisp:cons "MaxRows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input twitter-parameters))
   common-lisp:nil))
(common-lisp:deftype type-cast-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (typography (:copier common-lisp:nil)
      (:conc-name "struct-shape-typography-"))
   (font-families common-lisp:nil :type
    (common-lisp:or font-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'typography 'make-typography))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input typography))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input typography))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-families))
      (common-lisp:list
       (common-lisp:cons "FontFamilies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input typography))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (uicolor-palette (:copier common-lisp:nil)
      (:conc-name "struct-shape-uicolor-palette-"))
   (primary-foreground common-lisp:nil :type
    (common-lisp:or hex-color common-lisp:null))
   (primary-background common-lisp:nil :type
    (common-lisp:or hex-color common-lisp:null))
   (secondary-foreground common-lisp:nil :type
    (common-lisp:or hex-color common-lisp:null))
   (secondary-background common-lisp:nil :type
    (common-lisp:or hex-color common-lisp:null))
   (accent common-lisp:nil :type (common-lisp:or hex-color common-lisp:null))
   (accent-foreground common-lisp:nil :type
    (common-lisp:or hex-color common-lisp:null))
   (danger common-lisp:nil :type (common-lisp:or hex-color common-lisp:null))
   (danger-foreground common-lisp:nil :type
    (common-lisp:or hex-color common-lisp:null))
   (warning common-lisp:nil :type (common-lisp:or hex-color common-lisp:null))
   (warning-foreground common-lisp:nil :type
    (common-lisp:or hex-color common-lisp:null))
   (success common-lisp:nil :type (common-lisp:or hex-color common-lisp:null))
   (success-foreground common-lisp:nil :type
    (common-lisp:or hex-color common-lisp:null))
   (dimension common-lisp:nil :type
    (common-lisp:or hex-color common-lisp:null))
   (dimension-foreground common-lisp:nil :type
    (common-lisp:or hex-color common-lisp:null))
   (measure common-lisp:nil :type (common-lisp:or hex-color common-lisp:null))
   (measure-foreground common-lisp:nil :type
    (common-lisp:or hex-color common-lisp:null)))
 (common-lisp:export (common-lisp:list 'uicolor-palette 'make-uicolor-palette))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input uicolor-palette))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input uicolor-palette))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-foreground))
      (common-lisp:list
       (common-lisp:cons "PrimaryForeground"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-background))
      (common-lisp:list
       (common-lisp:cons "PrimaryBackground"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secondary-foreground))
      (common-lisp:list
       (common-lisp:cons "SecondaryForeground"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secondary-background))
      (common-lisp:list
       (common-lisp:cons "SecondaryBackground"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accent))
      (common-lisp:list
       (common-lisp:cons "Accent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accent-foreground))
      (common-lisp:list
       (common-lisp:cons "AccentForeground"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'danger))
      (common-lisp:list
       (common-lisp:cons "Danger"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'danger-foreground))
      (common-lisp:list
       (common-lisp:cons "DangerForeground"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warning))
      (common-lisp:list
       (common-lisp:cons "Warning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warning-foreground))
      (common-lisp:list
       (common-lisp:cons "WarningForeground"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success))
      (common-lisp:list
       (common-lisp:cons "Success"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-foreground))
      (common-lisp:list
       (common-lisp:cons "SuccessForeground"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension))
      (common-lisp:list
       (common-lisp:cons "Dimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dimension-foreground))
      (common-lisp:list
       (common-lisp:cons "DimensionForeground"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'measure))
      (common-lisp:list
       (common-lisp:cons "Measure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'measure-foreground))
      (common-lisp:list
       (common-lisp:cons "MeasureForeground"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input uicolor-palette))
   common-lisp:nil))
(common-lisp:deftype urloperation-template () 'common-lisp:string)
(common-lisp:deftype urltarget-configuration () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (unaggregated-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-unaggregated-field-"))
   (field-id (common-lisp:error ":field-id is required") :type
    (common-lisp:or field-id common-lisp:null))
   (column (common-lisp:error ":column is required") :type
    (common-lisp:or column-identifier common-lisp:null))
   (format-configuration common-lisp:nil :type
    (common-lisp:or format-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'unaggregated-field 'make-unaggregated-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input unaggregated-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input unaggregated-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'format-configuration))
      (common-lisp:list
       (common-lisp:cons "FormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input unaggregated-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unaggregated-field-list ()
   '(trivial-types:proper-list unaggregated-field))
 (common-lisp:defun |make-unaggregated-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list unaggregated-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype unicode-icon () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (unique-values-computation (:copier common-lisp:nil)
      (:conc-name "struct-shape-unique-values-computation-"))
   (computation-id (common-lisp:error ":computation-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (category (common-lisp:error ":category is required") :type
    (common-lisp:or dimension-field common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'unique-values-computation
                    'make-unique-values-computation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unique-values-computation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unique-values-computation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computation-id))
      (common-lisp:list
       (common-lisp:cons "ComputationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unique-values-computation))
   common-lisp:nil))
(common-lisp:deftype unlimited-pixel-length () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unsupported-pricing-plan-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-pricing-plan-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       unsupported-pricing-plan-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'unsupported-pricing-plan-exception
                    'unsupported-pricing-plan-exception-message
                    'unsupported-pricing-plan-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-user-edition-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-user-edition-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       unsupported-user-edition-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'unsupported-user-edition-exception
                    'unsupported-user-edition-exception-message
                    'unsupported-user-edition-exception-request-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-column-operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-column-operation-"))
   (column-name (common-lisp:error ":column-name is required") :type
    (common-lisp:or column-name common-lisp:null))
   (tag-names (common-lisp:error ":tag-names is required") :type
    (common-lisp:or column-tag-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-column-operation 'make-untag-column-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-column-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-column-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "ColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-names))
      (common-lisp:list
       (common-lisp:cons "TagNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-column-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-"))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-account-customization-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-account-customization-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or namespace common-lisp:null))
   (account-customization
    (common-lisp:error ":account-customization is required") :type
    (common-lisp:or account-customization common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-account-customization-request
                    'make-update-account-customization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-account-customization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-account-customization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-customization))
      (common-lisp:list
       (common-lisp:cons "AccountCustomization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-account-customization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-account-customization-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-account-customization-response-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or namespace common-lisp:null))
   (account-customization common-lisp:nil :type
    (common-lisp:or account-customization common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-account-customization-response
                    'make-update-account-customization-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-account-customization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-account-customization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "AwsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-customization))
      (common-lisp:list
       (common-lisp:cons "AccountCustomization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-account-customization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-account-settings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-account-settings-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (default-namespace (common-lisp:error ":default-namespace is required")
    :type (common-lisp:or namespace common-lisp:null))
   (notification-email common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (termination-protection-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-account-settings-request
                    'make-update-account-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-account-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-account-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-namespace))
      (common-lisp:list
       (common-lisp:cons "DefaultNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-email))
      (common-lisp:list
       (common-lisp:cons "NotificationEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'termination-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "TerminationProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-account-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-account-settings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-account-settings-response-"))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-account-settings-response
                    'make-update-account-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-account-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-account-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-account-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-analysis-permissions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-analysis-permissions-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (analysis-id (common-lisp:error ":analysis-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (grant-permissions common-lisp:nil :type
    (common-lisp:or update-resource-permission-list common-lisp:null))
   (revoke-permissions common-lisp:nil :type
    (common-lisp:or update-resource-permission-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-analysis-permissions-request
                    'make-update-analysis-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-analysis-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-analysis-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-permissions))
      (common-lisp:list
       (common-lisp:cons "GrantPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoke-permissions))
      (common-lisp:list
       (common-lisp:cons "RevokePermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-analysis-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-analysis-permissions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-analysis-permissions-response-"))
   (analysis-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (analysis-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or resource-permission-list common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-analysis-permissions-response
                    'make-update-analysis-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-analysis-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-analysis-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-arn))
      (common-lisp:list
       (common-lisp:cons "AnalysisArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-id))
      (common-lisp:list
       (common-lisp:cons "AnalysisId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-analysis-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-analysis-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-analysis-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (analysis-id (common-lisp:error ":analysis-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or analysis-name common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters common-lisp:null))
   (source-entity common-lisp:nil :type
    (common-lisp:or analysis-source-entity common-lisp:null))
   (theme-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (definition common-lisp:nil :type
    (common-lisp:or analysis-definition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-analysis-request 'make-update-analysis-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-analysis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-analysis-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-entity))
      (common-lisp:list
       (common-lisp:cons "SourceEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-arn))
      (common-lisp:list
       (common-lisp:cons "ThemeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-analysis-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-analysis-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-analysis-response-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (analysis-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (update-status common-lisp:nil :type
    (common-lisp:or resource-status common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-analysis-response 'make-update-analysis-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-analysis-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-analysis-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-id))
      (common-lisp:list
       (common-lisp:cons "AnalysisId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-status))
      (common-lisp:list
       (common-lisp:cons "UpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-analysis-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-dashboard-permissions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-dashboard-permissions-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (dashboard-id (common-lisp:error ":dashboard-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (grant-permissions common-lisp:nil :type
    (common-lisp:or update-resource-permission-list common-lisp:null))
   (revoke-permissions common-lisp:nil :type
    (common-lisp:or update-resource-permission-list common-lisp:null))
   (grant-link-permissions common-lisp:nil :type
    (common-lisp:or update-link-permission-list common-lisp:null))
   (revoke-link-permissions common-lisp:nil :type
    (common-lisp:or update-link-permission-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-dashboard-permissions-request
                    'make-update-dashboard-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-permissions))
      (common-lisp:list
       (common-lisp:cons "GrantPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoke-permissions))
      (common-lisp:list
       (common-lisp:cons "RevokePermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'grant-link-permissions))
      (common-lisp:list
       (common-lisp:cons "GrantLinkPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'revoke-link-permissions))
      (common-lisp:list
       (common-lisp:cons "RevokeLinkPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-dashboard-permissions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-dashboard-permissions-response-"))
   (dashboard-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (dashboard-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or resource-permission-list common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (link-sharing-configuration common-lisp:nil :type
    (common-lisp:or link-sharing-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-dashboard-permissions-response
                    'make-update-dashboard-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-arn))
      (common-lisp:list
       (common-lisp:cons "DashboardArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-id))
      (common-lisp:list
       (common-lisp:cons "DashboardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'link-sharing-configuration))
      (common-lisp:list
       (common-lisp:cons "LinkSharingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-dashboard-published-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-dashboard-published-version-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (dashboard-id (common-lisp:error ":dashboard-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (version-number (common-lisp:error ":version-number is required") :type
    (common-lisp:or version-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-dashboard-published-version-request
                    'make-update-dashboard-published-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-published-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-published-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-published-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-dashboard-published-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-dashboard-published-version-response-"))
   (dashboard-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (dashboard-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-dashboard-published-version-response
                    'make-update-dashboard-published-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-published-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-published-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-id))
      (common-lisp:list
       (common-lisp:cons "DashboardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-arn))
      (common-lisp:list
       (common-lisp:cons "DashboardArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-published-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-dashboard-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-dashboard-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (dashboard-id (common-lisp:error ":dashboard-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or dashboard-name common-lisp:null))
   (source-entity common-lisp:nil :type
    (common-lisp:or dashboard-source-entity common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters common-lisp:null))
   (version-description common-lisp:nil :type
    (common-lisp:or version-description common-lisp:null))
   (dashboard-publish-options common-lisp:nil :type
    (common-lisp:or dashboard-publish-options common-lisp:null))
   (theme-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (definition common-lisp:nil :type
    (common-lisp:or dashboard-version-definition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-dashboard-request 'make-update-dashboard-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-entity))
      (common-lisp:list
       (common-lisp:cons "SourceEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-description))
      (common-lisp:list
       (common-lisp:cons "VersionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dashboard-publish-options))
      (common-lisp:list
       (common-lisp:cons "DashboardPublishOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-arn))
      (common-lisp:list
       (common-lisp:cons "ThemeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-dashboard-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-dashboard-response-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (version-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (dashboard-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (creation-status common-lisp:nil :type
    (common-lisp:or resource-status common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-dashboard-response
                    'make-update-dashboard-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-arn))
      (common-lisp:list
       (common-lisp:cons "VersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-id))
      (common-lisp:list
       (common-lisp:cons "DashboardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-status))
      (common-lisp:list
       (common-lisp:cons "CreationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-data-set-permissions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-data-set-permissions-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (data-set-id (common-lisp:error ":data-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (grant-permissions common-lisp:nil :type
    (common-lisp:or resource-permission-list common-lisp:null))
   (revoke-permissions common-lisp:nil :type
    (common-lisp:or resource-permission-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-data-set-permissions-request
                    'make-update-data-set-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-set-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-set-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-permissions))
      (common-lisp:list
       (common-lisp:cons "GrantPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoke-permissions))
      (common-lisp:list
       (common-lisp:cons "RevokePermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-set-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-data-set-permissions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-data-set-permissions-response-"))
   (data-set-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (data-set-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-data-set-permissions-response
                    'make-update-data-set-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-set-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-set-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-arn))
      (common-lisp:list
       (common-lisp:cons "DataSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-set-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-data-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-data-set-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (data-set-id (common-lisp:error ":data-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (physical-table-map (common-lisp:error ":physical-table-map is required")
    :type (common-lisp:or physical-table-map common-lisp:null))
   (logical-table-map common-lisp:nil :type
    (common-lisp:or logical-table-map common-lisp:null))
   (import-mode (common-lisp:error ":import-mode is required") :type
    (common-lisp:or data-set-import-mode common-lisp:null))
   (column-groups common-lisp:nil :type
    (common-lisp:or column-group-list common-lisp:null))
   (field-folders common-lisp:nil :type
    (common-lisp:or field-folder-map common-lisp:null))
   (row-level-permission-data-set common-lisp:nil :type
    (common-lisp:or row-level-permission-data-set common-lisp:null))
   (row-level-permission-tag-configuration common-lisp:nil :type
    (common-lisp:or row-level-permission-tag-configuration common-lisp:null))
   (column-level-permission-rules common-lisp:nil :type
    (common-lisp:or column-level-permission-rule-list common-lisp:null))
   (data-set-usage-configuration common-lisp:nil :type
    (common-lisp:or data-set-usage-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-data-set-request 'make-update-data-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'physical-table-map))
      (common-lisp:list
       (common-lisp:cons "PhysicalTableMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-table-map))
      (common-lisp:list
       (common-lisp:cons "LogicalTableMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-mode))
      (common-lisp:list
       (common-lisp:cons "ImportMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-groups))
      (common-lisp:list
       (common-lisp:cons "ColumnGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-folders))
      (common-lisp:list
       (common-lisp:cons "FieldFolders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'row-level-permission-data-set))
      (common-lisp:list
       (common-lisp:cons "RowLevelPermissionDataSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'row-level-permission-tag-configuration))
      (common-lisp:list
       (common-lisp:cons "RowLevelPermissionTagConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-level-permission-rules))
      (common-lisp:list
       (common-lisp:cons "ColumnLevelPermissionRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-set-usage-configuration))
      (common-lisp:list
       (common-lisp:cons "DataSetUsageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-data-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-data-set-response-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (data-set-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (ingestion-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (ingestion-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-data-set-response 'make-update-data-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-arn))
      (common-lisp:list
       (common-lisp:cons "IngestionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-id))
      (common-lisp:list
       (common-lisp:cons "IngestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-data-source-permissions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-data-source-permissions-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (data-source-id (common-lisp:error ":data-source-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (grant-permissions common-lisp:nil :type
    (common-lisp:or resource-permission-list common-lisp:null))
   (revoke-permissions common-lisp:nil :type
    (common-lisp:or resource-permission-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-data-source-permissions-request
                    'make-update-data-source-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-permissions))
      (common-lisp:list
       (common-lisp:cons "GrantPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoke-permissions))
      (common-lisp:list
       (common-lisp:cons "RevokePermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-data-source-permissions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-data-source-permissions-response-"))
   (data-source-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (data-source-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-data-source-permissions-response
                    'make-update-data-source-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-arn))
      (common-lisp:list
       (common-lisp:cons "DataSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-data-source-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-data-source-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (data-source-id (common-lisp:error ":data-source-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (data-source-parameters common-lisp:nil :type
    (common-lisp:or data-source-parameters common-lisp:null))
   (credentials common-lisp:nil :type
    (common-lisp:or data-source-credentials common-lisp:null))
   (vpc-connection-properties common-lisp:nil :type
    (common-lisp:or vpc-connection-properties common-lisp:null))
   (ssl-properties common-lisp:nil :type
    (common-lisp:or ssl-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-data-source-request
                    'make-update-data-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-parameters))
      (common-lisp:list
       (common-lisp:cons "DataSourceParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-connection-properties))
      (common-lisp:list
       (common-lisp:cons "VpcConnectionProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-properties))
      (common-lisp:list
       (common-lisp:cons "SslProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-data-source-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-data-source-response-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (data-source-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (update-status common-lisp:nil :type
    (common-lisp:or resource-status common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-data-source-response
                    'make-update-data-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-status))
      (common-lisp:list
       (common-lisp:cons "UpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-folder-permissions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-folder-permissions-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (folder-id (common-lisp:error ":folder-id is required") :type
    (common-lisp:or restrictive-resource-id common-lisp:null))
   (grant-permissions common-lisp:nil :type
    (common-lisp:or resource-permission-list common-lisp:null))
   (revoke-permissions common-lisp:nil :type
    (common-lisp:or resource-permission-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-folder-permissions-request
                    'make-update-folder-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-folder-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-folder-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-permissions))
      (common-lisp:list
       (common-lisp:cons "GrantPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoke-permissions))
      (common-lisp:list
       (common-lisp:cons "RevokePermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-folder-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-folder-permissions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-folder-permissions-response-"))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (folder-id common-lisp:nil :type
    (common-lisp:or restrictive-resource-id common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or resource-permission-list common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-folder-permissions-response
                    'make-update-folder-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-folder-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-folder-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-id))
      (common-lisp:list
       (common-lisp:cons "FolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-folder-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-folder-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-folder-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (folder-id (common-lisp:error ":folder-id is required") :type
    (common-lisp:or restrictive-resource-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or folder-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-folder-request 'make-update-folder-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-folder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-folder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-folder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-folder-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-folder-response-"))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (folder-id common-lisp:nil :type
    (common-lisp:or restrictive-resource-id common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-folder-response 'make-update-folder-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-folder-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-folder-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-id))
      (common-lisp:list
       (common-lisp:cons "FolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-folder-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-group-request-"))
   (group-name (common-lisp:error ":group-name is required") :type
    (common-lisp:or group-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or group-description common-lisp:null))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-group-request 'make-update-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-group-response-"))
   (group common-lisp:nil :type (common-lisp:or group common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-group-response 'make-update-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "Group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-iampolicy-assignment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-iampolicy-assignment-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (assignment-name (common-lisp:error ":assignment-name is required") :type
    (common-lisp:or iampolicy-assignment-name common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null))
   (assignment-status common-lisp:nil :type
    (common-lisp:or assignment-status common-lisp:null))
   (policy-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (identities common-lisp:nil :type
    (common-lisp:or identity-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-iampolicy-assignment-request
                    'make-update-iampolicy-assignment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-iampolicy-assignment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-iampolicy-assignment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-status))
      (common-lisp:list
       (common-lisp:cons "AssignmentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identities))
      (common-lisp:list
       (common-lisp:cons "Identities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-iampolicy-assignment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-iampolicy-assignment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-iampolicy-assignment-response-"))
   (assignment-name common-lisp:nil :type
    (common-lisp:or iampolicy-assignment-name common-lisp:null))
   (assignment-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (policy-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (identities common-lisp:nil :type
    (common-lisp:or identity-map common-lisp:null))
   (assignment-status common-lisp:nil :type
    (common-lisp:or assignment-status common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-iampolicy-assignment-response
                    'make-update-iampolicy-assignment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-iampolicy-assignment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-iampolicy-assignment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-name))
      (common-lisp:list
       (common-lisp:cons "AssignmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-id))
      (common-lisp:list
       (common-lisp:cons "AssignmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identities))
      (common-lisp:list
       (common-lisp:cons "Identities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-status))
      (common-lisp:list
       (common-lisp:cons "AssignmentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-iampolicy-assignment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-ip-restriction-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-ip-restriction-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (ip-restriction-rule-map common-lisp:nil :type
    (common-lisp:or ip-restriction-rule-map common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-ip-restriction-request
                    'make-update-ip-restriction-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-ip-restriction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-ip-restriction-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ip-restriction-rule-map))
      (common-lisp:list
       (common-lisp:cons "IpRestrictionRuleMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-ip-restriction-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-ip-restriction-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-ip-restriction-response-"))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-ip-restriction-response
                    'make-update-ip-restriction-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-ip-restriction-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-ip-restriction-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "AwsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-ip-restriction-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-link-permission-list ()
   '(trivial-types:proper-list resource-permission))
 (common-lisp:defun |make-update-link-permission-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-permission))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (update-public-sharing-settings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-public-sharing-settings-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (public-sharing-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-public-sharing-settings-request
                    'make-update-public-sharing-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-public-sharing-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-public-sharing-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-sharing-enabled))
      (common-lisp:list
       (common-lisp:cons "PublicSharingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-public-sharing-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-public-sharing-settings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-public-sharing-settings-response-"))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-public-sharing-settings-response
                    'make-update-public-sharing-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-public-sharing-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-public-sharing-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-public-sharing-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-resource-permission-list ()
   '(trivial-types:proper-list resource-permission))
 (common-lisp:defun |make-update-resource-permission-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-permission))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (update-template-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-template-alias-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (template-id (common-lisp:error ":template-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (alias-name (common-lisp:error ":alias-name is required") :type
    (common-lisp:or alias-name common-lisp:null))
   (template-version-number
    (common-lisp:error ":template-version-number is required") :type
    (common-lisp:or version-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-template-alias-request
                    'make-update-template-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-template-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-template-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-version-number))
      (common-lisp:list
       (common-lisp:cons "TemplateVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-template-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-template-alias-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-template-alias-response-"))
   (template-alias common-lisp:nil :type
    (common-lisp:or template-alias common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-template-alias-response
                    'make-update-template-alias-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-template-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-template-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-alias))
      (common-lisp:list
       (common-lisp:cons "TemplateAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-template-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-template-permissions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-template-permissions-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (template-id (common-lisp:error ":template-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (grant-permissions common-lisp:nil :type
    (common-lisp:or update-resource-permission-list common-lisp:null))
   (revoke-permissions common-lisp:nil :type
    (common-lisp:or update-resource-permission-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-template-permissions-request
                    'make-update-template-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-template-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-template-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-permissions))
      (common-lisp:list
       (common-lisp:cons "GrantPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoke-permissions))
      (common-lisp:list
       (common-lisp:cons "RevokePermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-template-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-template-permissions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-template-permissions-response-"))
   (template-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (template-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or resource-permission-list common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-template-permissions-response
                    'make-update-template-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-template-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-template-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-template-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-template-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (template-id (common-lisp:error ":template-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (source-entity common-lisp:nil :type
    (common-lisp:or template-source-entity common-lisp:null))
   (version-description common-lisp:nil :type
    (common-lisp:or version-description common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or template-name common-lisp:null))
   (definition common-lisp:nil :type
    (common-lisp:or template-version-definition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-template-request 'make-update-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-entity))
      (common-lisp:list
       (common-lisp:cons "SourceEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-description))
      (common-lisp:list
       (common-lisp:cons "VersionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-template-response-"))
   (template-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (version-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (creation-status common-lisp:nil :type
    (common-lisp:or resource-status common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-template-response 'make-update-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-arn))
      (common-lisp:list
       (common-lisp:cons "VersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-status))
      (common-lisp:list
       (common-lisp:cons "CreationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-theme-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-theme-alias-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (theme-id (common-lisp:error ":theme-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (alias-name (common-lisp:error ":alias-name is required") :type
    (common-lisp:or alias-name common-lisp:null))
   (theme-version-number
    (common-lisp:error ":theme-version-number is required") :type
    (common-lisp:or version-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-theme-alias-request
                    'make-update-theme-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'theme-version-number))
      (common-lisp:list
       (common-lisp:cons "ThemeVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-theme-alias-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-theme-alias-response-"))
   (theme-alias common-lisp:nil :type
    (common-lisp:or theme-alias common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-theme-alias-response
                    'make-update-theme-alias-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-alias))
      (common-lisp:list
       (common-lisp:cons "ThemeAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-theme-permissions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-theme-permissions-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (theme-id (common-lisp:error ":theme-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (grant-permissions common-lisp:nil :type
    (common-lisp:or update-resource-permission-list common-lisp:null))
   (revoke-permissions common-lisp:nil :type
    (common-lisp:or update-resource-permission-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-theme-permissions-request
                    'make-update-theme-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-permissions))
      (common-lisp:list
       (common-lisp:cons "GrantPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoke-permissions))
      (common-lisp:list
       (common-lisp:cons "RevokePermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-theme-permissions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-theme-permissions-response-"))
   (theme-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (theme-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or resource-permission-list common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-theme-permissions-response
                    'make-update-theme-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-id))
      (common-lisp:list
       (common-lisp:cons "ThemeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-arn))
      (common-lisp:list
       (common-lisp:cons "ThemeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-theme-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-theme-request-"))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (theme-id (common-lisp:error ":theme-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or theme-name common-lisp:null))
   (base-theme-id (common-lisp:error ":base-theme-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (version-description common-lisp:nil :type
    (common-lisp:or version-description common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or theme-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-theme-request 'make-update-theme-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-theme-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-theme-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-theme-id))
      (common-lisp:list
       (common-lisp:cons "BaseThemeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-description))
      (common-lisp:list
       (common-lisp:cons "VersionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-theme-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-theme-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-theme-response-"))
   (theme-id common-lisp:nil :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (version-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (creation-status common-lisp:nil :type
    (common-lisp:or resource-status common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-code common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-theme-response 'make-update-theme-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-id))
      (common-lisp:list
       (common-lisp:cons "ThemeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-arn))
      (common-lisp:list
       (common-lisp:cons "VersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-status))
      (common-lisp:list
       (common-lisp:cons "CreationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-user-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or user-name common-lisp:null))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null))
   (email (common-lisp:error ":email is required") :type
    (common-lisp:or string common-lisp:null))
   (role (common-lisp:error ":role is required") :type
    (common-lisp:or user-role common-lisp:null))
   (custom-permissions-name common-lisp:nil :type
    (common-lisp:or role-name common-lisp:null))
   (unapply-custom-permissions common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (external-login-federation-provider-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (custom-federation-provider-url common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (external-login-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-user-request 'make-update-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-permissions-name))
      (common-lisp:list
       (common-lisp:cons "CustomPermissionsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unapply-custom-permissions))
      (common-lisp:list
       (common-lisp:cons "UnapplyCustomPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-login-federation-provider-type))
      (common-lisp:list
       (common-lisp:cons "ExternalLoginFederationProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-federation-provider-url))
      (common-lisp:list
       (common-lisp:cons "CustomFederationProviderUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-login-id))
      (common-lisp:list
       (common-lisp:cons "ExternalLoginId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-user-response-"))
   (user common-lisp:nil :type (common-lisp:or user common-lisp:null))
   (request-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-user-response 'make-update-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (upload-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-upload-settings-"))
   (format common-lisp:nil :type (common-lisp:or file-format common-lisp:null))
   (start-from-row common-lisp:nil :type
    (common-lisp:or positive-integer common-lisp:null))
   (contains-header common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (text-qualifier common-lisp:nil :type
    (common-lisp:or text-qualifier common-lisp:null))
   (delimiter common-lisp:nil :type
    (common-lisp:or delimiter common-lisp:null)))
 (common-lisp:export (common-lisp:list 'upload-settings 'make-upload-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input upload-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input upload-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-from-row))
      (common-lisp:list
       (common-lisp:cons "StartFromRow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contains-header))
      (common-lisp:list
       (common-lisp:cons "ContainsHeader"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-qualifier))
      (common-lisp:list
       (common-lisp:cons "TextQualifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input upload-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (user (:copier common-lisp:nil) (:conc-name "struct-shape-user-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (user-name common-lisp:nil :type
    (common-lisp:or user-name common-lisp:null))
   (email common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (role common-lisp:nil :type (common-lisp:or user-role common-lisp:null))
   (identity-type common-lisp:nil :type
    (common-lisp:or identity-type common-lisp:null))
   (active common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (principal-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (custom-permissions-name common-lisp:nil :type
    (common-lisp:or role-name common-lisp:null))
   (external-login-federation-provider-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (external-login-federation-provider-url common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (external-login-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user 'make-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-type))
      (common-lisp:list
       (common-lisp:cons "IdentityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "Active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "PrincipalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-permissions-name))
      (common-lisp:list
       (common-lisp:cons "CustomPermissionsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-login-federation-provider-type))
      (common-lisp:list
       (common-lisp:cons "ExternalLoginFederationProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-login-federation-provider-url))
      (common-lisp:list
       (common-lisp:cons "ExternalLoginFederationProviderUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-login-id))
      (common-lisp:list
       (common-lisp:cons "ExternalLoginId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-list () '(trivial-types:proper-list user))
 (common-lisp:defun |make-user-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user))
   aws-sdk/generator/shape::members))
(common-lisp:deftype user-name () 'common-lisp:string)
(common-lisp:deftype user-role () 'common-lisp:string)
(common-lisp:deftype username () 'common-lisp:string)
(common-lisp:deftype value-when-unset-option () 'common-lisp:string)
(common-lisp:deftype version-description () 'common-lisp:string)
(common-lisp:deftype version-number () 'common-lisp:integer)
(common-lisp:deftype vertical-text-alignment () 'common-lisp:string)
(common-lisp:deftype visibility () 'common-lisp:string)
(common-lisp:deftype visible-panel-columns () 'common-lisp:integer)
(common-lisp:deftype visible-panel-rows () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (visible-range-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-visible-range-options-"))
   (percent-range common-lisp:nil :type
    (common-lisp:or percent-visible-range common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'visible-range-options 'make-visible-range-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          visible-range-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          visible-range-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-range))
      (common-lisp:list
       (common-lisp:cons "PercentRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          visible-range-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (visual (:copier common-lisp:nil) (:conc-name "struct-shape-visual-"))
   (table-visual common-lisp:nil :type
    (common-lisp:or table-visual common-lisp:null))
   (pivot-table-visual common-lisp:nil :type
    (common-lisp:or pivot-table-visual common-lisp:null))
   (bar-chart-visual common-lisp:nil :type
    (common-lisp:or bar-chart-visual common-lisp:null))
   (kpivisual common-lisp:nil :type
    (common-lisp:or kpivisual common-lisp:null))
   (pie-chart-visual common-lisp:nil :type
    (common-lisp:or pie-chart-visual common-lisp:null))
   (gauge-chart-visual common-lisp:nil :type
    (common-lisp:or gauge-chart-visual common-lisp:null))
   (line-chart-visual common-lisp:nil :type
    (common-lisp:or line-chart-visual common-lisp:null))
   (heat-map-visual common-lisp:nil :type
    (common-lisp:or heat-map-visual common-lisp:null))
   (tree-map-visual common-lisp:nil :type
    (common-lisp:or tree-map-visual common-lisp:null))
   (geospatial-map-visual common-lisp:nil :type
    (common-lisp:or geospatial-map-visual common-lisp:null))
   (filled-map-visual common-lisp:nil :type
    (common-lisp:or filled-map-visual common-lisp:null))
   (funnel-chart-visual common-lisp:nil :type
    (common-lisp:or funnel-chart-visual common-lisp:null))
   (scatter-plot-visual common-lisp:nil :type
    (common-lisp:or scatter-plot-visual common-lisp:null))
   (combo-chart-visual common-lisp:nil :type
    (common-lisp:or combo-chart-visual common-lisp:null))
   (box-plot-visual common-lisp:nil :type
    (common-lisp:or box-plot-visual common-lisp:null))
   (waterfall-visual common-lisp:nil :type
    (common-lisp:or waterfall-visual common-lisp:null))
   (histogram-visual common-lisp:nil :type
    (common-lisp:or histogram-visual common-lisp:null))
   (word-cloud-visual common-lisp:nil :type
    (common-lisp:or word-cloud-visual common-lisp:null))
   (insight-visual common-lisp:nil :type
    (common-lisp:or insight-visual common-lisp:null))
   (sankey-diagram-visual common-lisp:nil :type
    (common-lisp:or sankey-diagram-visual common-lisp:null))
   (custom-content-visual common-lisp:nil :type
    (common-lisp:or custom-content-visual common-lisp:null))
   (empty-visual common-lisp:nil :type
    (common-lisp:or empty-visual common-lisp:null))
   (radar-chart-visual common-lisp:nil :type
    (common-lisp:or radar-chart-visual common-lisp:null)))
 (common-lisp:export (common-lisp:list 'visual 'make-visual))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-visual))
      (common-lisp:list
       (common-lisp:cons "TableVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pivot-table-visual))
      (common-lisp:list
       (common-lisp:cons "PivotTableVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bar-chart-visual))
      (common-lisp:list
       (common-lisp:cons "BarChartVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kpivisual))
      (common-lisp:list
       (common-lisp:cons "KPIVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pie-chart-visual))
      (common-lisp:list
       (common-lisp:cons "PieChartVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gauge-chart-visual))
      (common-lisp:list
       (common-lisp:cons "GaugeChartVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-chart-visual))
      (common-lisp:list
       (common-lisp:cons "LineChartVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'heat-map-visual))
      (common-lisp:list
       (common-lisp:cons "HeatMapVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tree-map-visual))
      (common-lisp:list
       (common-lisp:cons "TreeMapVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'geospatial-map-visual))
      (common-lisp:list
       (common-lisp:cons "GeospatialMapVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filled-map-visual))
      (common-lisp:list
       (common-lisp:cons "FilledMapVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'funnel-chart-visual))
      (common-lisp:list
       (common-lisp:cons "FunnelChartVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scatter-plot-visual))
      (common-lisp:list
       (common-lisp:cons "ScatterPlotVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'combo-chart-visual))
      (common-lisp:list
       (common-lisp:cons "ComboChartVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'box-plot-visual))
      (common-lisp:list
       (common-lisp:cons "BoxPlotVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'waterfall-visual))
      (common-lisp:list
       (common-lisp:cons "WaterfallVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'histogram-visual))
      (common-lisp:list
       (common-lisp:cons "HistogramVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'word-cloud-visual))
      (common-lisp:list
       (common-lisp:cons "WordCloudVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-visual))
      (common-lisp:list
       (common-lisp:cons "InsightVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sankey-diagram-visual))
      (common-lisp:list
       (common-lisp:cons "SankeyDiagramVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-content-visual))
      (common-lisp:list
       (common-lisp:cons "CustomContentVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'empty-visual))
      (common-lisp:list
       (common-lisp:cons "EmptyVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'radar-chart-visual))
      (common-lisp:list
       (common-lisp:cons "RadarChartVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (visual-axis-sort-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-visual-axis-sort-option-"))
   (availability-status common-lisp:nil :type
    (common-lisp:or dashboard-behavior common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'visual-axis-sort-option 'make-visual-axis-sort-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          visual-axis-sort-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          visual-axis-sort-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-status))
      (common-lisp:list
       (common-lisp:cons "AvailabilityStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          visual-axis-sort-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (visual-custom-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-visual-custom-action-"))
   (custom-action-id (common-lisp:error ":custom-action-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or visual-custom-action-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or widget-status common-lisp:null))
   (trigger (common-lisp:error ":trigger is required") :type
    (common-lisp:or visual-custom-action-trigger common-lisp:null))
   (action-operations (common-lisp:error ":action-operations is required")
    :type
    (common-lisp:or visual-custom-action-operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'visual-custom-action 'make-visual-custom-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input visual-custom-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input visual-custom-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-action-id))
      (common-lisp:list
       (common-lisp:cons "CustomActionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger))
      (common-lisp:list
       (common-lisp:cons "Trigger"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-operations))
      (common-lisp:list
       (common-lisp:cons "ActionOperations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input visual-custom-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype visual-custom-action-list ()
   '(trivial-types:proper-list visual-custom-action))
 (common-lisp:defun |make-visual-custom-action-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list visual-custom-action))
   aws-sdk/generator/shape::members))
(common-lisp:deftype visual-custom-action-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (visual-custom-action-operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-visual-custom-action-operation-"))
   (filter-operation common-lisp:nil :type
    (common-lisp:or custom-action-filter-operation common-lisp:null))
   (navigation-operation common-lisp:nil :type
    (common-lisp:or custom-action-navigation-operation common-lisp:null))
   (urloperation common-lisp:nil :type
    (common-lisp:or custom-action-urloperation common-lisp:null))
   (set-parameters-operation common-lisp:nil :type
    (common-lisp:or custom-action-set-parameters-operation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'visual-custom-action-operation
                    'make-visual-custom-action-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          visual-custom-action-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          visual-custom-action-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-operation))
      (common-lisp:list
       (common-lisp:cons "FilterOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'navigation-operation))
      (common-lisp:list
       (common-lisp:cons "NavigationOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'urloperation))
      (common-lisp:list
       (common-lisp:cons "URLOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'set-parameters-operation))
      (common-lisp:list
       (common-lisp:cons "SetParametersOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          visual-custom-action-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype visual-custom-action-operation-list ()
   '(trivial-types:proper-list visual-custom-action-operation))
 (common-lisp:defun |make-visual-custom-action-operation-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            visual-custom-action-operation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype visual-custom-action-trigger () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype visual-list () '(trivial-types:proper-list visual))
 (common-lisp:defun |make-visual-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list visual))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (visual-menu-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-visual-menu-option-"))
   (availability-status common-lisp:nil :type
    (common-lisp:or dashboard-behavior common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'visual-menu-option 'make-visual-menu-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input visual-menu-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input visual-menu-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-status))
      (common-lisp:list
       (common-lisp:cons "AvailabilityStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input visual-menu-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (visual-palette (:copier common-lisp:nil)
      (:conc-name "struct-shape-visual-palette-"))
   (chart-color common-lisp:nil :type
    (common-lisp:or hex-color common-lisp:null))
   (color-map common-lisp:nil :type
    (common-lisp:or data-path-color-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'visual-palette 'make-visual-palette))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input visual-palette))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input visual-palette))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-color))
      (common-lisp:list
       (common-lisp:cons "ChartColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-map))
      (common-lisp:list
       (common-lisp:cons "ColorMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input visual-palette))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (visual-subtitle-label-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-visual-subtitle-label-options-"))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (format-text common-lisp:nil :type
    (common-lisp:or long-format-text common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'visual-subtitle-label-options
                    'make-visual-subtitle-label-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          visual-subtitle-label-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          visual-subtitle-label-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format-text))
      (common-lisp:list
       (common-lisp:cons "FormatText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          visual-subtitle-label-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (visual-title-label-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-visual-title-label-options-"))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (format-text common-lisp:nil :type
    (common-lisp:or short-format-text common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'visual-title-label-options
                    'make-visual-title-label-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          visual-title-label-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          visual-title-label-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format-text))
      (common-lisp:list
       (common-lisp:cons "FormatText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          visual-title-label-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-connection-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-connection-properties-"))
   (vpc-connection-arn (common-lisp:error ":vpc-connection-arn is required")
    :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpc-connection-properties
                    'make-vpc-connection-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-connection-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-connection-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpcConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-connection-properties))
   common-lisp:nil))
(common-lisp:deftype warehouse () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (waterfall-chart-aggregated-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-waterfall-chart-aggregated-field-wells-"))
   (categories common-lisp:nil :type
    (common-lisp:or dimension-field-list common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or measure-field-list common-lisp:null))
   (breakdowns common-lisp:nil :type
    (common-lisp:or dimension-field-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'waterfall-chart-aggregated-field-wells
                    'make-waterfall-chart-aggregated-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          waterfall-chart-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          waterfall-chart-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'categories))
      (common-lisp:list
       (common-lisp:cons "Categories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'breakdowns))
      (common-lisp:list
       (common-lisp:cons "Breakdowns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          waterfall-chart-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (waterfall-chart-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-waterfall-chart-configuration-"))
   (field-wells common-lisp:nil :type
    (common-lisp:or waterfall-chart-field-wells common-lisp:null))
   (sort-configuration common-lisp:nil :type
    (common-lisp:or waterfall-chart-sort-configuration common-lisp:null))
   (waterfall-chart-options common-lisp:nil :type
    (common-lisp:or waterfall-chart-options common-lisp:null))
   (category-axis-label-options common-lisp:nil :type
    (common-lisp:or chart-axis-label-options common-lisp:null))
   (category-axis-display-options common-lisp:nil :type
    (common-lisp:or axis-display-options common-lisp:null))
   (primary-yaxis-label-options common-lisp:nil :type
    (common-lisp:or chart-axis-label-options common-lisp:null))
   (primary-yaxis-display-options common-lisp:nil :type
    (common-lisp:or axis-display-options common-lisp:null))
   (legend common-lisp:nil :type
    (common-lisp:or legend-options common-lisp:null))
   (data-labels common-lisp:nil :type
    (common-lisp:or data-label-options common-lisp:null))
   (visual-palette common-lisp:nil :type
    (common-lisp:or visual-palette common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'waterfall-chart-configuration
                    'make-waterfall-chart-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          waterfall-chart-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          waterfall-chart-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'waterfall-chart-options))
      (common-lisp:list
       (common-lisp:cons "WaterfallChartOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-axis-label-options))
      (common-lisp:list
       (common-lisp:cons "CategoryAxisLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-axis-display-options))
      (common-lisp:list
       (common-lisp:cons "CategoryAxisDisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-yaxis-label-options))
      (common-lisp:list
       (common-lisp:cons "PrimaryYAxisLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-yaxis-display-options))
      (common-lisp:list
       (common-lisp:cons "PrimaryYAxisDisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legend))
      (common-lisp:list
       (common-lisp:cons "Legend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-labels))
      (common-lisp:list
       (common-lisp:cons "DataLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-palette))
      (common-lisp:list
       (common-lisp:cons "VisualPalette"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          waterfall-chart-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (waterfall-chart-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-waterfall-chart-field-wells-"))
   (waterfall-chart-aggregated-field-wells common-lisp:nil :type
    (common-lisp:or waterfall-chart-aggregated-field-wells common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'waterfall-chart-field-wells
                    'make-waterfall-chart-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          waterfall-chart-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          waterfall-chart-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'waterfall-chart-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "WaterfallChartAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          waterfall-chart-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (waterfall-chart-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-waterfall-chart-options-"))
   (total-bar-label common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'waterfall-chart-options 'make-waterfall-chart-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          waterfall-chart-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          waterfall-chart-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-bar-label))
      (common-lisp:list
       (common-lisp:cons "TotalBarLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          waterfall-chart-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (waterfall-chart-sort-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-waterfall-chart-sort-configuration-"))
   (category-sort common-lisp:nil :type
    (common-lisp:or field-sort-options-list common-lisp:null))
   (breakdown-items-limit common-lisp:nil :type
    (common-lisp:or items-limit-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'waterfall-chart-sort-configuration
                    'make-waterfall-chart-sort-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          waterfall-chart-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          waterfall-chart-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-sort))
      (common-lisp:list
       (common-lisp:cons "CategorySort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'breakdown-items-limit))
      (common-lisp:list
       (common-lisp:cons "BreakdownItemsLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          waterfall-chart-sort-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (waterfall-visual (:copier common-lisp:nil)
      (:conc-name "struct-shape-waterfall-visual-"))
   (visual-id (common-lisp:error ":visual-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or visual-title-label-options common-lisp:null))
   (subtitle common-lisp:nil :type
    (common-lisp:or visual-subtitle-label-options common-lisp:null))
   (chart-configuration common-lisp:nil :type
    (common-lisp:or waterfall-chart-configuration common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or visual-custom-action-list common-lisp:null))
   (column-hierarchies common-lisp:nil :type
    (common-lisp:or column-hierarchy-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'waterfall-visual 'make-waterfall-visual))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input waterfall-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input waterfall-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-hierarchies))
      (common-lisp:list
       (common-lisp:cons "ColumnHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input waterfall-visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (what-if-point-scenario (:copier common-lisp:nil)
      (:conc-name "struct-shape-what-if-point-scenario-"))
   (date (common-lisp:error ":date is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'what-if-point-scenario 'make-what-if-point-scenario))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          what-if-point-scenario))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          what-if-point-scenario))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          what-if-point-scenario))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (what-if-range-scenario (:copier common-lisp:nil)
      (:conc-name "struct-shape-what-if-range-scenario-"))
   (start-date (common-lisp:error ":start-date is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (end-date (common-lisp:error ":end-date is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'what-if-range-scenario 'make-what-if-range-scenario))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          what-if-range-scenario))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          what-if-range-scenario))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "StartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date))
      (common-lisp:list
       (common-lisp:cons "EndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          what-if-range-scenario))
   common-lisp:nil))
(common-lisp:deftype widget-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (word-cloud-aggregated-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-word-cloud-aggregated-field-wells-"))
   (group-by common-lisp:nil :type
    (common-lisp:or word-cloud-dimension-field-list common-lisp:null))
   (size common-lisp:nil :type
    (common-lisp:or word-cloud-measure-field-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'word-cloud-aggregated-field-wells
                    'make-word-cloud-aggregated-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          word-cloud-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          word-cloud-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "GroupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          word-cloud-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (word-cloud-chart-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-word-cloud-chart-configuration-"))
   (field-wells common-lisp:nil :type
    (common-lisp:or word-cloud-field-wells common-lisp:null))
   (sort-configuration common-lisp:nil :type
    (common-lisp:or word-cloud-sort-configuration common-lisp:null))
   (category-label-options common-lisp:nil :type
    (common-lisp:or chart-axis-label-options common-lisp:null))
   (word-cloud-options common-lisp:nil :type
    (common-lisp:or word-cloud-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'word-cloud-chart-configuration
                    'make-word-cloud-chart-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          word-cloud-chart-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          word-cloud-chart-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-label-options))
      (common-lisp:list
       (common-lisp:cons "CategoryLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'word-cloud-options))
      (common-lisp:list
       (common-lisp:cons "WordCloudOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          word-cloud-chart-configuration))
   common-lisp:nil))
(common-lisp:deftype word-cloud-cloud-layout () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype word-cloud-dimension-field-list ()
   '(trivial-types:proper-list dimension-field))
 (common-lisp:defun |make-word-cloud-dimension-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (word-cloud-field-wells (:copier common-lisp:nil)
      (:conc-name "struct-shape-word-cloud-field-wells-"))
   (word-cloud-aggregated-field-wells common-lisp:nil :type
    (common-lisp:or word-cloud-aggregated-field-wells common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'word-cloud-field-wells 'make-word-cloud-field-wells))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          word-cloud-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          word-cloud-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'word-cloud-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "WordCloudAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          word-cloud-field-wells))
   common-lisp:nil))
(common-lisp:deftype word-cloud-maximum-string-length () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype word-cloud-measure-field-list ()
   '(trivial-types:proper-list measure-field))
 (common-lisp:defun |make-word-cloud-measure-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list measure-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (word-cloud-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-word-cloud-options-"))
   (word-orientation common-lisp:nil :type
    (common-lisp:or word-cloud-word-orientation common-lisp:null))
   (word-scaling common-lisp:nil :type
    (common-lisp:or word-cloud-word-scaling common-lisp:null))
   (cloud-layout common-lisp:nil :type
    (common-lisp:or word-cloud-cloud-layout common-lisp:null))
   (word-casing common-lisp:nil :type
    (common-lisp:or word-cloud-word-casing common-lisp:null))
   (word-padding common-lisp:nil :type
    (common-lisp:or word-cloud-word-padding common-lisp:null))
   (maximum-string-length common-lisp:nil :type
    (common-lisp:or word-cloud-maximum-string-length common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'word-cloud-options 'make-word-cloud-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input word-cloud-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input word-cloud-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'word-orientation))
      (common-lisp:list
       (common-lisp:cons "WordOrientation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'word-scaling))
      (common-lisp:list
       (common-lisp:cons "WordScaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-layout))
      (common-lisp:list
       (common-lisp:cons "CloudLayout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'word-casing))
      (common-lisp:list
       (common-lisp:cons "WordCasing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'word-padding))
      (common-lisp:list
       (common-lisp:cons "WordPadding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-string-length))
      (common-lisp:list
       (common-lisp:cons "MaximumStringLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input word-cloud-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (word-cloud-sort-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-word-cloud-sort-configuration-"))
   (category-items-limit common-lisp:nil :type
    (common-lisp:or items-limit-configuration common-lisp:null))
   (category-sort common-lisp:nil :type
    (common-lisp:or field-sort-options-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'word-cloud-sort-configuration
                    'make-word-cloud-sort-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          word-cloud-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          word-cloud-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-items-limit))
      (common-lisp:list
       (common-lisp:cons "CategoryItemsLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-sort))
      (common-lisp:list
       (common-lisp:cons "CategorySort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          word-cloud-sort-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (word-cloud-visual (:copier common-lisp:nil)
      (:conc-name "struct-shape-word-cloud-visual-"))
   (visual-id (common-lisp:error ":visual-id is required") :type
    (common-lisp:or short-restrictive-resource-id common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or visual-title-label-options common-lisp:null))
   (subtitle common-lisp:nil :type
    (common-lisp:or visual-subtitle-label-options common-lisp:null))
   (chart-configuration common-lisp:nil :type
    (common-lisp:or word-cloud-chart-configuration common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or visual-custom-action-list common-lisp:null))
   (column-hierarchies common-lisp:nil :type
    (common-lisp:or column-hierarchy-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'word-cloud-visual 'make-word-cloud-visual))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input word-cloud-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input word-cloud-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-hierarchies))
      (common-lisp:list
       (common-lisp:cons "ColumnHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input word-cloud-visual))
   common-lisp:nil))
(common-lisp:deftype word-cloud-word-casing () 'common-lisp:string)
(common-lisp:deftype word-cloud-word-orientation () 'common-lisp:string)
(common-lisp:deftype word-cloud-word-padding () 'common-lisp:string)
(common-lisp:deftype word-cloud-word-scaling () 'common-lisp:string)
(common-lisp:deftype work-group () 'common-lisp:string)
common-lisp:nil
(common-lisp:progn
 (common-lisp:defun cancel-ingestion
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-set-id ingestion-id)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id data-set-id ingestion-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-ingestion-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sets/~A/ingestions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ingestion-id))))
                                                        "CancelIngestion"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-ingestion))
(common-lisp:progn
 (common-lisp:defun create-account-customization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id namespace
                     account-customization tags)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id namespace account-customization
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-account-customization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/customizations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "CreateAccountCustomization"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-account-customization))
(common-lisp:progn
 (common-lisp:defun create-account-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key edition authentication-method
                     aws-account-id account-name notification-email
                     active-directory-name realm directory-id admin-group
                     author-group reader-group first-name last-name
                     email-address contact-number)
   (common-lisp:declare
    (common-lisp:ignorable edition authentication-method aws-account-id
     account-name notification-email active-directory-name realm directory-id
     admin-group author-group reader-group first-name last-name email-address
     contact-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-account-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/account/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "CreateAccountSubscription"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-account-subscription))
(common-lisp:progn
 (common-lisp:defun create-analysis
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id analysis-id name
                     parameters permissions source-entity theme-arn tags
                     definition)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id analysis-id name parameters
     permissions source-entity theme-arn tags definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-analysis-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/analyses/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analysis-id))))
                                                        "CreateAnalysis"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-analysis))
(common-lisp:progn
 (common-lisp:defun create-dashboard
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id dashboard-id name
                     parameters permissions source-entity tags
                     version-description dashboard-publish-options theme-arn
                     definition)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id dashboard-id name parameters
     permissions source-entity tags version-description
     dashboard-publish-options theme-arn definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dashboard-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/dashboards/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dashboard-id))))
                                                        "CreateDashboard"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-dashboard))
(common-lisp:progn
 (common-lisp:defun create-data-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-set-id name
                     physical-table-map logical-table-map import-mode
                     column-groups field-folders permissions
                     row-level-permission-data-set
                     row-level-permission-tag-configuration
                     column-level-permission-rules tags
                     data-set-usage-configuration)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id data-set-id name physical-table-map
     logical-table-map import-mode column-groups field-folders permissions
     row-level-permission-data-set row-level-permission-tag-configuration
     column-level-permission-rules tags data-set-usage-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-data-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "CreateDataSet"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-data-set))
(common-lisp:progn
 (common-lisp:defun create-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-source-id name type
                     data-source-parameters credentials permissions
                     vpc-connection-properties ssl-properties tags)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id data-source-id name type
     data-source-parameters credentials permissions vpc-connection-properties
     ssl-properties tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-data-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sources"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "CreateDataSource"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-data-source))
(common-lisp:progn
 (common-lisp:defun create-folder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id folder-id name folder-type
                     parent-folder-arn permissions tags)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id folder-id name folder-type
     parent-folder-arn permissions tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-folder-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/folders/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))))
                                                        "CreateFolder"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-folder))
(common-lisp:progn
 (common-lisp:defun create-folder-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id folder-id member-id
                     member-type)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id folder-id member-id member-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-folder-membership-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/folders/~A/members/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'member-type))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'member-id))))
                                                        "CreateFolderMembership"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-folder-membership))
(common-lisp:progn
 (common-lisp:defun create-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name description aws-account-id
                     namespace)
   (common-lisp:declare
    (common-lisp:ignorable group-name description aws-account-id namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/groups"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))))
                                                        "CreateGroup"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-group))
(common-lisp:progn
 (common-lisp:defun create-group-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key member-name group-name aws-account-id
                     namespace)
   (common-lisp:declare
    (common-lisp:ignorable member-name group-name aws-account-id namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-group-membership-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/groups/~A/members/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'group-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'member-name))))
                                                        "CreateGroupMembership"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-group-membership))
(common-lisp:progn
 (common-lisp:defun create-iampolicy-assignment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id assignment-name
                     assignment-status policy-arn identities namespace)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id assignment-name assignment-status
     policy-arn identities namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-iampolicy-assignment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/iam-policy-assignments/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))))
                                                        "CreateIAMPolicyAssignment"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-iampolicy-assignment))
(common-lisp:progn
 (common-lisp:defun create-ingestion
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-set-id ingestion-id aws-account-id
                     ingestion-type)
   (common-lisp:declare
    (common-lisp:ignorable data-set-id ingestion-id aws-account-id
     ingestion-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-ingestion-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sets/~A/ingestions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ingestion-id))))
                                                        "CreateIngestion"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-ingestion))
(common-lisp:progn
 (common-lisp:defun create-namespace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id namespace identity-store
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id namespace identity-store tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-namespace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "CreateNamespace"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-namespace))
(common-lisp:progn
 (common-lisp:defun create-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id template-id name
                     permissions source-entity tags version-description
                     definition)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id template-id name permissions
     source-entity tags version-description definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/templates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-id))))
                                                        "CreateTemplate"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-template))
(common-lisp:progn
 (common-lisp:defun create-template-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id template-id alias-name
                     template-version-number)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id template-id alias-name
     template-version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-template-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/templates/~A/aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'alias-name))))
                                                        "CreateTemplateAlias"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-template-alias))
(common-lisp:progn
 (common-lisp:defun create-theme
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id theme-id name
                     base-theme-id version-description configuration
                     permissions tags)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id theme-id name base-theme-id
     version-description configuration permissions tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-theme-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/themes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'theme-id))))
                                                        "CreateTheme"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-theme))
(common-lisp:progn
 (common-lisp:defun create-theme-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id theme-id alias-name
                     theme-version-number)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id theme-id alias-name
     theme-version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-theme-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/themes/~A/aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'theme-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'alias-name))))
                                                        "CreateThemeAlias"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-theme-alias))
(common-lisp:progn
 (common-lisp:defun delete-account-customization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id namespace)
   (common-lisp:declare (common-lisp:ignorable aws-account-id namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-account-customization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/customizations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "DeleteAccountCustomization"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-account-customization))
(common-lisp:progn
 (common-lisp:defun delete-account-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-account-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/account/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "DeleteAccountSubscription"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-account-subscription))
(common-lisp:progn
 (common-lisp:defun delete-analysis
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id analysis-id
                     recovery-window-in-days force-delete-without-recovery)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id analysis-id recovery-window-in-days
     force-delete-without-recovery))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-analysis-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/analyses/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analysis-id))))
                                                        "DeleteAnalysis"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-analysis))
(common-lisp:progn
 (common-lisp:defun delete-dashboard
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id dashboard-id
                     version-number)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id dashboard-id version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dashboard-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/dashboards/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dashboard-id))))
                                                        "DeleteDashboard"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-dashboard))
(common-lisp:progn
 (common-lisp:defun delete-data-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-set-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id data-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-data-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))))
                                                        "DeleteDataSet"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-data-set))
(common-lisp:progn
 (common-lisp:defun delete-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-source-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id data-source-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-data-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-id))))
                                                        "DeleteDataSource"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-data-source))
(common-lisp:progn
 (common-lisp:defun delete-folder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id folder-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id folder-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-folder-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/folders/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))))
                                                        "DeleteFolder"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-folder))
(common-lisp:progn
 (common-lisp:defun delete-folder-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id folder-id member-id
                     member-type)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id folder-id member-id member-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-folder-membership-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/folders/~A/members/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'member-type))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'member-id))))
                                                        "DeleteFolderMembership"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-folder-membership))
(common-lisp:progn
 (common-lisp:defun delete-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name aws-account-id namespace)
   (common-lisp:declare
    (common-lisp:ignorable group-name aws-account-id namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'group-name))))
                                                        "DeleteGroup"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-group))
(common-lisp:progn
 (common-lisp:defun delete-group-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key member-name group-name aws-account-id
                     namespace)
   (common-lisp:declare
    (common-lisp:ignorable member-name group-name aws-account-id namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-group-membership-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/groups/~A/members/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'group-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'member-name))))
                                                        "DeleteGroupMembership"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-group-membership))
(common-lisp:progn
 (common-lisp:defun delete-iampolicy-assignment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id assignment-name namespace)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id assignment-name namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-iampolicy-assignment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespace/~A/iam-policy-assignments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assignment-name))))
                                                        "DeleteIAMPolicyAssignment"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-iampolicy-assignment))
(common-lisp:progn
 (common-lisp:defun delete-namespace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id namespace)
   (common-lisp:declare (common-lisp:ignorable aws-account-id namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-namespace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))))
                                                        "DeleteNamespace"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-namespace))
(common-lisp:progn
 (common-lisp:defun delete-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id template-id
                     version-number)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id template-id version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/templates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-id))))
                                                        "DeleteTemplate"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-template))
(common-lisp:progn
 (common-lisp:defun delete-template-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id template-id alias-name)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id template-id alias-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-template-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/templates/~A/aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'alias-name))))
                                                        "DeleteTemplateAlias"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-template-alias))
(common-lisp:progn
 (common-lisp:defun delete-theme
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id theme-id version-number)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id theme-id version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-theme-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/themes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'theme-id))))
                                                        "DeleteTheme"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-theme))
(common-lisp:progn
 (common-lisp:defun delete-theme-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id theme-id alias-name)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id theme-id alias-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-theme-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/themes/~A/aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'theme-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'alias-name))))
                                                        "DeleteThemeAlias"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-theme-alias))
(common-lisp:progn
 (common-lisp:defun delete-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name aws-account-id namespace)
   (common-lisp:declare
    (common-lisp:ignorable user-name aws-account-id namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/users/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-name))))
                                                        "DeleteUser"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-user))
(common-lisp:progn
 (common-lisp:defun delete-user-by-principal-id
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key principal-id aws-account-id namespace)
   (common-lisp:declare
    (common-lisp:ignorable principal-id aws-account-id namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-user-by-principal-id-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/user-principals/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-id))))
                                                        "DeleteUserByPrincipalId"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-user-by-principal-id))
(common-lisp:progn
 (common-lisp:defun describe-account-customization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id namespace resolved)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id namespace resolved))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-account-customization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/customizations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "DescribeAccountCustomization"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-account-customization))
(common-lisp:progn
 (common-lisp:defun describe-account-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-account-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/settings"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "DescribeAccountSettings"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-account-settings))
(common-lisp:progn
 (common-lisp:defun describe-account-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-account-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/account/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "DescribeAccountSubscription"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-account-subscription))
(common-lisp:progn
 (common-lisp:defun describe-analysis
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id analysis-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id analysis-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-analysis-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/analyses/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analysis-id))))
                                                        "DescribeAnalysis"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-analysis))
(common-lisp:progn
 (common-lisp:defun describe-analysis-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id analysis-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id analysis-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-analysis-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/analyses/~A/definition"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analysis-id))))
                                                        "DescribeAnalysisDefinition"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-analysis-definition))
(common-lisp:progn
 (common-lisp:defun describe-analysis-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id analysis-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id analysis-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-analysis-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/analyses/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analysis-id))))
                                                        "DescribeAnalysisPermissions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-analysis-permissions))
(common-lisp:progn
 (common-lisp:defun describe-dashboard
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id dashboard-id
                     version-number alias-name)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id dashboard-id version-number
     alias-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dashboard-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/dashboards/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dashboard-id))))
                                                        "DescribeDashboard"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-dashboard))
(common-lisp:progn
 (common-lisp:defun describe-dashboard-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id dashboard-id
                     version-number alias-name)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id dashboard-id version-number
     alias-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dashboard-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/dashboards/~A/definition"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dashboard-id))))
                                                        "DescribeDashboardDefinition"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-dashboard-definition))
(common-lisp:progn
 (common-lisp:defun describe-dashboard-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id dashboard-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id dashboard-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dashboard-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/dashboards/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dashboard-id))))
                                                        "DescribeDashboardPermissions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-dashboard-permissions))
(common-lisp:progn
 (common-lisp:defun describe-data-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-set-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id data-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-data-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))))
                                                        "DescribeDataSet"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-data-set))
(common-lisp:progn
 (common-lisp:defun describe-data-set-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-set-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id data-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-data-set-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sets/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))))
                                                        "DescribeDataSetPermissions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-data-set-permissions))
(common-lisp:progn
 (common-lisp:defun describe-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-source-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id data-source-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-data-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-id))))
                                                        "DescribeDataSource"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-data-source))
(common-lisp:progn
 (common-lisp:defun describe-data-source-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-source-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id data-source-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-data-source-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sources/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-id))))
                                                        "DescribeDataSourcePermissions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-data-source-permissions))
(common-lisp:progn
 (common-lisp:defun describe-folder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id folder-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id folder-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-folder-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/folders/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))))
                                                        "DescribeFolder"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-folder))
(common-lisp:progn
 (common-lisp:defun describe-folder-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id folder-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id folder-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-folder-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/folders/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))))
                                                        "DescribeFolderPermissions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-folder-permissions))
(common-lisp:progn
 (common-lisp:defun describe-folder-resolved-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id folder-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id folder-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-folder-resolved-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/folders/~A/resolved-permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))))
                                                        "DescribeFolderResolvedPermissions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-folder-resolved-permissions))
(common-lisp:progn
 (common-lisp:defun describe-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name aws-account-id namespace)
   (common-lisp:declare
    (common-lisp:ignorable group-name aws-account-id namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'group-name))))
                                                        "DescribeGroup"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-group))
(common-lisp:progn
 (common-lisp:defun describe-group-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key member-name group-name aws-account-id
                     namespace)
   (common-lisp:declare
    (common-lisp:ignorable member-name group-name aws-account-id namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-group-membership-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/groups/~A/members/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'group-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'member-name))))
                                                        "DescribeGroupMembership"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-group-membership))
(common-lisp:progn
 (common-lisp:defun describe-iampolicy-assignment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id assignment-name namespace)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id assignment-name namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-iampolicy-assignment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/iam-policy-assignments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assignment-name))))
                                                        "DescribeIAMPolicyAssignment"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-iampolicy-assignment))
(common-lisp:progn
 (common-lisp:defun describe-ingestion
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-set-id ingestion-id)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id data-set-id ingestion-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-ingestion-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sets/~A/ingestions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ingestion-id))))
                                                        "DescribeIngestion"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-ingestion))
(common-lisp:progn
 (common-lisp:defun describe-ip-restriction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-ip-restriction-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/ip-restriction"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "DescribeIpRestriction"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-ip-restriction))
(common-lisp:progn
 (common-lisp:defun describe-namespace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id namespace)
   (common-lisp:declare (common-lisp:ignorable aws-account-id namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-namespace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))))
                                                        "DescribeNamespace"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-namespace))
(common-lisp:progn
 (common-lisp:defun describe-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id template-id version-number
                     alias-name)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id template-id version-number
     alias-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/templates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-id))))
                                                        "DescribeTemplate"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-template))
(common-lisp:progn
 (common-lisp:defun describe-template-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id template-id alias-name)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id template-id alias-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-template-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/templates/~A/aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'alias-name))))
                                                        "DescribeTemplateAlias"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-template-alias))
(common-lisp:progn
 (common-lisp:defun describe-template-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id template-id version-number
                     alias-name)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id template-id version-number
     alias-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-template-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/templates/~A/definition"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-id))))
                                                        "DescribeTemplateDefinition"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-template-definition))
(common-lisp:progn
 (common-lisp:defun describe-template-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id template-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id template-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-template-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/templates/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-id))))
                                                        "DescribeTemplatePermissions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-template-permissions))
(common-lisp:progn
 (common-lisp:defun describe-theme
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id theme-id version-number
                     alias-name)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id theme-id version-number alias-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-theme-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/themes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'theme-id))))
                                                        "DescribeTheme"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-theme))
(common-lisp:progn
 (common-lisp:defun describe-theme-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id theme-id alias-name)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id theme-id alias-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-theme-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/themes/~A/aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'theme-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'alias-name))))
                                                        "DescribeThemeAlias"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-theme-alias))
(common-lisp:progn
 (common-lisp:defun describe-theme-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id theme-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id theme-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-theme-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/themes/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'theme-id))))
                                                        "DescribeThemePermissions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-theme-permissions))
(common-lisp:progn
 (common-lisp:defun describe-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name aws-account-id namespace)
   (common-lisp:declare
    (common-lisp:ignorable user-name aws-account-id namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/users/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-name))))
                                                        "DescribeUser"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-user))
(common-lisp:progn
 (common-lisp:defun generate-embed-url-for-anonymous-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id
                     session-lifetime-in-minutes namespace session-tags
                     authorized-resource-arns experience-configuration
                     allowed-domains)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id session-lifetime-in-minutes namespace
     session-tags authorized-resource-arns experience-configuration
     allowed-domains))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-generate-embed-url-for-anonymous-user-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/embed-url/anonymous-user"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "GenerateEmbedUrlForAnonymousUser"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'generate-embed-url-for-anonymous-user))
(common-lisp:progn
 (common-lisp:defun generate-embed-url-for-registered-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id
                     session-lifetime-in-minutes user-arn
                     experience-configuration allowed-domains)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id session-lifetime-in-minutes user-arn
     experience-configuration allowed-domains))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-generate-embed-url-for-registered-user-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/embed-url/registered-user"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "GenerateEmbedUrlForRegisteredUser"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'generate-embed-url-for-registered-user))
(common-lisp:progn
 (common-lisp:defun get-dashboard-embed-url
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id dashboard-id identity-type
                     session-lifetime-in-minutes undo-redo-disabled
                     reset-disabled state-persistence-enabled user-arn
                     namespace additional-dashboard-ids)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id dashboard-id identity-type
     session-lifetime-in-minutes undo-redo-disabled reset-disabled
     state-persistence-enabled user-arn namespace additional-dashboard-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-dashboard-embed-url-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/dashboards/~A/embed-url"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dashboard-id))))
                                                        "GetDashboardEmbedUrl"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-dashboard-embed-url))
(common-lisp:progn
 (common-lisp:defun get-session-embed-url
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id entry-point
                     session-lifetime-in-minutes user-arn)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id entry-point
     session-lifetime-in-minutes user-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-session-embed-url-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/session-embed-url"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "GetSessionEmbedUrl"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-session-embed-url))
(common-lisp:progn
 (common-lisp:defun list-analyses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-analyses-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/analyses"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "ListAnalyses"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-analyses))
(common-lisp:progn
 (common-lisp:defun list-dashboard-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id dashboard-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id dashboard-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-dashboard-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/dashboards/~A/versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dashboard-id))))
                                                        "ListDashboardVersions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-dashboard-versions))
(common-lisp:progn
 (common-lisp:defun list-dashboards
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-dashboards-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/dashboards"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "ListDashboards"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-dashboards))
(common-lisp:progn
 (common-lisp:defun list-data-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-data-sets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "ListDataSets"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-data-sets))
(common-lisp:progn
 (common-lisp:defun list-data-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-data-sources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sources"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "ListDataSources"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-data-sources))
(common-lisp:progn
 (common-lisp:defun list-folder-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id folder-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id folder-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-folder-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/folders/~A/members"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))))
                                                        "ListFolderMembers"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-folder-members))
(common-lisp:progn
 (common-lisp:defun list-folders
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-folders-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/folders"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "ListFolders"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-folders))
(common-lisp:progn
 (common-lisp:defun list-group-memberships
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name next-token max-results
                     aws-account-id namespace)
   (common-lisp:declare
    (common-lisp:ignorable group-name next-token max-results aws-account-id
     namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-group-memberships-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/groups/~A/members"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'group-name))))
                                                        "ListGroupMemberships"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-group-memberships))
(common-lisp:progn
 (common-lisp:defun list-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id next-token max-results
                     namespace)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id next-token max-results namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/groups"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))))
                                                        "ListGroups"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-groups))
(common-lisp:progn
 (common-lisp:defun list-iampolicy-assignments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id assignment-status
                     namespace next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id assignment-status namespace
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-iampolicy-assignments-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/iam-policy-assignments"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))))
                                                        "ListIAMPolicyAssignments"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-iampolicy-assignments))
(common-lisp:progn
 (common-lisp:defun list-iampolicy-assignments-for-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id user-name next-token
                     max-results namespace)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id user-name next-token max-results
     namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-iampolicy-assignments-for-user-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/users/~A/iam-policy-assignments"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-name))))
                                                        "ListIAMPolicyAssignmentsForUser"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-iampolicy-assignments-for-user))
(common-lisp:progn
 (common-lisp:defun list-ingestions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-set-id next-token aws-account-id
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable data-set-id next-token aws-account-id max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-ingestions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sets/~A/ingestions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))))
                                                        "ListIngestions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-ingestions))
(common-lisp:progn
 (common-lisp:defun list-namespaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-namespaces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "ListNamespaces"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-namespaces))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/resources/~A/tags"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-template-aliases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id template-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id template-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-template-aliases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/templates/~A/aliases"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-id))))
                                                        "ListTemplateAliases"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-template-aliases))
(common-lisp:progn
 (common-lisp:defun list-template-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id template-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id template-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-template-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/templates/~A/versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-id))))
                                                        "ListTemplateVersions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-template-versions))
(common-lisp:progn
 (common-lisp:defun list-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-templates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/templates"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "ListTemplates"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-templates))
(common-lisp:progn
 (common-lisp:defun list-theme-aliases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id theme-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id theme-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-theme-aliases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/themes/~A/aliases"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'theme-id))))
                                                        "ListThemeAliases"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-theme-aliases))
(common-lisp:progn
 (common-lisp:defun list-theme-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id theme-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id theme-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-theme-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/themes/~A/versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'theme-id))))
                                                        "ListThemeVersions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-theme-versions))
(common-lisp:progn
 (common-lisp:defun list-themes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id next-token max-results
                     type)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id next-token max-results type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-themes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/themes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "ListThemes"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-themes))
(common-lisp:progn
 (common-lisp:defun list-user-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name aws-account-id namespace
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable user-name aws-account-id namespace next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-user-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/users/~A/groups"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-name))))
                                                        "ListUserGroups"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-user-groups))
(common-lisp:progn
 (common-lisp:defun list-users
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id next-token max-results
                     namespace)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id next-token max-results namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-users-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/users"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))))
                                                        "ListUsers"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-users))
(common-lisp:progn
 (common-lisp:defun register-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-type email user-role iam-arn
                     session-name aws-account-id namespace user-name
                     custom-permissions-name
                     external-login-federation-provider-type
                     custom-federation-provider-url external-login-id)
   (common-lisp:declare
    (common-lisp:ignorable identity-type email user-role iam-arn session-name
     aws-account-id namespace user-name custom-permissions-name
     external-login-federation-provider-type custom-federation-provider-url
     external-login-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/users"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))))
                                                        "RegisterUser"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-user))
(common-lisp:progn
 (common-lisp:defun restore-analysis
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id analysis-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id analysis-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-restore-analysis-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/restore/analyses/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analysis-id))))
                                                        "RestoreAnalysis"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'restore-analysis))
(common-lisp:progn
 (common-lisp:defun search-analyses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-analyses-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/search/analyses"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "SearchAnalyses"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-analyses))
(common-lisp:progn
 (common-lisp:defun search-dashboards
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-dashboards-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/search/dashboards"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "SearchDashboards"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-dashboards))
(common-lisp:progn
 (common-lisp:defun search-data-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-data-sets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/search/data-sets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "SearchDataSets"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-data-sets))
(common-lisp:progn
 (common-lisp:defun search-data-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-data-sources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/search/data-sources"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "SearchDataSources"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-data-sources))
(common-lisp:progn
 (common-lisp:defun search-folders
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-folders-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/search/folders"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "SearchFolders"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-folders))
(common-lisp:progn
 (common-lisp:defun search-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id next-token max-results
                     namespace filters)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id next-token max-results namespace
     filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/groups-search"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))))
                                                        "SearchGroups"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-groups))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/resources/~A/tags"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/resources/~A/tags"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-account-customization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id namespace
                     account-customization)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id namespace account-customization))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-account-customization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/customizations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "UpdateAccountCustomization"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-account-customization))
(common-lisp:progn
 (common-lisp:defun update-account-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id default-namespace
                     notification-email termination-protection-enabled)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id default-namespace notification-email
     termination-protection-enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-account-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/settings"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "UpdateAccountSettings"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-account-settings))
(common-lisp:progn
 (common-lisp:defun update-analysis
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id analysis-id name
                     parameters source-entity theme-arn definition)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id analysis-id name parameters
     source-entity theme-arn definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-analysis-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/analyses/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analysis-id))))
                                                        "UpdateAnalysis"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-analysis))
(common-lisp:progn
 (common-lisp:defun update-analysis-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id analysis-id
                     grant-permissions revoke-permissions)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id analysis-id grant-permissions
     revoke-permissions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-analysis-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/analyses/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analysis-id))))
                                                        "UpdateAnalysisPermissions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-analysis-permissions))
(common-lisp:progn
 (common-lisp:defun update-dashboard
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id dashboard-id name
                     source-entity parameters version-description
                     dashboard-publish-options theme-arn definition)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id dashboard-id name source-entity
     parameters version-description dashboard-publish-options theme-arn
     definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-dashboard-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/dashboards/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dashboard-id))))
                                                        "UpdateDashboard"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-dashboard))
(common-lisp:progn
 (common-lisp:defun update-dashboard-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id dashboard-id
                     grant-permissions revoke-permissions
                     grant-link-permissions revoke-link-permissions)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id dashboard-id grant-permissions
     revoke-permissions grant-link-permissions revoke-link-permissions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-dashboard-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/dashboards/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dashboard-id))))
                                                        "UpdateDashboardPermissions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-dashboard-permissions))
(common-lisp:progn
 (common-lisp:defun update-dashboard-published-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id dashboard-id
                     version-number)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id dashboard-id version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-dashboard-published-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/dashboards/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dashboard-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-number))))
                                                        "UpdateDashboardPublishedVersion"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-dashboard-published-version))
(common-lisp:progn
 (common-lisp:defun update-data-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-set-id name
                     physical-table-map logical-table-map import-mode
                     column-groups field-folders row-level-permission-data-set
                     row-level-permission-tag-configuration
                     column-level-permission-rules
                     data-set-usage-configuration)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id data-set-id name physical-table-map
     logical-table-map import-mode column-groups field-folders
     row-level-permission-data-set row-level-permission-tag-configuration
     column-level-permission-rules data-set-usage-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-data-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))))
                                                        "UpdateDataSet"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-data-set))
(common-lisp:progn
 (common-lisp:defun update-data-set-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-set-id
                     grant-permissions revoke-permissions)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id data-set-id grant-permissions
     revoke-permissions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-data-set-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sets/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))))
                                                        "UpdateDataSetPermissions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-data-set-permissions))
(common-lisp:progn
 (common-lisp:defun update-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-source-id name
                     data-source-parameters credentials
                     vpc-connection-properties ssl-properties)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id data-source-id name
     data-source-parameters credentials vpc-connection-properties
     ssl-properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-data-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-id))))
                                                        "UpdateDataSource"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-data-source))
(common-lisp:progn
 (common-lisp:defun update-data-source-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-source-id
                     grant-permissions revoke-permissions)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id data-source-id grant-permissions
     revoke-permissions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-data-source-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sources/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-id))))
                                                        "UpdateDataSourcePermissions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-data-source-permissions))
(common-lisp:progn
 (common-lisp:defun update-folder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id folder-id name)
   (common-lisp:declare (common-lisp:ignorable aws-account-id folder-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-folder-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/folders/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))))
                                                        "UpdateFolder"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-folder))
(common-lisp:progn
 (common-lisp:defun update-folder-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id folder-id
                     grant-permissions revoke-permissions)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id folder-id grant-permissions
     revoke-permissions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-folder-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/folders/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))))
                                                        "UpdateFolderPermissions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-folder-permissions))
(common-lisp:progn
 (common-lisp:defun update-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name description aws-account-id
                     namespace)
   (common-lisp:declare
    (common-lisp:ignorable group-name description aws-account-id namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'group-name))))
                                                        "UpdateGroup"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-group))
(common-lisp:progn
 (common-lisp:defun update-iampolicy-assignment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id assignment-name namespace
                     assignment-status policy-arn identities)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id assignment-name namespace
     assignment-status policy-arn identities))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-iampolicy-assignment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/iam-policy-assignments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assignment-name))))
                                                        "UpdateIAMPolicyAssignment"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-iampolicy-assignment))
(common-lisp:progn
 (common-lisp:defun update-ip-restriction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id ip-restriction-rule-map
                     enabled)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id ip-restriction-rule-map enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-ip-restriction-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/ip-restriction"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "UpdateIpRestriction"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-ip-restriction))
(common-lisp:progn
 (common-lisp:defun update-public-sharing-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id public-sharing-enabled)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id public-sharing-enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-public-sharing-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/public-sharing-settings"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "UpdatePublicSharingSettings"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-public-sharing-settings))
(common-lisp:progn
 (common-lisp:defun update-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id template-id source-entity
                     version-description name definition)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id template-id source-entity
     version-description name definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/templates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-id))))
                                                        "UpdateTemplate"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-template))
(common-lisp:progn
 (common-lisp:defun update-template-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id template-id alias-name
                     template-version-number)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id template-id alias-name
     template-version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-template-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/templates/~A/aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'alias-name))))
                                                        "UpdateTemplateAlias"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-template-alias))
(common-lisp:progn
 (common-lisp:defun update-template-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id template-id
                     grant-permissions revoke-permissions)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id template-id grant-permissions
     revoke-permissions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-template-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/templates/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-id))))
                                                        "UpdateTemplatePermissions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-template-permissions))
(common-lisp:progn
 (common-lisp:defun update-theme
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id theme-id name
                     base-theme-id version-description configuration)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id theme-id name base-theme-id
     version-description configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-theme-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/themes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'theme-id))))
                                                        "UpdateTheme"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-theme))
(common-lisp:progn
 (common-lisp:defun update-theme-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id theme-id alias-name
                     theme-version-number)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id theme-id alias-name
     theme-version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-theme-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/themes/~A/aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'theme-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'alias-name))))
                                                        "UpdateThemeAlias"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-theme-alias))
(common-lisp:progn
 (common-lisp:defun update-theme-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id theme-id grant-permissions
                     revoke-permissions)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id theme-id grant-permissions
     revoke-permissions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-theme-permissions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/themes/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'theme-id))))
                                                        "UpdateThemePermissions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-theme-permissions))
(common-lisp:progn
 (common-lisp:defun update-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name aws-account-id namespace email
                     role custom-permissions-name unapply-custom-permissions
                     external-login-federation-provider-type
                     custom-federation-provider-url external-login-id)
   (common-lisp:declare
    (common-lisp:ignorable user-name aws-account-id namespace email role
     custom-permissions-name unapply-custom-permissions
     external-login-federation-provider-type custom-federation-provider-url
     external-login-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/users/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-name))))
                                                        "UpdateUser"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-user))
