;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/quicksight/api
  (:use)
  (:nicknames #:aws/quicksight)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/quicksight/api)
(common-lisp:progn
 (common-lisp:defclass quicksight-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "quicksight" :protocol
                        :rest-json))
 (common-lisp:export 'quicksight-request))
(common-lisp:progn
 (common-lisp:define-condition quicksight-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'quicksight-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConcurrentUpdatingException" . concurrent-updating-exception)
    ("ConflictException" . conflict-exception)
    ("DomainNotWhitelistedException" . domain-not-whitelisted-exception)
    ("IdentityTypeNotSupportedException"
     . identity-type-not-supported-exception)
    ("InternalFailureException" . internal-failure-exception)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("InvalidParameterValueException" . invalid-parameter-value-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("PreconditionNotMetException" . precondition-not-met-exception)
    ("QuickSightUserNotFoundException" . quick-sight-user-not-found-exception)
    ("ResourceExistsException" . resource-exists-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourceUnavailableException" . resource-unavailable-exception)
    ("SessionLifetimeInMinutesInvalidException"
     . session-lifetime-in-minutes-invalid-exception)
    ("ThrottlingException" . throttling-exception)
    ("UnsupportedPricingPlanException" . unsupported-pricing-plan-exception)
    ("UnsupportedUserEditionException" . unsupported-user-edition-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       access-denied-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message
                    'access-denied-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass account-customization common-lisp:nil
                       ((default-email-customization-template :initarg
                         :default-email-customization-template :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %account-customization-default-email-customization-template
                         :initform common-lisp:nil)
                        (default-theme :initarg :default-theme :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %account-customization-default-theme :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'account-customization 'make-account-customization))
 (common-lisp:defun make-account-customization
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key default-email-customization-template
                     default-theme)
   (common-lisp:apply #'common-lisp:make-instance 'account-customization
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          account-customization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          account-customization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-theme))
      (common-lisp:list
       (common-lisp:cons "DefaultTheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-email-customization-template))
      (common-lisp:list
       (common-lisp:cons "DefaultEmailCustomizationTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          account-customization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass account-info common-lisp:nil
                       ((account-subscription-status :initarg
                         :account-subscription-status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %account-info-account-subscription-status :initform
                         common-lisp:nil)
                        (authentication-type :initarg :authentication-type
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %account-info-authentication-type :initform
                         common-lisp:nil)
                        (notification-email :initarg :notification-email :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %account-info-notification-email :initform
                         common-lisp:nil)
                        (edition :initarg :edition :type
                         (common-lisp:or edition common-lisp:null) :accessor
                         %account-info-edition :initform common-lisp:nil)
                        (account-name :initarg :account-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %account-info-account-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'account-info 'make-account-info))
 (common-lisp:defun make-account-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-subscription-status
                     authentication-type notification-email edition
                     account-name)
   (common-lisp:apply #'common-lisp:make-instance 'account-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-name))
      (common-lisp:list
       (common-lisp:cons "AccountName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edition))
      (common-lisp:list
       (common-lisp:cons "Edition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-email))
      (common-lisp:list
       (common-lisp:cons "NotificationEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "AuthenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-subscription-status))
      (common-lisp:list
       (common-lisp:cons "AccountSubscriptionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass account-settings common-lisp:nil
                       ((termination-protection-enabled :initarg
                         :termination-protection-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %account-settings-termination-protection-enabled
                         :initform common-lisp:nil)
                        (public-sharing-enabled :initarg
                         :public-sharing-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %account-settings-public-sharing-enabled :initform
                         common-lisp:nil)
                        (notification-email :initarg :notification-email :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %account-settings-notification-email :initform
                         common-lisp:nil)
                        (default-namespace :initarg :default-namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %account-settings-default-namespace :initform
                         common-lisp:nil)
                        (edition :initarg :edition :type
                         (common-lisp:or edition common-lisp:null) :accessor
                         %account-settings-edition :initform common-lisp:nil)
                        (account-name :initarg :account-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %account-settings-account-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'account-settings 'make-account-settings))
 (common-lisp:defun make-account-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key termination-protection-enabled
                     public-sharing-enabled notification-email
                     default-namespace edition account-name)
   (common-lisp:apply #'common-lisp:make-instance 'account-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-name))
      (common-lisp:list
       (common-lisp:cons "AccountName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edition))
      (common-lisp:list
       (common-lisp:cons "Edition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-namespace))
      (common-lisp:list
       (common-lisp:cons "DefaultNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-email))
      (common-lisp:list
       (common-lisp:cons "NotificationEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-sharing-enabled))
      (common-lisp:list
       (common-lisp:cons "PublicSharingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'termination-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "TerminationProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-action-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass active-iampolicy-assignment common-lisp:nil
                       ((policy-arn :initarg :policy-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %active-iampolicy-assignment-policy-arn :initform
                         common-lisp:nil)
                        (assignment-name :initarg :assignment-name :type
                         (common-lisp:or iampolicy-assignment-name
                                         common-lisp:null)
                         :accessor %active-iampolicy-assignment-assignment-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'active-iampolicy-assignment
                    'make-active-iampolicy-assignment))
 (common-lisp:defun make-active-iampolicy-assignment
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-arn assignment-name)
   (common-lisp:apply #'common-lisp:make-instance 'active-iampolicy-assignment
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          active-iampolicy-assignment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          active-iampolicy-assignment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-name))
      (common-lisp:list
       (common-lisp:cons "AssignmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          active-iampolicy-assignment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype active-iampolicy-assignment-list ()
   '(trivial-types:proper-list active-iampolicy-assignment))
 (common-lisp:defun |make-active-iampolicy-assignment-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            active-iampolicy-assignment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ad-hoc-filtering-option common-lisp:nil
                       ((availability-status :initarg :availability-status
                         :type
                         (common-lisp:or dashboard-behavior common-lisp:null)
                         :accessor %ad-hoc-filtering-option-availability-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ad-hoc-filtering-option 'make-ad-hoc-filtering-option))
 (common-lisp:defun make-ad-hoc-filtering-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key availability-status)
   (common-lisp:apply #'common-lisp:make-instance 'ad-hoc-filtering-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ad-hoc-filtering-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ad-hoc-filtering-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-status))
      (common-lisp:list
       (common-lisp:cons "AvailabilityStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ad-hoc-filtering-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype additional-dashboard-id-list ()
   '(trivial-types:proper-list short-restrictive-resource-id))
 (common-lisp:defun |make-additional-dashboard-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            short-restrictive-resource-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aggregation-function common-lisp:nil
                       ((date-aggregation-function :initarg
                         :date-aggregation-function :type
                         (common-lisp:or date-aggregation-function
                                         common-lisp:null)
                         :accessor
                         %aggregation-function-date-aggregation-function
                         :initform common-lisp:nil)
                        (categorical-aggregation-function :initarg
                         :categorical-aggregation-function :type
                         (common-lisp:or categorical-aggregation-function
                                         common-lisp:null)
                         :accessor
                         %aggregation-function-categorical-aggregation-function
                         :initform common-lisp:nil)
                        (numerical-aggregation-function :initarg
                         :numerical-aggregation-function :type
                         (common-lisp:or numerical-aggregation-function
                                         common-lisp:null)
                         :accessor
                         %aggregation-function-numerical-aggregation-function
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aggregation-function 'make-aggregation-function))
 (common-lisp:defun make-aggregation-function
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key date-aggregation-function
                     categorical-aggregation-function
                     numerical-aggregation-function)
   (common-lisp:apply #'common-lisp:make-instance 'aggregation-function
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aggregation-function))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aggregation-function))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'numerical-aggregation-function))
      (common-lisp:list
       (common-lisp:cons "NumericalAggregationFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'categorical-aggregation-function))
      (common-lisp:list
       (common-lisp:cons "CategoricalAggregationFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'date-aggregation-function))
      (common-lisp:list
       (common-lisp:cons "DateAggregationFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aggregation-function))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aggregation-sort-configuration common-lisp:nil
                       ((aggregation-function :initarg :aggregation-function
                         :type
                         (common-lisp:or aggregation-function common-lisp:null)
                         :accessor
                         %aggregation-sort-configuration-aggregation-function
                         :initform
                         (common-lisp:error
                          ":aggregation-function is required"))
                        (sort-direction :initarg :sort-direction :type
                         (common-lisp:or sort-direction common-lisp:null)
                         :accessor
                         %aggregation-sort-configuration-sort-direction
                         :initform
                         (common-lisp:error ":sort-direction is required"))
                        (column :initarg :column :type
                         (common-lisp:or column-identifier common-lisp:null)
                         :accessor %aggregation-sort-configuration-column
                         :initform (common-lisp:error ":column is required"))))
 (common-lisp:export
  (common-lisp:list 'aggregation-sort-configuration
                    'make-aggregation-sort-configuration))
 (common-lisp:defun make-aggregation-sort-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aggregation-function sort-direction
                     column)
   (common-lisp:apply #'common-lisp:make-instance
                      'aggregation-sort-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregation-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregation-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-direction))
      (common-lisp:list
       (common-lisp:cons "SortDirection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-function))
      (common-lisp:list
       (common-lisp:cons "AggregationFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregation-sort-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aggregation-sort-configuration-list ()
   '(trivial-types:proper-list aggregation-sort-configuration))
 (common-lisp:defun |make-aggregation-sort-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aggregation-sort-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype alias-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass amazon-elasticsearch-parameters common-lisp:nil
                       ((domain :initarg :domain :type
                         (common-lisp:or domain common-lisp:null) :accessor
                         %amazon-elasticsearch-parameters-domain :initform
                         (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'amazon-elasticsearch-parameters
                    'make-amazon-elasticsearch-parameters))
 (common-lisp:defun make-amazon-elasticsearch-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain)
   (common-lisp:apply #'common-lisp:make-instance
                      'amazon-elasticsearch-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          amazon-elasticsearch-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          amazon-elasticsearch-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          amazon-elasticsearch-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass amazon-open-search-parameters common-lisp:nil
                       ((domain :initarg :domain :type
                         (common-lisp:or domain common-lisp:null) :accessor
                         %amazon-open-search-parameters-domain :initform
                         (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'amazon-open-search-parameters
                    'make-amazon-open-search-parameters))
 (common-lisp:defun make-amazon-open-search-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain)
   (common-lisp:apply #'common-lisp:make-instance
                      'amazon-open-search-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          amazon-open-search-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          amazon-open-search-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          amazon-open-search-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass analysis common-lisp:nil
                       ((sheets :initarg :sheets :type
                         (common-lisp:or sheet-list common-lisp:null) :accessor
                         %analysis-sheets :initform common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %analysis-last-updated-time :initform common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %analysis-created-time :initform common-lisp:nil)
                        (theme-arn :initarg :theme-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %analysis-theme-arn :initform common-lisp:nil)
                        (data-set-arns :initarg :data-set-arns :type
                         (common-lisp:or data-set-arns-list common-lisp:null)
                         :accessor %analysis-data-set-arns :initform
                         common-lisp:nil)
                        (errors :initarg :errors :type
                         (common-lisp:or analysis-error-list common-lisp:null)
                         :accessor %analysis-errors :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or resource-status common-lisp:null)
                         :accessor %analysis-status :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or analysis-name common-lisp:null)
                         :accessor %analysis-name :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %analysis-arn :initform common-lisp:nil)
                        (analysis-id :initarg :analysis-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %analysis-analysis-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'analysis 'make-analysis))
 (common-lisp:defun make-analysis
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sheets last-updated-time created-time
                     theme-arn data-set-arns errors status name arn
                     analysis-id)
   (common-lisp:apply #'common-lisp:make-instance 'analysis
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analysis))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analysis))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-id))
      (common-lisp:list
       (common-lisp:cons "AnalysisId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-arns))
      (common-lisp:list
       (common-lisp:cons "DataSetArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-arn))
      (common-lisp:list
       (common-lisp:cons "ThemeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sheets))
      (common-lisp:list
       (common-lisp:cons "Sheets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analysis))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass analysis-defaults common-lisp:nil
                       ((default-new-sheet-configuration :initarg
                         :default-new-sheet-configuration :type
                         (common-lisp:or default-new-sheet-configuration
                                         common-lisp:null)
                         :accessor
                         %analysis-defaults-default-new-sheet-configuration
                         :initform
                         (common-lisp:error
                          ":default-new-sheet-configuration is required"))))
 (common-lisp:export
  (common-lisp:list 'analysis-defaults 'make-analysis-defaults))
 (common-lisp:defun make-analysis-defaults
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key default-new-sheet-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'analysis-defaults
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analysis-defaults))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analysis-defaults))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-new-sheet-configuration))
      (common-lisp:list
       (common-lisp:cons "DefaultNewSheetConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analysis-defaults))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass analysis-definition common-lisp:nil
                       ((analysis-defaults :initarg :analysis-defaults :type
                         (common-lisp:or analysis-defaults common-lisp:null)
                         :accessor %analysis-definition-analysis-defaults
                         :initform common-lisp:nil)
                        (column-configurations :initarg :column-configurations
                         :type
                         (common-lisp:or column-configuration-list
                                         common-lisp:null)
                         :accessor %analysis-definition-column-configurations
                         :initform common-lisp:nil)
                        (filter-groups :initarg :filter-groups :type
                         (common-lisp:or filter-group-list common-lisp:null)
                         :accessor %analysis-definition-filter-groups :initform
                         common-lisp:nil)
                        (parameter-declarations :initarg
                         :parameter-declarations :type
                         (common-lisp:or parameter-declaration-list
                                         common-lisp:null)
                         :accessor %analysis-definition-parameter-declarations
                         :initform common-lisp:nil)
                        (calculated-fields :initarg :calculated-fields :type
                         (common-lisp:or calculated-fields common-lisp:null)
                         :accessor %analysis-definition-calculated-fields
                         :initform common-lisp:nil)
                        (sheets :initarg :sheets :type
                         (common-lisp:or sheet-definition-list
                                         common-lisp:null)
                         :accessor %analysis-definition-sheets :initform
                         common-lisp:nil)
                        (data-set-identifier-declarations :initarg
                         :data-set-identifier-declarations :type
                         (common-lisp:or data-set-identifier-declaration-list
                                         common-lisp:null)
                         :accessor
                         %analysis-definition-data-set-identifier-declarations
                         :initform
                         (common-lisp:error
                          ":data-set-identifier-declarations is required"))))
 (common-lisp:export
  (common-lisp:list 'analysis-definition 'make-analysis-definition))
 (common-lisp:defun make-analysis-definition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key analysis-defaults column-configurations
                     filter-groups parameter-declarations calculated-fields
                     sheets data-set-identifier-declarations)
   (common-lisp:apply #'common-lisp:make-instance 'analysis-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analysis-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analysis-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-set-identifier-declarations))
      (common-lisp:list
       (common-lisp:cons "DataSetIdentifierDeclarations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sheets))
      (common-lisp:list
       (common-lisp:cons "Sheets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'calculated-fields))
      (common-lisp:list
       (common-lisp:cons "CalculatedFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-declarations))
      (common-lisp:list
       (common-lisp:cons "ParameterDeclarations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-groups))
      (common-lisp:list
       (common-lisp:cons "FilterGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-configurations))
      (common-lisp:list
       (common-lisp:cons "ColumnConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-defaults))
      (common-lisp:list
       (common-lisp:cons "AnalysisDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analysis-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass analysis-error common-lisp:nil
                       ((violated-entities :initarg :violated-entities :type
                         (common-lisp:or entity-list common-lisp:null)
                         :accessor %analysis-error-violated-entities :initform
                         common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %analysis-error-message :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or analysis-error-type common-lisp:null)
                         :accessor %analysis-error-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'analysis-error 'make-analysis-error))
 (common-lisp:defun make-analysis-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key violated-entities message type)
   (common-lisp:apply #'common-lisp:make-instance 'analysis-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analysis-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analysis-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violated-entities))
      (common-lisp:list
       (common-lisp:cons "ViolatedEntities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analysis-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analysis-error-list ()
   '(trivial-types:proper-list analysis-error))
 (common-lisp:defun |make-analysis-error-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list analysis-error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype analysis-error-type () 'common-lisp:string)
(common-lisp:deftype analysis-filter-attribute () 'common-lisp:string)
(common-lisp:deftype analysis-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass analysis-search-filter common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %analysis-search-filter-value :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or analysis-filter-attribute
                                         common-lisp:null)
                         :accessor %analysis-search-filter-name :initform
                         common-lisp:nil)
                        (operator :initarg :operator :type
                         (common-lisp:or filter-operator common-lisp:null)
                         :accessor %analysis-search-filter-operator :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'analysis-search-filter 'make-analysis-search-filter))
 (common-lisp:defun make-analysis-search-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name operator)
   (common-lisp:apply #'common-lisp:make-instance 'analysis-search-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analysis-search-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analysis-search-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "Operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analysis-search-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analysis-search-filter-list ()
   '(trivial-types:proper-list analysis-search-filter))
 (common-lisp:defun |make-analysis-search-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list analysis-search-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass analysis-source-entity common-lisp:nil
                       ((source-template :initarg :source-template :type
                         (common-lisp:or analysis-source-template
                                         common-lisp:null)
                         :accessor %analysis-source-entity-source-template
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'analysis-source-entity 'make-analysis-source-entity))
 (common-lisp:defun make-analysis-source-entity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-template)
   (common-lisp:apply #'common-lisp:make-instance 'analysis-source-entity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analysis-source-entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analysis-source-entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-template))
      (common-lisp:list
       (common-lisp:cons "SourceTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analysis-source-entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass analysis-source-template common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %analysis-source-template-arn :initform
                         (common-lisp:error ":arn is required"))
                        (data-set-references :initarg :data-set-references
                         :type
                         (common-lisp:or data-set-reference-list
                                         common-lisp:null)
                         :accessor
                         %analysis-source-template-data-set-references
                         :initform
                         (common-lisp:error
                          ":data-set-references is required"))))
 (common-lisp:export
  (common-lisp:list 'analysis-source-template 'make-analysis-source-template))
 (common-lisp:defun make-analysis-source-template
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn data-set-references)
   (common-lisp:apply #'common-lisp:make-instance 'analysis-source-template
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analysis-source-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analysis-source-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-references))
      (common-lisp:list
       (common-lisp:cons "DataSetReferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analysis-source-template))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass analysis-summary common-lisp:nil
                       ((last-updated-time :initarg :last-updated-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %analysis-summary-last-updated-time :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %analysis-summary-created-time :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or resource-status common-lisp:null)
                         :accessor %analysis-summary-status :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or analysis-name common-lisp:null)
                         :accessor %analysis-summary-name :initform
                         common-lisp:nil)
                        (analysis-id :initarg :analysis-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %analysis-summary-analysis-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %analysis-summary-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'analysis-summary 'make-analysis-summary))
 (common-lisp:defun make-analysis-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-time created-time status
                     name analysis-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'analysis-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analysis-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analysis-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-id))
      (common-lisp:list
       (common-lisp:cons "AnalysisId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analysis-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analysis-summary-list ()
   '(trivial-types:proper-list analysis-summary))
 (common-lisp:defun |make-analysis-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list analysis-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass anchor-date-configuration common-lisp:nil
                       ((parameter-name :initarg :parameter-name :type
                         (common-lisp:or parameter-name common-lisp:null)
                         :accessor %anchor-date-configuration-parameter-name
                         :initform common-lisp:nil)
                        (anchor-option :initarg :anchor-option :type
                         (common-lisp:or anchor-option common-lisp:null)
                         :accessor %anchor-date-configuration-anchor-option
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'anchor-date-configuration
                    'make-anchor-date-configuration))
 (common-lisp:defun make-anchor-date-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter-name anchor-option)
   (common-lisp:apply #'common-lisp:make-instance 'anchor-date-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          anchor-date-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          anchor-date-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anchor-option))
      (common-lisp:list
       (common-lisp:cons "AnchorOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          anchor-date-configuration))
   common-lisp:nil))
(common-lisp:deftype anchor-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass anonymous-user-dashboard-embedding-configuration
                       common-lisp:nil
                       ((initial-dashboard-id :initarg :initial-dashboard-id
                         :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %anonymous-user-dashboard-embedding-configuration-initial-dashboard-id
                         :initform
                         (common-lisp:error
                          ":initial-dashboard-id is required"))))
 (common-lisp:export
  (common-lisp:list 'anonymous-user-dashboard-embedding-configuration
                    'make-anonymous-user-dashboard-embedding-configuration))
 (common-lisp:defun make-anonymous-user-dashboard-embedding-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key initial-dashboard-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'anonymous-user-dashboard-embedding-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          anonymous-user-dashboard-embedding-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          anonymous-user-dashboard-embedding-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initial-dashboard-id))
      (common-lisp:list
       (common-lisp:cons "InitialDashboardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          anonymous-user-dashboard-embedding-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass anonymous-user-dashboard-visual-embedding-configuration
                       common-lisp:nil
                       ((initial-dashboard-visual-id :initarg
                         :initial-dashboard-visual-id :type
                         (common-lisp:or dashboard-visual-id common-lisp:null)
                         :accessor
                         %anonymous-user-dashboard-visual-embedding-configuration-initial-dashboard-visual-id
                         :initform
                         (common-lisp:error
                          ":initial-dashboard-visual-id is required"))))
 (common-lisp:export
  (common-lisp:list 'anonymous-user-dashboard-visual-embedding-configuration
                    'make-anonymous-user-dashboard-visual-embedding-configuration))
 (common-lisp:defun make-anonymous-user-dashboard-visual-embedding-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key initial-dashboard-visual-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'anonymous-user-dashboard-visual-embedding-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          anonymous-user-dashboard-visual-embedding-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          anonymous-user-dashboard-visual-embedding-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initial-dashboard-visual-id))
      (common-lisp:list
       (common-lisp:cons "InitialDashboardVisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          anonymous-user-dashboard-visual-embedding-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass anonymous-user-embedding-experience-configuration
                       common-lisp:nil
                       ((qsearch-bar :initarg :qsearch-bar :type
                         (common-lisp:or
                          anonymous-user-qsearch-bar-embedding-configuration
                          common-lisp:null)
                         :accessor
                         %anonymous-user-embedding-experience-configuration-qsearch-bar
                         :initform common-lisp:nil)
                        (dashboard-visual :initarg :dashboard-visual :type
                         (common-lisp:or
                          anonymous-user-dashboard-visual-embedding-configuration
                          common-lisp:null)
                         :accessor
                         %anonymous-user-embedding-experience-configuration-dashboard-visual
                         :initform common-lisp:nil)
                        (dashboard :initarg :dashboard :type
                         (common-lisp:or
                          anonymous-user-dashboard-embedding-configuration
                          common-lisp:null)
                         :accessor
                         %anonymous-user-embedding-experience-configuration-dashboard
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'anonymous-user-embedding-experience-configuration
                    'make-anonymous-user-embedding-experience-configuration))
 (common-lisp:defun make-anonymous-user-embedding-experience-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key qsearch-bar dashboard-visual dashboard)
   (common-lisp:apply #'common-lisp:make-instance
                      'anonymous-user-embedding-experience-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          anonymous-user-embedding-experience-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          anonymous-user-embedding-experience-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard))
      (common-lisp:list
       (common-lisp:cons "Dashboard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-visual))
      (common-lisp:list
       (common-lisp:cons "DashboardVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qsearch-bar))
      (common-lisp:list
       (common-lisp:cons "QSearchBar"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          anonymous-user-embedding-experience-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass anonymous-user-qsearch-bar-embedding-configuration
                       common-lisp:nil
                       ((initial-topic-id :initarg :initial-topic-id :type
                         (common-lisp:or restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %anonymous-user-qsearch-bar-embedding-configuration-initial-topic-id
                         :initform
                         (common-lisp:error ":initial-topic-id is required"))))
 (common-lisp:export
  (common-lisp:list 'anonymous-user-qsearch-bar-embedding-configuration
                    'make-anonymous-user-qsearch-bar-embedding-configuration))
 (common-lisp:defun make-anonymous-user-qsearch-bar-embedding-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key initial-topic-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'anonymous-user-qsearch-bar-embedding-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          anonymous-user-qsearch-bar-embedding-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          anonymous-user-qsearch-bar-embedding-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-topic-id))
      (common-lisp:list
       (common-lisp:cons "InitialTopicId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          anonymous-user-qsearch-bar-embedding-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass arc-axis-configuration common-lisp:nil
                       ((reserve-range :initarg :reserve-range :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %arc-axis-configuration-reserve-range :initform
                         common-lisp:nil)
                        (range :initarg :range :type
                         (common-lisp:or arc-axis-display-range
                                         common-lisp:null)
                         :accessor %arc-axis-configuration-range :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'arc-axis-configuration 'make-arc-axis-configuration))
 (common-lisp:defun make-arc-axis-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reserve-range range)
   (common-lisp:apply #'common-lisp:make-instance 'arc-axis-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          arc-axis-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          arc-axis-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range))
      (common-lisp:list
       (common-lisp:cons "Range"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserve-range))
      (common-lisp:list
       (common-lisp:cons "ReserveRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          arc-axis-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass arc-axis-display-range common-lisp:nil
                       ((max :initarg :max :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %arc-axis-display-range-max :initform common-lisp:nil)
                        (min :initarg :min :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %arc-axis-display-range-min :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'arc-axis-display-range 'make-arc-axis-display-range))
 (common-lisp:defun make-arc-axis-display-range
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max min)
   (common-lisp:apply #'common-lisp:make-instance 'arc-axis-display-range
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          arc-axis-display-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          arc-axis-display-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          arc-axis-display-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass arc-configuration common-lisp:nil
                       ((arc-thickness :initarg :arc-thickness :type
                         (common-lisp:or arc-thickness-options
                                         common-lisp:null)
                         :accessor %arc-configuration-arc-thickness :initform
                         common-lisp:nil)
                        (arc-angle :initarg :arc-angle :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %arc-configuration-arc-angle :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'arc-configuration 'make-arc-configuration))
 (common-lisp:defun make-arc-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arc-thickness arc-angle)
   (common-lisp:apply #'common-lisp:make-instance 'arc-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input arc-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input arc-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arc-angle))
      (common-lisp:list
       (common-lisp:cons "ArcAngle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arc-thickness))
      (common-lisp:list
       (common-lisp:cons "ArcThickness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input arc-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass arc-options common-lisp:nil
                       ((arc-thickness :initarg :arc-thickness :type
                         (common-lisp:or arc-thickness common-lisp:null)
                         :accessor %arc-options-arc-thickness :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'arc-options 'make-arc-options))
 (common-lisp:defun make-arc-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arc-thickness)
   (common-lisp:apply #'common-lisp:make-instance 'arc-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input arc-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input arc-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arc-thickness))
      (common-lisp:list
       (common-lisp:cons "ArcThickness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input arc-options))
   common-lisp:nil))
(common-lisp:deftype arc-thickness () 'common-lisp:string)
(common-lisp:deftype arc-thickness-options () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype arn-list () '(trivial-types:proper-list arn))
 (common-lisp:defun |make-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype assignment-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass athena-parameters common-lisp:nil
                       ((role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %athena-parameters-role-arn :initform common-lisp:nil)
                        (work-group :initarg :work-group :type
                         (common-lisp:or work-group common-lisp:null) :accessor
                         %athena-parameters-work-group :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'athena-parameters 'make-athena-parameters))
 (common-lisp:defun make-athena-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn work-group)
   (common-lisp:apply #'common-lisp:make-instance 'athena-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input athena-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input athena-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input athena-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aurora-parameters common-lisp:nil
                       ((database :initarg :database :type
                         (common-lisp:or database common-lisp:null) :accessor
                         %aurora-parameters-database :initform
                         (common-lisp:error ":database is required"))
                        (port :initarg :port :type
                         (common-lisp:or port common-lisp:null) :accessor
                         %aurora-parameters-port :initform
                         (common-lisp:error ":port is required"))
                        (host :initarg :host :type
                         (common-lisp:or host common-lisp:null) :accessor
                         %aurora-parameters-host :initform
                         (common-lisp:error ":host is required"))))
 (common-lisp:export
  (common-lisp:list 'aurora-parameters 'make-aurora-parameters))
 (common-lisp:defun make-aurora-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key database port host)
   (common-lisp:apply #'common-lisp:make-instance 'aurora-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aurora-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aurora-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aurora-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aurora-postgre-sql-parameters common-lisp:nil
                       ((database :initarg :database :type
                         (common-lisp:or database common-lisp:null) :accessor
                         %aurora-postgre-sql-parameters-database :initform
                         (common-lisp:error ":database is required"))
                        (port :initarg :port :type
                         (common-lisp:or port common-lisp:null) :accessor
                         %aurora-postgre-sql-parameters-port :initform
                         (common-lisp:error ":port is required"))
                        (host :initarg :host :type
                         (common-lisp:or host common-lisp:null) :accessor
                         %aurora-postgre-sql-parameters-host :initform
                         (common-lisp:error ":host is required"))))
 (common-lisp:export
  (common-lisp:list 'aurora-postgre-sql-parameters
                    'make-aurora-postgre-sql-parameters))
 (common-lisp:defun make-aurora-postgre-sql-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key database port host)
   (common-lisp:apply #'common-lisp:make-instance
                      'aurora-postgre-sql-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aurora-postgre-sql-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aurora-postgre-sql-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aurora-postgre-sql-parameters))
   common-lisp:nil))
(common-lisp:deftype authentication-method-option () 'common-lisp:string)
(common-lisp:deftype aws-account-id () 'common-lisp:string)
(common-lisp:deftype aws-and-account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aws-iot-analytics-parameters common-lisp:nil
                       ((data-set-name :initarg :data-set-name :type
                         (common-lisp:or data-set-name common-lisp:null)
                         :accessor %aws-iot-analytics-parameters-data-set-name
                         :initform
                         (common-lisp:error ":data-set-name is required"))))
 (common-lisp:export
  (common-lisp:list 'aws-iot-analytics-parameters
                    'make-aws-iot-analytics-parameters))
 (common-lisp:defun make-aws-iot-analytics-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-set-name)
   (common-lisp:apply #'common-lisp:make-instance 'aws-iot-analytics-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-iot-analytics-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-iot-analytics-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-name))
      (common-lisp:list
       (common-lisp:cons "DataSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-iot-analytics-parameters))
   common-lisp:nil))
(common-lisp:deftype axis-binding () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass axis-data-options common-lisp:nil
                       ((date-axis-options :initarg :date-axis-options :type
                         (common-lisp:or date-axis-options common-lisp:null)
                         :accessor %axis-data-options-date-axis-options
                         :initform common-lisp:nil)
                        (numeric-axis-options :initarg :numeric-axis-options
                         :type
                         (common-lisp:or numeric-axis-options common-lisp:null)
                         :accessor %axis-data-options-numeric-axis-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'axis-data-options 'make-axis-data-options))
 (common-lisp:defun make-axis-data-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key date-axis-options numeric-axis-options)
   (common-lisp:apply #'common-lisp:make-instance 'axis-data-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input axis-data-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input axis-data-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'numeric-axis-options))
      (common-lisp:list
       (common-lisp:cons "NumericAxisOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-axis-options))
      (common-lisp:list
       (common-lisp:cons "DateAxisOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input axis-data-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass axis-display-data-driven-range common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'axis-display-data-driven-range
                    'make-axis-display-data-driven-range))
 (common-lisp:defun make-axis-display-data-driven-range
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'axis-display-data-driven-range
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          axis-display-data-driven-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          axis-display-data-driven-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          axis-display-data-driven-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass axis-display-min-max-range common-lisp:nil
                       ((maximum :initarg :maximum :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %axis-display-min-max-range-maximum :initform
                         common-lisp:nil)
                        (minimum :initarg :minimum :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %axis-display-min-max-range-minimum :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'axis-display-min-max-range
                    'make-axis-display-min-max-range))
 (common-lisp:defun make-axis-display-min-max-range
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key maximum minimum)
   (common-lisp:apply #'common-lisp:make-instance 'axis-display-min-max-range
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          axis-display-min-max-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          axis-display-min-max-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum))
      (common-lisp:list
       (common-lisp:cons "Minimum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum))
      (common-lisp:list
       (common-lisp:cons "Maximum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          axis-display-min-max-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass axis-display-options common-lisp:nil
                       ((axis-offset :initarg :axis-offset :type
                         (common-lisp:or pixel-length common-lisp:null)
                         :accessor %axis-display-options-axis-offset :initform
                         common-lisp:nil)
                        (scrollbar-options :initarg :scrollbar-options :type
                         (common-lisp:or scroll-bar-options common-lisp:null)
                         :accessor %axis-display-options-scrollbar-options
                         :initform common-lisp:nil)
                        (data-options :initarg :data-options :type
                         (common-lisp:or axis-data-options common-lisp:null)
                         :accessor %axis-display-options-data-options :initform
                         common-lisp:nil)
                        (grid-line-visibility :initarg :grid-line-visibility
                         :type (common-lisp:or visibility common-lisp:null)
                         :accessor %axis-display-options-grid-line-visibility
                         :initform common-lisp:nil)
                        (axis-line-visibility :initarg :axis-line-visibility
                         :type (common-lisp:or visibility common-lisp:null)
                         :accessor %axis-display-options-axis-line-visibility
                         :initform common-lisp:nil)
                        (tick-label-options :initarg :tick-label-options :type
                         (common-lisp:or axis-tick-label-options
                                         common-lisp:null)
                         :accessor %axis-display-options-tick-label-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'axis-display-options 'make-axis-display-options))
 (common-lisp:defun make-axis-display-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key axis-offset scrollbar-options
                     data-options grid-line-visibility axis-line-visibility
                     tick-label-options)
   (common-lisp:apply #'common-lisp:make-instance 'axis-display-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input axis-display-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input axis-display-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tick-label-options))
      (common-lisp:list
       (common-lisp:cons "TickLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'axis-line-visibility))
      (common-lisp:list
       (common-lisp:cons "AxisLineVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'grid-line-visibility))
      (common-lisp:list
       (common-lisp:cons "GridLineVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-options))
      (common-lisp:list
       (common-lisp:cons "DataOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scrollbar-options))
      (common-lisp:list
       (common-lisp:cons "ScrollbarOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'axis-offset))
      (common-lisp:list
       (common-lisp:cons "AxisOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input axis-display-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass axis-display-range common-lisp:nil
                       ((data-driven :initarg :data-driven :type
                         (common-lisp:or axis-display-data-driven-range
                                         common-lisp:null)
                         :accessor %axis-display-range-data-driven :initform
                         common-lisp:nil)
                        (min-max :initarg :min-max :type
                         (common-lisp:or axis-display-min-max-range
                                         common-lisp:null)
                         :accessor %axis-display-range-min-max :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'axis-display-range 'make-axis-display-range))
 (common-lisp:defun make-axis-display-range
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-driven min-max)
   (common-lisp:apply #'common-lisp:make-instance 'axis-display-range
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input axis-display-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input axis-display-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-max))
      (common-lisp:list
       (common-lisp:cons "MinMax"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-driven))
      (common-lisp:list
       (common-lisp:cons "DataDriven"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input axis-display-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass axis-label-options common-lisp:nil
                       ((apply-to :initarg :apply-to :type
                         (common-lisp:or axis-label-reference-options
                                         common-lisp:null)
                         :accessor %axis-label-options-apply-to :initform
                         common-lisp:nil)
                        (custom-label :initarg :custom-label :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %axis-label-options-custom-label :initform
                         common-lisp:nil)
                        (font-configuration :initarg :font-configuration :type
                         (common-lisp:or font-configuration common-lisp:null)
                         :accessor %axis-label-options-font-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'axis-label-options 'make-axis-label-options))
 (common-lisp:defun make-axis-label-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key apply-to custom-label font-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'axis-label-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input axis-label-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input axis-label-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-configuration))
      (common-lisp:list
       (common-lisp:cons "FontConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-label))
      (common-lisp:list
       (common-lisp:cons "CustomLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-to))
      (common-lisp:list
       (common-lisp:cons "ApplyTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input axis-label-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype axis-label-options-list ()
   '(trivial-types:proper-list axis-label-options))
 (common-lisp:defun |make-axis-label-options-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list axis-label-options))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass axis-label-reference-options common-lisp:nil
                       ((column :initarg :column :type
                         (common-lisp:or column-identifier common-lisp:null)
                         :accessor %axis-label-reference-options-column
                         :initform (common-lisp:error ":column is required"))
                        (field-id :initarg :field-id :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         %axis-label-reference-options-field-id :initform
                         (common-lisp:error ":field-id is required"))))
 (common-lisp:export
  (common-lisp:list 'axis-label-reference-options
                    'make-axis-label-reference-options))
 (common-lisp:defun make-axis-label-reference-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key column field-id)
   (common-lisp:apply #'common-lisp:make-instance 'axis-label-reference-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          axis-label-reference-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          axis-label-reference-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          axis-label-reference-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass axis-linear-scale common-lisp:nil
                       ((step-size :initarg :step-size :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %axis-linear-scale-step-size :initform
                         common-lisp:nil)
                        (step-count :initarg :step-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %axis-linear-scale-step-count :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'axis-linear-scale 'make-axis-linear-scale))
 (common-lisp:defun make-axis-linear-scale
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key step-size step-count)
   (common-lisp:apply #'common-lisp:make-instance 'axis-linear-scale
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input axis-linear-scale))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input axis-linear-scale))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-count))
      (common-lisp:list
       (common-lisp:cons "StepCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-size))
      (common-lisp:list
       (common-lisp:cons "StepSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input axis-linear-scale))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass axis-logarithmic-scale common-lisp:nil
                       ((base :initarg :base :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %axis-logarithmic-scale-base :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'axis-logarithmic-scale 'make-axis-logarithmic-scale))
 (common-lisp:defun make-axis-logarithmic-scale
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key base)
   (common-lisp:apply #'common-lisp:make-instance 'axis-logarithmic-scale
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          axis-logarithmic-scale))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          axis-logarithmic-scale))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base))
      (common-lisp:list
       (common-lisp:cons "Base"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          axis-logarithmic-scale))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass axis-scale common-lisp:nil
                       ((logarithmic :initarg :logarithmic :type
                         (common-lisp:or axis-logarithmic-scale
                                         common-lisp:null)
                         :accessor %axis-scale-logarithmic :initform
                         common-lisp:nil)
                        (linear :initarg :linear :type
                         (common-lisp:or axis-linear-scale common-lisp:null)
                         :accessor %axis-scale-linear :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'axis-scale 'make-axis-scale))
 (common-lisp:defun make-axis-scale
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key logarithmic linear)
   (common-lisp:apply #'common-lisp:make-instance 'axis-scale
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input axis-scale))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input axis-scale))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'linear))
      (common-lisp:list
       (common-lisp:cons "Linear"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logarithmic))
      (common-lisp:list
       (common-lisp:cons "Logarithmic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input axis-scale))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass axis-tick-label-options common-lisp:nil
                       ((rotation-angle :initarg :rotation-angle :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %axis-tick-label-options-rotation-angle :initform
                         common-lisp:nil)
                        (label-options :initarg :label-options :type
                         (common-lisp:or label-options common-lisp:null)
                         :accessor %axis-tick-label-options-label-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'axis-tick-label-options 'make-axis-tick-label-options))
 (common-lisp:defun make-axis-tick-label-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rotation-angle label-options)
   (common-lisp:apply #'common-lisp:make-instance 'axis-tick-label-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          axis-tick-label-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          axis-tick-label-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-options))
      (common-lisp:list
       (common-lisp:cons "LabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-angle))
      (common-lisp:list
       (common-lisp:cons "RotationAngle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          axis-tick-label-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bar-chart-aggregated-field-wells common-lisp:nil
                       ((small-multiples :initarg :small-multiples :type
                         (common-lisp:or small-multiples-dimension-field-list
                                         common-lisp:null)
                         :accessor
                         %bar-chart-aggregated-field-wells-small-multiples
                         :initform common-lisp:nil)
                        (colors :initarg :colors :type
                         (common-lisp:or dimension-field-list common-lisp:null)
                         :accessor %bar-chart-aggregated-field-wells-colors
                         :initform common-lisp:nil)
                        (values :initarg :values :type
                         (common-lisp:or measure-field-list common-lisp:null)
                         :accessor %bar-chart-aggregated-field-wells-values
                         :initform common-lisp:nil)
                        (category :initarg :category :type
                         (common-lisp:or dimension-field-list common-lisp:null)
                         :accessor %bar-chart-aggregated-field-wells-category
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'bar-chart-aggregated-field-wells
                    'make-bar-chart-aggregated-field-wells))
 (common-lisp:defun make-bar-chart-aggregated-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key small-multiples colors values category)
   (common-lisp:apply #'common-lisp:make-instance
                      'bar-chart-aggregated-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bar-chart-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bar-chart-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'colors))
      (common-lisp:list
       (common-lisp:cons "Colors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'small-multiples))
      (common-lisp:list
       (common-lisp:cons "SmallMultiples"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bar-chart-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bar-chart-configuration common-lisp:nil
                       ((contribution-analysis-defaults :initarg
                         :contribution-analysis-defaults :type
                         (common-lisp:or contribution-analysis-default-list
                                         common-lisp:null)
                         :accessor
                         %bar-chart-configuration-contribution-analysis-defaults
                         :initform common-lisp:nil)
                        (reference-lines :initarg :reference-lines :type
                         (common-lisp:or reference-line-list common-lisp:null)
                         :accessor %bar-chart-configuration-reference-lines
                         :initform common-lisp:nil)
                        (tooltip :initarg :tooltip :type
                         (common-lisp:or tooltip-options common-lisp:null)
                         :accessor %bar-chart-configuration-tooltip :initform
                         common-lisp:nil)
                        (data-labels :initarg :data-labels :type
                         (common-lisp:or data-label-options common-lisp:null)
                         :accessor %bar-chart-configuration-data-labels
                         :initform common-lisp:nil)
                        (legend :initarg :legend :type
                         (common-lisp:or legend-options common-lisp:null)
                         :accessor %bar-chart-configuration-legend :initform
                         common-lisp:nil)
                        (color-label-options :initarg :color-label-options
                         :type
                         (common-lisp:or chart-axis-label-options
                                         common-lisp:null)
                         :accessor %bar-chart-configuration-color-label-options
                         :initform common-lisp:nil)
                        (value-label-options :initarg :value-label-options
                         :type
                         (common-lisp:or chart-axis-label-options
                                         common-lisp:null)
                         :accessor %bar-chart-configuration-value-label-options
                         :initform common-lisp:nil)
                        (value-axis :initarg :value-axis :type
                         (common-lisp:or axis-display-options common-lisp:null)
                         :accessor %bar-chart-configuration-value-axis
                         :initform common-lisp:nil)
                        (category-label-options :initarg
                         :category-label-options :type
                         (common-lisp:or chart-axis-label-options
                                         common-lisp:null)
                         :accessor
                         %bar-chart-configuration-category-label-options
                         :initform common-lisp:nil)
                        (category-axis :initarg :category-axis :type
                         (common-lisp:or axis-display-options common-lisp:null)
                         :accessor %bar-chart-configuration-category-axis
                         :initform common-lisp:nil)
                        (small-multiples-options :initarg
                         :small-multiples-options :type
                         (common-lisp:or small-multiples-options
                                         common-lisp:null)
                         :accessor
                         %bar-chart-configuration-small-multiples-options
                         :initform common-lisp:nil)
                        (visual-palette :initarg :visual-palette :type
                         (common-lisp:or visual-palette common-lisp:null)
                         :accessor %bar-chart-configuration-visual-palette
                         :initform common-lisp:nil)
                        (bars-arrangement :initarg :bars-arrangement :type
                         (common-lisp:or bars-arrangement common-lisp:null)
                         :accessor %bar-chart-configuration-bars-arrangement
                         :initform common-lisp:nil)
                        (orientation :initarg :orientation :type
                         (common-lisp:or bar-chart-orientation
                                         common-lisp:null)
                         :accessor %bar-chart-configuration-orientation
                         :initform common-lisp:nil)
                        (sort-configuration :initarg :sort-configuration :type
                         (common-lisp:or bar-chart-sort-configuration
                                         common-lisp:null)
                         :accessor %bar-chart-configuration-sort-configuration
                         :initform common-lisp:nil)
                        (field-wells :initarg :field-wells :type
                         (common-lisp:or bar-chart-field-wells
                                         common-lisp:null)
                         :accessor %bar-chart-configuration-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'bar-chart-configuration 'make-bar-chart-configuration))
 (common-lisp:defun make-bar-chart-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key contribution-analysis-defaults
                     reference-lines tooltip data-labels legend
                     color-label-options value-label-options value-axis
                     category-label-options category-axis
                     small-multiples-options visual-palette bars-arrangement
                     orientation sort-configuration field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'bar-chart-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bar-chart-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bar-chart-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'orientation))
      (common-lisp:list
       (common-lisp:cons "Orientation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bars-arrangement))
      (common-lisp:list
       (common-lisp:cons "BarsArrangement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-palette))
      (common-lisp:list
       (common-lisp:cons "VisualPalette"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'small-multiples-options))
      (common-lisp:list
       (common-lisp:cons "SmallMultiplesOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-axis))
      (common-lisp:list
       (common-lisp:cons "CategoryAxis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-label-options))
      (common-lisp:list
       (common-lisp:cons "CategoryLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-axis))
      (common-lisp:list
       (common-lisp:cons "ValueAxis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-label-options))
      (common-lisp:list
       (common-lisp:cons "ValueLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-label-options))
      (common-lisp:list
       (common-lisp:cons "ColorLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legend))
      (common-lisp:list
       (common-lisp:cons "Legend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-labels))
      (common-lisp:list
       (common-lisp:cons "DataLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip))
      (common-lisp:list
       (common-lisp:cons "Tooltip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-lines))
      (common-lisp:list
       (common-lisp:cons "ReferenceLines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contribution-analysis-defaults))
      (common-lisp:list
       (common-lisp:cons "ContributionAnalysisDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bar-chart-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bar-chart-field-wells common-lisp:nil
                       ((bar-chart-aggregated-field-wells :initarg
                         :bar-chart-aggregated-field-wells :type
                         (common-lisp:or bar-chart-aggregated-field-wells
                                         common-lisp:null)
                         :accessor
                         %bar-chart-field-wells-bar-chart-aggregated-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'bar-chart-field-wells 'make-bar-chart-field-wells))
 (common-lisp:defun make-bar-chart-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bar-chart-aggregated-field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'bar-chart-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bar-chart-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bar-chart-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bar-chart-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "BarChartAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bar-chart-field-wells))
   common-lisp:nil))
(common-lisp:deftype bar-chart-orientation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bar-chart-sort-configuration common-lisp:nil
                       ((small-multiples-limit-configuration :initarg
                         :small-multiples-limit-configuration :type
                         (common-lisp:or items-limit-configuration
                                         common-lisp:null)
                         :accessor
                         %bar-chart-sort-configuration-small-multiples-limit-configuration
                         :initform common-lisp:nil)
                        (small-multiples-sort :initarg :small-multiples-sort
                         :type
                         (common-lisp:or field-sort-options-list
                                         common-lisp:null)
                         :accessor
                         %bar-chart-sort-configuration-small-multiples-sort
                         :initform common-lisp:nil)
                        (color-items-limit :initarg :color-items-limit :type
                         (common-lisp:or items-limit-configuration
                                         common-lisp:null)
                         :accessor
                         %bar-chart-sort-configuration-color-items-limit
                         :initform common-lisp:nil)
                        (color-sort :initarg :color-sort :type
                         (common-lisp:or field-sort-options-list
                                         common-lisp:null)
                         :accessor %bar-chart-sort-configuration-color-sort
                         :initform common-lisp:nil)
                        (category-items-limit :initarg :category-items-limit
                         :type
                         (common-lisp:or items-limit-configuration
                                         common-lisp:null)
                         :accessor
                         %bar-chart-sort-configuration-category-items-limit
                         :initform common-lisp:nil)
                        (category-sort :initarg :category-sort :type
                         (common-lisp:or field-sort-options-list
                                         common-lisp:null)
                         :accessor %bar-chart-sort-configuration-category-sort
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'bar-chart-sort-configuration
                    'make-bar-chart-sort-configuration))
 (common-lisp:defun make-bar-chart-sort-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key small-multiples-limit-configuration
                     small-multiples-sort color-items-limit color-sort
                     category-items-limit category-sort)
   (common-lisp:apply #'common-lisp:make-instance 'bar-chart-sort-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bar-chart-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bar-chart-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-sort))
      (common-lisp:list
       (common-lisp:cons "CategorySort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-items-limit))
      (common-lisp:list
       (common-lisp:cons "CategoryItemsLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-sort))
      (common-lisp:list
       (common-lisp:cons "ColorSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-items-limit))
      (common-lisp:list
       (common-lisp:cons "ColorItemsLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'small-multiples-sort))
      (common-lisp:list
       (common-lisp:cons "SmallMultiplesSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'small-multiples-limit-configuration))
      (common-lisp:list
       (common-lisp:cons "SmallMultiplesLimitConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bar-chart-sort-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bar-chart-visual common-lisp:nil
                       ((column-hierarchies :initarg :column-hierarchies :type
                         (common-lisp:or column-hierarchy-list
                                         common-lisp:null)
                         :accessor %bar-chart-visual-column-hierarchies
                         :initform common-lisp:nil)
                        (actions :initarg :actions :type
                         (common-lisp:or visual-custom-action-list
                                         common-lisp:null)
                         :accessor %bar-chart-visual-actions :initform
                         common-lisp:nil)
                        (chart-configuration :initarg :chart-configuration
                         :type
                         (common-lisp:or bar-chart-configuration
                                         common-lisp:null)
                         :accessor %bar-chart-visual-chart-configuration
                         :initform common-lisp:nil)
                        (subtitle :initarg :subtitle :type
                         (common-lisp:or visual-subtitle-label-options
                                         common-lisp:null)
                         :accessor %bar-chart-visual-subtitle :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or visual-title-label-options
                                         common-lisp:null)
                         :accessor %bar-chart-visual-title :initform
                         common-lisp:nil)
                        (visual-id :initarg :visual-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %bar-chart-visual-visual-id :initform
                         (common-lisp:error ":visual-id is required"))))
 (common-lisp:export
  (common-lisp:list 'bar-chart-visual 'make-bar-chart-visual))
 (common-lisp:defun make-bar-chart-visual
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key column-hierarchies actions
                     chart-configuration subtitle title visual-id)
   (common-lisp:apply #'common-lisp:make-instance 'bar-chart-visual
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bar-chart-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bar-chart-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-hierarchies))
      (common-lisp:list
       (common-lisp:cons "ColumnHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bar-chart-visual))
   common-lisp:nil))
(common-lisp:deftype bars-arrangement () 'common-lisp:string)
(common-lisp:deftype base-map-style-type () 'common-lisp:string)
(common-lisp:deftype bin-count-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass bin-count-options common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or bin-count-value common-lisp:null)
                         :accessor %bin-count-options-value :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'bin-count-options 'make-bin-count-options))
 (common-lisp:defun make-bin-count-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value)
   (common-lisp:apply #'common-lisp:make-instance 'bin-count-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bin-count-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bin-count-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bin-count-options))
   common-lisp:nil))
(common-lisp:deftype bin-count-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass bin-width-options common-lisp:nil
                       ((bin-count-limit :initarg :bin-count-limit :type
                         (common-lisp:or bin-count-limit common-lisp:null)
                         :accessor %bin-width-options-bin-count-limit :initform
                         common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or bin-width-value common-lisp:null)
                         :accessor %bin-width-options-value :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'bin-width-options 'make-bin-width-options))
 (common-lisp:defun make-bin-width-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bin-count-limit value)
   (common-lisp:apply #'common-lisp:make-instance 'bin-width-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bin-width-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bin-width-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bin-count-limit))
      (common-lisp:list
       (common-lisp:cons "BinCountLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bin-width-options))
   common-lisp:nil))
(common-lisp:deftype bin-width-value () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass body-section-configuration common-lisp:nil
                       ((page-break-configuration :initarg
                         :page-break-configuration :type
                         (common-lisp:or section-page-break-configuration
                                         common-lisp:null)
                         :accessor
                         %body-section-configuration-page-break-configuration
                         :initform common-lisp:nil)
                        (style :initarg :style :type
                         (common-lisp:or section-style common-lisp:null)
                         :accessor %body-section-configuration-style :initform
                         common-lisp:nil)
                        (content :initarg :content :type
                         (common-lisp:or body-section-content common-lisp:null)
                         :accessor %body-section-configuration-content
                         :initform (common-lisp:error ":content is required"))
                        (section-id :initarg :section-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %body-section-configuration-section-id
                         :initform
                         (common-lisp:error ":section-id is required"))))
 (common-lisp:export
  (common-lisp:list 'body-section-configuration
                    'make-body-section-configuration))
 (common-lisp:defun make-body-section-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-break-configuration style content
                     section-id)
   (common-lisp:apply #'common-lisp:make-instance 'body-section-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          body-section-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          body-section-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'section-id))
      (common-lisp:list
       (common-lisp:cons "SectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style))
      (common-lisp:list
       (common-lisp:cons "Style"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'page-break-configuration))
      (common-lisp:list
       (common-lisp:cons "PageBreakConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          body-section-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype body-section-configuration-list ()
   '(trivial-types:proper-list body-section-configuration))
 (common-lisp:defun |make-body-section-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            body-section-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass body-section-content common-lisp:nil
                       ((layout :initarg :layout :type
                         (common-lisp:or section-layout-configuration
                                         common-lisp:null)
                         :accessor %body-section-content-layout :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'body-section-content 'make-body-section-content))
 (common-lisp:defun make-body-section-content
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key layout)
   (common-lisp:apply #'common-lisp:make-instance 'body-section-content
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input body-section-content))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input body-section-content))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layout))
      (common-lisp:list
       (common-lisp:cons "Layout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input body-section-content))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boolean-object () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass border-style common-lisp:nil
                       ((show :initarg :show :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %border-style-show :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'border-style 'make-border-style))
 (common-lisp:defun make-border-style
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key show)
   (common-lisp:apply #'common-lisp:make-instance 'border-style
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input border-style))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input border-style))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'show))
      (common-lisp:list
       (common-lisp:cons "Show"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input border-style))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass box-plot-aggregated-field-wells common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or box-plot-measure-field-list
                                         common-lisp:null)
                         :accessor %box-plot-aggregated-field-wells-values
                         :initform common-lisp:nil)
                        (group-by :initarg :group-by :type
                         (common-lisp:or box-plot-dimension-field-list
                                         common-lisp:null)
                         :accessor %box-plot-aggregated-field-wells-group-by
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'box-plot-aggregated-field-wells
                    'make-box-plot-aggregated-field-wells))
 (common-lisp:defun make-box-plot-aggregated-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values group-by)
   (common-lisp:apply #'common-lisp:make-instance
                      'box-plot-aggregated-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          box-plot-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          box-plot-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "GroupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          box-plot-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass box-plot-chart-configuration common-lisp:nil
                       ((visual-palette :initarg :visual-palette :type
                         (common-lisp:or visual-palette common-lisp:null)
                         :accessor %box-plot-chart-configuration-visual-palette
                         :initform common-lisp:nil)
                        (reference-lines :initarg :reference-lines :type
                         (common-lisp:or reference-line-list common-lisp:null)
                         :accessor
                         %box-plot-chart-configuration-reference-lines
                         :initform common-lisp:nil)
                        (tooltip :initarg :tooltip :type
                         (common-lisp:or tooltip-options common-lisp:null)
                         :accessor %box-plot-chart-configuration-tooltip
                         :initform common-lisp:nil)
                        (legend :initarg :legend :type
                         (common-lisp:or legend-options common-lisp:null)
                         :accessor %box-plot-chart-configuration-legend
                         :initform common-lisp:nil)
                        (primary-yaxis-label-options :initarg
                         :primary-yaxis-label-options :type
                         (common-lisp:or chart-axis-label-options
                                         common-lisp:null)
                         :accessor
                         %box-plot-chart-configuration-primary-yaxis-label-options
                         :initform common-lisp:nil)
                        (primary-yaxis-display-options :initarg
                         :primary-yaxis-display-options :type
                         (common-lisp:or axis-display-options common-lisp:null)
                         :accessor
                         %box-plot-chart-configuration-primary-yaxis-display-options
                         :initform common-lisp:nil)
                        (category-label-options :initarg
                         :category-label-options :type
                         (common-lisp:or chart-axis-label-options
                                         common-lisp:null)
                         :accessor
                         %box-plot-chart-configuration-category-label-options
                         :initform common-lisp:nil)
                        (category-axis :initarg :category-axis :type
                         (common-lisp:or axis-display-options common-lisp:null)
                         :accessor %box-plot-chart-configuration-category-axis
                         :initform common-lisp:nil)
                        (box-plot-options :initarg :box-plot-options :type
                         (common-lisp:or box-plot-options common-lisp:null)
                         :accessor
                         %box-plot-chart-configuration-box-plot-options
                         :initform common-lisp:nil)
                        (sort-configuration :initarg :sort-configuration :type
                         (common-lisp:or box-plot-sort-configuration
                                         common-lisp:null)
                         :accessor
                         %box-plot-chart-configuration-sort-configuration
                         :initform common-lisp:nil)
                        (field-wells :initarg :field-wells :type
                         (common-lisp:or box-plot-field-wells common-lisp:null)
                         :accessor %box-plot-chart-configuration-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'box-plot-chart-configuration
                    'make-box-plot-chart-configuration))
 (common-lisp:defun make-box-plot-chart-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visual-palette reference-lines tooltip
                     legend primary-yaxis-label-options
                     primary-yaxis-display-options category-label-options
                     category-axis box-plot-options sort-configuration
                     field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'box-plot-chart-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          box-plot-chart-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          box-plot-chart-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'box-plot-options))
      (common-lisp:list
       (common-lisp:cons "BoxPlotOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-axis))
      (common-lisp:list
       (common-lisp:cons "CategoryAxis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-label-options))
      (common-lisp:list
       (common-lisp:cons "CategoryLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-yaxis-display-options))
      (common-lisp:list
       (common-lisp:cons "PrimaryYAxisDisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-yaxis-label-options))
      (common-lisp:list
       (common-lisp:cons "PrimaryYAxisLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legend))
      (common-lisp:list
       (common-lisp:cons "Legend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip))
      (common-lisp:list
       (common-lisp:cons "Tooltip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-lines))
      (common-lisp:list
       (common-lisp:cons "ReferenceLines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-palette))
      (common-lisp:list
       (common-lisp:cons "VisualPalette"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          box-plot-chart-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype box-plot-dimension-field-list ()
   '(trivial-types:proper-list dimension-field))
 (common-lisp:defun |make-box-plot-dimension-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass box-plot-field-wells common-lisp:nil
                       ((box-plot-aggregated-field-wells :initarg
                         :box-plot-aggregated-field-wells :type
                         (common-lisp:or box-plot-aggregated-field-wells
                                         common-lisp:null)
                         :accessor
                         %box-plot-field-wells-box-plot-aggregated-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'box-plot-field-wells 'make-box-plot-field-wells))
 (common-lisp:defun make-box-plot-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key box-plot-aggregated-field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'box-plot-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input box-plot-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input box-plot-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'box-plot-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "BoxPlotAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input box-plot-field-wells))
   common-lisp:nil))
(common-lisp:deftype box-plot-fill-style () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype box-plot-measure-field-list ()
   '(trivial-types:proper-list measure-field))
 (common-lisp:defun |make-box-plot-measure-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list measure-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass box-plot-options common-lisp:nil
                       ((all-data-points-visibility :initarg
                         :all-data-points-visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %box-plot-options-all-data-points-visibility :initform
                         common-lisp:nil)
                        (outlier-visibility :initarg :outlier-visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %box-plot-options-outlier-visibility :initform
                         common-lisp:nil)
                        (style-options :initarg :style-options :type
                         (common-lisp:or box-plot-style-options
                                         common-lisp:null)
                         :accessor %box-plot-options-style-options :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'box-plot-options 'make-box-plot-options))
 (common-lisp:defun make-box-plot-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key all-data-points-visibility
                     outlier-visibility style-options)
   (common-lisp:apply #'common-lisp:make-instance 'box-plot-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input box-plot-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input box-plot-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style-options))
      (common-lisp:list
       (common-lisp:cons "StyleOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outlier-visibility))
      (common-lisp:list
       (common-lisp:cons "OutlierVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'all-data-points-visibility))
      (common-lisp:list
       (common-lisp:cons "AllDataPointsVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input box-plot-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass box-plot-sort-configuration common-lisp:nil
                       ((pagination-configuration :initarg
                         :pagination-configuration :type
                         (common-lisp:or pagination-configuration
                                         common-lisp:null)
                         :accessor
                         %box-plot-sort-configuration-pagination-configuration
                         :initform common-lisp:nil)
                        (category-sort :initarg :category-sort :type
                         (common-lisp:or field-sort-options-list
                                         common-lisp:null)
                         :accessor %box-plot-sort-configuration-category-sort
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'box-plot-sort-configuration
                    'make-box-plot-sort-configuration))
 (common-lisp:defun make-box-plot-sort-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pagination-configuration category-sort)
   (common-lisp:apply #'common-lisp:make-instance 'box-plot-sort-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          box-plot-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          box-plot-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-sort))
      (common-lisp:list
       (common-lisp:cons "CategorySort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pagination-configuration))
      (common-lisp:list
       (common-lisp:cons "PaginationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          box-plot-sort-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass box-plot-style-options common-lisp:nil
                       ((fill-style :initarg :fill-style :type
                         (common-lisp:or box-plot-fill-style common-lisp:null)
                         :accessor %box-plot-style-options-fill-style :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'box-plot-style-options 'make-box-plot-style-options))
 (common-lisp:defun make-box-plot-style-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fill-style)
   (common-lisp:apply #'common-lisp:make-instance 'box-plot-style-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          box-plot-style-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          box-plot-style-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fill-style))
      (common-lisp:list
       (common-lisp:cons "FillStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          box-plot-style-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass box-plot-visual common-lisp:nil
                       ((column-hierarchies :initarg :column-hierarchies :type
                         (common-lisp:or column-hierarchy-list
                                         common-lisp:null)
                         :accessor %box-plot-visual-column-hierarchies
                         :initform common-lisp:nil)
                        (actions :initarg :actions :type
                         (common-lisp:or visual-custom-action-list
                                         common-lisp:null)
                         :accessor %box-plot-visual-actions :initform
                         common-lisp:nil)
                        (chart-configuration :initarg :chart-configuration
                         :type
                         (common-lisp:or box-plot-chart-configuration
                                         common-lisp:null)
                         :accessor %box-plot-visual-chart-configuration
                         :initform common-lisp:nil)
                        (subtitle :initarg :subtitle :type
                         (common-lisp:or visual-subtitle-label-options
                                         common-lisp:null)
                         :accessor %box-plot-visual-subtitle :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or visual-title-label-options
                                         common-lisp:null)
                         :accessor %box-plot-visual-title :initform
                         common-lisp:nil)
                        (visual-id :initarg :visual-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %box-plot-visual-visual-id :initform
                         (common-lisp:error ":visual-id is required"))))
 (common-lisp:export (common-lisp:list 'box-plot-visual 'make-box-plot-visual))
 (common-lisp:defun make-box-plot-visual
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key column-hierarchies actions
                     chart-configuration subtitle title visual-id)
   (common-lisp:apply #'common-lisp:make-instance 'box-plot-visual
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input box-plot-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input box-plot-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-hierarchies))
      (common-lisp:list
       (common-lisp:cons "ColumnHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input box-plot-visual))
   common-lisp:nil))
(common-lisp:deftype cidr () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass calculated-column common-lisp:nil
                       ((expression :initarg :expression :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         %calculated-column-expression :initform
                         (common-lisp:error ":expression is required"))
                        (column-id :initarg :column-id :type
                         (common-lisp:or column-id common-lisp:null) :accessor
                         %calculated-column-column-id :initform
                         (common-lisp:error ":column-id is required"))
                        (column-name :initarg :column-name :type
                         (common-lisp:or column-name common-lisp:null)
                         :accessor %calculated-column-column-name :initform
                         (common-lisp:error ":column-name is required"))))
 (common-lisp:export
  (common-lisp:list 'calculated-column 'make-calculated-column))
 (common-lisp:defun make-calculated-column
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expression column-id column-name)
   (common-lisp:apply #'common-lisp:make-instance 'calculated-column
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input calculated-column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input calculated-column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "ColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-id))
      (common-lisp:list
       (common-lisp:cons "ColumnId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input calculated-column))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype calculated-column-list ()
   '(trivial-types:proper-list calculated-column))
 (common-lisp:defun |make-calculated-column-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list calculated-column))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass calculated-field common-lisp:nil
                       ((expression :initarg :expression :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         %calculated-field-expression :initform
                         (common-lisp:error ":expression is required"))
                        (name :initarg :name :type
                         (common-lisp:or column-name common-lisp:null)
                         :accessor %calculated-field-name :initform
                         (common-lisp:error ":name is required"))
                        (data-set-identifier :initarg :data-set-identifier
                         :type
                         (common-lisp:or data-set-identifier common-lisp:null)
                         :accessor %calculated-field-data-set-identifier
                         :initform
                         (common-lisp:error
                          ":data-set-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'calculated-field 'make-calculated-field))
 (common-lisp:defun make-calculated-field
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expression name data-set-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'calculated-field
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input calculated-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input calculated-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-identifier))
      (common-lisp:list
       (common-lisp:cons "DataSetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input calculated-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype calculated-fields ()
   '(trivial-types:proper-list calculated-field))
 (common-lisp:defun |make-calculated-fields|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list calculated-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass calculated-measure-field common-lisp:nil
                       ((expression :initarg :expression :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         %calculated-measure-field-expression :initform
                         (common-lisp:error ":expression is required"))
                        (field-id :initarg :field-id :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         %calculated-measure-field-field-id :initform
                         (common-lisp:error ":field-id is required"))))
 (common-lisp:export
  (common-lisp:list 'calculated-measure-field 'make-calculated-measure-field))
 (common-lisp:defun make-calculated-measure-field
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expression field-id)
   (common-lisp:apply #'common-lisp:make-instance 'calculated-measure-field
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          calculated-measure-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          calculated-measure-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          calculated-measure-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-ingestion-request common-lisp:nil
                       ((ingestion-id :initarg :ingestion-id :type
                         (common-lisp:or ingestion-id common-lisp:null)
                         :accessor %cancel-ingestion-request-ingestion-id
                         :initform
                         (common-lisp:error ":ingestion-id is required"))
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cancel-ingestion-request-data-set-id :initform
                         (common-lisp:error ":data-set-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %cancel-ingestion-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-ingestion-request 'make-cancel-ingestion-request))
 (common-lisp:defun make-cancel-ingestion-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ingestion-id data-set-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-ingestion-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-ingestion-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-ingestion-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-ingestion-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-ingestion-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %cancel-ingestion-response-status :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cancel-ingestion-response-request-id :initform
                         common-lisp:nil)
                        (ingestion-id :initarg :ingestion-id :type
                         (common-lisp:or ingestion-id common-lisp:null)
                         :accessor %cancel-ingestion-response-ingestion-id
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %cancel-ingestion-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cancel-ingestion-response
                    'make-cancel-ingestion-response))
 (common-lisp:defun make-cancel-ingestion-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id ingestion-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-ingestion-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-ingestion-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-ingestion-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-id))
      (common-lisp:list
       (common-lisp:cons "IngestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-ingestion-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cascading-control-configuration common-lisp:nil
                       ((source-controls :initarg :source-controls :type
                         (common-lisp:or cascading-control-source-list
                                         common-lisp:null)
                         :accessor
                         %cascading-control-configuration-source-controls
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cascading-control-configuration
                    'make-cascading-control-configuration))
 (common-lisp:defun make-cascading-control-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-controls)
   (common-lisp:apply #'common-lisp:make-instance
                      'cascading-control-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cascading-control-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cascading-control-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-controls))
      (common-lisp:list
       (common-lisp:cons "SourceControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cascading-control-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cascading-control-source common-lisp:nil
                       ((column-to-match :initarg :column-to-match :type
                         (common-lisp:or column-identifier common-lisp:null)
                         :accessor %cascading-control-source-column-to-match
                         :initform common-lisp:nil)
                        (source-sheet-control-id :initarg
                         :source-sheet-control-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cascading-control-source-source-sheet-control-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cascading-control-source 'make-cascading-control-source))
 (common-lisp:defun make-cascading-control-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key column-to-match source-sheet-control-id)
   (common-lisp:apply #'common-lisp:make-instance 'cascading-control-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cascading-control-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cascading-control-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-sheet-control-id))
      (common-lisp:list
       (common-lisp:cons "SourceSheetControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-to-match))
      (common-lisp:list
       (common-lisp:cons "ColumnToMatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cascading-control-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cascading-control-source-list ()
   '(trivial-types:proper-list cascading-control-source))
 (common-lisp:defun |make-cascading-control-source-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cascading-control-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cast-column-type-operation common-lisp:nil
                       ((format :initarg :format :type
                         (common-lisp:or type-cast-format common-lisp:null)
                         :accessor %cast-column-type-operation-format :initform
                         common-lisp:nil)
                        (new-column-type :initarg :new-column-type :type
                         (common-lisp:or column-data-type common-lisp:null)
                         :accessor %cast-column-type-operation-new-column-type
                         :initform
                         (common-lisp:error ":new-column-type is required"))
                        (column-name :initarg :column-name :type
                         (common-lisp:or column-name common-lisp:null)
                         :accessor %cast-column-type-operation-column-name
                         :initform
                         (common-lisp:error ":column-name is required"))))
 (common-lisp:export
  (common-lisp:list 'cast-column-type-operation
                    'make-cast-column-type-operation))
 (common-lisp:defun make-cast-column-type-operation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key format new-column-type column-name)
   (common-lisp:apply #'common-lisp:make-instance 'cast-column-type-operation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cast-column-type-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cast-column-type-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "ColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-column-type))
      (common-lisp:list
       (common-lisp:cons "NewColumnType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cast-column-type-operation))
   common-lisp:nil))
(common-lisp:deftype catalog () 'common-lisp:string)
(common-lisp:deftype categorical-aggregation-function () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass categorical-dimension-field common-lisp:nil
                       ((format-configuration :initarg :format-configuration
                         :type
                         (common-lisp:or string-format-configuration
                                         common-lisp:null)
                         :accessor
                         %categorical-dimension-field-format-configuration
                         :initform common-lisp:nil)
                        (hierarchy-id :initarg :hierarchy-id :type
                         (common-lisp:or hierarchy-id common-lisp:null)
                         :accessor %categorical-dimension-field-hierarchy-id
                         :initform common-lisp:nil)
                        (column :initarg :column :type
                         (common-lisp:or column-identifier common-lisp:null)
                         :accessor %categorical-dimension-field-column
                         :initform (common-lisp:error ":column is required"))
                        (field-id :initarg :field-id :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         %categorical-dimension-field-field-id :initform
                         (common-lisp:error ":field-id is required"))))
 (common-lisp:export
  (common-lisp:list 'categorical-dimension-field
                    'make-categorical-dimension-field))
 (common-lisp:defun make-categorical-dimension-field
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key format-configuration hierarchy-id column
                     field-id)
   (common-lisp:apply #'common-lisp:make-instance 'categorical-dimension-field
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          categorical-dimension-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          categorical-dimension-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-id))
      (common-lisp:list
       (common-lisp:cons "HierarchyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'format-configuration))
      (common-lisp:list
       (common-lisp:cons "FormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          categorical-dimension-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass categorical-measure-field common-lisp:nil
                       ((format-configuration :initarg :format-configuration
                         :type
                         (common-lisp:or string-format-configuration
                                         common-lisp:null)
                         :accessor
                         %categorical-measure-field-format-configuration
                         :initform common-lisp:nil)
                        (aggregation-function :initarg :aggregation-function
                         :type
                         (common-lisp:or categorical-aggregation-function
                                         common-lisp:null)
                         :accessor
                         %categorical-measure-field-aggregation-function
                         :initform common-lisp:nil)
                        (column :initarg :column :type
                         (common-lisp:or column-identifier common-lisp:null)
                         :accessor %categorical-measure-field-column :initform
                         (common-lisp:error ":column is required"))
                        (field-id :initarg :field-id :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         %categorical-measure-field-field-id :initform
                         (common-lisp:error ":field-id is required"))))
 (common-lisp:export
  (common-lisp:list 'categorical-measure-field
                    'make-categorical-measure-field))
 (common-lisp:defun make-categorical-measure-field
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key format-configuration aggregation-function
                     column field-id)
   (common-lisp:apply #'common-lisp:make-instance 'categorical-measure-field
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          categorical-measure-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          categorical-measure-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-function))
      (common-lisp:list
       (common-lisp:cons "AggregationFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'format-configuration))
      (common-lisp:list
       (common-lisp:cons "FormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          categorical-measure-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass category-drill-down-filter common-lisp:nil
                       ((category-values :initarg :category-values :type
                         (common-lisp:or category-value-list common-lisp:null)
                         :accessor %category-drill-down-filter-category-values
                         :initform
                         (common-lisp:error ":category-values is required"))
                        (column :initarg :column :type
                         (common-lisp:or column-identifier common-lisp:null)
                         :accessor %category-drill-down-filter-column :initform
                         (common-lisp:error ":column is required"))))
 (common-lisp:export
  (common-lisp:list 'category-drill-down-filter
                    'make-category-drill-down-filter))
 (common-lisp:defun make-category-drill-down-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key category-values column)
   (common-lisp:apply #'common-lisp:make-instance 'category-drill-down-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          category-drill-down-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          category-drill-down-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-values))
      (common-lisp:list
       (common-lisp:cons "CategoryValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          category-drill-down-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass category-filter common-lisp:nil
                       ((configuration :initarg :configuration :type
                         (common-lisp:or category-filter-configuration
                                         common-lisp:null)
                         :accessor %category-filter-configuration :initform
                         (common-lisp:error ":configuration is required"))
                        (column :initarg :column :type
                         (common-lisp:or column-identifier common-lisp:null)
                         :accessor %category-filter-column :initform
                         (common-lisp:error ":column is required"))
                        (filter-id :initarg :filter-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %category-filter-filter-id :initform
                         (common-lisp:error ":filter-id is required"))))
 (common-lisp:export (common-lisp:list 'category-filter 'make-category-filter))
 (common-lisp:defun make-category-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configuration column filter-id)
   (common-lisp:apply #'common-lisp:make-instance 'category-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input category-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input category-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-id))
      (common-lisp:list
       (common-lisp:cons "FilterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input category-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass category-filter-configuration common-lisp:nil
                       ((custom-filter-configuration :initarg
                         :custom-filter-configuration :type
                         (common-lisp:or custom-filter-configuration
                                         common-lisp:null)
                         :accessor
                         %category-filter-configuration-custom-filter-configuration
                         :initform common-lisp:nil)
                        (custom-filter-list-configuration :initarg
                         :custom-filter-list-configuration :type
                         (common-lisp:or custom-filter-list-configuration
                                         common-lisp:null)
                         :accessor
                         %category-filter-configuration-custom-filter-list-configuration
                         :initform common-lisp:nil)
                        (filter-list-configuration :initarg
                         :filter-list-configuration :type
                         (common-lisp:or filter-list-configuration
                                         common-lisp:null)
                         :accessor
                         %category-filter-configuration-filter-list-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'category-filter-configuration
                    'make-category-filter-configuration))
 (common-lisp:defun make-category-filter-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-filter-configuration
                     custom-filter-list-configuration
                     filter-list-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'category-filter-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          category-filter-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          category-filter-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'filter-list-configuration))
      (common-lisp:list
       (common-lisp:cons "FilterListConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-filter-list-configuration))
      (common-lisp:list
       (common-lisp:cons "CustomFilterListConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-filter-configuration))
      (common-lisp:list
       (common-lisp:cons "CustomFilterConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          category-filter-configuration))
   common-lisp:nil))
(common-lisp:deftype category-filter-match-operator () 'common-lisp:string)
(common-lisp:deftype category-filter-select-all-options () 'common-lisp:string)
(common-lisp:deftype category-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype category-value-list ()
   '(trivial-types:proper-list category-value))
 (common-lisp:defun |make-category-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list category-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass chart-axis-label-options common-lisp:nil
                       ((axis-label-options :initarg :axis-label-options :type
                         (common-lisp:or axis-label-options-list
                                         common-lisp:null)
                         :accessor %chart-axis-label-options-axis-label-options
                         :initform common-lisp:nil)
                        (sort-icon-visibility :initarg :sort-icon-visibility
                         :type (common-lisp:or visibility common-lisp:null)
                         :accessor
                         %chart-axis-label-options-sort-icon-visibility
                         :initform common-lisp:nil)
                        (visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %chart-axis-label-options-visibility :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'chart-axis-label-options 'make-chart-axis-label-options))
 (common-lisp:defun make-chart-axis-label-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key axis-label-options sort-icon-visibility
                     visibility)
   (common-lisp:apply #'common-lisp:make-instance 'chart-axis-label-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          chart-axis-label-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          chart-axis-label-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sort-icon-visibility))
      (common-lisp:list
       (common-lisp:cons "SortIconVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'axis-label-options))
      (common-lisp:list
       (common-lisp:cons "AxisLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          chart-axis-label-options))
   common-lisp:nil))
(common-lisp:deftype cluster-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cluster-marker common-lisp:nil
                       ((simple-cluster-marker :initarg :simple-cluster-marker
                         :type
                         (common-lisp:or simple-cluster-marker
                                         common-lisp:null)
                         :accessor %cluster-marker-simple-cluster-marker
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'cluster-marker 'make-cluster-marker))
 (common-lisp:defun make-cluster-marker
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key simple-cluster-marker)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-marker
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-marker))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-marker))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'simple-cluster-marker))
      (common-lisp:list
       (common-lisp:cons "SimpleClusterMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-marker))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-marker-configuration common-lisp:nil
                       ((cluster-marker :initarg :cluster-marker :type
                         (common-lisp:or cluster-marker common-lisp:null)
                         :accessor %cluster-marker-configuration-cluster-marker
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cluster-marker-configuration
                    'make-cluster-marker-configuration))
 (common-lisp:defun make-cluster-marker-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-marker)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-marker-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-marker-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-marker-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-marker))
      (common-lisp:list
       (common-lisp:cons "ClusterMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-marker-configuration))
   common-lisp:nil))
(common-lisp:deftype color-fill-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype color-list () '(trivial-types:proper-list hex-color))
 (common-lisp:defun |make-color-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hex-color))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass color-scale common-lisp:nil
                       ((null-value-color :initarg :null-value-color :type
                         (common-lisp:or data-color common-lisp:null) :accessor
                         %color-scale-null-value-color :initform
                         common-lisp:nil)
                        (color-fill-type :initarg :color-fill-type :type
                         (common-lisp:or color-fill-type common-lisp:null)
                         :accessor %color-scale-color-fill-type :initform
                         (common-lisp:error ":color-fill-type is required"))
                        (colors :initarg :colors :type
                         (common-lisp:or color-scale-color-list
                                         common-lisp:null)
                         :accessor %color-scale-colors :initform
                         (common-lisp:error ":colors is required"))))
 (common-lisp:export (common-lisp:list 'color-scale 'make-color-scale))
 (common-lisp:defun make-color-scale
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key null-value-color color-fill-type colors)
   (common-lisp:apply #'common-lisp:make-instance 'color-scale
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input color-scale))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input color-scale))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'colors))
      (common-lisp:list
       (common-lisp:cons "Colors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-fill-type))
      (common-lisp:list
       (common-lisp:cons "ColorFillType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'null-value-color))
      (common-lisp:list
       (common-lisp:cons "NullValueColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input color-scale))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype color-scale-color-list ()
   '(trivial-types:proper-list data-color))
 (common-lisp:defun |make-color-scale-color-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-color))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass column-configuration common-lisp:nil
                       ((role :initarg :role :type
                         (common-lisp:or column-role common-lisp:null)
                         :accessor %column-configuration-role :initform
                         common-lisp:nil)
                        (format-configuration :initarg :format-configuration
                         :type
                         (common-lisp:or format-configuration common-lisp:null)
                         :accessor %column-configuration-format-configuration
                         :initform common-lisp:nil)
                        (column :initarg :column :type
                         (common-lisp:or column-identifier common-lisp:null)
                         :accessor %column-configuration-column :initform
                         (common-lisp:error ":column is required"))))
 (common-lisp:export
  (common-lisp:list 'column-configuration 'make-column-configuration))
 (common-lisp:defun make-column-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role format-configuration column)
   (common-lisp:apply #'common-lisp:make-instance 'column-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'format-configuration))
      (common-lisp:list
       (common-lisp:cons "FormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-configuration-list ()
   '(trivial-types:proper-list column-configuration))
 (common-lisp:defun |make-column-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype column-data-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass column-description common-lisp:nil
                       ((text :initarg :text :type
                         (common-lisp:or column-descriptive-text
                                         common-lisp:null)
                         :accessor %column-description-text :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'column-description 'make-column-description))
 (common-lisp:defun make-column-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key text)
   (common-lisp:apply #'common-lisp:make-instance 'column-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-description))
   common-lisp:nil))
(common-lisp:deftype column-descriptive-text () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass column-group common-lisp:nil
                       ((geo-spatial-column-group :initarg
                         :geo-spatial-column-group :type
                         (common-lisp:or geo-spatial-column-group
                                         common-lisp:null)
                         :accessor %column-group-geo-spatial-column-group
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'column-group 'make-column-group))
 (common-lisp:defun make-column-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key geo-spatial-column-group)
   (common-lisp:apply #'common-lisp:make-instance 'column-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'geo-spatial-column-group))
      (common-lisp:list
       (common-lisp:cons "GeoSpatialColumnGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass column-group-column-schema common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %column-group-column-schema-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'column-group-column-schema
                    'make-column-group-column-schema))
 (common-lisp:defun make-column-group-column-schema
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'column-group-column-schema
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          column-group-column-schema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          column-group-column-schema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          column-group-column-schema))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-group-column-schema-list ()
   '(trivial-types:proper-list column-group-column-schema))
 (common-lisp:defun |make-column-group-column-schema-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            column-group-column-schema))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype column-group-list ()
   '(trivial-types:proper-list column-group))
 (common-lisp:defun |make-column-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype column-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass column-group-schema common-lisp:nil
                       ((column-group-column-schema-list :initarg
                         :column-group-column-schema-list :type
                         (common-lisp:or column-group-column-schema-list
                                         common-lisp:null)
                         :accessor
                         %column-group-schema-column-group-column-schema-list
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %column-group-schema-name :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'column-group-schema 'make-column-group-schema))
 (common-lisp:defun make-column-group-schema
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key column-group-column-schema-list name)
   (common-lisp:apply #'common-lisp:make-instance 'column-group-schema
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-group-schema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-group-schema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-group-column-schema-list))
      (common-lisp:list
       (common-lisp:cons "ColumnGroupColumnSchemaList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-group-schema))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-group-schema-list ()
   '(trivial-types:proper-list column-group-schema))
 (common-lisp:defun |make-column-group-schema-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-group-schema))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass column-hierarchy common-lisp:nil
                       ((predefined-hierarchy :initarg :predefined-hierarchy
                         :type
                         (common-lisp:or predefined-hierarchy common-lisp:null)
                         :accessor %column-hierarchy-predefined-hierarchy
                         :initform common-lisp:nil)
                        (date-time-hierarchy :initarg :date-time-hierarchy
                         :type
                         (common-lisp:or date-time-hierarchy common-lisp:null)
                         :accessor %column-hierarchy-date-time-hierarchy
                         :initform common-lisp:nil)
                        (explicit-hierarchy :initarg :explicit-hierarchy :type
                         (common-lisp:or explicit-hierarchy common-lisp:null)
                         :accessor %column-hierarchy-explicit-hierarchy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'column-hierarchy 'make-column-hierarchy))
 (common-lisp:defun make-column-hierarchy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key predefined-hierarchy date-time-hierarchy
                     explicit-hierarchy)
   (common-lisp:apply #'common-lisp:make-instance 'column-hierarchy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-hierarchy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-hierarchy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explicit-hierarchy))
      (common-lisp:list
       (common-lisp:cons "ExplicitHierarchy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-time-hierarchy))
      (common-lisp:list
       (common-lisp:cons "DateTimeHierarchy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predefined-hierarchy))
      (common-lisp:list
       (common-lisp:cons "PredefinedHierarchy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-hierarchy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-hierarchy-list ()
   '(trivial-types:proper-list column-hierarchy))
 (common-lisp:defun |make-column-hierarchy-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-hierarchy))
   aws-sdk/generator/shape::members))
(common-lisp:deftype column-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass column-identifier common-lisp:nil
                       ((column-name :initarg :column-name :type
                         (common-lisp:or column-name common-lisp:null)
                         :accessor %column-identifier-column-name :initform
                         (common-lisp:error ":column-name is required"))
                        (data-set-identifier :initarg :data-set-identifier
                         :type
                         (common-lisp:or data-set-identifier common-lisp:null)
                         :accessor %column-identifier-data-set-identifier
                         :initform
                         (common-lisp:error
                          ":data-set-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'column-identifier 'make-column-identifier))
 (common-lisp:defun make-column-identifier
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key column-name data-set-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'column-identifier
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-identifier))
      (common-lisp:list
       (common-lisp:cons "DataSetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "ColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass column-level-permission-rule common-lisp:nil
                       ((column-names :initarg :column-names :type
                         (common-lisp:or column-name-list common-lisp:null)
                         :accessor %column-level-permission-rule-column-names
                         :initform common-lisp:nil)
                        (principals :initarg :principals :type
                         (common-lisp:or principal-list common-lisp:null)
                         :accessor %column-level-permission-rule-principals
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'column-level-permission-rule
                    'make-column-level-permission-rule))
 (common-lisp:defun make-column-level-permission-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key column-names principals)
   (common-lisp:apply #'common-lisp:make-instance 'column-level-permission-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          column-level-permission-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          column-level-permission-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principals))
      (common-lisp:list
       (common-lisp:cons "Principals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-names))
      (common-lisp:list
       (common-lisp:cons "ColumnNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          column-level-permission-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-level-permission-rule-list ()
   '(trivial-types:proper-list column-level-permission-rule))
 (common-lisp:defun |make-column-level-permission-rule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            column-level-permission-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype column-list () '(trivial-types:proper-list column-name))
 (common-lisp:defun |make-column-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype column-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype column-name-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-column-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype column-role () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass column-schema common-lisp:nil
                       ((geographic-role :initarg :geographic-role :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %column-schema-geographic-role :initform
                         common-lisp:nil)
                        (data-type :initarg :data-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %column-schema-data-type :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %column-schema-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'column-schema 'make-column-schema))
 (common-lisp:defun make-column-schema
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key geographic-role data-type name)
   (common-lisp:apply #'common-lisp:make-instance 'column-schema
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-schema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-schema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geographic-role))
      (common-lisp:list
       (common-lisp:cons "GeographicRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-schema))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-schema-list ()
   '(trivial-types:proper-list column-schema))
 (common-lisp:defun |make-column-schema-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-schema))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass column-sort common-lisp:nil
                       ((aggregation-function :initarg :aggregation-function
                         :type
                         (common-lisp:or aggregation-function common-lisp:null)
                         :accessor %column-sort-aggregation-function :initform
                         common-lisp:nil)
                        (direction :initarg :direction :type
                         (common-lisp:or sort-direction common-lisp:null)
                         :accessor %column-sort-direction :initform
                         (common-lisp:error ":direction is required"))
                        (sort-by :initarg :sort-by :type
                         (common-lisp:or column-identifier common-lisp:null)
                         :accessor %column-sort-sort-by :initform
                         (common-lisp:error ":sort-by is required"))))
 (common-lisp:export (common-lisp:list 'column-sort 'make-column-sort))
 (common-lisp:defun make-column-sort
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aggregation-function direction sort-by)
   (common-lisp:apply #'common-lisp:make-instance 'column-sort
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-sort))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-sort))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'direction))
      (common-lisp:list
       (common-lisp:cons "Direction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-function))
      (common-lisp:list
       (common-lisp:cons "AggregationFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-sort))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass column-tag common-lisp:nil
                       ((column-description :initarg :column-description :type
                         (common-lisp:or column-description common-lisp:null)
                         :accessor %column-tag-column-description :initform
                         common-lisp:nil)
                        (column-geographic-role :initarg
                         :column-geographic-role :type
                         (common-lisp:or geo-spatial-data-role
                                         common-lisp:null)
                         :accessor %column-tag-column-geographic-role :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'column-tag 'make-column-tag))
 (common-lisp:defun make-column-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key column-description
                     column-geographic-role)
   (common-lisp:apply #'common-lisp:make-instance 'column-tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-geographic-role))
      (common-lisp:list
       (common-lisp:cons "ColumnGeographicRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-description))
      (common-lisp:list
       (common-lisp:cons "ColumnDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-tag-list ()
   '(trivial-types:proper-list column-tag))
 (common-lisp:defun |make-column-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype column-tag-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype column-tag-names ()
   '(trivial-types:proper-list column-tag-name))
 (common-lisp:defun |make-column-tag-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-tag-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass column-tooltip-item common-lisp:nil
                       ((aggregation :initarg :aggregation :type
                         (common-lisp:or aggregation-function common-lisp:null)
                         :accessor %column-tooltip-item-aggregation :initform
                         common-lisp:nil)
                        (visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %column-tooltip-item-visibility :initform
                         common-lisp:nil)
                        (label :initarg :label :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %column-tooltip-item-label :initform common-lisp:nil)
                        (column :initarg :column :type
                         (common-lisp:or column-identifier common-lisp:null)
                         :accessor %column-tooltip-item-column :initform
                         (common-lisp:error ":column is required"))))
 (common-lisp:export
  (common-lisp:list 'column-tooltip-item 'make-column-tooltip-item))
 (common-lisp:defun make-column-tooltip-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aggregation visibility label column)
   (common-lisp:apply #'common-lisp:make-instance 'column-tooltip-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-tooltip-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-tooltip-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "Label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation))
      (common-lisp:list
       (common-lisp:cons "Aggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-tooltip-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass combo-chart-aggregated-field-wells common-lisp:nil
                       ((line-values :initarg :line-values :type
                         (common-lisp:or measure-field-list common-lisp:null)
                         :accessor
                         %combo-chart-aggregated-field-wells-line-values
                         :initform common-lisp:nil)
                        (colors :initarg :colors :type
                         (common-lisp:or dimension-field-list common-lisp:null)
                         :accessor %combo-chart-aggregated-field-wells-colors
                         :initform common-lisp:nil)
                        (bar-values :initarg :bar-values :type
                         (common-lisp:or measure-field-list common-lisp:null)
                         :accessor
                         %combo-chart-aggregated-field-wells-bar-values
                         :initform common-lisp:nil)
                        (category :initarg :category :type
                         (common-lisp:or dimension-field-list common-lisp:null)
                         :accessor %combo-chart-aggregated-field-wells-category
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'combo-chart-aggregated-field-wells
                    'make-combo-chart-aggregated-field-wells))
 (common-lisp:defun make-combo-chart-aggregated-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key line-values colors bar-values category)
   (common-lisp:apply #'common-lisp:make-instance
                      'combo-chart-aggregated-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          combo-chart-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          combo-chart-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bar-values))
      (common-lisp:list
       (common-lisp:cons "BarValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'colors))
      (common-lisp:list
       (common-lisp:cons "Colors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-values))
      (common-lisp:list
       (common-lisp:cons "LineValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          combo-chart-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass combo-chart-configuration common-lisp:nil
                       ((visual-palette :initarg :visual-palette :type
                         (common-lisp:or visual-palette common-lisp:null)
                         :accessor %combo-chart-configuration-visual-palette
                         :initform common-lisp:nil)
                        (reference-lines :initarg :reference-lines :type
                         (common-lisp:or reference-line-list common-lisp:null)
                         :accessor %combo-chart-configuration-reference-lines
                         :initform common-lisp:nil)
                        (tooltip :initarg :tooltip :type
                         (common-lisp:or tooltip-options common-lisp:null)
                         :accessor %combo-chart-configuration-tooltip :initform
                         common-lisp:nil)
                        (line-data-labels :initarg :line-data-labels :type
                         (common-lisp:or data-label-options common-lisp:null)
                         :accessor %combo-chart-configuration-line-data-labels
                         :initform common-lisp:nil)
                        (bar-data-labels :initarg :bar-data-labels :type
                         (common-lisp:or data-label-options common-lisp:null)
                         :accessor %combo-chart-configuration-bar-data-labels
                         :initform common-lisp:nil)
                        (legend :initarg :legend :type
                         (common-lisp:or legend-options common-lisp:null)
                         :accessor %combo-chart-configuration-legend :initform
                         common-lisp:nil)
                        (color-label-options :initarg :color-label-options
                         :type
                         (common-lisp:or chart-axis-label-options
                                         common-lisp:null)
                         :accessor
                         %combo-chart-configuration-color-label-options
                         :initform common-lisp:nil)
                        (secondary-yaxis-label-options :initarg
                         :secondary-yaxis-label-options :type
                         (common-lisp:or chart-axis-label-options
                                         common-lisp:null)
                         :accessor
                         %combo-chart-configuration-secondary-yaxis-label-options
                         :initform common-lisp:nil)
                        (secondary-yaxis-display-options :initarg
                         :secondary-yaxis-display-options :type
                         (common-lisp:or axis-display-options common-lisp:null)
                         :accessor
                         %combo-chart-configuration-secondary-yaxis-display-options
                         :initform common-lisp:nil)
                        (primary-yaxis-label-options :initarg
                         :primary-yaxis-label-options :type
                         (common-lisp:or chart-axis-label-options
                                         common-lisp:null)
                         :accessor
                         %combo-chart-configuration-primary-yaxis-label-options
                         :initform common-lisp:nil)
                        (primary-yaxis-display-options :initarg
                         :primary-yaxis-display-options :type
                         (common-lisp:or axis-display-options common-lisp:null)
                         :accessor
                         %combo-chart-configuration-primary-yaxis-display-options
                         :initform common-lisp:nil)
                        (category-label-options :initarg
                         :category-label-options :type
                         (common-lisp:or chart-axis-label-options
                                         common-lisp:null)
                         :accessor
                         %combo-chart-configuration-category-label-options
                         :initform common-lisp:nil)
                        (category-axis :initarg :category-axis :type
                         (common-lisp:or axis-display-options common-lisp:null)
                         :accessor %combo-chart-configuration-category-axis
                         :initform common-lisp:nil)
                        (bars-arrangement :initarg :bars-arrangement :type
                         (common-lisp:or bars-arrangement common-lisp:null)
                         :accessor %combo-chart-configuration-bars-arrangement
                         :initform common-lisp:nil)
                        (sort-configuration :initarg :sort-configuration :type
                         (common-lisp:or combo-chart-sort-configuration
                                         common-lisp:null)
                         :accessor
                         %combo-chart-configuration-sort-configuration
                         :initform common-lisp:nil)
                        (field-wells :initarg :field-wells :type
                         (common-lisp:or combo-chart-field-wells
                                         common-lisp:null)
                         :accessor %combo-chart-configuration-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'combo-chart-configuration
                    'make-combo-chart-configuration))
 (common-lisp:defun make-combo-chart-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visual-palette reference-lines tooltip
                     line-data-labels bar-data-labels legend
                     color-label-options secondary-yaxis-label-options
                     secondary-yaxis-display-options
                     primary-yaxis-label-options primary-yaxis-display-options
                     category-label-options category-axis bars-arrangement
                     sort-configuration field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'combo-chart-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          combo-chart-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          combo-chart-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bars-arrangement))
      (common-lisp:list
       (common-lisp:cons "BarsArrangement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-axis))
      (common-lisp:list
       (common-lisp:cons "CategoryAxis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-label-options))
      (common-lisp:list
       (common-lisp:cons "CategoryLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-yaxis-display-options))
      (common-lisp:list
       (common-lisp:cons "PrimaryYAxisDisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-yaxis-label-options))
      (common-lisp:list
       (common-lisp:cons "PrimaryYAxisLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secondary-yaxis-display-options))
      (common-lisp:list
       (common-lisp:cons "SecondaryYAxisDisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secondary-yaxis-label-options))
      (common-lisp:list
       (common-lisp:cons "SecondaryYAxisLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-label-options))
      (common-lisp:list
       (common-lisp:cons "ColorLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legend))
      (common-lisp:list
       (common-lisp:cons "Legend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bar-data-labels))
      (common-lisp:list
       (common-lisp:cons "BarDataLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-data-labels))
      (common-lisp:list
       (common-lisp:cons "LineDataLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip))
      (common-lisp:list
       (common-lisp:cons "Tooltip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-lines))
      (common-lisp:list
       (common-lisp:cons "ReferenceLines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-palette))
      (common-lisp:list
       (common-lisp:cons "VisualPalette"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          combo-chart-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass combo-chart-field-wells common-lisp:nil
                       ((combo-chart-aggregated-field-wells :initarg
                         :combo-chart-aggregated-field-wells :type
                         (common-lisp:or combo-chart-aggregated-field-wells
                                         common-lisp:null)
                         :accessor
                         %combo-chart-field-wells-combo-chart-aggregated-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'combo-chart-field-wells 'make-combo-chart-field-wells))
 (common-lisp:defun make-combo-chart-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key combo-chart-aggregated-field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'combo-chart-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          combo-chart-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          combo-chart-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'combo-chart-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "ComboChartAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          combo-chart-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass combo-chart-sort-configuration common-lisp:nil
                       ((color-items-limit :initarg :color-items-limit :type
                         (common-lisp:or items-limit-configuration
                                         common-lisp:null)
                         :accessor
                         %combo-chart-sort-configuration-color-items-limit
                         :initform common-lisp:nil)
                        (color-sort :initarg :color-sort :type
                         (common-lisp:or field-sort-options-list
                                         common-lisp:null)
                         :accessor %combo-chart-sort-configuration-color-sort
                         :initform common-lisp:nil)
                        (category-items-limit :initarg :category-items-limit
                         :type
                         (common-lisp:or items-limit-configuration
                                         common-lisp:null)
                         :accessor
                         %combo-chart-sort-configuration-category-items-limit
                         :initform common-lisp:nil)
                        (category-sort :initarg :category-sort :type
                         (common-lisp:or field-sort-options-list
                                         common-lisp:null)
                         :accessor
                         %combo-chart-sort-configuration-category-sort
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'combo-chart-sort-configuration
                    'make-combo-chart-sort-configuration))
 (common-lisp:defun make-combo-chart-sort-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key color-items-limit color-sort
                     category-items-limit category-sort)
   (common-lisp:apply #'common-lisp:make-instance
                      'combo-chart-sort-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          combo-chart-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          combo-chart-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-sort))
      (common-lisp:list
       (common-lisp:cons "CategorySort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-items-limit))
      (common-lisp:list
       (common-lisp:cons "CategoryItemsLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-sort))
      (common-lisp:list
       (common-lisp:cons "ColorSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-items-limit))
      (common-lisp:list
       (common-lisp:cons "ColorItemsLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          combo-chart-sort-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass combo-chart-visual common-lisp:nil
                       ((column-hierarchies :initarg :column-hierarchies :type
                         (common-lisp:or column-hierarchy-list
                                         common-lisp:null)
                         :accessor %combo-chart-visual-column-hierarchies
                         :initform common-lisp:nil)
                        (actions :initarg :actions :type
                         (common-lisp:or visual-custom-action-list
                                         common-lisp:null)
                         :accessor %combo-chart-visual-actions :initform
                         common-lisp:nil)
                        (chart-configuration :initarg :chart-configuration
                         :type
                         (common-lisp:or combo-chart-configuration
                                         common-lisp:null)
                         :accessor %combo-chart-visual-chart-configuration
                         :initform common-lisp:nil)
                        (subtitle :initarg :subtitle :type
                         (common-lisp:or visual-subtitle-label-options
                                         common-lisp:null)
                         :accessor %combo-chart-visual-subtitle :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or visual-title-label-options
                                         common-lisp:null)
                         :accessor %combo-chart-visual-title :initform
                         common-lisp:nil)
                        (visual-id :initarg :visual-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %combo-chart-visual-visual-id :initform
                         (common-lisp:error ":visual-id is required"))))
 (common-lisp:export
  (common-lisp:list 'combo-chart-visual 'make-combo-chart-visual))
 (common-lisp:defun make-combo-chart-visual
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key column-hierarchies actions
                     chart-configuration subtitle title visual-id)
   (common-lisp:apply #'common-lisp:make-instance 'combo-chart-visual
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input combo-chart-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input combo-chart-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-hierarchies))
      (common-lisp:list
       (common-lisp:cons "ColumnHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input combo-chart-visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass comparison-configuration common-lisp:nil
                       ((comparison-format :initarg :comparison-format :type
                         (common-lisp:or comparison-format-configuration
                                         common-lisp:null)
                         :accessor %comparison-configuration-comparison-format
                         :initform common-lisp:nil)
                        (comparison-method :initarg :comparison-method :type
                         (common-lisp:or comparison-method common-lisp:null)
                         :accessor %comparison-configuration-comparison-method
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'comparison-configuration 'make-comparison-configuration))
 (common-lisp:defun make-comparison-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key comparison-format comparison-method)
   (common-lisp:apply #'common-lisp:make-instance 'comparison-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          comparison-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          comparison-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-method))
      (common-lisp:list
       (common-lisp:cons "ComparisonMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-format))
      (common-lisp:list
       (common-lisp:cons "ComparisonFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          comparison-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass comparison-format-configuration common-lisp:nil
                       ((percentage-display-format-configuration :initarg
                         :percentage-display-format-configuration :type
                         (common-lisp:or
                          percentage-display-format-configuration
                          common-lisp:null)
                         :accessor
                         %comparison-format-configuration-percentage-display-format-configuration
                         :initform common-lisp:nil)
                        (number-display-format-configuration :initarg
                         :number-display-format-configuration :type
                         (common-lisp:or number-display-format-configuration
                                         common-lisp:null)
                         :accessor
                         %comparison-format-configuration-number-display-format-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'comparison-format-configuration
                    'make-comparison-format-configuration))
 (common-lisp:defun make-comparison-format-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key percentage-display-format-configuration
                     number-display-format-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'comparison-format-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          comparison-format-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          comparison-format-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-display-format-configuration))
      (common-lisp:list
       (common-lisp:cons "NumberDisplayFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'percentage-display-format-configuration))
      (common-lisp:list
       (common-lisp:cons "PercentageDisplayFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          comparison-format-configuration))
   common-lisp:nil))
(common-lisp:deftype comparison-method () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass computation common-lisp:nil
                       ((forecast :initarg :forecast :type
                         (common-lisp:or forecast-computation common-lisp:null)
                         :accessor %computation-forecast :initform
                         common-lisp:nil)
                        (unique-values :initarg :unique-values :type
                         (common-lisp:or unique-values-computation
                                         common-lisp:null)
                         :accessor %computation-unique-values :initform
                         common-lisp:nil)
                        (growth-rate :initarg :growth-rate :type
                         (common-lisp:or growth-rate-computation
                                         common-lisp:null)
                         :accessor %computation-growth-rate :initform
                         common-lisp:nil)
                        (period-to-date :initarg :period-to-date :type
                         (common-lisp:or period-to-date-computation
                                         common-lisp:null)
                         :accessor %computation-period-to-date :initform
                         common-lisp:nil)
                        (period-over-period :initarg :period-over-period :type
                         (common-lisp:or period-over-period-computation
                                         common-lisp:null)
                         :accessor %computation-period-over-period :initform
                         common-lisp:nil)
                        (metric-comparison :initarg :metric-comparison :type
                         (common-lisp:or metric-comparison-computation
                                         common-lisp:null)
                         :accessor %computation-metric-comparison :initform
                         common-lisp:nil)
                        (maximum-minimum :initarg :maximum-minimum :type
                         (common-lisp:or maximum-minimum-computation
                                         common-lisp:null)
                         :accessor %computation-maximum-minimum :initform
                         common-lisp:nil)
                        (total-aggregation :initarg :total-aggregation :type
                         (common-lisp:or total-aggregation-computation
                                         common-lisp:null)
                         :accessor %computation-total-aggregation :initform
                         common-lisp:nil)
                        (top-bottom-movers :initarg :top-bottom-movers :type
                         (common-lisp:or top-bottom-movers-computation
                                         common-lisp:null)
                         :accessor %computation-top-bottom-movers :initform
                         common-lisp:nil)
                        (top-bottom-ranked :initarg :top-bottom-ranked :type
                         (common-lisp:or top-bottom-ranked-computation
                                         common-lisp:null)
                         :accessor %computation-top-bottom-ranked :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'computation 'make-computation))
 (common-lisp:defun make-computation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key forecast unique-values growth-rate
                     period-to-date period-over-period metric-comparison
                     maximum-minimum total-aggregation top-bottom-movers
                     top-bottom-ranked)
   (common-lisp:apply #'common-lisp:make-instance 'computation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input computation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input computation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'top-bottom-ranked))
      (common-lisp:list
       (common-lisp:cons "TopBottomRanked"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'top-bottom-movers))
      (common-lisp:list
       (common-lisp:cons "TopBottomMovers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-aggregation))
      (common-lisp:list
       (common-lisp:cons "TotalAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-minimum))
      (common-lisp:list
       (common-lisp:cons "MaximumMinimum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-comparison))
      (common-lisp:list
       (common-lisp:cons "MetricComparison"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period-over-period))
      (common-lisp:list
       (common-lisp:cons "PeriodOverPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period-to-date))
      (common-lisp:list
       (common-lisp:cons "PeriodToDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'growth-rate))
      (common-lisp:list
       (common-lisp:cons "GrowthRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unique-values))
      (common-lisp:list
       (common-lisp:cons "UniqueValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast))
      (common-lisp:list
       (common-lisp:cons "Forecast"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input computation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype computation-list ()
   '(trivial-types:proper-list computation))
 (common-lisp:defun |make-computation-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list computation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition concurrent-updating-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-updating-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       concurrent-updating-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'concurrent-updating-exception
                    'concurrent-updating-exception-message
                    'concurrent-updating-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass conditional-formatting-color common-lisp:nil
                       ((gradient :initarg :gradient :type
                         (common-lisp:or conditional-formatting-gradient-color
                                         common-lisp:null)
                         :accessor %conditional-formatting-color-gradient
                         :initform common-lisp:nil)
                        (solid :initarg :solid :type
                         (common-lisp:or conditional-formatting-solid-color
                                         common-lisp:null)
                         :accessor %conditional-formatting-color-solid
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'conditional-formatting-color
                    'make-conditional-formatting-color))
 (common-lisp:defun make-conditional-formatting-color
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key gradient solid)
   (common-lisp:apply #'common-lisp:make-instance 'conditional-formatting-color
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-color))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-color))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solid))
      (common-lisp:list
       (common-lisp:cons "Solid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gradient))
      (common-lisp:list
       (common-lisp:cons "Gradient"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-color))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass conditional-formatting-custom-icon-condition
                       common-lisp:nil
                       ((display-configuration :initarg :display-configuration
                         :type
                         (common-lisp:or
                          conditional-formatting-icon-display-configuration
                          common-lisp:null)
                         :accessor
                         %conditional-formatting-custom-icon-condition-display-configuration
                         :initform common-lisp:nil)
                        (color :initarg :color :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %conditional-formatting-custom-icon-condition-color
                         :initform common-lisp:nil)
                        (icon-options :initarg :icon-options :type
                         (common-lisp:or
                          conditional-formatting-custom-icon-options
                          common-lisp:null)
                         :accessor
                         %conditional-formatting-custom-icon-condition-icon-options
                         :initform
                         (common-lisp:error ":icon-options is required"))
                        (expression :initarg :expression :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         %conditional-formatting-custom-icon-condition-expression
                         :initform
                         (common-lisp:error ":expression is required"))))
 (common-lisp:export
  (common-lisp:list 'conditional-formatting-custom-icon-condition
                    'make-conditional-formatting-custom-icon-condition))
 (common-lisp:defun make-conditional-formatting-custom-icon-condition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key display-configuration color icon-options
                     expression)
   (common-lisp:apply #'common-lisp:make-instance
                      'conditional-formatting-custom-icon-condition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-custom-icon-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-custom-icon-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icon-options))
      (common-lisp:list
       (common-lisp:cons "IconOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color))
      (common-lisp:list
       (common-lisp:cons "Color"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'display-configuration))
      (common-lisp:list
       (common-lisp:cons "DisplayConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-custom-icon-condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass conditional-formatting-custom-icon-options
                       common-lisp:nil
                       ((unicode-icon :initarg :unicode-icon :type
                         (common-lisp:or unicode-icon common-lisp:null)
                         :accessor
                         %conditional-formatting-custom-icon-options-unicode-icon
                         :initform common-lisp:nil)
                        (icon :initarg :icon :type
                         (common-lisp:or icon common-lisp:null) :accessor
                         %conditional-formatting-custom-icon-options-icon
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'conditional-formatting-custom-icon-options
                    'make-conditional-formatting-custom-icon-options))
 (common-lisp:defun make-conditional-formatting-custom-icon-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unicode-icon icon)
   (common-lisp:apply #'common-lisp:make-instance
                      'conditional-formatting-custom-icon-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-custom-icon-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-custom-icon-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icon))
      (common-lisp:list
       (common-lisp:cons "Icon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unicode-icon))
      (common-lisp:list
       (common-lisp:cons "UnicodeIcon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-custom-icon-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass conditional-formatting-gradient-color common-lisp:nil
                       ((color :initarg :color :type
                         (common-lisp:or gradient-color common-lisp:null)
                         :accessor %conditional-formatting-gradient-color-color
                         :initform (common-lisp:error ":color is required"))
                        (expression :initarg :expression :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         %conditional-formatting-gradient-color-expression
                         :initform
                         (common-lisp:error ":expression is required"))))
 (common-lisp:export
  (common-lisp:list 'conditional-formatting-gradient-color
                    'make-conditional-formatting-gradient-color))
 (common-lisp:defun make-conditional-formatting-gradient-color
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key color expression)
   (common-lisp:apply #'common-lisp:make-instance
                      'conditional-formatting-gradient-color
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-gradient-color))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-gradient-color))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color))
      (common-lisp:list
       (common-lisp:cons "Color"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-gradient-color))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass conditional-formatting-icon common-lisp:nil
                       ((custom-condition :initarg :custom-condition :type
                         (common-lisp:or
                          conditional-formatting-custom-icon-condition
                          common-lisp:null)
                         :accessor
                         %conditional-formatting-icon-custom-condition
                         :initform common-lisp:nil)
                        (icon-set :initarg :icon-set :type
                         (common-lisp:or conditional-formatting-icon-set
                                         common-lisp:null)
                         :accessor %conditional-formatting-icon-icon-set
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'conditional-formatting-icon
                    'make-conditional-formatting-icon))
 (common-lisp:defun make-conditional-formatting-icon
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-condition icon-set)
   (common-lisp:apply #'common-lisp:make-instance 'conditional-formatting-icon
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-icon))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-icon))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icon-set))
      (common-lisp:list
       (common-lisp:cons "IconSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-condition))
      (common-lisp:list
       (common-lisp:cons "CustomCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-icon))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass conditional-formatting-icon-display-configuration
                       common-lisp:nil
                       ((icon-display-option :initarg :icon-display-option
                         :type
                         (common-lisp:or
                          conditional-formatting-icon-display-option
                          common-lisp:null)
                         :accessor
                         %conditional-formatting-icon-display-configuration-icon-display-option
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'conditional-formatting-icon-display-configuration
                    'make-conditional-formatting-icon-display-configuration))
 (common-lisp:defun make-conditional-formatting-icon-display-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key icon-display-option)
   (common-lisp:apply #'common-lisp:make-instance
                      'conditional-formatting-icon-display-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-icon-display-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-icon-display-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icon-display-option))
      (common-lisp:list
       (common-lisp:cons "IconDisplayOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-icon-display-configuration))
   common-lisp:nil))
(common-lisp:deftype conditional-formatting-icon-display-option ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass conditional-formatting-icon-set common-lisp:nil
                       ((icon-set-type :initarg :icon-set-type :type
                         (common-lisp:or conditional-formatting-icon-set-type
                                         common-lisp:null)
                         :accessor
                         %conditional-formatting-icon-set-icon-set-type
                         :initform common-lisp:nil)
                        (expression :initarg :expression :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         %conditional-formatting-icon-set-expression :initform
                         (common-lisp:error ":expression is required"))))
 (common-lisp:export
  (common-lisp:list 'conditional-formatting-icon-set
                    'make-conditional-formatting-icon-set))
 (common-lisp:defun make-conditional-formatting-icon-set
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key icon-set-type expression)
   (common-lisp:apply #'common-lisp:make-instance
                      'conditional-formatting-icon-set
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-icon-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-icon-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icon-set-type))
      (common-lisp:list
       (common-lisp:cons "IconSetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-icon-set))
   common-lisp:nil))
(common-lisp:deftype conditional-formatting-icon-set-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass conditional-formatting-solid-color common-lisp:nil
                       ((color :initarg :color :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %conditional-formatting-solid-color-color :initform
                         common-lisp:nil)
                        (expression :initarg :expression :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         %conditional-formatting-solid-color-expression
                         :initform
                         (common-lisp:error ":expression is required"))))
 (common-lisp:export
  (common-lisp:list 'conditional-formatting-solid-color
                    'make-conditional-formatting-solid-color))
 (common-lisp:defun make-conditional-formatting-solid-color
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key color expression)
   (common-lisp:apply #'common-lisp:make-instance
                      'conditional-formatting-solid-color
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-solid-color))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-solid-color))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color))
      (common-lisp:list
       (common-lisp:cons "Color"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conditional-formatting-solid-color))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       conflict-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass contribution-analysis-default common-lisp:nil
                       ((contributor-dimensions :initarg
                         :contributor-dimensions :type
                         (common-lisp:or contributor-dimension-list
                                         common-lisp:null)
                         :accessor
                         %contribution-analysis-default-contributor-dimensions
                         :initform
                         (common-lisp:error
                          ":contributor-dimensions is required"))
                        (measure-field-id :initarg :measure-field-id :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         %contribution-analysis-default-measure-field-id
                         :initform
                         (common-lisp:error ":measure-field-id is required"))))
 (common-lisp:export
  (common-lisp:list 'contribution-analysis-default
                    'make-contribution-analysis-default))
 (common-lisp:defun make-contribution-analysis-default
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key contributor-dimensions measure-field-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'contribution-analysis-default
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          contribution-analysis-default))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          contribution-analysis-default))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'measure-field-id))
      (common-lisp:list
       (common-lisp:cons "MeasureFieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contributor-dimensions))
      (common-lisp:list
       (common-lisp:cons "ContributorDimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          contribution-analysis-default))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype contribution-analysis-default-list ()
   '(trivial-types:proper-list contribution-analysis-default))
 (common-lisp:defun |make-contribution-analysis-default-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            contribution-analysis-default))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype contributor-dimension-list ()
   '(trivial-types:proper-list column-identifier))
 (common-lisp:defun |make-contributor-dimension-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype copy-source-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-account-customization-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-account-customization-request-tags :initform
                         common-lisp:nil)
                        (account-customization :initarg :account-customization
                         :type
                         (common-lisp:or account-customization
                                         common-lisp:null)
                         :accessor
                         %create-account-customization-request-account-customization
                         :initform
                         (common-lisp:error
                          ":account-customization is required"))
                        (namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %create-account-customization-request-namespace
                         :initform common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %create-account-customization-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-account-customization-request
                    'make-create-account-customization-request))
 (common-lisp:defun make-create-account-customization-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags account-customization namespace
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-account-customization-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-account-customization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-account-customization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-customization))
      (common-lisp:list
       (common-lisp:cons "AccountCustomization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-account-customization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-account-customization-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor
                         %create-account-customization-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-account-customization-response-request-id
                         :initform common-lisp:nil)
                        (account-customization :initarg :account-customization
                         :type
                         (common-lisp:or account-customization
                                         common-lisp:null)
                         :accessor
                         %create-account-customization-response-account-customization
                         :initform common-lisp:nil)
                        (namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %create-account-customization-response-namespace
                         :initform common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %create-account-customization-response-aws-account-id
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-account-customization-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-account-customization-response
                    'make-create-account-customization-response))
 (common-lisp:defun make-create-account-customization-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id account-customization
                     namespace aws-account-id arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-account-customization-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-account-customization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-account-customization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "AwsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-customization))
      (common-lisp:list
       (common-lisp:cons "AccountCustomization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-account-customization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-account-subscription-request common-lisp:nil
                       ((contact-number :initarg :contact-number :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-account-subscription-request-contact-number
                         :initform common-lisp:nil)
                        (email-address :initarg :email-address :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-account-subscription-request-email-address
                         :initform common-lisp:nil)
                        (last-name :initarg :last-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-account-subscription-request-last-name
                         :initform common-lisp:nil)
                        (first-name :initarg :first-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-account-subscription-request-first-name
                         :initform common-lisp:nil)
                        (reader-group :initarg :reader-group :type
                         (common-lisp:or groups-list common-lisp:null)
                         :accessor
                         %create-account-subscription-request-reader-group
                         :initform common-lisp:nil)
                        (author-group :initarg :author-group :type
                         (common-lisp:or groups-list common-lisp:null)
                         :accessor
                         %create-account-subscription-request-author-group
                         :initform common-lisp:nil)
                        (admin-group :initarg :admin-group :type
                         (common-lisp:or groups-list common-lisp:null)
                         :accessor
                         %create-account-subscription-request-admin-group
                         :initform common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-account-subscription-request-directory-id
                         :initform common-lisp:nil)
                        (realm :initarg :realm :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-account-subscription-request-realm :initform
                         common-lisp:nil)
                        (active-directory-name :initarg :active-directory-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %create-account-subscription-request-active-directory-name
                         :initform common-lisp:nil)
                        (notification-email :initarg :notification-email :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-account-subscription-request-notification-email
                         :initform
                         (common-lisp:error ":notification-email is required"))
                        (account-name :initarg :account-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-account-subscription-request-account-name
                         :initform
                         (common-lisp:error ":account-name is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %create-account-subscription-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))
                        (authentication-method :initarg :authentication-method
                         :type
                         (common-lisp:or authentication-method-option
                                         common-lisp:null)
                         :accessor
                         %create-account-subscription-request-authentication-method
                         :initform
                         (common-lisp:error
                          ":authentication-method is required"))
                        (edition :initarg :edition :type
                         (common-lisp:or edition common-lisp:null) :accessor
                         %create-account-subscription-request-edition :initform
                         (common-lisp:error ":edition is required"))))
 (common-lisp:export
  (common-lisp:list 'create-account-subscription-request
                    'make-create-account-subscription-request))
 (common-lisp:defun make-create-account-subscription-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key contact-number email-address last-name
                     first-name reader-group author-group admin-group
                     directory-id realm active-directory-name
                     notification-email account-name aws-account-id
                     authentication-method edition)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-account-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-account-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-account-subscription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edition))
      (common-lisp:list
       (common-lisp:cons "Edition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-method))
      (common-lisp:list
       (common-lisp:cons "AuthenticationMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-name))
      (common-lisp:list
       (common-lisp:cons "AccountName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-email))
      (common-lisp:list
       (common-lisp:cons "NotificationEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-directory-name))
      (common-lisp:list
       (common-lisp:cons "ActiveDirectoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'realm))
      (common-lisp:list
       (common-lisp:cons "Realm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-group))
      (common-lisp:list
       (common-lisp:cons "AdminGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'author-group))
      (common-lisp:list
       (common-lisp:cons "AuthorGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reader-group))
      (common-lisp:list
       (common-lisp:cons "ReaderGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "FirstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "LastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "EmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-number))
      (common-lisp:list
       (common-lisp:cons "ContactNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-account-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-account-subscription-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-account-subscription-response-request-id
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %create-account-subscription-response-status
                         :initform common-lisp:nil)
                        (signup-response :initarg :signup-response :type
                         (common-lisp:or signup-response common-lisp:null)
                         :accessor
                         %create-account-subscription-response-signup-response
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-account-subscription-response
                    'make-create-account-subscription-response))
 (common-lisp:defun make-create-account-subscription-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status signup-response)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-account-subscription-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-account-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-account-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signup-response))
      (common-lisp:list
       (common-lisp:cons "SignupResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-account-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-analysis-request common-lisp:nil
                       ((definition :initarg :definition :type
                         (common-lisp:or analysis-definition common-lisp:null)
                         :accessor %create-analysis-request-definition
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-analysis-request-tags :initform
                         common-lisp:nil)
                        (theme-arn :initarg :theme-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-analysis-request-theme-arn :initform
                         common-lisp:nil)
                        (source-entity :initarg :source-entity :type
                         (common-lisp:or analysis-source-entity
                                         common-lisp:null)
                         :accessor %create-analysis-request-source-entity
                         :initform common-lisp:nil)
                        (permissions :initarg :permissions :type
                         (common-lisp:or resource-permission-list
                                         common-lisp:null)
                         :accessor %create-analysis-request-permissions
                         :initform common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or parameters common-lisp:null) :accessor
                         %create-analysis-request-parameters :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or analysis-name common-lisp:null)
                         :accessor %create-analysis-request-name :initform
                         (common-lisp:error ":name is required"))
                        (analysis-id :initarg :analysis-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %create-analysis-request-analysis-id
                         :initform
                         (common-lisp:error ":analysis-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %create-analysis-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-analysis-request 'make-create-analysis-request))
 (common-lisp:defun make-create-analysis-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key definition tags theme-arn source-entity
                     permissions parameters name analysis-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-analysis-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-analysis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-analysis-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-entity))
      (common-lisp:list
       (common-lisp:cons "SourceEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-arn))
      (common-lisp:list
       (common-lisp:cons "ThemeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-analysis-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-analysis-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-analysis-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %create-analysis-response-status :initform
                         common-lisp:nil)
                        (creation-status :initarg :creation-status :type
                         (common-lisp:or resource-status common-lisp:null)
                         :accessor %create-analysis-response-creation-status
                         :initform common-lisp:nil)
                        (analysis-id :initarg :analysis-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %create-analysis-response-analysis-id
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-analysis-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-analysis-response 'make-create-analysis-response))
 (common-lisp:defun make-create-analysis-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status creation-status
                     analysis-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-analysis-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-analysis-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-analysis-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-id))
      (common-lisp:list
       (common-lisp:cons "AnalysisId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-status))
      (common-lisp:list
       (common-lisp:cons "CreationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-analysis-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-columns-operation common-lisp:nil
                       ((columns :initarg :columns :type
                         (common-lisp:or calculated-column-list
                                         common-lisp:null)
                         :accessor %create-columns-operation-columns :initform
                         (common-lisp:error ":columns is required"))))
 (common-lisp:export
  (common-lisp:list 'create-columns-operation 'make-create-columns-operation))
 (common-lisp:defun make-create-columns-operation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key columns)
   (common-lisp:apply #'common-lisp:make-instance 'create-columns-operation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-columns-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-columns-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "Columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-columns-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dashboard-request common-lisp:nil
                       ((definition :initarg :definition :type
                         (common-lisp:or dashboard-version-definition
                                         common-lisp:null)
                         :accessor %create-dashboard-request-definition
                         :initform common-lisp:nil)
                        (theme-arn :initarg :theme-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-dashboard-request-theme-arn :initform
                         common-lisp:nil)
                        (dashboard-publish-options :initarg
                         :dashboard-publish-options :type
                         (common-lisp:or dashboard-publish-options
                                         common-lisp:null)
                         :accessor
                         %create-dashboard-request-dashboard-publish-options
                         :initform common-lisp:nil)
                        (version-description :initarg :version-description
                         :type
                         (common-lisp:or version-description common-lisp:null)
                         :accessor
                         %create-dashboard-request-version-description
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-dashboard-request-tags :initform
                         common-lisp:nil)
                        (source-entity :initarg :source-entity :type
                         (common-lisp:or dashboard-source-entity
                                         common-lisp:null)
                         :accessor %create-dashboard-request-source-entity
                         :initform common-lisp:nil)
                        (permissions :initarg :permissions :type
                         (common-lisp:or resource-permission-list
                                         common-lisp:null)
                         :accessor %create-dashboard-request-permissions
                         :initform common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or parameters common-lisp:null) :accessor
                         %create-dashboard-request-parameters :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or dashboard-name common-lisp:null)
                         :accessor %create-dashboard-request-name :initform
                         (common-lisp:error ":name is required"))
                        (dashboard-id :initarg :dashboard-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %create-dashboard-request-dashboard-id
                         :initform
                         (common-lisp:error ":dashboard-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %create-dashboard-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-dashboard-request 'make-create-dashboard-request))
 (common-lisp:defun make-create-dashboard-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key definition theme-arn
                     dashboard-publish-options version-description tags
                     source-entity permissions parameters name dashboard-id
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-dashboard-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dashboard-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dashboard-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-entity))
      (common-lisp:list
       (common-lisp:cons "SourceEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-description))
      (common-lisp:list
       (common-lisp:cons "VersionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dashboard-publish-options))
      (common-lisp:list
       (common-lisp:cons "DashboardPublishOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-arn))
      (common-lisp:list
       (common-lisp:cons "ThemeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dashboard-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dashboard-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-dashboard-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %create-dashboard-response-status :initform
                         common-lisp:nil)
                        (creation-status :initarg :creation-status :type
                         (common-lisp:or resource-status common-lisp:null)
                         :accessor %create-dashboard-response-creation-status
                         :initform common-lisp:nil)
                        (dashboard-id :initarg :dashboard-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %create-dashboard-response-dashboard-id
                         :initform common-lisp:nil)
                        (version-arn :initarg :version-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-dashboard-response-version-arn :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-dashboard-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-dashboard-response
                    'make-create-dashboard-response))
 (common-lisp:defun make-create-dashboard-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status creation-status
                     dashboard-id version-arn arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-dashboard-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dashboard-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dashboard-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-arn))
      (common-lisp:list
       (common-lisp:cons "VersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-id))
      (common-lisp:list
       (common-lisp:cons "DashboardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-status))
      (common-lisp:list
       (common-lisp:cons "CreationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dashboard-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-set-request common-lisp:nil
                       ((data-set-usage-configuration :initarg
                         :data-set-usage-configuration :type
                         (common-lisp:or data-set-usage-configuration
                                         common-lisp:null)
                         :accessor
                         %create-data-set-request-data-set-usage-configuration
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-data-set-request-tags :initform
                         common-lisp:nil)
                        (column-level-permission-rules :initarg
                         :column-level-permission-rules :type
                         (common-lisp:or column-level-permission-rule-list
                                         common-lisp:null)
                         :accessor
                         %create-data-set-request-column-level-permission-rules
                         :initform common-lisp:nil)
                        (row-level-permission-tag-configuration :initarg
                         :row-level-permission-tag-configuration :type
                         (common-lisp:or row-level-permission-tag-configuration
                                         common-lisp:null)
                         :accessor
                         %create-data-set-request-row-level-permission-tag-configuration
                         :initform common-lisp:nil)
                        (row-level-permission-data-set :initarg
                         :row-level-permission-data-set :type
                         (common-lisp:or row-level-permission-data-set
                                         common-lisp:null)
                         :accessor
                         %create-data-set-request-row-level-permission-data-set
                         :initform common-lisp:nil)
                        (permissions :initarg :permissions :type
                         (common-lisp:or resource-permission-list
                                         common-lisp:null)
                         :accessor %create-data-set-request-permissions
                         :initform common-lisp:nil)
                        (field-folders :initarg :field-folders :type
                         (common-lisp:or field-folder-map common-lisp:null)
                         :accessor %create-data-set-request-field-folders
                         :initform common-lisp:nil)
                        (column-groups :initarg :column-groups :type
                         (common-lisp:or column-group-list common-lisp:null)
                         :accessor %create-data-set-request-column-groups
                         :initform common-lisp:nil)
                        (import-mode :initarg :import-mode :type
                         (common-lisp:or data-set-import-mode common-lisp:null)
                         :accessor %create-data-set-request-import-mode
                         :initform
                         (common-lisp:error ":import-mode is required"))
                        (logical-table-map :initarg :logical-table-map :type
                         (common-lisp:or logical-table-map common-lisp:null)
                         :accessor %create-data-set-request-logical-table-map
                         :initform common-lisp:nil)
                        (physical-table-map :initarg :physical-table-map :type
                         (common-lisp:or physical-table-map common-lisp:null)
                         :accessor %create-data-set-request-physical-table-map
                         :initform
                         (common-lisp:error ":physical-table-map is required"))
                        (name :initarg :name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %create-data-set-request-name :initform
                         (common-lisp:error ":name is required"))
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %create-data-set-request-data-set-id
                         :initform
                         (common-lisp:error ":data-set-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %create-data-set-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-data-set-request 'make-create-data-set-request))
 (common-lisp:defun make-create-data-set-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-set-usage-configuration tags
                     column-level-permission-rules
                     row-level-permission-tag-configuration
                     row-level-permission-data-set permissions field-folders
                     column-groups import-mode logical-table-map
                     physical-table-map name data-set-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-data-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'physical-table-map))
      (common-lisp:list
       (common-lisp:cons "PhysicalTableMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-table-map))
      (common-lisp:list
       (common-lisp:cons "LogicalTableMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-mode))
      (common-lisp:list
       (common-lisp:cons "ImportMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-groups))
      (common-lisp:list
       (common-lisp:cons "ColumnGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-folders))
      (common-lisp:list
       (common-lisp:cons "FieldFolders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'row-level-permission-data-set))
      (common-lisp:list
       (common-lisp:cons "RowLevelPermissionDataSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'row-level-permission-tag-configuration))
      (common-lisp:list
       (common-lisp:cons "RowLevelPermissionTagConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-level-permission-rules))
      (common-lisp:list
       (common-lisp:cons "ColumnLevelPermissionRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-set-usage-configuration))
      (common-lisp:list
       (common-lisp:cons "DataSetUsageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-set-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %create-data-set-response-status :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-data-set-response-request-id :initform
                         common-lisp:nil)
                        (ingestion-id :initarg :ingestion-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %create-data-set-response-ingestion-id
                         :initform common-lisp:nil)
                        (ingestion-arn :initarg :ingestion-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-data-set-response-ingestion-arn :initform
                         common-lisp:nil)
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %create-data-set-response-data-set-id
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-data-set-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-data-set-response 'make-create-data-set-response))
 (common-lisp:defun make-create-data-set-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id ingestion-id
                     ingestion-arn data-set-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-data-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-arn))
      (common-lisp:list
       (common-lisp:cons "IngestionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-id))
      (common-lisp:list
       (common-lisp:cons "IngestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-source-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-data-source-request-tags :initform
                         common-lisp:nil)
                        (ssl-properties :initarg :ssl-properties :type
                         (common-lisp:or ssl-properties common-lisp:null)
                         :accessor %create-data-source-request-ssl-properties
                         :initform common-lisp:nil)
                        (vpc-connection-properties :initarg
                         :vpc-connection-properties :type
                         (common-lisp:or vpc-connection-properties
                                         common-lisp:null)
                         :accessor
                         %create-data-source-request-vpc-connection-properties
                         :initform common-lisp:nil)
                        (permissions :initarg :permissions :type
                         (common-lisp:or resource-permission-list
                                         common-lisp:null)
                         :accessor %create-data-source-request-permissions
                         :initform common-lisp:nil)
                        (credentials :initarg :credentials :type
                         (common-lisp:or data-source-credentials
                                         common-lisp:null)
                         :accessor %create-data-source-request-credentials
                         :initform common-lisp:nil)
                        (data-source-parameters :initarg
                         :data-source-parameters :type
                         (common-lisp:or data-source-parameters
                                         common-lisp:null)
                         :accessor
                         %create-data-source-request-data-source-parameters
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or data-source-type common-lisp:null)
                         :accessor %create-data-source-request-type :initform
                         (common-lisp:error ":type is required"))
                        (name :initarg :name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %create-data-source-request-name :initform
                         (common-lisp:error ":name is required"))
                        (data-source-id :initarg :data-source-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %create-data-source-request-data-source-id
                         :initform
                         (common-lisp:error ":data-source-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %create-data-source-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-data-source-request
                    'make-create-data-source-request))
 (common-lisp:defun make-create-data-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags ssl-properties
                     vpc-connection-properties permissions credentials
                     data-source-parameters type name data-source-id
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-data-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-parameters))
      (common-lisp:list
       (common-lisp:cons "DataSourceParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-connection-properties))
      (common-lisp:list
       (common-lisp:cons "VpcConnectionProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-properties))
      (common-lisp:list
       (common-lisp:cons "SslProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-source-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %create-data-source-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-data-source-response-request-id :initform
                         common-lisp:nil)
                        (creation-status :initarg :creation-status :type
                         (common-lisp:or resource-status common-lisp:null)
                         :accessor %create-data-source-response-creation-status
                         :initform common-lisp:nil)
                        (data-source-id :initarg :data-source-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %create-data-source-response-data-source-id
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-data-source-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-data-source-response
                    'make-create-data-source-response))
 (common-lisp:defun make-create-data-source-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id creation-status
                     data-source-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-data-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-status))
      (common-lisp:list
       (common-lisp:cons "CreationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-folder-membership-request common-lisp:nil
                       ((member-type :initarg :member-type :type
                         (common-lisp:or member-type common-lisp:null)
                         :accessor
                         %create-folder-membership-request-member-type
                         :initform
                         (common-lisp:error ":member-type is required"))
                        (member-id :initarg :member-id :type
                         (common-lisp:or restrictive-resource-id
                                         common-lisp:null)
                         :accessor %create-folder-membership-request-member-id
                         :initform
                         (common-lisp:error ":member-id is required"))
                        (folder-id :initarg :folder-id :type
                         (common-lisp:or restrictive-resource-id
                                         common-lisp:null)
                         :accessor %create-folder-membership-request-folder-id
                         :initform
                         (common-lisp:error ":folder-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %create-folder-membership-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-folder-membership-request
                    'make-create-folder-membership-request))
 (common-lisp:defun make-create-folder-membership-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key member-type member-id folder-id
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-folder-membership-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-membership-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-membership-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-membership-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-folder-membership-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-folder-membership-response-request-id
                         :initform common-lisp:nil)
                        (folder-member :initarg :folder-member :type
                         (common-lisp:or folder-member common-lisp:null)
                         :accessor
                         %create-folder-membership-response-folder-member
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %create-folder-membership-response-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-folder-membership-response
                    'make-create-folder-membership-response))
 (common-lisp:defun make-create-folder-membership-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id folder-member status)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-folder-membership-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-membership-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-membership-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-member))
      (common-lisp:list
       (common-lisp:cons "FolderMember"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-membership-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-folder-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-folder-request-tags :initform common-lisp:nil)
                        (permissions :initarg :permissions :type
                         (common-lisp:or resource-permission-list
                                         common-lisp:null)
                         :accessor %create-folder-request-permissions :initform
                         common-lisp:nil)
                        (parent-folder-arn :initarg :parent-folder-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-folder-request-parent-folder-arn :initform
                         common-lisp:nil)
                        (folder-type :initarg :folder-type :type
                         (common-lisp:or folder-type common-lisp:null)
                         :accessor %create-folder-request-folder-type :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or folder-name common-lisp:null)
                         :accessor %create-folder-request-name :initform
                         common-lisp:nil)
                        (folder-id :initarg :folder-id :type
                         (common-lisp:or restrictive-resource-id
                                         common-lisp:null)
                         :accessor %create-folder-request-folder-id :initform
                         (common-lisp:error ":folder-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %create-folder-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-folder-request 'make-create-folder-request))
 (common-lisp:defun make-create-folder-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags permissions parent-folder-arn
                     folder-type name folder-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-folder-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-type))
      (common-lisp:list
       (common-lisp:cons "FolderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-folder-arn))
      (common-lisp:list
       (common-lisp:cons "ParentFolderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-folder-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-folder-response-request-id :initform
                         common-lisp:nil)
                        (folder-id :initarg :folder-id :type
                         (common-lisp:or restrictive-resource-id
                                         common-lisp:null)
                         :accessor %create-folder-response-folder-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-folder-response-arn :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %create-folder-response-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-folder-response 'make-create-folder-response))
 (common-lisp:defun make-create-folder-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id folder-id arn status)
   (common-lisp:apply #'common-lisp:make-instance 'create-folder-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-id))
      (common-lisp:list
       (common-lisp:cons "FolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-group-membership-request common-lisp:nil
                       ((namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %create-group-membership-request-namespace :initform
                         (common-lisp:error ":namespace is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %create-group-membership-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))
                        (group-name :initarg :group-name :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         %create-group-membership-request-group-name :initform
                         (common-lisp:error ":group-name is required"))
                        (member-name :initarg :member-name :type
                         (common-lisp:or group-member-name common-lisp:null)
                         :accessor %create-group-membership-request-member-name
                         :initform
                         (common-lisp:error ":member-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-group-membership-request
                    'make-create-group-membership-request))
 (common-lisp:defun make-create-group-membership-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key namespace aws-account-id group-name
                     member-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-group-membership-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-group-membership-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-group-membership-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-group-membership-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-group-membership-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %create-group-membership-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-group-membership-response-request-id :initform
                         common-lisp:nil)
                        (group-member :initarg :group-member :type
                         (common-lisp:or group-member common-lisp:null)
                         :accessor
                         %create-group-membership-response-group-member
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-group-membership-response
                    'make-create-group-membership-response))
 (common-lisp:defun make-create-group-membership-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id group-member)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-group-membership-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-group-membership-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-group-membership-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-member))
      (common-lisp:list
       (common-lisp:cons "GroupMember"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-group-membership-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-group-request common-lisp:nil
                       ((namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %create-group-request-namespace :initform
                         (common-lisp:error ":namespace is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %create-group-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))
                        (description :initarg :description :type
                         (common-lisp:or group-description common-lisp:null)
                         :accessor %create-group-request-description :initform
                         common-lisp:nil)
                        (group-name :initarg :group-name :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         %create-group-request-group-name :initform
                         (common-lisp:error ":group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-group-request 'make-create-group-request))
 (common-lisp:defun make-create-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key namespace aws-account-id description
                     group-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-group-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %create-group-response-status :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-group-response-request-id :initform
                         common-lisp:nil)
                        (group :initarg :group :type
                         (common-lisp:or group common-lisp:null) :accessor
                         %create-group-response-group :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-group-response 'make-create-group-response))
 (common-lisp:defun make-create-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id group)
   (common-lisp:apply #'common-lisp:make-instance 'create-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "Group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-iampolicy-assignment-request common-lisp:nil
                       ((namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %create-iampolicy-assignment-request-namespace
                         :initform
                         (common-lisp:error ":namespace is required"))
                        (identities :initarg :identities :type
                         (common-lisp:or identity-map common-lisp:null)
                         :accessor
                         %create-iampolicy-assignment-request-identities
                         :initform common-lisp:nil)
                        (policy-arn :initarg :policy-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-iampolicy-assignment-request-policy-arn
                         :initform common-lisp:nil)
                        (assignment-status :initarg :assignment-status :type
                         (common-lisp:or assignment-status common-lisp:null)
                         :accessor
                         %create-iampolicy-assignment-request-assignment-status
                         :initform
                         (common-lisp:error ":assignment-status is required"))
                        (assignment-name :initarg :assignment-name :type
                         (common-lisp:or iampolicy-assignment-name
                                         common-lisp:null)
                         :accessor
                         %create-iampolicy-assignment-request-assignment-name
                         :initform
                         (common-lisp:error ":assignment-name is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %create-iampolicy-assignment-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-iampolicy-assignment-request
                    'make-create-iampolicy-assignment-request))
 (common-lisp:defun make-create-iampolicy-assignment-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key namespace identities policy-arn
                     assignment-status assignment-name aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-iampolicy-assignment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-iampolicy-assignment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-iampolicy-assignment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-name))
      (common-lisp:list
       (common-lisp:cons "AssignmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-status))
      (common-lisp:list
       (common-lisp:cons "AssignmentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identities))
      (common-lisp:list
       (common-lisp:cons "Identities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-iampolicy-assignment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-iampolicy-assignment-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %create-iampolicy-assignment-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-iampolicy-assignment-response-request-id
                         :initform common-lisp:nil)
                        (identities :initarg :identities :type
                         (common-lisp:or identity-map common-lisp:null)
                         :accessor
                         %create-iampolicy-assignment-response-identities
                         :initform common-lisp:nil)
                        (policy-arn :initarg :policy-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-iampolicy-assignment-response-policy-arn
                         :initform common-lisp:nil)
                        (assignment-status :initarg :assignment-status :type
                         (common-lisp:or assignment-status common-lisp:null)
                         :accessor
                         %create-iampolicy-assignment-response-assignment-status
                         :initform common-lisp:nil)
                        (assignment-id :initarg :assignment-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-iampolicy-assignment-response-assignment-id
                         :initform common-lisp:nil)
                        (assignment-name :initarg :assignment-name :type
                         (common-lisp:or iampolicy-assignment-name
                                         common-lisp:null)
                         :accessor
                         %create-iampolicy-assignment-response-assignment-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-iampolicy-assignment-response
                    'make-create-iampolicy-assignment-response))
 (common-lisp:defun make-create-iampolicy-assignment-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id identities policy-arn
                     assignment-status assignment-id assignment-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-iampolicy-assignment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-iampolicy-assignment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-iampolicy-assignment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-name))
      (common-lisp:list
       (common-lisp:cons "AssignmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-id))
      (common-lisp:list
       (common-lisp:cons "AssignmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-status))
      (common-lisp:list
       (common-lisp:cons "AssignmentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identities))
      (common-lisp:list
       (common-lisp:cons "Identities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-iampolicy-assignment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-ingestion-request common-lisp:nil
                       ((ingestion-type :initarg :ingestion-type :type
                         (common-lisp:or ingestion-type common-lisp:null)
                         :accessor %create-ingestion-request-ingestion-type
                         :initform common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %create-ingestion-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))
                        (ingestion-id :initarg :ingestion-id :type
                         (common-lisp:or ingestion-id common-lisp:null)
                         :accessor %create-ingestion-request-ingestion-id
                         :initform
                         (common-lisp:error ":ingestion-id is required"))
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-ingestion-request-data-set-id :initform
                         (common-lisp:error ":data-set-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-ingestion-request 'make-create-ingestion-request))
 (common-lisp:defun make-create-ingestion-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ingestion-type aws-account-id
                     ingestion-id data-set-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-ingestion-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-ingestion-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-ingestion-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-type))
      (common-lisp:list
       (common-lisp:cons "IngestionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-ingestion-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-ingestion-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %create-ingestion-response-status :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-ingestion-response-request-id :initform
                         common-lisp:nil)
                        (ingestion-status :initarg :ingestion-status :type
                         (common-lisp:or ingestion-status common-lisp:null)
                         :accessor %create-ingestion-response-ingestion-status
                         :initform common-lisp:nil)
                        (ingestion-id :initarg :ingestion-id :type
                         (common-lisp:or ingestion-id common-lisp:null)
                         :accessor %create-ingestion-response-ingestion-id
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-ingestion-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-ingestion-response
                    'make-create-ingestion-response))
 (common-lisp:defun make-create-ingestion-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id ingestion-status
                     ingestion-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-ingestion-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-ingestion-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-ingestion-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-id))
      (common-lisp:list
       (common-lisp:cons "IngestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-status))
      (common-lisp:list
       (common-lisp:cons "IngestionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-ingestion-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-namespace-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-namespace-request-tags :initform
                         common-lisp:nil)
                        (identity-store :initarg :identity-store :type
                         (common-lisp:or identity-store common-lisp:null)
                         :accessor %create-namespace-request-identity-store
                         :initform
                         (common-lisp:error ":identity-store is required"))
                        (namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %create-namespace-request-namespace :initform
                         (common-lisp:error ":namespace is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %create-namespace-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-namespace-request 'make-create-namespace-request))
 (common-lisp:defun make-create-namespace-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags identity-store namespace
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-namespace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-namespace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-namespace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store))
      (common-lisp:list
       (common-lisp:cons "IdentityStore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-namespace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-namespace-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %create-namespace-response-status :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-namespace-response-request-id :initform
                         common-lisp:nil)
                        (identity-store :initarg :identity-store :type
                         (common-lisp:or identity-store common-lisp:null)
                         :accessor %create-namespace-response-identity-store
                         :initform common-lisp:nil)
                        (creation-status :initarg :creation-status :type
                         (common-lisp:or namespace-status common-lisp:null)
                         :accessor %create-namespace-response-creation-status
                         :initform common-lisp:nil)
                        (capacity-region :initarg :capacity-region :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-namespace-response-capacity-region :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %create-namespace-response-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-namespace-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-namespace-response
                    'make-create-namespace-response))
 (common-lisp:defun make-create-namespace-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id identity-store
                     creation-status capacity-region name arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-namespace-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-namespace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-namespace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-region))
      (common-lisp:list
       (common-lisp:cons "CapacityRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-status))
      (common-lisp:list
       (common-lisp:cons "CreationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store))
      (common-lisp:list
       (common-lisp:cons "IdentityStore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-namespace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-refresh-schedule-request common-lisp:nil
                       ((schedule :initarg :schedule :type
                         (common-lisp:or refresh-schedule common-lisp:null)
                         :accessor %create-refresh-schedule-request-schedule
                         :initform (common-lisp:error ":schedule is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %create-refresh-schedule-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %create-refresh-schedule-request-data-set-id
                         :initform
                         (common-lisp:error ":data-set-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-refresh-schedule-request
                    'make-create-refresh-schedule-request))
 (common-lisp:defun make-create-refresh-schedule-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key schedule aws-account-id data-set-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-refresh-schedule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-refresh-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-refresh-schedule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-refresh-schedule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-refresh-schedule-response common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-refresh-schedule-response-arn :initform
                         common-lisp:nil)
                        (schedule-id :initarg :schedule-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-refresh-schedule-response-schedule-id
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-refresh-schedule-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %create-refresh-schedule-response-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-refresh-schedule-response
                    'make-create-refresh-schedule-response))
 (common-lisp:defun make-create-refresh-schedule-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn schedule-id request-id status)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-refresh-schedule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-refresh-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-refresh-schedule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-id))
      (common-lisp:list
       (common-lisp:cons "ScheduleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-refresh-schedule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-template-alias-request common-lisp:nil
                       ((template-version-number :initarg
                         :template-version-number :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor
                         %create-template-alias-request-template-version-number
                         :initform
                         (common-lisp:error
                          ":template-version-number is required"))
                        (alias-name :initarg :alias-name :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %create-template-alias-request-alias-name :initform
                         (common-lisp:error ":alias-name is required"))
                        (template-id :initarg :template-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %create-template-alias-request-template-id
                         :initform
                         (common-lisp:error ":template-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %create-template-alias-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-template-alias-request
                    'make-create-template-alias-request))
 (common-lisp:defun make-create-template-alias-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key template-version-number alias-name
                     template-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-template-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-template-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-template-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-version-number))
      (common-lisp:list
       (common-lisp:cons "TemplateVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-template-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-template-alias-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-template-alias-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %create-template-alias-response-status
                         :initform common-lisp:nil)
                        (template-alias :initarg :template-alias :type
                         (common-lisp:or template-alias common-lisp:null)
                         :accessor
                         %create-template-alias-response-template-alias
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-template-alias-response
                    'make-create-template-alias-response))
 (common-lisp:defun make-create-template-alias-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status template-alias)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-template-alias-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-template-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-template-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-alias))
      (common-lisp:list
       (common-lisp:cons "TemplateAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-template-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-template-request common-lisp:nil
                       ((definition :initarg :definition :type
                         (common-lisp:or template-version-definition
                                         common-lisp:null)
                         :accessor %create-template-request-definition
                         :initform common-lisp:nil)
                        (version-description :initarg :version-description
                         :type
                         (common-lisp:or version-description common-lisp:null)
                         :accessor %create-template-request-version-description
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-template-request-tags :initform
                         common-lisp:nil)
                        (source-entity :initarg :source-entity :type
                         (common-lisp:or template-source-entity
                                         common-lisp:null)
                         :accessor %create-template-request-source-entity
                         :initform common-lisp:nil)
                        (permissions :initarg :permissions :type
                         (common-lisp:or resource-permission-list
                                         common-lisp:null)
                         :accessor %create-template-request-permissions
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor %create-template-request-name :initform
                         common-lisp:nil)
                        (template-id :initarg :template-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %create-template-request-template-id
                         :initform
                         (common-lisp:error ":template-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %create-template-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-template-request 'make-create-template-request))
 (common-lisp:defun make-create-template-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key definition version-description tags
                     source-entity permissions name template-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-entity))
      (common-lisp:list
       (common-lisp:cons "SourceEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-description))
      (common-lisp:list
       (common-lisp:cons "VersionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-template-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-template-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %create-template-response-status :initform
                         common-lisp:nil)
                        (creation-status :initarg :creation-status :type
                         (common-lisp:or resource-status common-lisp:null)
                         :accessor %create-template-response-creation-status
                         :initform common-lisp:nil)
                        (template-id :initarg :template-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %create-template-response-template-id
                         :initform common-lisp:nil)
                        (version-arn :initarg :version-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-template-response-version-arn :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-template-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-template-response 'make-create-template-response))
 (common-lisp:defun make-create-template-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status creation-status
                     template-id version-arn arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-arn))
      (common-lisp:list
       (common-lisp:cons "VersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-status))
      (common-lisp:list
       (common-lisp:cons "CreationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-theme-alias-request common-lisp:nil
                       ((theme-version-number :initarg :theme-version-number
                         :type (common-lisp:or version-number common-lisp:null)
                         :accessor
                         %create-theme-alias-request-theme-version-number
                         :initform
                         (common-lisp:error
                          ":theme-version-number is required"))
                        (alias-name :initarg :alias-name :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %create-theme-alias-request-alias-name :initform
                         (common-lisp:error ":alias-name is required"))
                        (theme-id :initarg :theme-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %create-theme-alias-request-theme-id
                         :initform (common-lisp:error ":theme-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %create-theme-alias-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-theme-alias-request
                    'make-create-theme-alias-request))
 (common-lisp:defun make-create-theme-alias-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key theme-version-number alias-name theme-id
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-theme-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-theme-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-theme-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'theme-version-number))
      (common-lisp:list
       (common-lisp:cons "ThemeVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-theme-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-theme-alias-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-theme-alias-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %create-theme-alias-response-status
                         :initform common-lisp:nil)
                        (theme-alias :initarg :theme-alias :type
                         (common-lisp:or theme-alias common-lisp:null)
                         :accessor %create-theme-alias-response-theme-alias
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-theme-alias-response
                    'make-create-theme-alias-response))
 (common-lisp:defun make-create-theme-alias-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status theme-alias)
   (common-lisp:apply #'common-lisp:make-instance 'create-theme-alias-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-theme-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-theme-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-alias))
      (common-lisp:list
       (common-lisp:cons "ThemeAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-theme-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-theme-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-theme-request-tags :initform common-lisp:nil)
                        (permissions :initarg :permissions :type
                         (common-lisp:or resource-permission-list
                                         common-lisp:null)
                         :accessor %create-theme-request-permissions :initform
                         common-lisp:nil)
                        (configuration :initarg :configuration :type
                         (common-lisp:or theme-configuration common-lisp:null)
                         :accessor %create-theme-request-configuration
                         :initform
                         (common-lisp:error ":configuration is required"))
                        (version-description :initarg :version-description
                         :type
                         (common-lisp:or version-description common-lisp:null)
                         :accessor %create-theme-request-version-description
                         :initform common-lisp:nil)
                        (base-theme-id :initarg :base-theme-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %create-theme-request-base-theme-id
                         :initform
                         (common-lisp:error ":base-theme-id is required"))
                        (name :initarg :name :type
                         (common-lisp:or theme-name common-lisp:null) :accessor
                         %create-theme-request-name :initform
                         (common-lisp:error ":name is required"))
                        (theme-id :initarg :theme-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %create-theme-request-theme-id :initform
                         (common-lisp:error ":theme-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %create-theme-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-theme-request 'make-create-theme-request))
 (common-lisp:defun make-create-theme-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags permissions configuration
                     version-description base-theme-id name theme-id
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-theme-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-theme-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-theme-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-theme-id))
      (common-lisp:list
       (common-lisp:cons "BaseThemeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-description))
      (common-lisp:list
       (common-lisp:cons "VersionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-theme-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-theme-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-theme-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %create-theme-response-status :initform
                         common-lisp:nil)
                        (creation-status :initarg :creation-status :type
                         (common-lisp:or resource-status common-lisp:null)
                         :accessor %create-theme-response-creation-status
                         :initform common-lisp:nil)
                        (theme-id :initarg :theme-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %create-theme-response-theme-id :initform
                         common-lisp:nil)
                        (version-arn :initarg :version-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-theme-response-version-arn :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-theme-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-theme-response 'make-create-theme-response))
 (common-lisp:defun make-create-theme-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status creation-status
                     theme-id version-arn arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-theme-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-theme-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-theme-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-arn))
      (common-lisp:list
       (common-lisp:cons "VersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-id))
      (common-lisp:list
       (common-lisp:cons "ThemeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-status))
      (common-lisp:list
       (common-lisp:cons "CreationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-theme-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass credential-pair common-lisp:nil
                       ((alternate-data-source-parameters :initarg
                         :alternate-data-source-parameters :type
                         (common-lisp:or data-source-parameters-list
                                         common-lisp:null)
                         :accessor
                         %credential-pair-alternate-data-source-parameters
                         :initform common-lisp:nil)
                        (password :initarg :password :type
                         (common-lisp:or password common-lisp:null) :accessor
                         %credential-pair-password :initform
                         (common-lisp:error ":password is required"))
                        (username :initarg :username :type
                         (common-lisp:or username common-lisp:null) :accessor
                         %credential-pair-username :initform
                         (common-lisp:error ":username is required"))))
 (common-lisp:export (common-lisp:list 'credential-pair 'make-credential-pair))
 (common-lisp:defun make-credential-pair
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alternate-data-source-parameters password
                     username)
   (common-lisp:apply #'common-lisp:make-instance 'credential-pair
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input credential-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input credential-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alternate-data-source-parameters))
      (common-lisp:list
       (common-lisp:cons "AlternateDataSourceParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input credential-pair))
   common-lisp:nil))
(common-lisp:deftype cross-dataset-types () 'common-lisp:string)
(common-lisp:deftype currency-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass currency-display-format-configuration common-lisp:nil
                       ((null-value-format-configuration :initarg
                         :null-value-format-configuration :type
                         (common-lisp:or null-value-format-configuration
                                         common-lisp:null)
                         :accessor
                         %currency-display-format-configuration-null-value-format-configuration
                         :initform common-lisp:nil)
                        (negative-value-configuration :initarg
                         :negative-value-configuration :type
                         (common-lisp:or negative-value-configuration
                                         common-lisp:null)
                         :accessor
                         %currency-display-format-configuration-negative-value-configuration
                         :initform common-lisp:nil)
                        (number-scale :initarg :number-scale :type
                         (common-lisp:or number-scale common-lisp:null)
                         :accessor
                         %currency-display-format-configuration-number-scale
                         :initform common-lisp:nil)
                        (decimal-places-configuration :initarg
                         :decimal-places-configuration :type
                         (common-lisp:or decimal-places-configuration
                                         common-lisp:null)
                         :accessor
                         %currency-display-format-configuration-decimal-places-configuration
                         :initform common-lisp:nil)
                        (symbol :initarg :symbol :type
                         (common-lisp:or currency-code common-lisp:null)
                         :accessor
                         %currency-display-format-configuration-symbol
                         :initform common-lisp:nil)
                        (separator-configuration :initarg
                         :separator-configuration :type
                         (common-lisp:or numeric-separator-configuration
                                         common-lisp:null)
                         :accessor
                         %currency-display-format-configuration-separator-configuration
                         :initform common-lisp:nil)
                        (suffix :initarg :suffix :type
                         (common-lisp:or suffix common-lisp:null) :accessor
                         %currency-display-format-configuration-suffix
                         :initform common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %currency-display-format-configuration-prefix
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'currency-display-format-configuration
                    'make-currency-display-format-configuration))
 (common-lisp:defun make-currency-display-format-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key null-value-format-configuration
                     negative-value-configuration number-scale
                     decimal-places-configuration symbol
                     separator-configuration suffix prefix)
   (common-lisp:apply #'common-lisp:make-instance
                      'currency-display-format-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          currency-display-format-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          currency-display-format-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suffix))
      (common-lisp:list
       (common-lisp:cons "Suffix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'separator-configuration))
      (common-lisp:list
       (common-lisp:cons "SeparatorConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'symbol))
      (common-lisp:list
       (common-lisp:cons "Symbol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decimal-places-configuration))
      (common-lisp:list
       (common-lisp:cons "DecimalPlacesConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-scale))
      (common-lisp:list
       (common-lisp:cons "NumberScale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'negative-value-configuration))
      (common-lisp:list
       (common-lisp:cons "NegativeValueConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'null-value-format-configuration))
      (common-lisp:list
       (common-lisp:cons "NullValueFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          currency-display-format-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-action-filter-operation common-lisp:nil
                       ((target-visuals-configuration :initarg
                         :target-visuals-configuration :type
                         (common-lisp:or
                          filter-operation-target-visuals-configuration
                          common-lisp:null)
                         :accessor
                         %custom-action-filter-operation-target-visuals-configuration
                         :initform
                         (common-lisp:error
                          ":target-visuals-configuration is required"))
                        (selected-fields-configuration :initarg
                         :selected-fields-configuration :type
                         (common-lisp:or
                          filter-operation-selected-fields-configuration
                          common-lisp:null)
                         :accessor
                         %custom-action-filter-operation-selected-fields-configuration
                         :initform
                         (common-lisp:error
                          ":selected-fields-configuration is required"))))
 (common-lisp:export
  (common-lisp:list 'custom-action-filter-operation
                    'make-custom-action-filter-operation))
 (common-lisp:defun make-custom-action-filter-operation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-visuals-configuration
                     selected-fields-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'custom-action-filter-operation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-action-filter-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-action-filter-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'selected-fields-configuration))
      (common-lisp:list
       (common-lisp:cons "SelectedFieldsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-visuals-configuration))
      (common-lisp:list
       (common-lisp:cons "TargetVisualsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-action-filter-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-action-navigation-operation common-lisp:nil
                       ((local-navigation-configuration :initarg
                         :local-navigation-configuration :type
                         (common-lisp:or local-navigation-configuration
                                         common-lisp:null)
                         :accessor
                         %custom-action-navigation-operation-local-navigation-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'custom-action-navigation-operation
                    'make-custom-action-navigation-operation))
 (common-lisp:defun make-custom-action-navigation-operation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key local-navigation-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'custom-action-navigation-operation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-action-navigation-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-action-navigation-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'local-navigation-configuration))
      (common-lisp:list
       (common-lisp:cons "LocalNavigationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-action-navigation-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-action-set-parameters-operation common-lisp:nil
                       ((parameter-value-configurations :initarg
                         :parameter-value-configurations :type
                         (common-lisp:or set-parameter-value-configuration-list
                                         common-lisp:null)
                         :accessor
                         %custom-action-set-parameters-operation-parameter-value-configurations
                         :initform
                         (common-lisp:error
                          ":parameter-value-configurations is required"))))
 (common-lisp:export
  (common-lisp:list 'custom-action-set-parameters-operation
                    'make-custom-action-set-parameters-operation))
 (common-lisp:defun make-custom-action-set-parameters-operation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter-value-configurations)
   (common-lisp:apply #'common-lisp:make-instance
                      'custom-action-set-parameters-operation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-action-set-parameters-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-action-set-parameters-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-value-configurations))
      (common-lisp:list
       (common-lisp:cons "ParameterValueConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-action-set-parameters-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-action-urloperation common-lisp:nil
                       ((urltarget :initarg :urltarget :type
                         (common-lisp:or urltarget-configuration
                                         common-lisp:null)
                         :accessor %custom-action-urloperation-urltarget
                         :initform
                         (common-lisp:error ":urltarget is required"))
                        (urltemplate :initarg :urltemplate :type
                         (common-lisp:or urloperation-template
                                         common-lisp:null)
                         :accessor %custom-action-urloperation-urltemplate
                         :initform
                         (common-lisp:error ":urltemplate is required"))))
 (common-lisp:export
  (common-lisp:list 'custom-action-urloperation
                    'make-custom-action-urloperation))
 (common-lisp:defun make-custom-action-urloperation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key urltarget urltemplate)
   (common-lisp:apply #'common-lisp:make-instance 'custom-action-urloperation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-action-urloperation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-action-urloperation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'urltemplate))
      (common-lisp:list
       (common-lisp:cons "URLTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'urltarget))
      (common-lisp:list
       (common-lisp:cons "URLTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-action-urloperation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-content-configuration common-lisp:nil
                       ((image-scaling :initarg :image-scaling :type
                         (common-lisp:or
                          custom-content-image-scaling-configuration
                          common-lisp:null)
                         :accessor %custom-content-configuration-image-scaling
                         :initform common-lisp:nil)
                        (content-type :initarg :content-type :type
                         (common-lisp:or custom-content-type common-lisp:null)
                         :accessor %custom-content-configuration-content-type
                         :initform common-lisp:nil)
                        (content-url :initarg :content-url :type
                         (common-lisp:or urloperation-template
                                         common-lisp:null)
                         :accessor %custom-content-configuration-content-url
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'custom-content-configuration
                    'make-custom-content-configuration))
 (common-lisp:defun make-custom-content-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-scaling content-type content-url)
   (common-lisp:apply #'common-lisp:make-instance 'custom-content-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-content-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-content-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-url))
      (common-lisp:list
       (common-lisp:cons "ContentUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-scaling))
      (common-lisp:list
       (common-lisp:cons "ImageScaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-content-configuration))
   common-lisp:nil))
(common-lisp:deftype custom-content-image-scaling-configuration ()
  'common-lisp:string)
(common-lisp:deftype custom-content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass custom-content-visual common-lisp:nil
                       ((data-set-identifier :initarg :data-set-identifier
                         :type
                         (common-lisp:or data-set-identifier common-lisp:null)
                         :accessor %custom-content-visual-data-set-identifier
                         :initform
                         (common-lisp:error
                          ":data-set-identifier is required"))
                        (actions :initarg :actions :type
                         (common-lisp:or visual-custom-action-list
                                         common-lisp:null)
                         :accessor %custom-content-visual-actions :initform
                         common-lisp:nil)
                        (chart-configuration :initarg :chart-configuration
                         :type
                         (common-lisp:or custom-content-configuration
                                         common-lisp:null)
                         :accessor %custom-content-visual-chart-configuration
                         :initform common-lisp:nil)
                        (subtitle :initarg :subtitle :type
                         (common-lisp:or visual-subtitle-label-options
                                         common-lisp:null)
                         :accessor %custom-content-visual-subtitle :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or visual-title-label-options
                                         common-lisp:null)
                         :accessor %custom-content-visual-title :initform
                         common-lisp:nil)
                        (visual-id :initarg :visual-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %custom-content-visual-visual-id :initform
                         (common-lisp:error ":visual-id is required"))))
 (common-lisp:export
  (common-lisp:list 'custom-content-visual 'make-custom-content-visual))
 (common-lisp:defun make-custom-content-visual
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-set-identifier actions
                     chart-configuration subtitle title visual-id)
   (common-lisp:apply #'common-lisp:make-instance 'custom-content-visual
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-content-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-content-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-identifier))
      (common-lisp:list
       (common-lisp:cons "DataSetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-content-visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-filter-configuration common-lisp:nil
                       ((null-option :initarg :null-option :type
                         (common-lisp:or filter-null-option common-lisp:null)
                         :accessor %custom-filter-configuration-null-option
                         :initform
                         (common-lisp:error ":null-option is required"))
                        (parameter-name :initarg :parameter-name :type
                         (common-lisp:or parameter-name common-lisp:null)
                         :accessor %custom-filter-configuration-parameter-name
                         :initform common-lisp:nil)
                        (select-all-options :initarg :select-all-options :type
                         (common-lisp:or category-filter-select-all-options
                                         common-lisp:null)
                         :accessor
                         %custom-filter-configuration-select-all-options
                         :initform common-lisp:nil)
                        (category-value :initarg :category-value :type
                         (common-lisp:or category-value common-lisp:null)
                         :accessor %custom-filter-configuration-category-value
                         :initform common-lisp:nil)
                        (match-operator :initarg :match-operator :type
                         (common-lisp:or category-filter-match-operator
                                         common-lisp:null)
                         :accessor %custom-filter-configuration-match-operator
                         :initform
                         (common-lisp:error ":match-operator is required"))))
 (common-lisp:export
  (common-lisp:list 'custom-filter-configuration
                    'make-custom-filter-configuration))
 (common-lisp:defun make-custom-filter-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key null-option parameter-name
                     select-all-options category-value match-operator)
   (common-lisp:apply #'common-lisp:make-instance 'custom-filter-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-filter-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-filter-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-operator))
      (common-lisp:list
       (common-lisp:cons "MatchOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-value))
      (common-lisp:list
       (common-lisp:cons "CategoryValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-all-options))
      (common-lisp:list
       (common-lisp:cons "SelectAllOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'null-option))
      (common-lisp:list
       (common-lisp:cons "NullOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-filter-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-filter-list-configuration common-lisp:nil
                       ((null-option :initarg :null-option :type
                         (common-lisp:or filter-null-option common-lisp:null)
                         :accessor
                         %custom-filter-list-configuration-null-option
                         :initform
                         (common-lisp:error ":null-option is required"))
                        (select-all-options :initarg :select-all-options :type
                         (common-lisp:or category-filter-select-all-options
                                         common-lisp:null)
                         :accessor
                         %custom-filter-list-configuration-select-all-options
                         :initform common-lisp:nil)
                        (category-values :initarg :category-values :type
                         (common-lisp:or category-value-list common-lisp:null)
                         :accessor
                         %custom-filter-list-configuration-category-values
                         :initform common-lisp:nil)
                        (match-operator :initarg :match-operator :type
                         (common-lisp:or category-filter-match-operator
                                         common-lisp:null)
                         :accessor
                         %custom-filter-list-configuration-match-operator
                         :initform
                         (common-lisp:error ":match-operator is required"))))
 (common-lisp:export
  (common-lisp:list 'custom-filter-list-configuration
                    'make-custom-filter-list-configuration))
 (common-lisp:defun make-custom-filter-list-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key null-option select-all-options
                     category-values match-operator)
   (common-lisp:apply #'common-lisp:make-instance
                      'custom-filter-list-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-filter-list-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-filter-list-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-operator))
      (common-lisp:list
       (common-lisp:cons "MatchOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-values))
      (common-lisp:list
       (common-lisp:cons "CategoryValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-all-options))
      (common-lisp:list
       (common-lisp:cons "SelectAllOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'null-option))
      (common-lisp:list
       (common-lisp:cons "NullOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-filter-list-configuration))
   common-lisp:nil))
(common-lisp:deftype custom-label () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass custom-narrative-options common-lisp:nil
                       ((narrative :initarg :narrative :type
                         (common-lisp:or narrative-string common-lisp:null)
                         :accessor %custom-narrative-options-narrative
                         :initform
                         (common-lisp:error ":narrative is required"))))
 (common-lisp:export
  (common-lisp:list 'custom-narrative-options 'make-custom-narrative-options))
 (common-lisp:defun make-custom-narrative-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key narrative)
   (common-lisp:apply #'common-lisp:make-instance 'custom-narrative-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-narrative-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-narrative-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'narrative))
      (common-lisp:list
       (common-lisp:cons "Narrative"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-narrative-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-parameter-values common-lisp:nil
                       ((date-time-values :initarg :date-time-values :type
                         (common-lisp:or date-time-default-value-list
                                         common-lisp:null)
                         :accessor %custom-parameter-values-date-time-values
                         :initform common-lisp:nil)
                        (decimal-values :initarg :decimal-values :type
                         (common-lisp:or decimal-default-value-list
                                         common-lisp:null)
                         :accessor %custom-parameter-values-decimal-values
                         :initform common-lisp:nil)
                        (integer-values :initarg :integer-values :type
                         (common-lisp:or integer-default-value-list
                                         common-lisp:null)
                         :accessor %custom-parameter-values-integer-values
                         :initform common-lisp:nil)
                        (string-values :initarg :string-values :type
                         (common-lisp:or string-default-value-list
                                         common-lisp:null)
                         :accessor %custom-parameter-values-string-values
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'custom-parameter-values 'make-custom-parameter-values))
 (common-lisp:defun make-custom-parameter-values
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key date-time-values decimal-values
                     integer-values string-values)
   (common-lisp:apply #'common-lisp:make-instance 'custom-parameter-values
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-parameter-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-parameter-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-values))
      (common-lisp:list
       (common-lisp:cons "StringValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integer-values))
      (common-lisp:list
       (common-lisp:cons "IntegerValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decimal-values))
      (common-lisp:list
       (common-lisp:cons "DecimalValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-time-values))
      (common-lisp:list
       (common-lisp:cons "DateTimeValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-parameter-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-sql common-lisp:nil
                       ((columns :initarg :columns :type
                         (common-lisp:or input-column-list common-lisp:null)
                         :accessor %custom-sql-columns :initform
                         common-lisp:nil)
                        (sql-query :initarg :sql-query :type
                         (common-lisp:or sql-query common-lisp:null) :accessor
                         %custom-sql-sql-query :initform
                         (common-lisp:error ":sql-query is required"))
                        (name :initarg :name :type
                         (common-lisp:or custom-sql-name common-lisp:null)
                         :accessor %custom-sql-name :initform
                         (common-lisp:error ":name is required"))
                        (data-source-arn :initarg :data-source-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %custom-sql-data-source-arn :initform
                         (common-lisp:error ":data-source-arn is required"))))
 (common-lisp:export (common-lisp:list 'custom-sql 'make-custom-sql))
 (common-lisp:defun make-custom-sql
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key columns sql-query name data-source-arn)
   (common-lisp:apply #'common-lisp:make-instance 'custom-sql
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-sql))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-sql))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-arn))
      (common-lisp:list
       (common-lisp:cons "DataSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql-query))
      (common-lisp:list
       (common-lisp:cons "SqlQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "Columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-sql))
   common-lisp:nil))
(common-lisp:deftype custom-sql-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass custom-values-configuration common-lisp:nil
                       ((custom-values :initarg :custom-values :type
                         (common-lisp:or custom-parameter-values
                                         common-lisp:null)
                         :accessor %custom-values-configuration-custom-values
                         :initform
                         (common-lisp:error ":custom-values is required"))
                        (include-null-value :initarg :include-null-value :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         %custom-values-configuration-include-null-value
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'custom-values-configuration
                    'make-custom-values-configuration))
 (common-lisp:defun make-custom-values-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-values include-null-value)
   (common-lisp:apply #'common-lisp:make-instance 'custom-values-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-values-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-values-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-null-value))
      (common-lisp:list
       (common-lisp:cons "IncludeNullValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-values))
      (common-lisp:list
       (common-lisp:cons "CustomValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-values-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dashboard common-lisp:nil
                       ((last-updated-time :initarg :last-updated-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %dashboard-last-updated-time :initform
                         common-lisp:nil)
                        (last-published-time :initarg :last-published-time
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor %dashboard-last-published-time :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %dashboard-created-time :initform common-lisp:nil)
                        (version :initarg :version :type
                         (common-lisp:or dashboard-version common-lisp:null)
                         :accessor %dashboard-version :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or dashboard-name common-lisp:null)
                         :accessor %dashboard-name :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %dashboard-arn :initform common-lisp:nil)
                        (dashboard-id :initarg :dashboard-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %dashboard-dashboard-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'dashboard 'make-dashboard))
 (common-lisp:defun make-dashboard
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-time last-published-time
                     created-time version name arn dashboard-id)
   (common-lisp:apply #'common-lisp:make-instance 'dashboard
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dashboard))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dashboard))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-id))
      (common-lisp:list
       (common-lisp:cons "DashboardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-published-time))
      (common-lisp:list
       (common-lisp:cons "LastPublishedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dashboard))
   common-lisp:nil))
(common-lisp:deftype dashboard-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dashboard-error common-lisp:nil
                       ((violated-entities :initarg :violated-entities :type
                         (common-lisp:or entity-list common-lisp:null)
                         :accessor %dashboard-error-violated-entities :initform
                         common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %dashboard-error-message :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or dashboard-error-type common-lisp:null)
                         :accessor %dashboard-error-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'dashboard-error 'make-dashboard-error))
 (common-lisp:defun make-dashboard-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key violated-entities message type)
   (common-lisp:apply #'common-lisp:make-instance 'dashboard-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dashboard-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dashboard-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violated-entities))
      (common-lisp:list
       (common-lisp:cons "ViolatedEntities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dashboard-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dashboard-error-list ()
   '(trivial-types:proper-list dashboard-error))
 (common-lisp:defun |make-dashboard-error-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dashboard-error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype dashboard-error-type () 'common-lisp:string)
(common-lisp:deftype dashboard-filter-attribute () 'common-lisp:string)
(common-lisp:deftype dashboard-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dashboard-publish-options common-lisp:nil
                       ((data-point-tooltip-option :initarg
                         :data-point-tooltip-option :type
                         (common-lisp:or data-point-tooltip-option
                                         common-lisp:null)
                         :accessor
                         %dashboard-publish-options-data-point-tooltip-option
                         :initform common-lisp:nil)
                        (data-point-menu-label-option :initarg
                         :data-point-menu-label-option :type
                         (common-lisp:or data-point-menu-label-option
                                         common-lisp:null)
                         :accessor
                         %dashboard-publish-options-data-point-menu-label-option
                         :initform common-lisp:nil)
                        (data-point-drill-up-down-option :initarg
                         :data-point-drill-up-down-option :type
                         (common-lisp:or data-point-drill-up-down-option
                                         common-lisp:null)
                         :accessor
                         %dashboard-publish-options-data-point-drill-up-down-option
                         :initform common-lisp:nil)
                        (export-with-hidden-fields-option :initarg
                         :export-with-hidden-fields-option :type
                         (common-lisp:or export-with-hidden-fields-option
                                         common-lisp:null)
                         :accessor
                         %dashboard-publish-options-export-with-hidden-fields-option
                         :initform common-lisp:nil)
                        (visual-axis-sort-option :initarg
                         :visual-axis-sort-option :type
                         (common-lisp:or visual-axis-sort-option
                                         common-lisp:null)
                         :accessor
                         %dashboard-publish-options-visual-axis-sort-option
                         :initform common-lisp:nil)
                        (visual-menu-option :initarg :visual-menu-option :type
                         (common-lisp:or visual-menu-option common-lisp:null)
                         :accessor
                         %dashboard-publish-options-visual-menu-option
                         :initform common-lisp:nil)
                        (sheet-layout-element-maximization-option :initarg
                         :sheet-layout-element-maximization-option :type
                         (common-lisp:or
                          sheet-layout-element-maximization-option
                          common-lisp:null)
                         :accessor
                         %dashboard-publish-options-sheet-layout-element-maximization-option
                         :initform common-lisp:nil)
                        (visual-publish-options :initarg
                         :visual-publish-options :type
                         (common-lisp:or dashboard-visual-publish-options
                                         common-lisp:null)
                         :accessor
                         %dashboard-publish-options-visual-publish-options
                         :initform common-lisp:nil)
                        (sheet-controls-option :initarg :sheet-controls-option
                         :type
                         (common-lisp:or sheet-controls-option
                                         common-lisp:null)
                         :accessor
                         %dashboard-publish-options-sheet-controls-option
                         :initform common-lisp:nil)
                        (export-to-csvoption :initarg :export-to-csvoption
                         :type
                         (common-lisp:or export-to-csvoption common-lisp:null)
                         :accessor
                         %dashboard-publish-options-export-to-csvoption
                         :initform common-lisp:nil)
                        (ad-hoc-filtering-option :initarg
                         :ad-hoc-filtering-option :type
                         (common-lisp:or ad-hoc-filtering-option
                                         common-lisp:null)
                         :accessor
                         %dashboard-publish-options-ad-hoc-filtering-option
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dashboard-publish-options
                    'make-dashboard-publish-options))
 (common-lisp:defun make-dashboard-publish-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-point-tooltip-option
                     data-point-menu-label-option
                     data-point-drill-up-down-option
                     export-with-hidden-fields-option visual-axis-sort-option
                     visual-menu-option
                     sheet-layout-element-maximization-option
                     visual-publish-options sheet-controls-option
                     export-to-csvoption ad-hoc-filtering-option)
   (common-lisp:apply #'common-lisp:make-instance 'dashboard-publish-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-publish-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-publish-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ad-hoc-filtering-option))
      (common-lisp:list
       (common-lisp:cons "AdHocFilteringOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-to-csvoption))
      (common-lisp:list
       (common-lisp:cons "ExportToCSVOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sheet-controls-option))
      (common-lisp:list
       (common-lisp:cons "SheetControlsOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'visual-publish-options))
      (common-lisp:list
       (common-lisp:cons "VisualPublishOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sheet-layout-element-maximization-option))
      (common-lisp:list
       (common-lisp:cons "SheetLayoutElementMaximizationOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-menu-option))
      (common-lisp:list
       (common-lisp:cons "VisualMenuOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'visual-axis-sort-option))
      (common-lisp:list
       (common-lisp:cons "VisualAxisSortOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-with-hidden-fields-option))
      (common-lisp:list
       (common-lisp:cons "ExportWithHiddenFieldsOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-point-drill-up-down-option))
      (common-lisp:list
       (common-lisp:cons "DataPointDrillUpDownOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-point-menu-label-option))
      (common-lisp:list
       (common-lisp:cons "DataPointMenuLabelOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-point-tooltip-option))
      (common-lisp:list
       (common-lisp:cons "DataPointTooltipOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-publish-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dashboard-search-filter common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dashboard-search-filter-value :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or dashboard-filter-attribute
                                         common-lisp:null)
                         :accessor %dashboard-search-filter-name :initform
                         common-lisp:nil)
                        (operator :initarg :operator :type
                         (common-lisp:or filter-operator common-lisp:null)
                         :accessor %dashboard-search-filter-operator :initform
                         (common-lisp:error ":operator is required"))))
 (common-lisp:export
  (common-lisp:list 'dashboard-search-filter 'make-dashboard-search-filter))
 (common-lisp:defun make-dashboard-search-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name operator)
   (common-lisp:apply #'common-lisp:make-instance 'dashboard-search-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-search-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-search-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "Operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-search-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dashboard-search-filter-list ()
   '(trivial-types:proper-list dashboard-search-filter))
 (common-lisp:defun |make-dashboard-search-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dashboard-search-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dashboard-source-entity common-lisp:nil
                       ((source-template :initarg :source-template :type
                         (common-lisp:or dashboard-source-template
                                         common-lisp:null)
                         :accessor %dashboard-source-entity-source-template
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dashboard-source-entity 'make-dashboard-source-entity))
 (common-lisp:defun make-dashboard-source-entity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-template)
   (common-lisp:apply #'common-lisp:make-instance 'dashboard-source-entity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-source-entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-source-entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-template))
      (common-lisp:list
       (common-lisp:cons "SourceTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-source-entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dashboard-source-template common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %dashboard-source-template-arn :initform
                         (common-lisp:error ":arn is required"))
                        (data-set-references :initarg :data-set-references
                         :type
                         (common-lisp:or data-set-reference-list
                                         common-lisp:null)
                         :accessor
                         %dashboard-source-template-data-set-references
                         :initform
                         (common-lisp:error
                          ":data-set-references is required"))))
 (common-lisp:export
  (common-lisp:list 'dashboard-source-template
                    'make-dashboard-source-template))
 (common-lisp:defun make-dashboard-source-template
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn data-set-references)
   (common-lisp:apply #'common-lisp:make-instance 'dashboard-source-template
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-source-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-source-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-references))
      (common-lisp:list
       (common-lisp:cons "DataSetReferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-source-template))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dashboard-summary common-lisp:nil
                       ((last-published-time :initarg :last-published-time
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor %dashboard-summary-last-published-time
                         :initform common-lisp:nil)
                        (published-version-number :initarg
                         :published-version-number :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor %dashboard-summary-published-version-number
                         :initform common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %dashboard-summary-last-updated-time :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %dashboard-summary-created-time :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or dashboard-name common-lisp:null)
                         :accessor %dashboard-summary-name :initform
                         common-lisp:nil)
                        (dashboard-id :initarg :dashboard-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %dashboard-summary-dashboard-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %dashboard-summary-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dashboard-summary 'make-dashboard-summary))
 (common-lisp:defun make-dashboard-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-published-time
                     published-version-number last-updated-time created-time
                     name dashboard-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'dashboard-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dashboard-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dashboard-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-id))
      (common-lisp:list
       (common-lisp:cons "DashboardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'published-version-number))
      (common-lisp:list
       (common-lisp:cons "PublishedVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-published-time))
      (common-lisp:list
       (common-lisp:cons "LastPublishedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dashboard-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dashboard-summary-list ()
   '(trivial-types:proper-list dashboard-summary))
 (common-lisp:defun |make-dashboard-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dashboard-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype dashboard-uistate () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dashboard-version common-lisp:nil
                       ((sheets :initarg :sheets :type
                         (common-lisp:or sheet-list common-lisp:null) :accessor
                         %dashboard-version-sheets :initform common-lisp:nil)
                        (theme-arn :initarg :theme-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %dashboard-version-theme-arn :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or version-description common-lisp:null)
                         :accessor %dashboard-version-description :initform
                         common-lisp:nil)
                        (data-set-arns :initarg :data-set-arns :type
                         (common-lisp:or data-set-arns-list common-lisp:null)
                         :accessor %dashboard-version-data-set-arns :initform
                         common-lisp:nil)
                        (source-entity-arn :initarg :source-entity-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %dashboard-version-source-entity-arn :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %dashboard-version-arn :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or resource-status common-lisp:null)
                         :accessor %dashboard-version-status :initform
                         common-lisp:nil)
                        (version-number :initarg :version-number :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor %dashboard-version-version-number :initform
                         common-lisp:nil)
                        (errors :initarg :errors :type
                         (common-lisp:or dashboard-error-list common-lisp:null)
                         :accessor %dashboard-version-errors :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %dashboard-version-created-time :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dashboard-version 'make-dashboard-version))
 (common-lisp:defun make-dashboard-version
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sheets theme-arn description
                     data-set-arns source-entity-arn arn status version-number
                     errors created-time)
   (common-lisp:apply #'common-lisp:make-instance 'dashboard-version
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dashboard-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dashboard-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-entity-arn))
      (common-lisp:list
       (common-lisp:cons "SourceEntityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-arns))
      (common-lisp:list
       (common-lisp:cons "DataSetArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-arn))
      (common-lisp:list
       (common-lisp:cons "ThemeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sheets))
      (common-lisp:list
       (common-lisp:cons "Sheets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dashboard-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dashboard-version-definition common-lisp:nil
                       ((analysis-defaults :initarg :analysis-defaults :type
                         (common-lisp:or analysis-defaults common-lisp:null)
                         :accessor
                         %dashboard-version-definition-analysis-defaults
                         :initform common-lisp:nil)
                        (column-configurations :initarg :column-configurations
                         :type
                         (common-lisp:or column-configuration-list
                                         common-lisp:null)
                         :accessor
                         %dashboard-version-definition-column-configurations
                         :initform common-lisp:nil)
                        (filter-groups :initarg :filter-groups :type
                         (common-lisp:or filter-group-list common-lisp:null)
                         :accessor %dashboard-version-definition-filter-groups
                         :initform common-lisp:nil)
                        (parameter-declarations :initarg
                         :parameter-declarations :type
                         (common-lisp:or parameter-declaration-list
                                         common-lisp:null)
                         :accessor
                         %dashboard-version-definition-parameter-declarations
                         :initform common-lisp:nil)
                        (calculated-fields :initarg :calculated-fields :type
                         (common-lisp:or calculated-fields common-lisp:null)
                         :accessor
                         %dashboard-version-definition-calculated-fields
                         :initform common-lisp:nil)
                        (sheets :initarg :sheets :type
                         (common-lisp:or sheet-definition-list
                                         common-lisp:null)
                         :accessor %dashboard-version-definition-sheets
                         :initform common-lisp:nil)
                        (data-set-identifier-declarations :initarg
                         :data-set-identifier-declarations :type
                         (common-lisp:or data-set-identifier-declaration-list
                                         common-lisp:null)
                         :accessor
                         %dashboard-version-definition-data-set-identifier-declarations
                         :initform
                         (common-lisp:error
                          ":data-set-identifier-declarations is required"))))
 (common-lisp:export
  (common-lisp:list 'dashboard-version-definition
                    'make-dashboard-version-definition))
 (common-lisp:defun make-dashboard-version-definition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key analysis-defaults column-configurations
                     filter-groups parameter-declarations calculated-fields
                     sheets data-set-identifier-declarations)
   (common-lisp:apply #'common-lisp:make-instance 'dashboard-version-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-version-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-version-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-set-identifier-declarations))
      (common-lisp:list
       (common-lisp:cons "DataSetIdentifierDeclarations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sheets))
      (common-lisp:list
       (common-lisp:cons "Sheets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'calculated-fields))
      (common-lisp:list
       (common-lisp:cons "CalculatedFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-declarations))
      (common-lisp:list
       (common-lisp:cons "ParameterDeclarations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-groups))
      (common-lisp:list
       (common-lisp:cons "FilterGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-configurations))
      (common-lisp:list
       (common-lisp:cons "ColumnConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-defaults))
      (common-lisp:list
       (common-lisp:cons "AnalysisDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-version-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dashboard-version-summary common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or version-description common-lisp:null)
                         :accessor %dashboard-version-summary-description
                         :initform common-lisp:nil)
                        (source-entity-arn :initarg :source-entity-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %dashboard-version-summary-source-entity-arn :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or resource-status common-lisp:null)
                         :accessor %dashboard-version-summary-status :initform
                         common-lisp:nil)
                        (version-number :initarg :version-number :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor %dashboard-version-summary-version-number
                         :initform common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %dashboard-version-summary-created-time :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %dashboard-version-summary-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dashboard-version-summary
                    'make-dashboard-version-summary))
 (common-lisp:defun make-dashboard-version-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description source-entity-arn status
                     version-number created-time arn)
   (common-lisp:apply #'common-lisp:make-instance 'dashboard-version-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-version-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-version-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-entity-arn))
      (common-lisp:list
       (common-lisp:cons "SourceEntityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-version-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dashboard-version-summary-list ()
   '(trivial-types:proper-list dashboard-version-summary))
 (common-lisp:defun |make-dashboard-version-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dashboard-version-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dashboard-visual-id common-lisp:nil
                       ((visual-id :initarg :visual-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %dashboard-visual-id-visual-id :initform
                         (common-lisp:error ":visual-id is required"))
                        (sheet-id :initarg :sheet-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %dashboard-visual-id-sheet-id :initform
                         (common-lisp:error ":sheet-id is required"))
                        (dashboard-id :initarg :dashboard-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %dashboard-visual-id-dashboard-id :initform
                         (common-lisp:error ":dashboard-id is required"))))
 (common-lisp:export
  (common-lisp:list 'dashboard-visual-id 'make-dashboard-visual-id))
 (common-lisp:defun make-dashboard-visual-id
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visual-id sheet-id dashboard-id)
   (common-lisp:apply #'common-lisp:make-instance 'dashboard-visual-id
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dashboard-visual-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dashboard-visual-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-id))
      (common-lisp:list
       (common-lisp:cons "DashboardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sheet-id))
      (common-lisp:list
       (common-lisp:cons "SheetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dashboard-visual-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dashboard-visual-publish-options common-lisp:nil
                       ((export-hidden-fields-option :initarg
                         :export-hidden-fields-option :type
                         (common-lisp:or export-hidden-fields-option
                                         common-lisp:null)
                         :accessor
                         %dashboard-visual-publish-options-export-hidden-fields-option
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dashboard-visual-publish-options
                    'make-dashboard-visual-publish-options))
 (common-lisp:defun make-dashboard-visual-publish-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key export-hidden-fields-option)
   (common-lisp:apply #'common-lisp:make-instance
                      'dashboard-visual-publish-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-visual-publish-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-visual-publish-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-hidden-fields-option))
      (common-lisp:list
       (common-lisp:cons "ExportHiddenFieldsOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dashboard-visual-publish-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-bars-options common-lisp:nil
                       ((negative-color :initarg :negative-color :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %data-bars-options-negative-color :initform
                         common-lisp:nil)
                        (positive-color :initarg :positive-color :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %data-bars-options-positive-color :initform
                         common-lisp:nil)
                        (field-id :initarg :field-id :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         %data-bars-options-field-id :initform
                         (common-lisp:error ":field-id is required"))))
 (common-lisp:export
  (common-lisp:list 'data-bars-options 'make-data-bars-options))
 (common-lisp:defun make-data-bars-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key negative-color positive-color field-id)
   (common-lisp:apply #'common-lisp:make-instance 'data-bars-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-bars-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-bars-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'positive-color))
      (common-lisp:list
       (common-lisp:cons "PositiveColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'negative-color))
      (common-lisp:list
       (common-lisp:cons "NegativeColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-bars-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-color common-lisp:nil
                       ((data-value :initarg :data-value :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %data-color-data-value :initform common-lisp:nil)
                        (color :initarg :color :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %data-color-color :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'data-color 'make-data-color))
 (common-lisp:defun make-data-color
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-value color)
   (common-lisp:apply #'common-lisp:make-instance 'data-color
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-color))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-color))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color))
      (common-lisp:list
       (common-lisp:cons "Color"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-value))
      (common-lisp:list
       (common-lisp:cons "DataValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-color))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-color-palette common-lisp:nil
                       ((empty-fill-color :initarg :empty-fill-color :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %data-color-palette-empty-fill-color :initform
                         common-lisp:nil)
                        (min-max-gradient :initarg :min-max-gradient :type
                         (common-lisp:or color-list common-lisp:null) :accessor
                         %data-color-palette-min-max-gradient :initform
                         common-lisp:nil)
                        (colors :initarg :colors :type
                         (common-lisp:or color-list common-lisp:null) :accessor
                         %data-color-palette-colors :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'data-color-palette 'make-data-color-palette))
 (common-lisp:defun make-data-color-palette
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key empty-fill-color min-max-gradient colors)
   (common-lisp:apply #'common-lisp:make-instance 'data-color-palette
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-color-palette))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-color-palette))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'colors))
      (common-lisp:list
       (common-lisp:cons "Colors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-max-gradient))
      (common-lisp:list
       (common-lisp:cons "MinMaxGradient"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'empty-fill-color))
      (common-lisp:list
       (common-lisp:cons "EmptyFillColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-color-palette))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-field-series-item common-lisp:nil
                       ((settings :initarg :settings :type
                         (common-lisp:or line-chart-series-settings
                                         common-lisp:null)
                         :accessor %data-field-series-item-settings :initform
                         common-lisp:nil)
                        (axis-binding :initarg :axis-binding :type
                         (common-lisp:or axis-binding common-lisp:null)
                         :accessor %data-field-series-item-axis-binding
                         :initform
                         (common-lisp:error ":axis-binding is required"))
                        (field-value :initarg :field-value :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor %data-field-series-item-field-value
                         :initform common-lisp:nil)
                        (field-id :initarg :field-id :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         %data-field-series-item-field-id :initform
                         (common-lisp:error ":field-id is required"))))
 (common-lisp:export
  (common-lisp:list 'data-field-series-item 'make-data-field-series-item))
 (common-lisp:defun make-data-field-series-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key settings axis-binding field-value
                     field-id)
   (common-lisp:apply #'common-lisp:make-instance 'data-field-series-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-field-series-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-field-series-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-value))
      (common-lisp:list
       (common-lisp:cons "FieldValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'axis-binding))
      (common-lisp:list
       (common-lisp:cons "AxisBinding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-field-series-item))
   common-lisp:nil))
(common-lisp:deftype data-label-content () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-label-options common-lisp:nil
                       ((overlap :initarg :overlap :type
                         (common-lisp:or data-label-overlap common-lisp:null)
                         :accessor %data-label-options-overlap :initform
                         common-lisp:nil)
                        (label-color :initarg :label-color :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %data-label-options-label-color :initform
                         common-lisp:nil)
                        (label-font-configuration :initarg
                         :label-font-configuration :type
                         (common-lisp:or font-configuration common-lisp:null)
                         :accessor %data-label-options-label-font-configuration
                         :initform common-lisp:nil)
                        (label-content :initarg :label-content :type
                         (common-lisp:or data-label-content common-lisp:null)
                         :accessor %data-label-options-label-content :initform
                         common-lisp:nil)
                        (position :initarg :position :type
                         (common-lisp:or data-label-position common-lisp:null)
                         :accessor %data-label-options-position :initform
                         common-lisp:nil)
                        (data-label-types :initarg :data-label-types :type
                         (common-lisp:or data-label-types common-lisp:null)
                         :accessor %data-label-options-data-label-types
                         :initform common-lisp:nil)
                        (measure-label-visibility :initarg
                         :measure-label-visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %data-label-options-measure-label-visibility :initform
                         common-lisp:nil)
                        (category-label-visibility :initarg
                         :category-label-visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %data-label-options-category-label-visibility
                         :initform common-lisp:nil)
                        (visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %data-label-options-visibility :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'data-label-options 'make-data-label-options))
 (common-lisp:defun make-data-label-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key overlap label-color
                     label-font-configuration label-content position
                     data-label-types measure-label-visibility
                     category-label-visibility visibility)
   (common-lisp:apply #'common-lisp:make-instance 'data-label-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-label-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-label-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-label-visibility))
      (common-lisp:list
       (common-lisp:cons "CategoryLabelVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'measure-label-visibility))
      (common-lisp:list
       (common-lisp:cons "MeasureLabelVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-label-types))
      (common-lisp:list
       (common-lisp:cons "DataLabelTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "Position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-content))
      (common-lisp:list
       (common-lisp:cons "LabelContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'label-font-configuration))
      (common-lisp:list
       (common-lisp:cons "LabelFontConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-color))
      (common-lisp:list
       (common-lisp:cons "LabelColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overlap))
      (common-lisp:list
       (common-lisp:cons "Overlap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-label-options))
   common-lisp:nil))
(common-lisp:deftype data-label-overlap () 'common-lisp:string)
(common-lisp:deftype data-label-position () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-label-type common-lisp:nil
                       ((maximum-label-type :initarg :maximum-label-type :type
                         (common-lisp:or maximum-label-type common-lisp:null)
                         :accessor %data-label-type-maximum-label-type
                         :initform common-lisp:nil)
                        (minimum-label-type :initarg :minimum-label-type :type
                         (common-lisp:or minimum-label-type common-lisp:null)
                         :accessor %data-label-type-minimum-label-type
                         :initform common-lisp:nil)
                        (range-ends-label-type :initarg :range-ends-label-type
                         :type
                         (common-lisp:or range-ends-label-type
                                         common-lisp:null)
                         :accessor %data-label-type-range-ends-label-type
                         :initform common-lisp:nil)
                        (data-path-label-type :initarg :data-path-label-type
                         :type
                         (common-lisp:or data-path-label-type common-lisp:null)
                         :accessor %data-label-type-data-path-label-type
                         :initform common-lisp:nil)
                        (field-label-type :initarg :field-label-type :type
                         (common-lisp:or field-label-type common-lisp:null)
                         :accessor %data-label-type-field-label-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'data-label-type 'make-data-label-type))
 (common-lisp:defun make-data-label-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key maximum-label-type minimum-label-type
                     range-ends-label-type data-path-label-type
                     field-label-type)
   (common-lisp:apply #'common-lisp:make-instance 'data-label-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-label-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-label-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-label-type))
      (common-lisp:list
       (common-lisp:cons "FieldLabelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-path-label-type))
      (common-lisp:list
       (common-lisp:cons "DataPathLabelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'range-ends-label-type))
      (common-lisp:list
       (common-lisp:cons "RangeEndsLabelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-label-type))
      (common-lisp:list
       (common-lisp:cons "MinimumLabelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-label-type))
      (common-lisp:list
       (common-lisp:cons "MaximumLabelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-label-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-label-types ()
   '(trivial-types:proper-list data-label-type))
 (common-lisp:defun |make-data-label-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-label-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-path-color common-lisp:nil
                       ((time-granularity :initarg :time-granularity :type
                         (common-lisp:or time-granularity common-lisp:null)
                         :accessor %data-path-color-time-granularity :initform
                         common-lisp:nil)
                        (color :initarg :color :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %data-path-color-color :initform
                         (common-lisp:error ":color is required"))
                        (element :initarg :element :type
                         (common-lisp:or data-path-value common-lisp:null)
                         :accessor %data-path-color-element :initform
                         (common-lisp:error ":element is required"))))
 (common-lisp:export (common-lisp:list 'data-path-color 'make-data-path-color))
 (common-lisp:defun make-data-path-color
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key time-granularity color element)
   (common-lisp:apply #'common-lisp:make-instance 'data-path-color
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-path-color))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-path-color))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'element))
      (common-lisp:list
       (common-lisp:cons "Element"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color))
      (common-lisp:list
       (common-lisp:cons "Color"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-granularity))
      (common-lisp:list
       (common-lisp:cons "TimeGranularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-path-color))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-path-color-list ()
   '(trivial-types:proper-list data-path-color))
 (common-lisp:defun |make-data-path-color-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-path-color))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-path-label-type common-lisp:nil
                       ((visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %data-path-label-type-visibility :initform
                         common-lisp:nil)
                        (field-value :initarg :field-value :type
                         (common-lisp:or field-value common-lisp:null)
                         :accessor %data-path-label-type-field-value :initform
                         common-lisp:nil)
                        (field-id :initarg :field-id :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         %data-path-label-type-field-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'data-path-label-type 'make-data-path-label-type))
 (common-lisp:defun make-data-path-label-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visibility field-value field-id)
   (common-lisp:apply #'common-lisp:make-instance 'data-path-label-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-path-label-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-path-label-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-value))
      (common-lisp:list
       (common-lisp:cons "FieldValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-path-label-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-path-sort common-lisp:nil
                       ((sort-paths :initarg :sort-paths :type
                         (common-lisp:or data-path-value-list common-lisp:null)
                         :accessor %data-path-sort-sort-paths :initform
                         (common-lisp:error ":sort-paths is required"))
                        (direction :initarg :direction :type
                         (common-lisp:or sort-direction common-lisp:null)
                         :accessor %data-path-sort-direction :initform
                         (common-lisp:error ":direction is required"))))
 (common-lisp:export (common-lisp:list 'data-path-sort 'make-data-path-sort))
 (common-lisp:defun make-data-path-sort
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sort-paths direction)
   (common-lisp:apply #'common-lisp:make-instance 'data-path-sort
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-path-sort))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-path-sort))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'direction))
      (common-lisp:list
       (common-lisp:cons "Direction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-paths))
      (common-lisp:list
       (common-lisp:cons "SortPaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-path-sort))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-path-value common-lisp:nil
                       ((field-value :initarg :field-value :type
                         (common-lisp:or field-value common-lisp:null)
                         :accessor %data-path-value-field-value :initform
                         (common-lisp:error ":field-value is required"))
                        (field-id :initarg :field-id :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         %data-path-value-field-id :initform
                         (common-lisp:error ":field-id is required"))))
 (common-lisp:export (common-lisp:list 'data-path-value 'make-data-path-value))
 (common-lisp:defun make-data-path-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key field-value field-id)
   (common-lisp:apply #'common-lisp:make-instance 'data-path-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-path-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-path-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-value))
      (common-lisp:list
       (common-lisp:cons "FieldValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-path-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-path-value-list ()
   '(trivial-types:proper-list data-path-value))
 (common-lisp:defun |make-data-path-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-path-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-point-drill-up-down-option common-lisp:nil
                       ((availability-status :initarg :availability-status
                         :type
                         (common-lisp:or dashboard-behavior common-lisp:null)
                         :accessor
                         %data-point-drill-up-down-option-availability-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'data-point-drill-up-down-option
                    'make-data-point-drill-up-down-option))
 (common-lisp:defun make-data-point-drill-up-down-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key availability-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-point-drill-up-down-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-point-drill-up-down-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-point-drill-up-down-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-status))
      (common-lisp:list
       (common-lisp:cons "AvailabilityStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-point-drill-up-down-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-point-menu-label-option common-lisp:nil
                       ((availability-status :initarg :availability-status
                         :type
                         (common-lisp:or dashboard-behavior common-lisp:null)
                         :accessor
                         %data-point-menu-label-option-availability-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'data-point-menu-label-option
                    'make-data-point-menu-label-option))
 (common-lisp:defun make-data-point-menu-label-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key availability-status)
   (common-lisp:apply #'common-lisp:make-instance 'data-point-menu-label-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-point-menu-label-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-point-menu-label-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-status))
      (common-lisp:list
       (common-lisp:cons "AvailabilityStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-point-menu-label-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-point-tooltip-option common-lisp:nil
                       ((availability-status :initarg :availability-status
                         :type
                         (common-lisp:or dashboard-behavior common-lisp:null)
                         :accessor
                         %data-point-tooltip-option-availability-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'data-point-tooltip-option
                    'make-data-point-tooltip-option))
 (common-lisp:defun make-data-point-tooltip-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key availability-status)
   (common-lisp:apply #'common-lisp:make-instance 'data-point-tooltip-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-point-tooltip-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-point-tooltip-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-status))
      (common-lisp:list
       (common-lisp:cons "AvailabilityStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-point-tooltip-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-set common-lisp:nil
                       ((data-set-usage-configuration :initarg
                         :data-set-usage-configuration :type
                         (common-lisp:or data-set-usage-configuration
                                         common-lisp:null)
                         :accessor %data-set-data-set-usage-configuration
                         :initform common-lisp:nil)
                        (column-level-permission-rules :initarg
                         :column-level-permission-rules :type
                         (common-lisp:or column-level-permission-rule-list
                                         common-lisp:null)
                         :accessor %data-set-column-level-permission-rules
                         :initform common-lisp:nil)
                        (row-level-permission-tag-configuration :initarg
                         :row-level-permission-tag-configuration :type
                         (common-lisp:or row-level-permission-tag-configuration
                                         common-lisp:null)
                         :accessor
                         %data-set-row-level-permission-tag-configuration
                         :initform common-lisp:nil)
                        (row-level-permission-data-set :initarg
                         :row-level-permission-data-set :type
                         (common-lisp:or row-level-permission-data-set
                                         common-lisp:null)
                         :accessor %data-set-row-level-permission-data-set
                         :initform common-lisp:nil)
                        (field-folders :initarg :field-folders :type
                         (common-lisp:or field-folder-map common-lisp:null)
                         :accessor %data-set-field-folders :initform
                         common-lisp:nil)
                        (column-groups :initarg :column-groups :type
                         (common-lisp:or column-group-list common-lisp:null)
                         :accessor %data-set-column-groups :initform
                         common-lisp:nil)
                        (consumed-spice-capacity-in-bytes :initarg
                         :consumed-spice-capacity-in-bytes :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %data-set-consumed-spice-capacity-in-bytes :initform
                         common-lisp:nil)
                        (import-mode :initarg :import-mode :type
                         (common-lisp:or data-set-import-mode common-lisp:null)
                         :accessor %data-set-import-mode :initform
                         common-lisp:nil)
                        (output-columns :initarg :output-columns :type
                         (common-lisp:or output-column-list common-lisp:null)
                         :accessor %data-set-output-columns :initform
                         common-lisp:nil)
                        (logical-table-map :initarg :logical-table-map :type
                         (common-lisp:or logical-table-map common-lisp:null)
                         :accessor %data-set-logical-table-map :initform
                         common-lisp:nil)
                        (physical-table-map :initarg :physical-table-map :type
                         (common-lisp:or physical-table-map common-lisp:null)
                         :accessor %data-set-physical-table-map :initform
                         common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %data-set-last-updated-time :initform common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %data-set-created-time :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %data-set-name :initform common-lisp:nil)
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %data-set-data-set-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %data-set-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'data-set 'make-data-set))
 (common-lisp:defun make-data-set
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-set-usage-configuration
                     column-level-permission-rules
                     row-level-permission-tag-configuration
                     row-level-permission-data-set field-folders column-groups
                     consumed-spice-capacity-in-bytes import-mode
                     output-columns logical-table-map physical-table-map
                     last-updated-time created-time name data-set-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'data-set
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'physical-table-map))
      (common-lisp:list
       (common-lisp:cons "PhysicalTableMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-table-map))
      (common-lisp:list
       (common-lisp:cons "LogicalTableMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-columns))
      (common-lisp:list
       (common-lisp:cons "OutputColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-mode))
      (common-lisp:list
       (common-lisp:cons "ImportMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'consumed-spice-capacity-in-bytes))
      (common-lisp:list
       (common-lisp:cons "ConsumedSpiceCapacityInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-groups))
      (common-lisp:list
       (common-lisp:cons "ColumnGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-folders))
      (common-lisp:list
       (common-lisp:cons "FieldFolders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'row-level-permission-data-set))
      (common-lisp:list
       (common-lisp:cons "RowLevelPermissionDataSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'row-level-permission-tag-configuration))
      (common-lisp:list
       (common-lisp:cons "RowLevelPermissionTagConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-level-permission-rules))
      (common-lisp:list
       (common-lisp:cons "ColumnLevelPermissionRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-set-usage-configuration))
      (common-lisp:list
       (common-lisp:cons "DataSetUsageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-set-arns-list () '(trivial-types:proper-list arn))
 (common-lisp:defun |make-data-set-arns-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-set-configuration common-lisp:nil
                       ((column-group-schema-list :initarg
                         :column-group-schema-list :type
                         (common-lisp:or column-group-schema-list
                                         common-lisp:null)
                         :accessor
                         %data-set-configuration-column-group-schema-list
                         :initform common-lisp:nil)
                        (data-set-schema :initarg :data-set-schema :type
                         (common-lisp:or data-set-schema common-lisp:null)
                         :accessor %data-set-configuration-data-set-schema
                         :initform common-lisp:nil)
                        (placeholder :initarg :placeholder :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %data-set-configuration-placeholder :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'data-set-configuration 'make-data-set-configuration))
 (common-lisp:defun make-data-set-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key column-group-schema-list data-set-schema
                     placeholder)
   (common-lisp:apply #'common-lisp:make-instance 'data-set-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-set-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-set-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placeholder))
      (common-lisp:list
       (common-lisp:cons "Placeholder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-schema))
      (common-lisp:list
       (common-lisp:cons "DataSetSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-group-schema-list))
      (common-lisp:list
       (common-lisp:cons "ColumnGroupSchemaList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-set-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-set-configuration-list ()
   '(trivial-types:proper-list data-set-configuration))
 (common-lisp:defun |make-data-set-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-set-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-set-filter-attribute () 'common-lisp:string)
(common-lisp:deftype data-set-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-set-identifier-declaration common-lisp:nil
                       ((data-set-arn :initarg :data-set-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %data-set-identifier-declaration-data-set-arn
                         :initform
                         (common-lisp:error ":data-set-arn is required"))
                        (identifier :initarg :identifier :type
                         (common-lisp:or data-set-identifier common-lisp:null)
                         :accessor %data-set-identifier-declaration-identifier
                         :initform
                         (common-lisp:error ":identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'data-set-identifier-declaration
                    'make-data-set-identifier-declaration))
 (common-lisp:defun make-data-set-identifier-declaration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-set-arn identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-set-identifier-declaration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-set-identifier-declaration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-set-identifier-declaration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-arn))
      (common-lisp:list
       (common-lisp:cons "DataSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-set-identifier-declaration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-set-identifier-declaration-list ()
   '(trivial-types:proper-list data-set-identifier-declaration))
 (common-lisp:defun |make-data-set-identifier-declaration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-set-identifier-declaration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-set-import-mode () 'common-lisp:string)
(common-lisp:deftype data-set-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-set-reference common-lisp:nil
                       ((data-set-arn :initarg :data-set-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %data-set-reference-data-set-arn :initform
                         (common-lisp:error ":data-set-arn is required"))
                        (data-set-placeholder :initarg :data-set-placeholder
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %data-set-reference-data-set-placeholder
                         :initform
                         (common-lisp:error
                          ":data-set-placeholder is required"))))
 (common-lisp:export
  (common-lisp:list 'data-set-reference 'make-data-set-reference))
 (common-lisp:defun make-data-set-reference
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-set-arn data-set-placeholder)
   (common-lisp:apply #'common-lisp:make-instance 'data-set-reference
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-set-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-set-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-set-placeholder))
      (common-lisp:list
       (common-lisp:cons "DataSetPlaceholder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-arn))
      (common-lisp:list
       (common-lisp:cons "DataSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-set-reference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-set-reference-list ()
   '(trivial-types:proper-list data-set-reference))
 (common-lisp:defun |make-data-set-reference-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-set-reference))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-set-refresh-properties common-lisp:nil
                       ((refresh-configuration :initarg :refresh-configuration
                         :type
                         (common-lisp:or refresh-configuration
                                         common-lisp:null)
                         :accessor
                         %data-set-refresh-properties-refresh-configuration
                         :initform
                         (common-lisp:error
                          ":refresh-configuration is required"))))
 (common-lisp:export
  (common-lisp:list 'data-set-refresh-properties
                    'make-data-set-refresh-properties))
 (common-lisp:defun make-data-set-refresh-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key refresh-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'data-set-refresh-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-set-refresh-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-set-refresh-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'refresh-configuration))
      (common-lisp:list
       (common-lisp:cons "RefreshConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-set-refresh-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-set-schema common-lisp:nil
                       ((column-schema-list :initarg :column-schema-list :type
                         (common-lisp:or column-schema-list common-lisp:null)
                         :accessor %data-set-schema-column-schema-list
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'data-set-schema 'make-data-set-schema))
 (common-lisp:defun make-data-set-schema
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key column-schema-list)
   (common-lisp:apply #'common-lisp:make-instance 'data-set-schema
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-set-schema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-set-schema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-schema-list))
      (common-lisp:list
       (common-lisp:cons "ColumnSchemaList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-set-schema))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-set-search-filter common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %data-set-search-filter-value :initform
                         (common-lisp:error ":value is required"))
                        (name :initarg :name :type
                         (common-lisp:or data-set-filter-attribute
                                         common-lisp:null)
                         :accessor %data-set-search-filter-name :initform
                         (common-lisp:error ":name is required"))
                        (operator :initarg :operator :type
                         (common-lisp:or filter-operator common-lisp:null)
                         :accessor %data-set-search-filter-operator :initform
                         (common-lisp:error ":operator is required"))))
 (common-lisp:export
  (common-lisp:list 'data-set-search-filter 'make-data-set-search-filter))
 (common-lisp:defun make-data-set-search-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name operator)
   (common-lisp:apply #'common-lisp:make-instance 'data-set-search-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-set-search-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-set-search-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "Operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-set-search-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-set-search-filter-list ()
   '(trivial-types:proper-list data-set-search-filter))
 (common-lisp:defun |make-data-set-search-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-set-search-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-set-summary common-lisp:nil
                       ((column-level-permission-rules-applied :initarg
                         :column-level-permission-rules-applied :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %data-set-summary-column-level-permission-rules-applied
                         :initform common-lisp:nil)
                        (row-level-permission-tag-configuration-applied
                         :initarg
                         :row-level-permission-tag-configuration-applied :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %data-set-summary-row-level-permission-tag-configuration-applied
                         :initform common-lisp:nil)
                        (row-level-permission-data-set :initarg
                         :row-level-permission-data-set :type
                         (common-lisp:or row-level-permission-data-set
                                         common-lisp:null)
                         :accessor
                         %data-set-summary-row-level-permission-data-set
                         :initform common-lisp:nil)
                        (import-mode :initarg :import-mode :type
                         (common-lisp:or data-set-import-mode common-lisp:null)
                         :accessor %data-set-summary-import-mode :initform
                         common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %data-set-summary-last-updated-time :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %data-set-summary-created-time :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %data-set-summary-name :initform
                         common-lisp:nil)
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %data-set-summary-data-set-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %data-set-summary-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'data-set-summary 'make-data-set-summary))
 (common-lisp:defun make-data-set-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key column-level-permission-rules-applied
                     row-level-permission-tag-configuration-applied
                     row-level-permission-data-set import-mode
                     last-updated-time created-time name data-set-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'data-set-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-set-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-set-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-mode))
      (common-lisp:list
       (common-lisp:cons "ImportMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'row-level-permission-data-set))
      (common-lisp:list
       (common-lisp:cons "RowLevelPermissionDataSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'row-level-permission-tag-configuration-applied))
      (common-lisp:list
       (common-lisp:cons "RowLevelPermissionTagConfigurationApplied"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-level-permission-rules-applied))
      (common-lisp:list
       (common-lisp:cons "ColumnLevelPermissionRulesApplied"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-set-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-set-summary-list ()
   '(trivial-types:proper-list data-set-summary))
 (common-lisp:defun |make-data-set-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-set-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-set-usage-configuration common-lisp:nil
                       ((disable-use-as-imported-source :initarg
                         :disable-use-as-imported-source :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %data-set-usage-configuration-disable-use-as-imported-source
                         :initform common-lisp:nil)
                        (disable-use-as-direct-query-source :initarg
                         :disable-use-as-direct-query-source :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %data-set-usage-configuration-disable-use-as-direct-query-source
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'data-set-usage-configuration
                    'make-data-set-usage-configuration))
 (common-lisp:defun make-data-set-usage-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key disable-use-as-imported-source
                     disable-use-as-direct-query-source)
   (common-lisp:apply #'common-lisp:make-instance 'data-set-usage-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-set-usage-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-set-usage-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-use-as-direct-query-source))
      (common-lisp:list
       (common-lisp:cons "DisableUseAsDirectQuerySource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-use-as-imported-source))
      (common-lisp:list
       (common-lisp:cons "DisableUseAsImportedSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-set-usage-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-source common-lisp:nil
                       ((secret-arn :initarg :secret-arn :type
                         (common-lisp:or secret-arn common-lisp:null) :accessor
                         %data-source-secret-arn :initform common-lisp:nil)
                        (error-info :initarg :error-info :type
                         (common-lisp:or data-source-error-info
                                         common-lisp:null)
                         :accessor %data-source-error-info :initform
                         common-lisp:nil)
                        (ssl-properties :initarg :ssl-properties :type
                         (common-lisp:or ssl-properties common-lisp:null)
                         :accessor %data-source-ssl-properties :initform
                         common-lisp:nil)
                        (vpc-connection-properties :initarg
                         :vpc-connection-properties :type
                         (common-lisp:or vpc-connection-properties
                                         common-lisp:null)
                         :accessor %data-source-vpc-connection-properties
                         :initform common-lisp:nil)
                        (alternate-data-source-parameters :initarg
                         :alternate-data-source-parameters :type
                         (common-lisp:or data-source-parameters-list
                                         common-lisp:null)
                         :accessor
                         %data-source-alternate-data-source-parameters
                         :initform common-lisp:nil)
                        (data-source-parameters :initarg
                         :data-source-parameters :type
                         (common-lisp:or data-source-parameters
                                         common-lisp:null)
                         :accessor %data-source-data-source-parameters
                         :initform common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %data-source-last-updated-time :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %data-source-created-time :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or resource-status common-lisp:null)
                         :accessor %data-source-status :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or data-source-type common-lisp:null)
                         :accessor %data-source-type :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %data-source-name :initform common-lisp:nil)
                        (data-source-id :initarg :data-source-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %data-source-data-source-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %data-source-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'data-source 'make-data-source))
 (common-lisp:defun make-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key secret-arn error-info ssl-properties
                     vpc-connection-properties alternate-data-source-parameters
                     data-source-parameters last-updated-time created-time
                     status type name data-source-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'data-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-parameters))
      (common-lisp:list
       (common-lisp:cons "DataSourceParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alternate-data-source-parameters))
      (common-lisp:list
       (common-lisp:cons "AlternateDataSourceParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-connection-properties))
      (common-lisp:list
       (common-lisp:cons "VpcConnectionProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-properties))
      (common-lisp:list
       (common-lisp:cons "SslProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-info))
      (common-lisp:list
       (common-lisp:cons "ErrorInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-source-credentials common-lisp:nil
                       ((secret-arn :initarg :secret-arn :type
                         (common-lisp:or secret-arn common-lisp:null) :accessor
                         %data-source-credentials-secret-arn :initform
                         common-lisp:nil)
                        (copy-source-arn :initarg :copy-source-arn :type
                         (common-lisp:or copy-source-arn common-lisp:null)
                         :accessor %data-source-credentials-copy-source-arn
                         :initform common-lisp:nil)
                        (credential-pair :initarg :credential-pair :type
                         (common-lisp:or credential-pair common-lisp:null)
                         :accessor %data-source-credentials-credential-pair
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'data-source-credentials 'make-data-source-credentials))
 (common-lisp:defun make-data-source-credentials
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key secret-arn copy-source-arn
                     credential-pair)
   (common-lisp:apply #'common-lisp:make-instance 'data-source-credentials
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credential-pair))
      (common-lisp:list
       (common-lisp:cons "CredentialPair"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-source-arn))
      (common-lisp:list
       (common-lisp:cons "CopySourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-source-error-info common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %data-source-error-info-message :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or data-source-error-info-type
                                         common-lisp:null)
                         :accessor %data-source-error-info-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'data-source-error-info 'make-data-source-error-info))
 (common-lisp:defun make-data-source-error-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message type)
   (common-lisp:apply #'common-lisp:make-instance 'data-source-error-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-error-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-error-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-error-info))
   common-lisp:nil))
(common-lisp:deftype data-source-error-info-type () 'common-lisp:string)
(common-lisp:deftype data-source-filter-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-source-list ()
   '(trivial-types:proper-list data-source))
 (common-lisp:defun |make-data-source-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-source-parameters common-lisp:nil
                       ((databricks-parameters :initarg :databricks-parameters
                         :type
                         (common-lisp:or databricks-parameters
                                         common-lisp:null)
                         :accessor
                         %data-source-parameters-databricks-parameters
                         :initform common-lisp:nil)
                        (exasol-parameters :initarg :exasol-parameters :type
                         (common-lisp:or exasol-parameters common-lisp:null)
                         :accessor %data-source-parameters-exasol-parameters
                         :initform common-lisp:nil)
                        (amazon-open-search-parameters :initarg
                         :amazon-open-search-parameters :type
                         (common-lisp:or amazon-open-search-parameters
                                         common-lisp:null)
                         :accessor
                         %data-source-parameters-amazon-open-search-parameters
                         :initform common-lisp:nil)
                        (twitter-parameters :initarg :twitter-parameters :type
                         (common-lisp:or twitter-parameters common-lisp:null)
                         :accessor %data-source-parameters-twitter-parameters
                         :initform common-lisp:nil)
                        (teradata-parameters :initarg :teradata-parameters
                         :type
                         (common-lisp:or teradata-parameters common-lisp:null)
                         :accessor %data-source-parameters-teradata-parameters
                         :initform common-lisp:nil)
                        (sql-server-parameters :initarg :sql-server-parameters
                         :type
                         (common-lisp:or sql-server-parameters
                                         common-lisp:null)
                         :accessor
                         %data-source-parameters-sql-server-parameters
                         :initform common-lisp:nil)
                        (spark-parameters :initarg :spark-parameters :type
                         (common-lisp:or spark-parameters common-lisp:null)
                         :accessor %data-source-parameters-spark-parameters
                         :initform common-lisp:nil)
                        (snowflake-parameters :initarg :snowflake-parameters
                         :type
                         (common-lisp:or snowflake-parameters common-lisp:null)
                         :accessor %data-source-parameters-snowflake-parameters
                         :initform common-lisp:nil)
                        (service-now-parameters :initarg
                         :service-now-parameters :type
                         (common-lisp:or service-now-parameters
                                         common-lisp:null)
                         :accessor
                         %data-source-parameters-service-now-parameters
                         :initform common-lisp:nil)
                        (s3parameters :initarg :s3parameters :type
                         (common-lisp:or s3parameters common-lisp:null)
                         :accessor %data-source-parameters-s3parameters
                         :initform common-lisp:nil)
                        (redshift-parameters :initarg :redshift-parameters
                         :type
                         (common-lisp:or redshift-parameters common-lisp:null)
                         :accessor %data-source-parameters-redshift-parameters
                         :initform common-lisp:nil)
                        (rds-parameters :initarg :rds-parameters :type
                         (common-lisp:or rds-parameters common-lisp:null)
                         :accessor %data-source-parameters-rds-parameters
                         :initform common-lisp:nil)
                        (presto-parameters :initarg :presto-parameters :type
                         (common-lisp:or presto-parameters common-lisp:null)
                         :accessor %data-source-parameters-presto-parameters
                         :initform common-lisp:nil)
                        (postgre-sql-parameters :initarg
                         :postgre-sql-parameters :type
                         (common-lisp:or postgre-sql-parameters
                                         common-lisp:null)
                         :accessor
                         %data-source-parameters-postgre-sql-parameters
                         :initform common-lisp:nil)
                        (oracle-parameters :initarg :oracle-parameters :type
                         (common-lisp:or oracle-parameters common-lisp:null)
                         :accessor %data-source-parameters-oracle-parameters
                         :initform common-lisp:nil)
                        (my-sql-parameters :initarg :my-sql-parameters :type
                         (common-lisp:or my-sql-parameters common-lisp:null)
                         :accessor %data-source-parameters-my-sql-parameters
                         :initform common-lisp:nil)
                        (maria-db-parameters :initarg :maria-db-parameters
                         :type
                         (common-lisp:or maria-db-parameters common-lisp:null)
                         :accessor %data-source-parameters-maria-db-parameters
                         :initform common-lisp:nil)
                        (jira-parameters :initarg :jira-parameters :type
                         (common-lisp:or jira-parameters common-lisp:null)
                         :accessor %data-source-parameters-jira-parameters
                         :initform common-lisp:nil)
                        (aws-iot-analytics-parameters :initarg
                         :aws-iot-analytics-parameters :type
                         (common-lisp:or aws-iot-analytics-parameters
                                         common-lisp:null)
                         :accessor
                         %data-source-parameters-aws-iot-analytics-parameters
                         :initform common-lisp:nil)
                        (aurora-postgre-sql-parameters :initarg
                         :aurora-postgre-sql-parameters :type
                         (common-lisp:or aurora-postgre-sql-parameters
                                         common-lisp:null)
                         :accessor
                         %data-source-parameters-aurora-postgre-sql-parameters
                         :initform common-lisp:nil)
                        (aurora-parameters :initarg :aurora-parameters :type
                         (common-lisp:or aurora-parameters common-lisp:null)
                         :accessor %data-source-parameters-aurora-parameters
                         :initform common-lisp:nil)
                        (athena-parameters :initarg :athena-parameters :type
                         (common-lisp:or athena-parameters common-lisp:null)
                         :accessor %data-source-parameters-athena-parameters
                         :initform common-lisp:nil)
                        (amazon-elasticsearch-parameters :initarg
                         :amazon-elasticsearch-parameters :type
                         (common-lisp:or amazon-elasticsearch-parameters
                                         common-lisp:null)
                         :accessor
                         %data-source-parameters-amazon-elasticsearch-parameters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'data-source-parameters 'make-data-source-parameters))
 (common-lisp:defun make-data-source-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key databricks-parameters exasol-parameters
                     amazon-open-search-parameters twitter-parameters
                     teradata-parameters sql-server-parameters spark-parameters
                     snowflake-parameters service-now-parameters s3parameters
                     redshift-parameters rds-parameters presto-parameters
                     postgre-sql-parameters oracle-parameters my-sql-parameters
                     maria-db-parameters jira-parameters
                     aws-iot-analytics-parameters aurora-postgre-sql-parameters
                     aurora-parameters athena-parameters
                     amazon-elasticsearch-parameters)
   (common-lisp:apply #'common-lisp:make-instance 'data-source-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amazon-elasticsearch-parameters))
      (common-lisp:list
       (common-lisp:cons "AmazonElasticsearchParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'athena-parameters))
      (common-lisp:list
       (common-lisp:cons "AthenaParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aurora-parameters))
      (common-lisp:list
       (common-lisp:cons "AuroraParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aurora-postgre-sql-parameters))
      (common-lisp:list
       (common-lisp:cons "AuroraPostgreSqlParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-iot-analytics-parameters))
      (common-lisp:list
       (common-lisp:cons "AwsIotAnalyticsParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jira-parameters))
      (common-lisp:list
       (common-lisp:cons "JiraParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maria-db-parameters))
      (common-lisp:list
       (common-lisp:cons "MariaDbParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'my-sql-parameters))
      (common-lisp:list
       (common-lisp:cons "MySqlParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oracle-parameters))
      (common-lisp:list
       (common-lisp:cons "OracleParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'postgre-sql-parameters))
      (common-lisp:list
       (common-lisp:cons "PostgreSqlParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'presto-parameters))
      (common-lisp:list
       (common-lisp:cons "PrestoParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rds-parameters))
      (common-lisp:list
       (common-lisp:cons "RdsParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift-parameters))
      (common-lisp:list
       (common-lisp:cons "RedshiftParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3parameters))
      (common-lisp:list
       (common-lisp:cons "S3Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-now-parameters))
      (common-lisp:list
       (common-lisp:cons "ServiceNowParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snowflake-parameters))
      (common-lisp:list
       (common-lisp:cons "SnowflakeParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spark-parameters))
      (common-lisp:list
       (common-lisp:cons "SparkParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sql-server-parameters))
      (common-lisp:list
       (common-lisp:cons "SqlServerParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'teradata-parameters))
      (common-lisp:list
       (common-lisp:cons "TeradataParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'twitter-parameters))
      (common-lisp:list
       (common-lisp:cons "TwitterParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amazon-open-search-parameters))
      (common-lisp:list
       (common-lisp:cons "AmazonOpenSearchParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exasol-parameters))
      (common-lisp:list
       (common-lisp:cons "ExasolParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'databricks-parameters))
      (common-lisp:list
       (common-lisp:cons "DatabricksParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-source-parameters-list ()
   '(trivial-types:proper-list data-source-parameters))
 (common-lisp:defun |make-data-source-parameters-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-source-parameters))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-source-search-filter common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %data-source-search-filter-value :initform
                         (common-lisp:error ":value is required"))
                        (name :initarg :name :type
                         (common-lisp:or data-source-filter-attribute
                                         common-lisp:null)
                         :accessor %data-source-search-filter-name :initform
                         (common-lisp:error ":name is required"))
                        (operator :initarg :operator :type
                         (common-lisp:or filter-operator common-lisp:null)
                         :accessor %data-source-search-filter-operator
                         :initform
                         (common-lisp:error ":operator is required"))))
 (common-lisp:export
  (common-lisp:list 'data-source-search-filter
                    'make-data-source-search-filter))
 (common-lisp:defun make-data-source-search-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name operator)
   (common-lisp:apply #'common-lisp:make-instance 'data-source-search-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-search-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-search-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "Operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-search-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-source-search-filter-list ()
   '(trivial-types:proper-list data-source-search-filter))
 (common-lisp:defun |make-data-source-search-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-source-search-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-source-summary common-lisp:nil
                       ((last-updated-time :initarg :last-updated-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %data-source-summary-last-updated-time :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %data-source-summary-created-time :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or data-source-type common-lisp:null)
                         :accessor %data-source-summary-type :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %data-source-summary-name :initform
                         common-lisp:nil)
                        (data-source-id :initarg :data-source-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %data-source-summary-data-source-id
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %data-source-summary-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'data-source-summary 'make-data-source-summary))
 (common-lisp:defun make-data-source-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-time created-time type name
                     data-source-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'data-source-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-source-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-source-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-source-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-source-summary-list ()
   '(trivial-types:proper-list data-source-summary))
 (common-lisp:defun |make-data-source-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-source-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-source-type () 'common-lisp:string)
(common-lisp:deftype database () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass databricks-parameters common-lisp:nil
                       ((sql-endpoint-path :initarg :sql-endpoint-path :type
                         (common-lisp:or sql-endpoint-path common-lisp:null)
                         :accessor %databricks-parameters-sql-endpoint-path
                         :initform
                         (common-lisp:error ":sql-endpoint-path is required"))
                        (port :initarg :port :type
                         (common-lisp:or port common-lisp:null) :accessor
                         %databricks-parameters-port :initform
                         (common-lisp:error ":port is required"))
                        (host :initarg :host :type
                         (common-lisp:or host common-lisp:null) :accessor
                         %databricks-parameters-host :initform
                         (common-lisp:error ":host is required"))))
 (common-lisp:export
  (common-lisp:list 'databricks-parameters 'make-databricks-parameters))
 (common-lisp:defun make-databricks-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sql-endpoint-path port host)
   (common-lisp:apply #'common-lisp:make-instance 'databricks-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          databricks-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          databricks-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql-endpoint-path))
      (common-lisp:list
       (common-lisp:cons "SqlEndpointPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          databricks-parameters))
   common-lisp:nil))
(common-lisp:deftype date-aggregation-function () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass date-axis-options common-lisp:nil
                       ((missing-date-visibility :initarg
                         :missing-date-visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %date-axis-options-missing-date-visibility :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'date-axis-options 'make-date-axis-options))
 (common-lisp:defun make-date-axis-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key missing-date-visibility)
   (common-lisp:apply #'common-lisp:make-instance 'date-axis-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input date-axis-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input date-axis-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'missing-date-visibility))
      (common-lisp:list
       (common-lisp:cons "MissingDateVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input date-axis-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass date-dimension-field common-lisp:nil
                       ((format-configuration :initarg :format-configuration
                         :type
                         (common-lisp:or date-time-format-configuration
                                         common-lisp:null)
                         :accessor %date-dimension-field-format-configuration
                         :initform common-lisp:nil)
                        (hierarchy-id :initarg :hierarchy-id :type
                         (common-lisp:or hierarchy-id common-lisp:null)
                         :accessor %date-dimension-field-hierarchy-id :initform
                         common-lisp:nil)
                        (date-granularity :initarg :date-granularity :type
                         (common-lisp:or time-granularity common-lisp:null)
                         :accessor %date-dimension-field-date-granularity
                         :initform common-lisp:nil)
                        (column :initarg :column :type
                         (common-lisp:or column-identifier common-lisp:null)
                         :accessor %date-dimension-field-column :initform
                         (common-lisp:error ":column is required"))
                        (field-id :initarg :field-id :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         %date-dimension-field-field-id :initform
                         (common-lisp:error ":field-id is required"))))
 (common-lisp:export
  (common-lisp:list 'date-dimension-field 'make-date-dimension-field))
 (common-lisp:defun make-date-dimension-field
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key format-configuration hierarchy-id
                     date-granularity column field-id)
   (common-lisp:apply #'common-lisp:make-instance 'date-dimension-field
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input date-dimension-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input date-dimension-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-granularity))
      (common-lisp:list
       (common-lisp:cons "DateGranularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-id))
      (common-lisp:list
       (common-lisp:cons "HierarchyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'format-configuration))
      (common-lisp:list
       (common-lisp:cons "FormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input date-dimension-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass date-measure-field common-lisp:nil
                       ((format-configuration :initarg :format-configuration
                         :type
                         (common-lisp:or date-time-format-configuration
                                         common-lisp:null)
                         :accessor %date-measure-field-format-configuration
                         :initform common-lisp:nil)
                        (aggregation-function :initarg :aggregation-function
                         :type
                         (common-lisp:or date-aggregation-function
                                         common-lisp:null)
                         :accessor %date-measure-field-aggregation-function
                         :initform common-lisp:nil)
                        (column :initarg :column :type
                         (common-lisp:or column-identifier common-lisp:null)
                         :accessor %date-measure-field-column :initform
                         (common-lisp:error ":column is required"))
                        (field-id :initarg :field-id :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         %date-measure-field-field-id :initform
                         (common-lisp:error ":field-id is required"))))
 (common-lisp:export
  (common-lisp:list 'date-measure-field 'make-date-measure-field))
 (common-lisp:defun make-date-measure-field
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key format-configuration aggregation-function
                     column field-id)
   (common-lisp:apply #'common-lisp:make-instance 'date-measure-field
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input date-measure-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input date-measure-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-function))
      (common-lisp:list
       (common-lisp:cons "AggregationFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'format-configuration))
      (common-lisp:list
       (common-lisp:cons "FormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input date-measure-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype date-time-default-value-list ()
   '(trivial-types:proper-list sensitive-timestamp))
 (common-lisp:defun |make-date-time-default-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sensitive-timestamp))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass date-time-default-values common-lisp:nil
                       ((rolling-date :initarg :rolling-date :type
                         (common-lisp:or rolling-date-configuration
                                         common-lisp:null)
                         :accessor %date-time-default-values-rolling-date
                         :initform common-lisp:nil)
                        (static-values :initarg :static-values :type
                         (common-lisp:or date-time-default-value-list
                                         common-lisp:null)
                         :accessor %date-time-default-values-static-values
                         :initform common-lisp:nil)
                        (dynamic-value :initarg :dynamic-value :type
                         (common-lisp:or dynamic-default-value
                                         common-lisp:null)
                         :accessor %date-time-default-values-dynamic-value
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'date-time-default-values 'make-date-time-default-values))
 (common-lisp:defun make-date-time-default-values
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rolling-date static-values dynamic-value)
   (common-lisp:apply #'common-lisp:make-instance 'date-time-default-values
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          date-time-default-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          date-time-default-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamic-value))
      (common-lisp:list
       (common-lisp:cons "DynamicValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-values))
      (common-lisp:list
       (common-lisp:cons "StaticValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rolling-date))
      (common-lisp:list
       (common-lisp:cons "RollingDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          date-time-default-values))
   common-lisp:nil))
(common-lisp:deftype date-time-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass date-time-format-configuration common-lisp:nil
                       ((numeric-format-configuration :initarg
                         :numeric-format-configuration :type
                         (common-lisp:or numeric-format-configuration
                                         common-lisp:null)
                         :accessor
                         %date-time-format-configuration-numeric-format-configuration
                         :initform common-lisp:nil)
                        (null-value-format-configuration :initarg
                         :null-value-format-configuration :type
                         (common-lisp:or null-value-format-configuration
                                         common-lisp:null)
                         :accessor
                         %date-time-format-configuration-null-value-format-configuration
                         :initform common-lisp:nil)
                        (date-time-format :initarg :date-time-format :type
                         (common-lisp:or date-time-format common-lisp:null)
                         :accessor
                         %date-time-format-configuration-date-time-format
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'date-time-format-configuration
                    'make-date-time-format-configuration))
 (common-lisp:defun make-date-time-format-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key numeric-format-configuration
                     null-value-format-configuration date-time-format)
   (common-lisp:apply #'common-lisp:make-instance
                      'date-time-format-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          date-time-format-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          date-time-format-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-time-format))
      (common-lisp:list
       (common-lisp:cons "DateTimeFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'null-value-format-configuration))
      (common-lisp:list
       (common-lisp:cons "NullValueFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'numeric-format-configuration))
      (common-lisp:list
       (common-lisp:cons "NumericFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          date-time-format-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass date-time-hierarchy common-lisp:nil
                       ((drill-down-filters :initarg :drill-down-filters :type
                         (common-lisp:or drill-down-filter-list
                                         common-lisp:null)
                         :accessor %date-time-hierarchy-drill-down-filters
                         :initform common-lisp:nil)
                        (hierarchy-id :initarg :hierarchy-id :type
                         (common-lisp:or hierarchy-id common-lisp:null)
                         :accessor %date-time-hierarchy-hierarchy-id :initform
                         (common-lisp:error ":hierarchy-id is required"))))
 (common-lisp:export
  (common-lisp:list 'date-time-hierarchy 'make-date-time-hierarchy))
 (common-lisp:defun make-date-time-hierarchy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key drill-down-filters hierarchy-id)
   (common-lisp:apply #'common-lisp:make-instance 'date-time-hierarchy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input date-time-hierarchy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input date-time-hierarchy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-id))
      (common-lisp:list
       (common-lisp:cons "HierarchyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drill-down-filters))
      (common-lisp:list
       (common-lisp:cons "DrillDownFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input date-time-hierarchy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass date-time-parameter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or sensitive-timestamp-list
                                         common-lisp:null)
                         :accessor %date-time-parameter-values :initform
                         (common-lisp:error ":values is required"))
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %date-time-parameter-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'date-time-parameter 'make-date-time-parameter))
 (common-lisp:defun make-date-time-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values name)
   (common-lisp:apply #'common-lisp:make-instance 'date-time-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input date-time-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input date-time-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input date-time-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass date-time-parameter-declaration common-lisp:nil
                       ((value-when-unset :initarg :value-when-unset :type
                         (common-lisp:or
                          date-time-value-when-unset-configuration
                          common-lisp:null)
                         :accessor
                         %date-time-parameter-declaration-value-when-unset
                         :initform common-lisp:nil)
                        (time-granularity :initarg :time-granularity :type
                         (common-lisp:or time-granularity common-lisp:null)
                         :accessor
                         %date-time-parameter-declaration-time-granularity
                         :initform common-lisp:nil)
                        (default-values :initarg :default-values :type
                         (common-lisp:or date-time-default-values
                                         common-lisp:null)
                         :accessor
                         %date-time-parameter-declaration-default-values
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or parameter-name common-lisp:null)
                         :accessor %date-time-parameter-declaration-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'date-time-parameter-declaration
                    'make-date-time-parameter-declaration))
 (common-lisp:defun make-date-time-parameter-declaration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value-when-unset time-granularity
                     default-values name)
   (common-lisp:apply #'common-lisp:make-instance
                      'date-time-parameter-declaration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          date-time-parameter-declaration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          date-time-parameter-declaration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-values))
      (common-lisp:list
       (common-lisp:cons "DefaultValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-granularity))
      (common-lisp:list
       (common-lisp:cons "TimeGranularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-when-unset))
      (common-lisp:list
       (common-lisp:cons "ValueWhenUnset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          date-time-parameter-declaration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype date-time-parameter-list ()
   '(trivial-types:proper-list date-time-parameter))
 (common-lisp:defun |make-date-time-parameter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list date-time-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass date-time-picker-control-display-options common-lisp:nil
                       ((date-time-format :initarg :date-time-format :type
                         (common-lisp:or date-time-format common-lisp:null)
                         :accessor
                         %date-time-picker-control-display-options-date-time-format
                         :initform common-lisp:nil)
                        (title-options :initarg :title-options :type
                         (common-lisp:or label-options common-lisp:null)
                         :accessor
                         %date-time-picker-control-display-options-title-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'date-time-picker-control-display-options
                    'make-date-time-picker-control-display-options))
 (common-lisp:defun make-date-time-picker-control-display-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key date-time-format title-options)
   (common-lisp:apply #'common-lisp:make-instance
                      'date-time-picker-control-display-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          date-time-picker-control-display-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          date-time-picker-control-display-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title-options))
      (common-lisp:list
       (common-lisp:cons "TitleOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-time-format))
      (common-lisp:list
       (common-lisp:cons "DateTimeFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          date-time-picker-control-display-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass date-time-value-when-unset-configuration common-lisp:nil
                       ((custom-value :initarg :custom-value :type
                         (common-lisp:or sensitive-timestamp common-lisp:null)
                         :accessor
                         %date-time-value-when-unset-configuration-custom-value
                         :initform common-lisp:nil)
                        (value-when-unset-option :initarg
                         :value-when-unset-option :type
                         (common-lisp:or value-when-unset-option
                                         common-lisp:null)
                         :accessor
                         %date-time-value-when-unset-configuration-value-when-unset-option
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'date-time-value-when-unset-configuration
                    'make-date-time-value-when-unset-configuration))
 (common-lisp:defun make-date-time-value-when-unset-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-value value-when-unset-option)
   (common-lisp:apply #'common-lisp:make-instance
                      'date-time-value-when-unset-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          date-time-value-when-unset-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          date-time-value-when-unset-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-when-unset-option))
      (common-lisp:list
       (common-lisp:cons "ValueWhenUnsetOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-value))
      (common-lisp:list
       (common-lisp:cons "CustomValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          date-time-value-when-unset-configuration))
   common-lisp:nil))
(common-lisp:deftype day-of-month () 'common-lisp:string)
(common-lisp:deftype day-of-week () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype decimal-default-value-list ()
   '(trivial-types:proper-list sensitive-double-object))
 (common-lisp:defun |make-decimal-default-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sensitive-double-object))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass decimal-default-values common-lisp:nil
                       ((static-values :initarg :static-values :type
                         (common-lisp:or decimal-default-value-list
                                         common-lisp:null)
                         :accessor %decimal-default-values-static-values
                         :initform common-lisp:nil)
                        (dynamic-value :initarg :dynamic-value :type
                         (common-lisp:or dynamic-default-value
                                         common-lisp:null)
                         :accessor %decimal-default-values-dynamic-value
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'decimal-default-values 'make-decimal-default-values))
 (common-lisp:defun make-decimal-default-values
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key static-values dynamic-value)
   (common-lisp:apply #'common-lisp:make-instance 'decimal-default-values
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decimal-default-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decimal-default-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamic-value))
      (common-lisp:list
       (common-lisp:cons "DynamicValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-values))
      (common-lisp:list
       (common-lisp:cons "StaticValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decimal-default-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass decimal-parameter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or sensitive-double-list
                                         common-lisp:null)
                         :accessor %decimal-parameter-values :initform
                         (common-lisp:error ":values is required"))
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %decimal-parameter-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'decimal-parameter 'make-decimal-parameter))
 (common-lisp:defun make-decimal-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values name)
   (common-lisp:apply #'common-lisp:make-instance 'decimal-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input decimal-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input decimal-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input decimal-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass decimal-parameter-declaration common-lisp:nil
                       ((value-when-unset :initarg :value-when-unset :type
                         (common-lisp:or decimal-value-when-unset-configuration
                                         common-lisp:null)
                         :accessor
                         %decimal-parameter-declaration-value-when-unset
                         :initform common-lisp:nil)
                        (default-values :initarg :default-values :type
                         (common-lisp:or decimal-default-values
                                         common-lisp:null)
                         :accessor
                         %decimal-parameter-declaration-default-values
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or parameter-name common-lisp:null)
                         :accessor %decimal-parameter-declaration-name
                         :initform (common-lisp:error ":name is required"))
                        (parameter-value-type :initarg :parameter-value-type
                         :type
                         (common-lisp:or parameter-value-type common-lisp:null)
                         :accessor
                         %decimal-parameter-declaration-parameter-value-type
                         :initform
                         (common-lisp:error
                          ":parameter-value-type is required"))))
 (common-lisp:export
  (common-lisp:list 'decimal-parameter-declaration
                    'make-decimal-parameter-declaration))
 (common-lisp:defun make-decimal-parameter-declaration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value-when-unset default-values name
                     parameter-value-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'decimal-parameter-declaration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decimal-parameter-declaration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decimal-parameter-declaration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-value-type))
      (common-lisp:list
       (common-lisp:cons "ParameterValueType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-values))
      (common-lisp:list
       (common-lisp:cons "DefaultValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-when-unset))
      (common-lisp:list
       (common-lisp:cons "ValueWhenUnset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decimal-parameter-declaration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype decimal-parameter-list ()
   '(trivial-types:proper-list decimal-parameter))
 (common-lisp:defun |make-decimal-parameter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list decimal-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype decimal-places () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass decimal-places-configuration common-lisp:nil
                       ((decimal-places :initarg :decimal-places :type
                         (common-lisp:or decimal-places common-lisp:null)
                         :accessor %decimal-places-configuration-decimal-places
                         :initform
                         (common-lisp:error ":decimal-places is required"))))
 (common-lisp:export
  (common-lisp:list 'decimal-places-configuration
                    'make-decimal-places-configuration))
 (common-lisp:defun make-decimal-places-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key decimal-places)
   (common-lisp:apply #'common-lisp:make-instance 'decimal-places-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decimal-places-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decimal-places-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decimal-places))
      (common-lisp:list
       (common-lisp:cons "DecimalPlaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decimal-places-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass decimal-value-when-unset-configuration common-lisp:nil
                       ((custom-value :initarg :custom-value :type
                         (common-lisp:or sensitive-double common-lisp:null)
                         :accessor
                         %decimal-value-when-unset-configuration-custom-value
                         :initform common-lisp:nil)
                        (value-when-unset-option :initarg
                         :value-when-unset-option :type
                         (common-lisp:or value-when-unset-option
                                         common-lisp:null)
                         :accessor
                         %decimal-value-when-unset-configuration-value-when-unset-option
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'decimal-value-when-unset-configuration
                    'make-decimal-value-when-unset-configuration))
 (common-lisp:defun make-decimal-value-when-unset-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-value value-when-unset-option)
   (common-lisp:apply #'common-lisp:make-instance
                      'decimal-value-when-unset-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decimal-value-when-unset-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decimal-value-when-unset-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-when-unset-option))
      (common-lisp:list
       (common-lisp:cons "ValueWhenUnsetOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-value))
      (common-lisp:list
       (common-lisp:cons "CustomValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decimal-value-when-unset-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass default-free-form-layout-configuration common-lisp:nil
                       ((canvas-size-options :initarg :canvas-size-options
                         :type
                         (common-lisp:or free-form-layout-canvas-size-options
                                         common-lisp:null)
                         :accessor
                         %default-free-form-layout-configuration-canvas-size-options
                         :initform
                         (common-lisp:error
                          ":canvas-size-options is required"))))
 (common-lisp:export
  (common-lisp:list 'default-free-form-layout-configuration
                    'make-default-free-form-layout-configuration))
 (common-lisp:defun make-default-free-form-layout-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key canvas-size-options)
   (common-lisp:apply #'common-lisp:make-instance
                      'default-free-form-layout-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          default-free-form-layout-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          default-free-form-layout-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canvas-size-options))
      (common-lisp:list
       (common-lisp:cons "CanvasSizeOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          default-free-form-layout-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass default-grid-layout-configuration common-lisp:nil
                       ((canvas-size-options :initarg :canvas-size-options
                         :type
                         (common-lisp:or grid-layout-canvas-size-options
                                         common-lisp:null)
                         :accessor
                         %default-grid-layout-configuration-canvas-size-options
                         :initform
                         (common-lisp:error
                          ":canvas-size-options is required"))))
 (common-lisp:export
  (common-lisp:list 'default-grid-layout-configuration
                    'make-default-grid-layout-configuration))
 (common-lisp:defun make-default-grid-layout-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key canvas-size-options)
   (common-lisp:apply #'common-lisp:make-instance
                      'default-grid-layout-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          default-grid-layout-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          default-grid-layout-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canvas-size-options))
      (common-lisp:list
       (common-lisp:cons "CanvasSizeOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          default-grid-layout-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass default-interactive-layout-configuration common-lisp:nil
                       ((free-form :initarg :free-form :type
                         (common-lisp:or default-free-form-layout-configuration
                                         common-lisp:null)
                         :accessor
                         %default-interactive-layout-configuration-free-form
                         :initform common-lisp:nil)
                        (grid :initarg :grid :type
                         (common-lisp:or default-grid-layout-configuration
                                         common-lisp:null)
                         :accessor
                         %default-interactive-layout-configuration-grid
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'default-interactive-layout-configuration
                    'make-default-interactive-layout-configuration))
 (common-lisp:defun make-default-interactive-layout-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key free-form grid)
   (common-lisp:apply #'common-lisp:make-instance
                      'default-interactive-layout-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          default-interactive-layout-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          default-interactive-layout-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grid))
      (common-lisp:list
       (common-lisp:cons "Grid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'free-form))
      (common-lisp:list
       (common-lisp:cons "FreeForm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          default-interactive-layout-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass default-new-sheet-configuration common-lisp:nil
                       ((sheet-content-type :initarg :sheet-content-type :type
                         (common-lisp:or sheet-content-type common-lisp:null)
                         :accessor
                         %default-new-sheet-configuration-sheet-content-type
                         :initform common-lisp:nil)
                        (paginated-layout-configuration :initarg
                         :paginated-layout-configuration :type
                         (common-lisp:or default-paginated-layout-configuration
                                         common-lisp:null)
                         :accessor
                         %default-new-sheet-configuration-paginated-layout-configuration
                         :initform common-lisp:nil)
                        (interactive-layout-configuration :initarg
                         :interactive-layout-configuration :type
                         (common-lisp:or
                          default-interactive-layout-configuration
                          common-lisp:null)
                         :accessor
                         %default-new-sheet-configuration-interactive-layout-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'default-new-sheet-configuration
                    'make-default-new-sheet-configuration))
 (common-lisp:defun make-default-new-sheet-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sheet-content-type
                     paginated-layout-configuration
                     interactive-layout-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'default-new-sheet-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          default-new-sheet-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          default-new-sheet-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'interactive-layout-configuration))
      (common-lisp:list
       (common-lisp:cons "InteractiveLayoutConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'paginated-layout-configuration))
      (common-lisp:list
       (common-lisp:cons "PaginatedLayoutConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sheet-content-type))
      (common-lisp:list
       (common-lisp:cons "SheetContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          default-new-sheet-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass default-paginated-layout-configuration common-lisp:nil
                       ((section-based :initarg :section-based :type
                         (common-lisp:or
                          default-section-based-layout-configuration
                          common-lisp:null)
                         :accessor
                         %default-paginated-layout-configuration-section-based
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'default-paginated-layout-configuration
                    'make-default-paginated-layout-configuration))
 (common-lisp:defun make-default-paginated-layout-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key section-based)
   (common-lisp:apply #'common-lisp:make-instance
                      'default-paginated-layout-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          default-paginated-layout-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          default-paginated-layout-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'section-based))
      (common-lisp:list
       (common-lisp:cons "SectionBased"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          default-paginated-layout-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass default-section-based-layout-configuration
                       common-lisp:nil
                       ((canvas-size-options :initarg :canvas-size-options
                         :type
                         (common-lisp:or
                          section-based-layout-canvas-size-options
                          common-lisp:null)
                         :accessor
                         %default-section-based-layout-configuration-canvas-size-options
                         :initform
                         (common-lisp:error
                          ":canvas-size-options is required"))))
 (common-lisp:export
  (common-lisp:list 'default-section-based-layout-configuration
                    'make-default-section-based-layout-configuration))
 (common-lisp:defun make-default-section-based-layout-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key canvas-size-options)
   (common-lisp:apply #'common-lisp:make-instance
                      'default-section-based-layout-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          default-section-based-layout-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          default-section-based-layout-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canvas-size-options))
      (common-lisp:list
       (common-lisp:cons "CanvasSizeOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          default-section-based-layout-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-account-customization-request common-lisp:nil
                       ((namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %delete-account-customization-request-namespace
                         :initform common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %delete-account-customization-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-account-customization-request
                    'make-delete-account-customization-request))
 (common-lisp:defun make-delete-account-customization-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key namespace aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-account-customization-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-customization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-customization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-customization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-account-customization-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor
                         %delete-account-customization-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-account-customization-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-account-customization-response
                    'make-delete-account-customization-response))
 (common-lisp:defun make-delete-account-customization-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-account-customization-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-customization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-customization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-customization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-account-subscription-request common-lisp:nil
                       ((aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %delete-account-subscription-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-account-subscription-request
                    'make-delete-account-subscription-request))
 (common-lisp:defun make-delete-account-subscription-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-account-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-account-subscription-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %delete-account-subscription-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-account-subscription-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-account-subscription-response
                    'make-delete-account-subscription-response))
 (common-lisp:defun make-delete-account-subscription-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-account-subscription-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-analysis-request common-lisp:nil
                       ((force-delete-without-recovery :initarg
                         :force-delete-without-recovery :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %delete-analysis-request-force-delete-without-recovery
                         :initform common-lisp:nil)
                        (recovery-window-in-days :initarg
                         :recovery-window-in-days :type
                         (common-lisp:or recovery-window-in-days
                                         common-lisp:null)
                         :accessor
                         %delete-analysis-request-recovery-window-in-days
                         :initform common-lisp:nil)
                        (analysis-id :initarg :analysis-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %delete-analysis-request-analysis-id
                         :initform
                         (common-lisp:error ":analysis-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %delete-analysis-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-analysis-request 'make-delete-analysis-request))
 (common-lisp:defun make-delete-analysis-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key force-delete-without-recovery
                     recovery-window-in-days analysis-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-analysis-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-analysis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-analysis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-analysis-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-analysis-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-analysis-response-request-id :initform
                         common-lisp:nil)
                        (deletion-time :initarg :deletion-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %delete-analysis-response-deletion-time :initform
                         common-lisp:nil)
                        (analysis-id :initarg :analysis-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %delete-analysis-response-analysis-id
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %delete-analysis-response-arn :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %delete-analysis-response-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-analysis-response 'make-delete-analysis-response))
 (common-lisp:defun make-delete-analysis-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id deletion-time analysis-id arn
                     status)
   (common-lisp:apply #'common-lisp:make-instance 'delete-analysis-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-analysis-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-analysis-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-id))
      (common-lisp:list
       (common-lisp:cons "AnalysisId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-time))
      (common-lisp:list
       (common-lisp:cons "DeletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-analysis-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dashboard-request common-lisp:nil
                       ((version-number :initarg :version-number :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor %delete-dashboard-request-version-number
                         :initform common-lisp:nil)
                        (dashboard-id :initarg :dashboard-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %delete-dashboard-request-dashboard-id
                         :initform
                         (common-lisp:error ":dashboard-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %delete-dashboard-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-dashboard-request 'make-delete-dashboard-request))
 (common-lisp:defun make-delete-dashboard-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-number dashboard-id
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dashboard-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dashboard-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dashboard-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dashboard-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dashboard-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-dashboard-response-request-id :initform
                         common-lisp:nil)
                        (dashboard-id :initarg :dashboard-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %delete-dashboard-response-dashboard-id
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %delete-dashboard-response-arn :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %delete-dashboard-response-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-dashboard-response
                    'make-delete-dashboard-response))
 (common-lisp:defun make-delete-dashboard-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id dashboard-id arn status)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dashboard-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dashboard-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dashboard-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-id))
      (common-lisp:list
       (common-lisp:cons "DashboardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dashboard-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-set-refresh-properties-request
                       common-lisp:nil
                       ((data-set-id :initarg :data-set-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %delete-data-set-refresh-properties-request-data-set-id
                         :initform
                         (common-lisp:error ":data-set-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %delete-data-set-refresh-properties-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-data-set-refresh-properties-request
                    'make-delete-data-set-refresh-properties-request))
 (common-lisp:defun make-delete-data-set-refresh-properties-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-set-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-data-set-refresh-properties-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-set-refresh-properties-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-set-refresh-properties-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-set-refresh-properties-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-set-refresh-properties-response
                       common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor
                         %delete-data-set-refresh-properties-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-data-set-refresh-properties-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-data-set-refresh-properties-response
                    'make-delete-data-set-refresh-properties-response))
 (common-lisp:defun make-delete-data-set-refresh-properties-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-data-set-refresh-properties-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-set-refresh-properties-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-set-refresh-properties-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-set-refresh-properties-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-set-request common-lisp:nil
                       ((data-set-id :initarg :data-set-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %delete-data-set-request-data-set-id
                         :initform
                         (common-lisp:error ":data-set-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %delete-data-set-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-data-set-request 'make-delete-data-set-request))
 (common-lisp:defun make-delete-data-set-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-set-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-data-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-set-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %delete-data-set-response-status :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-data-set-response-request-id :initform
                         common-lisp:nil)
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %delete-data-set-response-data-set-id
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %delete-data-set-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-data-set-response 'make-delete-data-set-response))
 (common-lisp:defun make-delete-data-set-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id data-set-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-data-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-source-request common-lisp:nil
                       ((data-source-id :initarg :data-source-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %delete-data-source-request-data-source-id
                         :initform
                         (common-lisp:error ":data-source-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %delete-data-source-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-data-source-request
                    'make-delete-data-source-request))
 (common-lisp:defun make-delete-data-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-source-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-data-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-source-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %delete-data-source-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-data-source-response-request-id :initform
                         common-lisp:nil)
                        (data-source-id :initarg :data-source-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %delete-data-source-response-data-source-id
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %delete-data-source-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-data-source-response
                    'make-delete-data-source-response))
 (common-lisp:defun make-delete-data-source-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id data-source-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-data-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-folder-membership-request common-lisp:nil
                       ((member-type :initarg :member-type :type
                         (common-lisp:or member-type common-lisp:null)
                         :accessor
                         %delete-folder-membership-request-member-type
                         :initform
                         (common-lisp:error ":member-type is required"))
                        (member-id :initarg :member-id :type
                         (common-lisp:or restrictive-resource-id
                                         common-lisp:null)
                         :accessor %delete-folder-membership-request-member-id
                         :initform
                         (common-lisp:error ":member-id is required"))
                        (folder-id :initarg :folder-id :type
                         (common-lisp:or restrictive-resource-id
                                         common-lisp:null)
                         :accessor %delete-folder-membership-request-folder-id
                         :initform
                         (common-lisp:error ":folder-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %delete-folder-membership-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-folder-membership-request
                    'make-delete-folder-membership-request))
 (common-lisp:defun make-delete-folder-membership-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key member-type member-id folder-id
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-folder-membership-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-membership-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-membership-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-membership-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-folder-membership-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-folder-membership-response-request-id
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %delete-folder-membership-response-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-folder-membership-response
                    'make-delete-folder-membership-response))
 (common-lisp:defun make-delete-folder-membership-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-folder-membership-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-membership-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-membership-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-membership-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-folder-request common-lisp:nil
                       ((folder-id :initarg :folder-id :type
                         (common-lisp:or restrictive-resource-id
                                         common-lisp:null)
                         :accessor %delete-folder-request-folder-id :initform
                         (common-lisp:error ":folder-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %delete-folder-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-folder-request 'make-delete-folder-request))
 (common-lisp:defun make-delete-folder-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key folder-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-folder-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-folder-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-folder-response-request-id :initform
                         common-lisp:nil)
                        (folder-id :initarg :folder-id :type
                         (common-lisp:or restrictive-resource-id
                                         common-lisp:null)
                         :accessor %delete-folder-response-folder-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %delete-folder-response-arn :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %delete-folder-response-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-folder-response 'make-delete-folder-response))
 (common-lisp:defun make-delete-folder-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id folder-id arn status)
   (common-lisp:apply #'common-lisp:make-instance 'delete-folder-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-id))
      (common-lisp:list
       (common-lisp:cons "FolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-group-membership-request common-lisp:nil
                       ((namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %delete-group-membership-request-namespace :initform
                         (common-lisp:error ":namespace is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %delete-group-membership-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))
                        (group-name :initarg :group-name :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         %delete-group-membership-request-group-name :initform
                         (common-lisp:error ":group-name is required"))
                        (member-name :initarg :member-name :type
                         (common-lisp:or group-member-name common-lisp:null)
                         :accessor %delete-group-membership-request-member-name
                         :initform
                         (common-lisp:error ":member-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-group-membership-request
                    'make-delete-group-membership-request))
 (common-lisp:defun make-delete-group-membership-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key namespace aws-account-id group-name
                     member-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-group-membership-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-membership-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-membership-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-membership-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-group-membership-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %delete-group-membership-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-group-membership-response-request-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-group-membership-response
                    'make-delete-group-membership-response))
 (common-lisp:defun make-delete-group-membership-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-group-membership-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-membership-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-membership-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-membership-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-group-request common-lisp:nil
                       ((namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %delete-group-request-namespace :initform
                         (common-lisp:error ":namespace is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %delete-group-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))
                        (group-name :initarg :group-name :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         %delete-group-request-group-name :initform
                         (common-lisp:error ":group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-group-request 'make-delete-group-request))
 (common-lisp:defun make-delete-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key namespace aws-account-id group-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-group-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %delete-group-response-status :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-group-response-request-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-group-response 'make-delete-group-response))
 (common-lisp:defun make-delete-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-iampolicy-assignment-request common-lisp:nil
                       ((namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %delete-iampolicy-assignment-request-namespace
                         :initform
                         (common-lisp:error ":namespace is required"))
                        (assignment-name :initarg :assignment-name :type
                         (common-lisp:or iampolicy-assignment-name
                                         common-lisp:null)
                         :accessor
                         %delete-iampolicy-assignment-request-assignment-name
                         :initform
                         (common-lisp:error ":assignment-name is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %delete-iampolicy-assignment-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-iampolicy-assignment-request
                    'make-delete-iampolicy-assignment-request))
 (common-lisp:defun make-delete-iampolicy-assignment-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key namespace assignment-name aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-iampolicy-assignment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-iampolicy-assignment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-iampolicy-assignment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-iampolicy-assignment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-iampolicy-assignment-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %delete-iampolicy-assignment-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-iampolicy-assignment-response-request-id
                         :initform common-lisp:nil)
                        (assignment-name :initarg :assignment-name :type
                         (common-lisp:or iampolicy-assignment-name
                                         common-lisp:null)
                         :accessor
                         %delete-iampolicy-assignment-response-assignment-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-iampolicy-assignment-response
                    'make-delete-iampolicy-assignment-response))
 (common-lisp:defun make-delete-iampolicy-assignment-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id assignment-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-iampolicy-assignment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-iampolicy-assignment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-iampolicy-assignment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-name))
      (common-lisp:list
       (common-lisp:cons "AssignmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-iampolicy-assignment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-namespace-request common-lisp:nil
                       ((namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %delete-namespace-request-namespace :initform
                         (common-lisp:error ":namespace is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %delete-namespace-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-namespace-request 'make-delete-namespace-request))
 (common-lisp:defun make-delete-namespace-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key namespace aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-namespace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-namespace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-namespace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-namespace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-namespace-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %delete-namespace-response-status :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-namespace-response-request-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-namespace-response
                    'make-delete-namespace-response))
 (common-lisp:defun make-delete-namespace-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-namespace-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-namespace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-namespace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-namespace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-refresh-schedule-request common-lisp:nil
                       ((schedule-id :initarg :schedule-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-refresh-schedule-request-schedule-id :initform
                         (common-lisp:error ":schedule-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %delete-refresh-schedule-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %delete-refresh-schedule-request-data-set-id
                         :initform
                         (common-lisp:error ":data-set-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-refresh-schedule-request
                    'make-delete-refresh-schedule-request))
 (common-lisp:defun make-delete-refresh-schedule-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key schedule-id aws-account-id data-set-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-refresh-schedule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-refresh-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-refresh-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-refresh-schedule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-refresh-schedule-response common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %delete-refresh-schedule-response-arn :initform
                         common-lisp:nil)
                        (schedule-id :initarg :schedule-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-refresh-schedule-response-schedule-id
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-refresh-schedule-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %delete-refresh-schedule-response-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-refresh-schedule-response
                    'make-delete-refresh-schedule-response))
 (common-lisp:defun make-delete-refresh-schedule-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn schedule-id request-id status)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-refresh-schedule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-refresh-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-refresh-schedule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-id))
      (common-lisp:list
       (common-lisp:cons "ScheduleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-refresh-schedule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-template-alias-request common-lisp:nil
                       ((alias-name :initarg :alias-name :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %delete-template-alias-request-alias-name :initform
                         (common-lisp:error ":alias-name is required"))
                        (template-id :initarg :template-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %delete-template-alias-request-template-id
                         :initform
                         (common-lisp:error ":template-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %delete-template-alias-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-template-alias-request
                    'make-delete-template-alias-request))
 (common-lisp:defun make-delete-template-alias-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alias-name template-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-template-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-template-alias-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-template-alias-response-request-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %delete-template-alias-response-arn :initform
                         common-lisp:nil)
                        (alias-name :initarg :alias-name :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %delete-template-alias-response-alias-name :initform
                         common-lisp:nil)
                        (template-id :initarg :template-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %delete-template-alias-response-template-id
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %delete-template-alias-response-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-template-alias-response
                    'make-delete-template-alias-response))
 (common-lisp:defun make-delete-template-alias-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id arn alias-name template-id
                     status)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-template-alias-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-name))
      (common-lisp:list
       (common-lisp:cons "AliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-template-request common-lisp:nil
                       ((version-number :initarg :version-number :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor %delete-template-request-version-number
                         :initform common-lisp:nil)
                        (template-id :initarg :template-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %delete-template-request-template-id
                         :initform
                         (common-lisp:error ":template-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %delete-template-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-template-request 'make-delete-template-request))
 (common-lisp:defun make-delete-template-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-number template-id
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-template-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %delete-template-response-status :initform
                         common-lisp:nil)
                        (template-id :initarg :template-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %delete-template-response-template-id
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %delete-template-response-arn :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-template-response-request-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-template-response 'make-delete-template-response))
 (common-lisp:defun make-delete-template-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status template-id arn request-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-theme-alias-request common-lisp:nil
                       ((alias-name :initarg :alias-name :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %delete-theme-alias-request-alias-name :initform
                         (common-lisp:error ":alias-name is required"))
                        (theme-id :initarg :theme-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %delete-theme-alias-request-theme-id
                         :initform (common-lisp:error ":theme-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %delete-theme-alias-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-theme-alias-request
                    'make-delete-theme-alias-request))
 (common-lisp:defun make-delete-theme-alias-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alias-name theme-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-theme-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-theme-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-theme-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-theme-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-theme-alias-response common-lisp:nil
                       ((theme-id :initarg :theme-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %delete-theme-alias-response-theme-id
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %delete-theme-alias-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-theme-alias-response-request-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %delete-theme-alias-response-arn :initform
                         common-lisp:nil)
                        (alias-name :initarg :alias-name :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %delete-theme-alias-response-alias-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-theme-alias-response
                    'make-delete-theme-alias-response))
 (common-lisp:defun make-delete-theme-alias-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key theme-id status request-id arn
                     alias-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-theme-alias-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-theme-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-theme-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-name))
      (common-lisp:list
       (common-lisp:cons "AliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-id))
      (common-lisp:list
       (common-lisp:cons "ThemeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-theme-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-theme-request common-lisp:nil
                       ((version-number :initarg :version-number :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor %delete-theme-request-version-number
                         :initform common-lisp:nil)
                        (theme-id :initarg :theme-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %delete-theme-request-theme-id :initform
                         (common-lisp:error ":theme-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %delete-theme-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-theme-request 'make-delete-theme-request))
 (common-lisp:defun make-delete-theme-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-number theme-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-theme-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-theme-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-theme-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-theme-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-theme-response common-lisp:nil
                       ((theme-id :initarg :theme-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %delete-theme-response-theme-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %delete-theme-response-status :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-theme-response-request-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %delete-theme-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-theme-response 'make-delete-theme-response))
 (common-lisp:defun make-delete-theme-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key theme-id status request-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-theme-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-theme-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-theme-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-id))
      (common-lisp:list
       (common-lisp:cons "ThemeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-theme-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-by-principal-id-request common-lisp:nil
                       ((namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %delete-user-by-principal-id-request-namespace
                         :initform
                         (common-lisp:error ":namespace is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %delete-user-by-principal-id-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))
                        (principal-id :initarg :principal-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-user-by-principal-id-request-principal-id
                         :initform
                         (common-lisp:error ":principal-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-user-by-principal-id-request
                    'make-delete-user-by-principal-id-request))
 (common-lisp:defun make-delete-user-by-principal-id-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key namespace aws-account-id principal-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-user-by-principal-id-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-by-principal-id-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-by-principal-id-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-by-principal-id-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-by-principal-id-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %delete-user-by-principal-id-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-user-by-principal-id-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-user-by-principal-id-response
                    'make-delete-user-by-principal-id-response))
 (common-lisp:defun make-delete-user-by-principal-id-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-user-by-principal-id-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-by-principal-id-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-by-principal-id-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-by-principal-id-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-request common-lisp:nil
                       ((namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %delete-user-request-namespace :initform
                         (common-lisp:error ":namespace is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %delete-user-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))
                        (user-name :initarg :user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %delete-user-request-user-name :initform
                         (common-lisp:error ":user-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-user-request 'make-delete-user-request))
 (common-lisp:defun make-delete-user-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key namespace aws-account-id user-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %delete-user-response-status :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-user-response-request-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-user-response 'make-delete-user-response))
 (common-lisp:defun make-delete-user-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-response))
   common-lisp:nil))
(common-lisp:deftype delimiter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass describe-account-customization-request common-lisp:nil
                       ((resolved :initarg :resolved :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         %describe-account-customization-request-resolved
                         :initform common-lisp:nil)
                        (namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %describe-account-customization-request-namespace
                         :initform common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %describe-account-customization-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-account-customization-request
                    'make-describe-account-customization-request))
 (common-lisp:defun make-describe-account-customization-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resolved namespace aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-customization-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-customization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-customization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-customization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-customization-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor
                         %describe-account-customization-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-account-customization-response-request-id
                         :initform common-lisp:nil)
                        (account-customization :initarg :account-customization
                         :type
                         (common-lisp:or account-customization
                                         common-lisp:null)
                         :accessor
                         %describe-account-customization-response-account-customization
                         :initform common-lisp:nil)
                        (namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %describe-account-customization-response-namespace
                         :initform common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %describe-account-customization-response-aws-account-id
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-account-customization-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-account-customization-response
                    'make-describe-account-customization-response))
 (common-lisp:defun make-describe-account-customization-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id account-customization
                     namespace aws-account-id arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-customization-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-customization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-customization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "AwsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-customization))
      (common-lisp:list
       (common-lisp:cons "AccountCustomization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-customization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-settings-request common-lisp:nil
                       ((aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %describe-account-settings-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-account-settings-request
                    'make-describe-account-settings-request))
 (common-lisp:defun make-describe-account-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-settings-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %describe-account-settings-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-account-settings-response-request-id
                         :initform common-lisp:nil)
                        (account-settings :initarg :account-settings :type
                         (common-lisp:or account-settings common-lisp:null)
                         :accessor
                         %describe-account-settings-response-account-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-account-settings-response
                    'make-describe-account-settings-response))
 (common-lisp:defun make-describe-account-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id account-settings)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-settings))
      (common-lisp:list
       (common-lisp:cons "AccountSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-subscription-request common-lisp:nil
                       ((aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %describe-account-subscription-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-account-subscription-request
                    'make-describe-account-subscription-request))
 (common-lisp:defun make-describe-account-subscription-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-subscription-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-account-subscription-response-request-id
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor
                         %describe-account-subscription-response-status
                         :initform common-lisp:nil)
                        (account-info :initarg :account-info :type
                         (common-lisp:or account-info common-lisp:null)
                         :accessor
                         %describe-account-subscription-response-account-info
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-account-subscription-response
                    'make-describe-account-subscription-response))
 (common-lisp:defun make-describe-account-subscription-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status account-info)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-subscription-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-info))
      (common-lisp:list
       (common-lisp:cons "AccountInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-analysis-definition-request common-lisp:nil
                       ((analysis-id :initarg :analysis-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %describe-analysis-definition-request-analysis-id
                         :initform
                         (common-lisp:error ":analysis-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %describe-analysis-definition-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-analysis-definition-request
                    'make-describe-analysis-definition-request))
 (common-lisp:defun make-describe-analysis-definition-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key analysis-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-analysis-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-analysis-definition-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-analysis-definition-response-request-id
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor
                         %describe-analysis-definition-response-status
                         :initform common-lisp:nil)
                        (definition :initarg :definition :type
                         (common-lisp:or analysis-definition common-lisp:null)
                         :accessor
                         %describe-analysis-definition-response-definition
                         :initform common-lisp:nil)
                        (theme-arn :initarg :theme-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-analysis-definition-response-theme-arn
                         :initform common-lisp:nil)
                        (resource-status :initarg :resource-status :type
                         (common-lisp:or resource-status common-lisp:null)
                         :accessor
                         %describe-analysis-definition-response-resource-status
                         :initform common-lisp:nil)
                        (errors :initarg :errors :type
                         (common-lisp:or analysis-error-list common-lisp:null)
                         :accessor
                         %describe-analysis-definition-response-errors
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or analysis-name common-lisp:null)
                         :accessor %describe-analysis-definition-response-name
                         :initform common-lisp:nil)
                        (analysis-id :initarg :analysis-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %describe-analysis-definition-response-analysis-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-analysis-definition-response
                    'make-describe-analysis-definition-response))
 (common-lisp:defun make-describe-analysis-definition-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status definition theme-arn
                     resource-status errors name analysis-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-analysis-definition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-id))
      (common-lisp:list
       (common-lisp:cons "AnalysisId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-status))
      (common-lisp:list
       (common-lisp:cons "ResourceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-arn))
      (common-lisp:list
       (common-lisp:cons "ThemeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-analysis-permissions-request common-lisp:nil
                       ((analysis-id :initarg :analysis-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %describe-analysis-permissions-request-analysis-id
                         :initform
                         (common-lisp:error ":analysis-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %describe-analysis-permissions-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-analysis-permissions-request
                    'make-describe-analysis-permissions-request))
 (common-lisp:defun make-describe-analysis-permissions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key analysis-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-analysis-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-analysis-permissions-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-analysis-permissions-response-request-id
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor
                         %describe-analysis-permissions-response-status
                         :initform common-lisp:nil)
                        (permissions :initarg :permissions :type
                         (common-lisp:or resource-permission-list
                                         common-lisp:null)
                         :accessor
                         %describe-analysis-permissions-response-permissions
                         :initform common-lisp:nil)
                        (analysis-arn :initarg :analysis-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-analysis-permissions-response-analysis-arn
                         :initform common-lisp:nil)
                        (analysis-id :initarg :analysis-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %describe-analysis-permissions-response-analysis-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-analysis-permissions-response
                    'make-describe-analysis-permissions-response))
 (common-lisp:defun make-describe-analysis-permissions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status permissions
                     analysis-arn analysis-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-analysis-permissions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-id))
      (common-lisp:list
       (common-lisp:cons "AnalysisId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-arn))
      (common-lisp:list
       (common-lisp:cons "AnalysisArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-analysis-request common-lisp:nil
                       ((analysis-id :initarg :analysis-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %describe-analysis-request-analysis-id
                         :initform
                         (common-lisp:error ":analysis-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %describe-analysis-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-analysis-request
                    'make-describe-analysis-request))
 (common-lisp:defun make-describe-analysis-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key analysis-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-analysis-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-analysis-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-analysis-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %describe-analysis-response-status :initform
                         common-lisp:nil)
                        (analysis :initarg :analysis :type
                         (common-lisp:or analysis common-lisp:null) :accessor
                         %describe-analysis-response-analysis :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-analysis-response
                    'make-describe-analysis-response))
 (common-lisp:defun make-describe-analysis-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status analysis)
   (common-lisp:apply #'common-lisp:make-instance 'describe-analysis-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis))
      (common-lisp:list
       (common-lisp:cons "Analysis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dashboard-definition-request common-lisp:nil
                       ((alias-name :initarg :alias-name :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %describe-dashboard-definition-request-alias-name
                         :initform common-lisp:nil)
                        (version-number :initarg :version-number :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor
                         %describe-dashboard-definition-request-version-number
                         :initform common-lisp:nil)
                        (dashboard-id :initarg :dashboard-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %describe-dashboard-definition-request-dashboard-id
                         :initform
                         (common-lisp:error ":dashboard-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %describe-dashboard-definition-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-dashboard-definition-request
                    'make-describe-dashboard-definition-request))
 (common-lisp:defun make-describe-dashboard-definition-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alias-name version-number dashboard-id
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dashboard-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dashboard-definition-response common-lisp:nil
                       ((dashboard-publish-options :initarg
                         :dashboard-publish-options :type
                         (common-lisp:or dashboard-publish-options
                                         common-lisp:null)
                         :accessor
                         %describe-dashboard-definition-response-dashboard-publish-options
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-dashboard-definition-response-request-id
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor
                         %describe-dashboard-definition-response-status
                         :initform common-lisp:nil)
                        (definition :initarg :definition :type
                         (common-lisp:or dashboard-version-definition
                                         common-lisp:null)
                         :accessor
                         %describe-dashboard-definition-response-definition
                         :initform common-lisp:nil)
                        (theme-arn :initarg :theme-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-dashboard-definition-response-theme-arn
                         :initform common-lisp:nil)
                        (resource-status :initarg :resource-status :type
                         (common-lisp:or resource-status common-lisp:null)
                         :accessor
                         %describe-dashboard-definition-response-resource-status
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or dashboard-name common-lisp:null)
                         :accessor %describe-dashboard-definition-response-name
                         :initform common-lisp:nil)
                        (errors :initarg :errors :type
                         (common-lisp:or dashboard-error-list common-lisp:null)
                         :accessor
                         %describe-dashboard-definition-response-errors
                         :initform common-lisp:nil)
                        (dashboard-id :initarg :dashboard-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %describe-dashboard-definition-response-dashboard-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-dashboard-definition-response
                    'make-describe-dashboard-definition-response))
 (common-lisp:defun make-describe-dashboard-definition-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dashboard-publish-options request-id
                     status definition theme-arn resource-status name errors
                     dashboard-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dashboard-definition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-id))
      (common-lisp:list
       (common-lisp:cons "DashboardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-status))
      (common-lisp:list
       (common-lisp:cons "ResourceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-arn))
      (common-lisp:list
       (common-lisp:cons "ThemeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dashboard-publish-options))
      (common-lisp:list
       (common-lisp:cons "DashboardPublishOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dashboard-permissions-request common-lisp:nil
                       ((dashboard-id :initarg :dashboard-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %describe-dashboard-permissions-request-dashboard-id
                         :initform
                         (common-lisp:error ":dashboard-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %describe-dashboard-permissions-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-dashboard-permissions-request
                    'make-describe-dashboard-permissions-request))
 (common-lisp:defun make-describe-dashboard-permissions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dashboard-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dashboard-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dashboard-permissions-response common-lisp:nil
                       ((link-sharing-configuration :initarg
                         :link-sharing-configuration :type
                         (common-lisp:or link-sharing-configuration
                                         common-lisp:null)
                         :accessor
                         %describe-dashboard-permissions-response-link-sharing-configuration
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-dashboard-permissions-response-request-id
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor
                         %describe-dashboard-permissions-response-status
                         :initform common-lisp:nil)
                        (permissions :initarg :permissions :type
                         (common-lisp:or resource-permission-list
                                         common-lisp:null)
                         :accessor
                         %describe-dashboard-permissions-response-permissions
                         :initform common-lisp:nil)
                        (dashboard-arn :initarg :dashboard-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-dashboard-permissions-response-dashboard-arn
                         :initform common-lisp:nil)
                        (dashboard-id :initarg :dashboard-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %describe-dashboard-permissions-response-dashboard-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-dashboard-permissions-response
                    'make-describe-dashboard-permissions-response))
 (common-lisp:defun make-describe-dashboard-permissions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key link-sharing-configuration request-id
                     status permissions dashboard-arn dashboard-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dashboard-permissions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-id))
      (common-lisp:list
       (common-lisp:cons "DashboardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-arn))
      (common-lisp:list
       (common-lisp:cons "DashboardArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'link-sharing-configuration))
      (common-lisp:list
       (common-lisp:cons "LinkSharingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dashboard-request common-lisp:nil
                       ((alias-name :initarg :alias-name :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %describe-dashboard-request-alias-name :initform
                         common-lisp:nil)
                        (version-number :initarg :version-number :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor %describe-dashboard-request-version-number
                         :initform common-lisp:nil)
                        (dashboard-id :initarg :dashboard-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %describe-dashboard-request-dashboard-id
                         :initform
                         (common-lisp:error ":dashboard-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %describe-dashboard-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-dashboard-request
                    'make-describe-dashboard-request))
 (common-lisp:defun make-describe-dashboard-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alias-name version-number dashboard-id
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-dashboard-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dashboard-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-dashboard-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %describe-dashboard-response-status
                         :initform common-lisp:nil)
                        (dashboard :initarg :dashboard :type
                         (common-lisp:or dashboard common-lisp:null) :accessor
                         %describe-dashboard-response-dashboard :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-dashboard-response
                    'make-describe-dashboard-response))
 (common-lisp:defun make-describe-dashboard-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status dashboard)
   (common-lisp:apply #'common-lisp:make-instance 'describe-dashboard-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard))
      (common-lisp:list
       (common-lisp:cons "Dashboard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-data-set-permissions-request common-lisp:nil
                       ((data-set-id :initarg :data-set-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %describe-data-set-permissions-request-data-set-id
                         :initform
                         (common-lisp:error ":data-set-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %describe-data-set-permissions-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-data-set-permissions-request
                    'make-describe-data-set-permissions-request))
 (common-lisp:defun make-describe-data-set-permissions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-set-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-data-set-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-set-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-set-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-set-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-data-set-permissions-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor
                         %describe-data-set-permissions-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-data-set-permissions-response-request-id
                         :initform common-lisp:nil)
                        (permissions :initarg :permissions :type
                         (common-lisp:or resource-permission-list
                                         common-lisp:null)
                         :accessor
                         %describe-data-set-permissions-response-permissions
                         :initform common-lisp:nil)
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %describe-data-set-permissions-response-data-set-id
                         :initform common-lisp:nil)
                        (data-set-arn :initarg :data-set-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-data-set-permissions-response-data-set-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-data-set-permissions-response
                    'make-describe-data-set-permissions-response))
 (common-lisp:defun make-describe-data-set-permissions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id permissions data-set-id
                     data-set-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-data-set-permissions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-set-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-set-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-arn))
      (common-lisp:list
       (common-lisp:cons "DataSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-set-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-data-set-refresh-properties-request
                       common-lisp:nil
                       ((data-set-id :initarg :data-set-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %describe-data-set-refresh-properties-request-data-set-id
                         :initform
                         (common-lisp:error ":data-set-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %describe-data-set-refresh-properties-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-data-set-refresh-properties-request
                    'make-describe-data-set-refresh-properties-request))
 (common-lisp:defun make-describe-data-set-refresh-properties-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-set-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-data-set-refresh-properties-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-set-refresh-properties-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-set-refresh-properties-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-set-refresh-properties-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-data-set-refresh-properties-response
                       common-lisp:nil
                       ((data-set-refresh-properties :initarg
                         :data-set-refresh-properties :type
                         (common-lisp:or data-set-refresh-properties
                                         common-lisp:null)
                         :accessor
                         %describe-data-set-refresh-properties-response-data-set-refresh-properties
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor
                         %describe-data-set-refresh-properties-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-data-set-refresh-properties-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-data-set-refresh-properties-response
                    'make-describe-data-set-refresh-properties-response))
 (common-lisp:defun make-describe-data-set-refresh-properties-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-set-refresh-properties status
                     request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-data-set-refresh-properties-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-set-refresh-properties-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-set-refresh-properties-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-set-refresh-properties))
      (common-lisp:list
       (common-lisp:cons "DataSetRefreshProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-set-refresh-properties-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-data-set-request common-lisp:nil
                       ((data-set-id :initarg :data-set-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %describe-data-set-request-data-set-id
                         :initform
                         (common-lisp:error ":data-set-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %describe-data-set-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-data-set-request
                    'make-describe-data-set-request))
 (common-lisp:defun make-describe-data-set-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-set-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-data-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-data-set-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %describe-data-set-response-status :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-data-set-response-request-id :initform
                         common-lisp:nil)
                        (data-set :initarg :data-set :type
                         (common-lisp:or data-set common-lisp:null) :accessor
                         %describe-data-set-response-data-set :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-data-set-response
                    'make-describe-data-set-response))
 (common-lisp:defun make-describe-data-set-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id data-set)
   (common-lisp:apply #'common-lisp:make-instance 'describe-data-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set))
      (common-lisp:list
       (common-lisp:cons "DataSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-data-source-permissions-request common-lisp:nil
                       ((data-source-id :initarg :data-source-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %describe-data-source-permissions-request-data-source-id
                         :initform
                         (common-lisp:error ":data-source-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %describe-data-source-permissions-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-data-source-permissions-request
                    'make-describe-data-source-permissions-request))
 (common-lisp:defun make-describe-data-source-permissions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-source-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-data-source-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-source-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-source-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-source-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-data-source-permissions-response
                       common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor
                         %describe-data-source-permissions-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-data-source-permissions-response-request-id
                         :initform common-lisp:nil)
                        (permissions :initarg :permissions :type
                         (common-lisp:or resource-permission-list
                                         common-lisp:null)
                         :accessor
                         %describe-data-source-permissions-response-permissions
                         :initform common-lisp:nil)
                        (data-source-id :initarg :data-source-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %describe-data-source-permissions-response-data-source-id
                         :initform common-lisp:nil)
                        (data-source-arn :initarg :data-source-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-data-source-permissions-response-data-source-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-data-source-permissions-response
                    'make-describe-data-source-permissions-response))
 (common-lisp:defun make-describe-data-source-permissions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id permissions
                     data-source-id data-source-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-data-source-permissions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-source-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-source-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-arn))
      (common-lisp:list
       (common-lisp:cons "DataSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-source-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-data-source-request common-lisp:nil
                       ((data-source-id :initarg :data-source-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %describe-data-source-request-data-source-id
                         :initform
                         (common-lisp:error ":data-source-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %describe-data-source-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-data-source-request
                    'make-describe-data-source-request))
 (common-lisp:defun make-describe-data-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-source-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-data-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-data-source-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %describe-data-source-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-data-source-response-request-id :initform
                         common-lisp:nil)
                        (data-source :initarg :data-source :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor %describe-data-source-response-data-source
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-data-source-response
                    'make-describe-data-source-response))
 (common-lisp:defun make-describe-data-source-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id data-source)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-data-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-folder-permissions-request common-lisp:nil
                       ((folder-id :initarg :folder-id :type
                         (common-lisp:or restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %describe-folder-permissions-request-folder-id
                         :initform
                         (common-lisp:error ":folder-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %describe-folder-permissions-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-folder-permissions-request
                    'make-describe-folder-permissions-request))
 (common-lisp:defun make-describe-folder-permissions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key folder-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-folder-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-folder-permissions-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-folder-permissions-response-request-id
                         :initform common-lisp:nil)
                        (permissions :initarg :permissions :type
                         (common-lisp:or resource-permission-list
                                         common-lisp:null)
                         :accessor
                         %describe-folder-permissions-response-permissions
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-folder-permissions-response-arn :initform
                         common-lisp:nil)
                        (folder-id :initarg :folder-id :type
                         (common-lisp:or restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %describe-folder-permissions-response-folder-id
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %describe-folder-permissions-response-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-folder-permissions-response
                    'make-describe-folder-permissions-response))
 (common-lisp:defun make-describe-folder-permissions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id permissions arn folder-id
                     status)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-folder-permissions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-id))
      (common-lisp:list
       (common-lisp:cons "FolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-folder-request common-lisp:nil
                       ((folder-id :initarg :folder-id :type
                         (common-lisp:or restrictive-resource-id
                                         common-lisp:null)
                         :accessor %describe-folder-request-folder-id :initform
                         (common-lisp:error ":folder-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %describe-folder-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-folder-request 'make-describe-folder-request))
 (common-lisp:defun make-describe-folder-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key folder-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-folder-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-folder-resolved-permissions-request
                       common-lisp:nil
                       ((folder-id :initarg :folder-id :type
                         (common-lisp:or restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %describe-folder-resolved-permissions-request-folder-id
                         :initform
                         (common-lisp:error ":folder-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %describe-folder-resolved-permissions-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-folder-resolved-permissions-request
                    'make-describe-folder-resolved-permissions-request))
 (common-lisp:defun make-describe-folder-resolved-permissions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key folder-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-folder-resolved-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-resolved-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-resolved-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-resolved-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-folder-resolved-permissions-response
                       common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-folder-resolved-permissions-response-request-id
                         :initform common-lisp:nil)
                        (permissions :initarg :permissions :type
                         (common-lisp:or resource-permission-list
                                         common-lisp:null)
                         :accessor
                         %describe-folder-resolved-permissions-response-permissions
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-folder-resolved-permissions-response-arn
                         :initform common-lisp:nil)
                        (folder-id :initarg :folder-id :type
                         (common-lisp:or restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %describe-folder-resolved-permissions-response-folder-id
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor
                         %describe-folder-resolved-permissions-response-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-folder-resolved-permissions-response
                    'make-describe-folder-resolved-permissions-response))
 (common-lisp:defun make-describe-folder-resolved-permissions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id permissions arn folder-id
                     status)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-folder-resolved-permissions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-resolved-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-resolved-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-id))
      (common-lisp:list
       (common-lisp:cons "FolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-resolved-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-folder-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-folder-response-request-id :initform
                         common-lisp:nil)
                        (folder :initarg :folder :type
                         (common-lisp:or folder common-lisp:null) :accessor
                         %describe-folder-response-folder :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %describe-folder-response-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-folder-response 'make-describe-folder-response))
 (common-lisp:defun make-describe-folder-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id folder status)
   (common-lisp:apply #'common-lisp:make-instance 'describe-folder-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder))
      (common-lisp:list
       (common-lisp:cons "Folder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-group-membership-request common-lisp:nil
                       ((namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %describe-group-membership-request-namespace :initform
                         (common-lisp:error ":namespace is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %describe-group-membership-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))
                        (group-name :initarg :group-name :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         %describe-group-membership-request-group-name
                         :initform
                         (common-lisp:error ":group-name is required"))
                        (member-name :initarg :member-name :type
                         (common-lisp:or group-member-name common-lisp:null)
                         :accessor
                         %describe-group-membership-request-member-name
                         :initform
                         (common-lisp:error ":member-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-group-membership-request
                    'make-describe-group-membership-request))
 (common-lisp:defun make-describe-group-membership-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key namespace aws-account-id group-name
                     member-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-group-membership-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-membership-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-membership-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-membership-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-group-membership-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %describe-group-membership-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-group-membership-response-request-id
                         :initform common-lisp:nil)
                        (group-member :initarg :group-member :type
                         (common-lisp:or group-member common-lisp:null)
                         :accessor
                         %describe-group-membership-response-group-member
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-group-membership-response
                    'make-describe-group-membership-response))
 (common-lisp:defun make-describe-group-membership-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id group-member)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-group-membership-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-membership-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-membership-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-member))
      (common-lisp:list
       (common-lisp:cons "GroupMember"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-membership-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-group-request common-lisp:nil
                       ((namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %describe-group-request-namespace :initform
                         (common-lisp:error ":namespace is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %describe-group-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))
                        (group-name :initarg :group-name :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         %describe-group-request-group-name :initform
                         (common-lisp:error ":group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-group-request 'make-describe-group-request))
 (common-lisp:defun make-describe-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key namespace aws-account-id group-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-group-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %describe-group-response-status :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-group-response-request-id :initform
                         common-lisp:nil)
                        (group :initarg :group :type
                         (common-lisp:or group common-lisp:null) :accessor
                         %describe-group-response-group :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-group-response 'make-describe-group-response))
 (common-lisp:defun make-describe-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id group)
   (common-lisp:apply #'common-lisp:make-instance 'describe-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "Group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-iampolicy-assignment-request common-lisp:nil
                       ((namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %describe-iampolicy-assignment-request-namespace
                         :initform
                         (common-lisp:error ":namespace is required"))
                        (assignment-name :initarg :assignment-name :type
                         (common-lisp:or iampolicy-assignment-name
                                         common-lisp:null)
                         :accessor
                         %describe-iampolicy-assignment-request-assignment-name
                         :initform
                         (common-lisp:error ":assignment-name is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %describe-iampolicy-assignment-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-iampolicy-assignment-request
                    'make-describe-iampolicy-assignment-request))
 (common-lisp:defun make-describe-iampolicy-assignment-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key namespace assignment-name aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-iampolicy-assignment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-iampolicy-assignment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-iampolicy-assignment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-iampolicy-assignment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-iampolicy-assignment-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor
                         %describe-iampolicy-assignment-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-iampolicy-assignment-response-request-id
                         :initform common-lisp:nil)
                        (iampolicy-assignment :initarg :iampolicy-assignment
                         :type
                         (common-lisp:or iampolicy-assignment common-lisp:null)
                         :accessor
                         %describe-iampolicy-assignment-response-iampolicy-assignment
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-iampolicy-assignment-response
                    'make-describe-iampolicy-assignment-response))
 (common-lisp:defun make-describe-iampolicy-assignment-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id iampolicy-assignment)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-iampolicy-assignment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-iampolicy-assignment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-iampolicy-assignment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iampolicy-assignment))
      (common-lisp:list
       (common-lisp:cons "IAMPolicyAssignment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-iampolicy-assignment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-ingestion-request common-lisp:nil
                       ((ingestion-id :initarg :ingestion-id :type
                         (common-lisp:or ingestion-id common-lisp:null)
                         :accessor %describe-ingestion-request-ingestion-id
                         :initform
                         (common-lisp:error ":ingestion-id is required"))
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-ingestion-request-data-set-id :initform
                         (common-lisp:error ":data-set-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %describe-ingestion-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-ingestion-request
                    'make-describe-ingestion-request))
 (common-lisp:defun make-describe-ingestion-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ingestion-id data-set-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-ingestion-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-ingestion-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-ingestion-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-ingestion-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-ingestion-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %describe-ingestion-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-ingestion-response-request-id :initform
                         common-lisp:nil)
                        (ingestion :initarg :ingestion :type
                         (common-lisp:or ingestion common-lisp:null) :accessor
                         %describe-ingestion-response-ingestion :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-ingestion-response
                    'make-describe-ingestion-response))
 (common-lisp:defun make-describe-ingestion-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id ingestion)
   (common-lisp:apply #'common-lisp:make-instance 'describe-ingestion-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-ingestion-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-ingestion-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion))
      (common-lisp:list
       (common-lisp:cons "Ingestion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-ingestion-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-ip-restriction-request common-lisp:nil
                       ((aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %describe-ip-restriction-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-ip-restriction-request
                    'make-describe-ip-restriction-request))
 (common-lisp:defun make-describe-ip-restriction-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-ip-restriction-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-ip-restriction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-ip-restriction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-ip-restriction-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-ip-restriction-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %describe-ip-restriction-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-ip-restriction-response-request-id :initform
                         common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor %describe-ip-restriction-response-enabled
                         :initform common-lisp:nil)
                        (ip-restriction-rule-map :initarg
                         :ip-restriction-rule-map :type
                         (common-lisp:or ip-restriction-rule-map
                                         common-lisp:null)
                         :accessor
                         %describe-ip-restriction-response-ip-restriction-rule-map
                         :initform common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %describe-ip-restriction-response-aws-account-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-ip-restriction-response
                    'make-describe-ip-restriction-response))
 (common-lisp:defun make-describe-ip-restriction-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id enabled
                     ip-restriction-rule-map aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-ip-restriction-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-ip-restriction-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-ip-restriction-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "AwsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ip-restriction-rule-map))
      (common-lisp:list
       (common-lisp:cons "IpRestrictionRuleMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-ip-restriction-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-namespace-request common-lisp:nil
                       ((namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %describe-namespace-request-namespace :initform
                         (common-lisp:error ":namespace is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %describe-namespace-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-namespace-request
                    'make-describe-namespace-request))
 (common-lisp:defun make-describe-namespace-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key namespace aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-namespace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-namespace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-namespace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-namespace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-namespace-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %describe-namespace-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-namespace-response-request-id :initform
                         common-lisp:nil)
                        (namespace :initarg :namespace :type
                         (common-lisp:or namespace-info-v2 common-lisp:null)
                         :accessor %describe-namespace-response-namespace
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-namespace-response
                    'make-describe-namespace-response))
 (common-lisp:defun make-describe-namespace-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id namespace)
   (common-lisp:apply #'common-lisp:make-instance 'describe-namespace-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-namespace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-namespace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-namespace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-refresh-schedule-request common-lisp:nil
                       ((schedule-id :initarg :schedule-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-refresh-schedule-request-schedule-id
                         :initform
                         (common-lisp:error ":schedule-id is required"))
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %describe-refresh-schedule-request-data-set-id
                         :initform
                         (common-lisp:error ":data-set-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %describe-refresh-schedule-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-refresh-schedule-request
                    'make-describe-refresh-schedule-request))
 (common-lisp:defun make-describe-refresh-schedule-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key schedule-id data-set-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-refresh-schedule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-refresh-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-refresh-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-refresh-schedule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-refresh-schedule-response common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-refresh-schedule-response-arn :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-refresh-schedule-response-request-id
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %describe-refresh-schedule-response-status
                         :initform common-lisp:nil)
                        (refresh-schedule :initarg :refresh-schedule :type
                         (common-lisp:or refresh-schedule common-lisp:null)
                         :accessor
                         %describe-refresh-schedule-response-refresh-schedule
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-refresh-schedule-response
                    'make-describe-refresh-schedule-response))
 (common-lisp:defun make-describe-refresh-schedule-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn request-id status refresh-schedule)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-refresh-schedule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-refresh-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-refresh-schedule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'refresh-schedule))
      (common-lisp:list
       (common-lisp:cons "RefreshSchedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-refresh-schedule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-template-alias-request common-lisp:nil
                       ((alias-name :initarg :alias-name :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %describe-template-alias-request-alias-name :initform
                         (common-lisp:error ":alias-name is required"))
                        (template-id :initarg :template-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %describe-template-alias-request-template-id
                         :initform
                         (common-lisp:error ":template-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %describe-template-alias-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-template-alias-request
                    'make-describe-template-alias-request))
 (common-lisp:defun make-describe-template-alias-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alias-name template-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-template-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-template-alias-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-template-alias-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %describe-template-alias-response-status
                         :initform common-lisp:nil)
                        (template-alias :initarg :template-alias :type
                         (common-lisp:or template-alias common-lisp:null)
                         :accessor
                         %describe-template-alias-response-template-alias
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-template-alias-response
                    'make-describe-template-alias-response))
 (common-lisp:defun make-describe-template-alias-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status template-alias)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-template-alias-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-alias))
      (common-lisp:list
       (common-lisp:cons "TemplateAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-template-definition-request common-lisp:nil
                       ((alias-name :initarg :alias-name :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %describe-template-definition-request-alias-name
                         :initform common-lisp:nil)
                        (version-number :initarg :version-number :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor
                         %describe-template-definition-request-version-number
                         :initform common-lisp:nil)
                        (template-id :initarg :template-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %describe-template-definition-request-template-id
                         :initform
                         (common-lisp:error ":template-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %describe-template-definition-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-template-definition-request
                    'make-describe-template-definition-request))
 (common-lisp:defun make-describe-template-definition-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alias-name version-number template-id
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-template-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-template-definition-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-template-definition-response-request-id
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor
                         %describe-template-definition-response-status
                         :initform common-lisp:nil)
                        (definition :initarg :definition :type
                         (common-lisp:or template-version-definition
                                         common-lisp:null)
                         :accessor
                         %describe-template-definition-response-definition
                         :initform common-lisp:nil)
                        (theme-arn :initarg :theme-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-template-definition-response-theme-arn
                         :initform common-lisp:nil)
                        (resource-status :initarg :resource-status :type
                         (common-lisp:or resource-status common-lisp:null)
                         :accessor
                         %describe-template-definition-response-resource-status
                         :initform common-lisp:nil)
                        (errors :initarg :errors :type
                         (common-lisp:or template-error-list common-lisp:null)
                         :accessor
                         %describe-template-definition-response-errors
                         :initform common-lisp:nil)
                        (template-id :initarg :template-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %describe-template-definition-response-template-id
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor %describe-template-definition-response-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-template-definition-response
                    'make-describe-template-definition-response))
 (common-lisp:defun make-describe-template-definition-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status definition theme-arn
                     resource-status errors template-id name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-template-definition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-status))
      (common-lisp:list
       (common-lisp:cons "ResourceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-arn))
      (common-lisp:list
       (common-lisp:cons "ThemeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-template-permissions-request common-lisp:nil
                       ((template-id :initarg :template-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %describe-template-permissions-request-template-id
                         :initform
                         (common-lisp:error ":template-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %describe-template-permissions-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-template-permissions-request
                    'make-describe-template-permissions-request))
 (common-lisp:defun make-describe-template-permissions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key template-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-template-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-template-permissions-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor
                         %describe-template-permissions-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-template-permissions-response-request-id
                         :initform common-lisp:nil)
                        (permissions :initarg :permissions :type
                         (common-lisp:or resource-permission-list
                                         common-lisp:null)
                         :accessor
                         %describe-template-permissions-response-permissions
                         :initform common-lisp:nil)
                        (template-arn :initarg :template-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-template-permissions-response-template-arn
                         :initform common-lisp:nil)
                        (template-id :initarg :template-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %describe-template-permissions-response-template-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-template-permissions-response
                    'make-describe-template-permissions-response))
 (common-lisp:defun make-describe-template-permissions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id permissions
                     template-arn template-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-template-permissions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-template-request common-lisp:nil
                       ((alias-name :initarg :alias-name :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %describe-template-request-alias-name :initform
                         common-lisp:nil)
                        (version-number :initarg :version-number :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor %describe-template-request-version-number
                         :initform common-lisp:nil)
                        (template-id :initarg :template-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %describe-template-request-template-id
                         :initform
                         (common-lisp:error ":template-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %describe-template-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-template-request
                    'make-describe-template-request))
 (common-lisp:defun make-describe-template-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alias-name version-number template-id
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-template-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-template-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %describe-template-response-status :initform
                         common-lisp:nil)
                        (template :initarg :template :type
                         (common-lisp:or template common-lisp:null) :accessor
                         %describe-template-response-template :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-template-response
                    'make-describe-template-response))
 (common-lisp:defun make-describe-template-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status template)
   (common-lisp:apply #'common-lisp:make-instance 'describe-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template))
      (common-lisp:list
       (common-lisp:cons "Template"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-theme-alias-request common-lisp:nil
                       ((alias-name :initarg :alias-name :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %describe-theme-alias-request-alias-name :initform
                         (common-lisp:error ":alias-name is required"))
                        (theme-id :initarg :theme-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %describe-theme-alias-request-theme-id
                         :initform (common-lisp:error ":theme-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %describe-theme-alias-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-theme-alias-request
                    'make-describe-theme-alias-request))
 (common-lisp:defun make-describe-theme-alias-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alias-name theme-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-theme-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-theme-alias-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-theme-alias-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %describe-theme-alias-response-status
                         :initform common-lisp:nil)
                        (theme-alias :initarg :theme-alias :type
                         (common-lisp:or theme-alias common-lisp:null)
                         :accessor %describe-theme-alias-response-theme-alias
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-theme-alias-response
                    'make-describe-theme-alias-response))
 (common-lisp:defun make-describe-theme-alias-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status theme-alias)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-theme-alias-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-alias))
      (common-lisp:list
       (common-lisp:cons "ThemeAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-theme-permissions-request common-lisp:nil
                       ((theme-id :initarg :theme-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %describe-theme-permissions-request-theme-id
                         :initform (common-lisp:error ":theme-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %describe-theme-permissions-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-theme-permissions-request
                    'make-describe-theme-permissions-request))
 (common-lisp:defun make-describe-theme-permissions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key theme-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-theme-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-theme-permissions-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %describe-theme-permissions-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-theme-permissions-response-request-id
                         :initform common-lisp:nil)
                        (permissions :initarg :permissions :type
                         (common-lisp:or resource-permission-list
                                         common-lisp:null)
                         :accessor
                         %describe-theme-permissions-response-permissions
                         :initform common-lisp:nil)
                        (theme-arn :initarg :theme-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-theme-permissions-response-theme-arn
                         :initform common-lisp:nil)
                        (theme-id :initarg :theme-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %describe-theme-permissions-response-theme-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-theme-permissions-response
                    'make-describe-theme-permissions-response))
 (common-lisp:defun make-describe-theme-permissions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id permissions theme-arn
                     theme-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-theme-permissions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-id))
      (common-lisp:list
       (common-lisp:cons "ThemeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-arn))
      (common-lisp:list
       (common-lisp:cons "ThemeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-theme-request common-lisp:nil
                       ((alias-name :initarg :alias-name :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %describe-theme-request-alias-name :initform
                         common-lisp:nil)
                        (version-number :initarg :version-number :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor %describe-theme-request-version-number
                         :initform common-lisp:nil)
                        (theme-id :initarg :theme-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %describe-theme-request-theme-id :initform
                         (common-lisp:error ":theme-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-and-account-id common-lisp:null)
                         :accessor %describe-theme-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-theme-request 'make-describe-theme-request))
 (common-lisp:defun make-describe-theme-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alias-name version-number theme-id
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-theme-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-theme-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-theme-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %describe-theme-response-status :initform
                         common-lisp:nil)
                        (theme :initarg :theme :type
                         (common-lisp:or theme common-lisp:null) :accessor
                         %describe-theme-response-theme :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-theme-response 'make-describe-theme-response))
 (common-lisp:defun make-describe-theme-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status theme)
   (common-lisp:apply #'common-lisp:make-instance 'describe-theme-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme))
      (common-lisp:list
       (common-lisp:cons "Theme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-theme-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-user-request common-lisp:nil
                       ((namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %describe-user-request-namespace :initform
                         (common-lisp:error ":namespace is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %describe-user-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))
                        (user-name :initarg :user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %describe-user-request-user-name :initform
                         (common-lisp:error ":user-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-user-request 'make-describe-user-request))
 (common-lisp:defun make-describe-user-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key namespace aws-account-id user-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-user-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %describe-user-response-status :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-user-response-request-id :initform
                         common-lisp:nil)
                        (user :initarg :user :type
                         (common-lisp:or user common-lisp:null) :accessor
                         %describe-user-response-user :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-user-response 'make-describe-user-response))
 (common-lisp:defun make-describe-user-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id user)
   (common-lisp:apply #'common-lisp:make-instance 'describe-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass destination-parameter-value-configuration
                       common-lisp:nil
                       ((source-field :initarg :source-field :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         %destination-parameter-value-configuration-source-field
                         :initform common-lisp:nil)
                        (source-parameter-name :initarg :source-parameter-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %destination-parameter-value-configuration-source-parameter-name
                         :initform common-lisp:nil)
                        (select-all-value-options :initarg
                         :select-all-value-options :type
                         (common-lisp:or select-all-value-options
                                         common-lisp:null)
                         :accessor
                         %destination-parameter-value-configuration-select-all-value-options
                         :initform common-lisp:nil)
                        (custom-values-configuration :initarg
                         :custom-values-configuration :type
                         (common-lisp:or custom-values-configuration
                                         common-lisp:null)
                         :accessor
                         %destination-parameter-value-configuration-custom-values-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'destination-parameter-value-configuration
                    'make-destination-parameter-value-configuration))
 (common-lisp:defun make-destination-parameter-value-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-field source-parameter-name
                     select-all-value-options custom-values-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'destination-parameter-value-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          destination-parameter-value-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          destination-parameter-value-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-values-configuration))
      (common-lisp:list
       (common-lisp:cons "CustomValuesConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'select-all-value-options))
      (common-lisp:list
       (common-lisp:cons "SelectAllValueOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-parameter-name))
      (common-lisp:list
       (common-lisp:cons "SourceParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-field))
      (common-lisp:list
       (common-lisp:cons "SourceField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          destination-parameter-value-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dimension-field common-lisp:nil
                       ((date-dimension-field :initarg :date-dimension-field
                         :type
                         (common-lisp:or date-dimension-field common-lisp:null)
                         :accessor %dimension-field-date-dimension-field
                         :initform common-lisp:nil)
                        (categorical-dimension-field :initarg
                         :categorical-dimension-field :type
                         (common-lisp:or categorical-dimension-field
                                         common-lisp:null)
                         :accessor %dimension-field-categorical-dimension-field
                         :initform common-lisp:nil)
                        (numerical-dimension-field :initarg
                         :numerical-dimension-field :type
                         (common-lisp:or numerical-dimension-field
                                         common-lisp:null)
                         :accessor %dimension-field-numerical-dimension-field
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'dimension-field 'make-dimension-field))
 (common-lisp:defun make-dimension-field
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key date-dimension-field
                     categorical-dimension-field numerical-dimension-field)
   (common-lisp:apply #'common-lisp:make-instance 'dimension-field
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dimension-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dimension-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'numerical-dimension-field))
      (common-lisp:list
       (common-lisp:cons "NumericalDimensionField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'categorical-dimension-field))
      (common-lisp:list
       (common-lisp:cons "CategoricalDimensionField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'date-dimension-field))
      (common-lisp:list
       (common-lisp:cons "DateDimensionField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dimension-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dimension-field-list ()
   '(trivial-types:proper-list dimension-field))
 (common-lisp:defun |make-dimension-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype domain () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition domain-not-whitelisted-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       domain-not-whitelisted-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       domain-not-whitelisted-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'domain-not-whitelisted-exception
                    'domain-not-whitelisted-exception-message
                    'domain-not-whitelisted-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass donut-center-options common-lisp:nil
                       ((label-visibility :initarg :label-visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %donut-center-options-label-visibility :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'donut-center-options 'make-donut-center-options))
 (common-lisp:defun make-donut-center-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key label-visibility)
   (common-lisp:apply #'common-lisp:make-instance 'donut-center-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input donut-center-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input donut-center-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-visibility))
      (common-lisp:list
       (common-lisp:cons "LabelVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input donut-center-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass donut-options common-lisp:nil
                       ((donut-center-options :initarg :donut-center-options
                         :type
                         (common-lisp:or donut-center-options common-lisp:null)
                         :accessor %donut-options-donut-center-options
                         :initform common-lisp:nil)
                        (arc-options :initarg :arc-options :type
                         (common-lisp:or arc-options common-lisp:null)
                         :accessor %donut-options-arc-options :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'donut-options 'make-donut-options))
 (common-lisp:defun make-donut-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key donut-center-options arc-options)
   (common-lisp:apply #'common-lisp:make-instance 'donut-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input donut-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input donut-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arc-options))
      (common-lisp:list
       (common-lisp:cons "ArcOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'donut-center-options))
      (common-lisp:list
       (common-lisp:cons "DonutCenterOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input donut-options))
   common-lisp:nil))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass drill-down-filter common-lisp:nil
                       ((time-range-filter :initarg :time-range-filter :type
                         (common-lisp:or time-range-drill-down-filter
                                         common-lisp:null)
                         :accessor %drill-down-filter-time-range-filter
                         :initform common-lisp:nil)
                        (category-filter :initarg :category-filter :type
                         (common-lisp:or category-drill-down-filter
                                         common-lisp:null)
                         :accessor %drill-down-filter-category-filter :initform
                         common-lisp:nil)
                        (numeric-equality-filter :initarg
                         :numeric-equality-filter :type
                         (common-lisp:or numeric-equality-drill-down-filter
                                         common-lisp:null)
                         :accessor %drill-down-filter-numeric-equality-filter
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'drill-down-filter 'make-drill-down-filter))
 (common-lisp:defun make-drill-down-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key time-range-filter category-filter
                     numeric-equality-filter)
   (common-lisp:apply #'common-lisp:make-instance 'drill-down-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input drill-down-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input drill-down-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'numeric-equality-filter))
      (common-lisp:list
       (common-lisp:cons "NumericEqualityFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-filter))
      (common-lisp:list
       (common-lisp:cons "CategoryFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-range-filter))
      (common-lisp:list
       (common-lisp:cons "TimeRangeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input drill-down-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype drill-down-filter-list ()
   '(trivial-types:proper-list drill-down-filter))
 (common-lisp:defun |make-drill-down-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list drill-down-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass drop-down-control-display-options common-lisp:nil
                       ((title-options :initarg :title-options :type
                         (common-lisp:or label-options common-lisp:null)
                         :accessor
                         %drop-down-control-display-options-title-options
                         :initform common-lisp:nil)
                        (select-all-options :initarg :select-all-options :type
                         (common-lisp:or list-control-select-all-options
                                         common-lisp:null)
                         :accessor
                         %drop-down-control-display-options-select-all-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'drop-down-control-display-options
                    'make-drop-down-control-display-options))
 (common-lisp:defun make-drop-down-control-display-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key title-options select-all-options)
   (common-lisp:apply #'common-lisp:make-instance
                      'drop-down-control-display-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          drop-down-control-display-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          drop-down-control-display-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-all-options))
      (common-lisp:list
       (common-lisp:cons "SelectAllOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title-options))
      (common-lisp:list
       (common-lisp:cons "TitleOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          drop-down-control-display-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dynamic-default-value common-lisp:nil
                       ((default-value-column :initarg :default-value-column
                         :type
                         (common-lisp:or column-identifier common-lisp:null)
                         :accessor %dynamic-default-value-default-value-column
                         :initform
                         (common-lisp:error
                          ":default-value-column is required"))
                        (group-name-column :initarg :group-name-column :type
                         (common-lisp:or column-identifier common-lisp:null)
                         :accessor %dynamic-default-value-group-name-column
                         :initform common-lisp:nil)
                        (user-name-column :initarg :user-name-column :type
                         (common-lisp:or column-identifier common-lisp:null)
                         :accessor %dynamic-default-value-user-name-column
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dynamic-default-value 'make-dynamic-default-value))
 (common-lisp:defun make-dynamic-default-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key default-value-column group-name-column
                     user-name-column)
   (common-lisp:apply #'common-lisp:make-instance 'dynamic-default-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dynamic-default-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dynamic-default-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name-column))
      (common-lisp:list
       (common-lisp:cons "UserNameColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name-column))
      (common-lisp:list
       (common-lisp:cons "GroupNameColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-value-column))
      (common-lisp:list
       (common-lisp:cons "DefaultValueColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dynamic-default-value))
   common-lisp:nil))
(common-lisp:deftype edition () 'common-lisp:string)
(common-lisp:deftype embedding-identity-type () 'common-lisp:string)
(common-lisp:deftype embedding-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass empty-visual common-lisp:nil
                       ((actions :initarg :actions :type
                         (common-lisp:or visual-custom-action-list
                                         common-lisp:null)
                         :accessor %empty-visual-actions :initform
                         common-lisp:nil)
                        (data-set-identifier :initarg :data-set-identifier
                         :type
                         (common-lisp:or data-set-identifier common-lisp:null)
                         :accessor %empty-visual-data-set-identifier :initform
                         (common-lisp:error
                          ":data-set-identifier is required"))
                        (visual-id :initarg :visual-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %empty-visual-visual-id :initform
                         (common-lisp:error ":visual-id is required"))))
 (common-lisp:export (common-lisp:list 'empty-visual 'make-empty-visual))
 (common-lisp:defun make-empty-visual
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key actions data-set-identifier visual-id)
   (common-lisp:apply #'common-lisp:make-instance 'empty-visual
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input empty-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input empty-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-identifier))
      (common-lisp:list
       (common-lisp:cons "DataSetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input empty-visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass entity common-lisp:nil
                       ((path :initarg :path :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %entity-path :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'entity 'make-entity))
 (common-lisp:defun make-entity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key path)
   (common-lisp:apply #'common-lisp:make-instance 'entity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype entity-list () '(trivial-types:proper-list entity))
 (common-lisp:defun |make-entity-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity))
   aws-sdk/generator/shape::members))
(common-lisp:deftype entry-path () 'common-lisp:string)
(common-lisp:deftype entry-point () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass error-info common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %error-info-message :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or ingestion-error-type common-lisp:null)
                         :accessor %error-info-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'error-info 'make-error-info))
 (common-lisp:defun make-error-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message type)
   (common-lisp:apply #'common-lisp:make-instance 'error-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass exasol-parameters common-lisp:nil
                       ((port :initarg :port :type
                         (common-lisp:or port common-lisp:null) :accessor
                         %exasol-parameters-port :initform
                         (common-lisp:error ":port is required"))
                        (host :initarg :host :type
                         (common-lisp:or host common-lisp:null) :accessor
                         %exasol-parameters-host :initform
                         (common-lisp:error ":host is required"))))
 (common-lisp:export
  (common-lisp:list 'exasol-parameters 'make-exasol-parameters))
 (common-lisp:defun make-exasol-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key port host)
   (common-lisp:apply #'common-lisp:make-instance 'exasol-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input exasol-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input exasol-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input exasol-parameters))
   common-lisp:nil))
(common-lisp:deftype exception-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass exclude-period-configuration common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or widget-status common-lisp:null)
                         :accessor %exclude-period-configuration-status
                         :initform common-lisp:nil)
                        (granularity :initarg :granularity :type
                         (common-lisp:or time-granularity common-lisp:null)
                         :accessor %exclude-period-configuration-granularity
                         :initform
                         (common-lisp:error ":granularity is required"))
                        (amount :initarg :amount :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %exclude-period-configuration-amount :initform
                         (common-lisp:error ":amount is required"))))
 (common-lisp:export
  (common-lisp:list 'exclude-period-configuration
                    'make-exclude-period-configuration))
 (common-lisp:defun make-exclude-period-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status granularity amount)
   (common-lisp:apply #'common-lisp:make-instance 'exclude-period-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          exclude-period-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          exclude-period-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amount))
      (common-lisp:list
       (common-lisp:cons "Amount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularity))
      (common-lisp:list
       (common-lisp:cons "Granularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          exclude-period-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass explicit-hierarchy common-lisp:nil
                       ((drill-down-filters :initarg :drill-down-filters :type
                         (common-lisp:or drill-down-filter-list
                                         common-lisp:null)
                         :accessor %explicit-hierarchy-drill-down-filters
                         :initform common-lisp:nil)
                        (columns :initarg :columns :type
                         (common-lisp:or explicit-hierarchy-column-list
                                         common-lisp:null)
                         :accessor %explicit-hierarchy-columns :initform
                         (common-lisp:error ":columns is required"))
                        (hierarchy-id :initarg :hierarchy-id :type
                         (common-lisp:or hierarchy-id common-lisp:null)
                         :accessor %explicit-hierarchy-hierarchy-id :initform
                         (common-lisp:error ":hierarchy-id is required"))))
 (common-lisp:export
  (common-lisp:list 'explicit-hierarchy 'make-explicit-hierarchy))
 (common-lisp:defun make-explicit-hierarchy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key drill-down-filters columns hierarchy-id)
   (common-lisp:apply #'common-lisp:make-instance 'explicit-hierarchy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input explicit-hierarchy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input explicit-hierarchy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-id))
      (common-lisp:list
       (common-lisp:cons "HierarchyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "Columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drill-down-filters))
      (common-lisp:list
       (common-lisp:cons "DrillDownFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input explicit-hierarchy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype explicit-hierarchy-column-list ()
   '(trivial-types:proper-list column-identifier))
 (common-lisp:defun |make-explicit-hierarchy-column-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass export-hidden-fields-option common-lisp:nil
                       ((availability-status :initarg :availability-status
                         :type
                         (common-lisp:or dashboard-behavior common-lisp:null)
                         :accessor
                         %export-hidden-fields-option-availability-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'export-hidden-fields-option
                    'make-export-hidden-fields-option))
 (common-lisp:defun make-export-hidden-fields-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key availability-status)
   (common-lisp:apply #'common-lisp:make-instance 'export-hidden-fields-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-hidden-fields-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-hidden-fields-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-status))
      (common-lisp:list
       (common-lisp:cons "AvailabilityStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-hidden-fields-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-to-csvoption common-lisp:nil
                       ((availability-status :initarg :availability-status
                         :type
                         (common-lisp:or dashboard-behavior common-lisp:null)
                         :accessor %export-to-csvoption-availability-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'export-to-csvoption 'make-export-to-csvoption))
 (common-lisp:defun make-export-to-csvoption
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key availability-status)
   (common-lisp:apply #'common-lisp:make-instance 'export-to-csvoption
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-to-csvoption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-to-csvoption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-status))
      (common-lisp:list
       (common-lisp:cons "AvailabilityStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-to-csvoption))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-with-hidden-fields-option common-lisp:nil
                       ((availability-status :initarg :availability-status
                         :type
                         (common-lisp:or dashboard-behavior common-lisp:null)
                         :accessor
                         %export-with-hidden-fields-option-availability-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'export-with-hidden-fields-option
                    'make-export-with-hidden-fields-option))
 (common-lisp:defun make-export-with-hidden-fields-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key availability-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'export-with-hidden-fields-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-with-hidden-fields-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-with-hidden-fields-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-status))
      (common-lisp:list
       (common-lisp:cons "AvailabilityStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-with-hidden-fields-option))
   common-lisp:nil))
(common-lisp:deftype expression () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass field-based-tooltip common-lisp:nil
                       ((tooltip-fields :initarg :tooltip-fields :type
                         (common-lisp:or tooltip-item-list common-lisp:null)
                         :accessor %field-based-tooltip-tooltip-fields
                         :initform common-lisp:nil)
                        (tooltip-title-type :initarg :tooltip-title-type :type
                         (common-lisp:or tooltip-title-type common-lisp:null)
                         :accessor %field-based-tooltip-tooltip-title-type
                         :initform common-lisp:nil)
                        (aggregation-visibility :initarg
                         :aggregation-visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %field-based-tooltip-aggregation-visibility :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'field-based-tooltip 'make-field-based-tooltip))
 (common-lisp:defun make-field-based-tooltip
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tooltip-fields tooltip-title-type
                     aggregation-visibility)
   (common-lisp:apply #'common-lisp:make-instance 'field-based-tooltip
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-based-tooltip))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-based-tooltip))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-visibility))
      (common-lisp:list
       (common-lisp:cons "AggregationVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip-title-type))
      (common-lisp:list
       (common-lisp:cons "TooltipTitleType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip-fields))
      (common-lisp:list
       (common-lisp:cons "TooltipFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-based-tooltip))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass field-folder common-lisp:nil
                       ((columns :initarg :|columns| :type
                         (common-lisp:or folder-column-list common-lisp:null)
                         :accessor %field-folder-columns :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or field-folder-description
                                         common-lisp:null)
                         :accessor %field-folder-description :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'field-folder 'make-field-folder))
 (common-lisp:defun make-field-folder
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key columns description)
   (common-lisp:apply #'common-lisp:make-instance 'field-folder
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-folder))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-folder))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-folder))
   common-lisp:nil))
(common-lisp:deftype field-folder-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype field-folder-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-field-folder-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype field-folder-path () 'common-lisp:string)
(common-lisp:deftype field-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass field-label-type common-lisp:nil
                       ((visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %field-label-type-visibility :initform
                         common-lisp:nil)
                        (field-id :initarg :field-id :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         %field-label-type-field-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'field-label-type 'make-field-label-type))
 (common-lisp:defun make-field-label-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visibility field-id)
   (common-lisp:apply #'common-lisp:make-instance 'field-label-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-label-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-label-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-label-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype field-order-list ()
   '(trivial-types:proper-list field-id))
 (common-lisp:defun |make-field-order-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass field-series-item common-lisp:nil
                       ((settings :initarg :settings :type
                         (common-lisp:or line-chart-series-settings
                                         common-lisp:null)
                         :accessor %field-series-item-settings :initform
                         common-lisp:nil)
                        (axis-binding :initarg :axis-binding :type
                         (common-lisp:or axis-binding common-lisp:null)
                         :accessor %field-series-item-axis-binding :initform
                         (common-lisp:error ":axis-binding is required"))
                        (field-id :initarg :field-id :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         %field-series-item-field-id :initform
                         (common-lisp:error ":field-id is required"))))
 (common-lisp:export
  (common-lisp:list 'field-series-item 'make-field-series-item))
 (common-lisp:defun make-field-series-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key settings axis-binding field-id)
   (common-lisp:apply #'common-lisp:make-instance 'field-series-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-series-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-series-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'axis-binding))
      (common-lisp:list
       (common-lisp:cons "AxisBinding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-series-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass field-sort common-lisp:nil
                       ((direction :initarg :direction :type
                         (common-lisp:or sort-direction common-lisp:null)
                         :accessor %field-sort-direction :initform
                         (common-lisp:error ":direction is required"))
                        (field-id :initarg :field-id :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         %field-sort-field-id :initform
                         (common-lisp:error ":field-id is required"))))
 (common-lisp:export (common-lisp:list 'field-sort 'make-field-sort))
 (common-lisp:defun make-field-sort
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key direction field-id)
   (common-lisp:apply #'common-lisp:make-instance 'field-sort
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-sort))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-sort))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'direction))
      (common-lisp:list
       (common-lisp:cons "Direction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-sort))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass field-sort-options common-lisp:nil
                       ((column-sort :initarg :column-sort :type
                         (common-lisp:or column-sort common-lisp:null)
                         :accessor %field-sort-options-column-sort :initform
                         common-lisp:nil)
                        (field-sort :initarg :field-sort :type
                         (common-lisp:or field-sort common-lisp:null) :accessor
                         %field-sort-options-field-sort :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'field-sort-options 'make-field-sort-options))
 (common-lisp:defun make-field-sort-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key column-sort field-sort)
   (common-lisp:apply #'common-lisp:make-instance 'field-sort-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-sort-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-sort-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-sort))
      (common-lisp:list
       (common-lisp:cons "FieldSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-sort))
      (common-lisp:list
       (common-lisp:cons "ColumnSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-sort-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype field-sort-options-list ()
   '(trivial-types:proper-list field-sort-options))
 (common-lisp:defun |make-field-sort-options-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-sort-options))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass field-tooltip-item common-lisp:nil
                       ((visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %field-tooltip-item-visibility :initform
                         common-lisp:nil)
                        (label :initarg :label :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %field-tooltip-item-label :initform common-lisp:nil)
                        (field-id :initarg :field-id :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         %field-tooltip-item-field-id :initform
                         (common-lisp:error ":field-id is required"))))
 (common-lisp:export
  (common-lisp:list 'field-tooltip-item 'make-field-tooltip-item))
 (common-lisp:defun make-field-tooltip-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visibility label field-id)
   (common-lisp:apply #'common-lisp:make-instance 'field-tooltip-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-tooltip-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-tooltip-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "Label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-tooltip-item))
   common-lisp:nil))
(common-lisp:deftype field-value () 'common-lisp:string)
(common-lisp:deftype file-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass filled-map-aggregated-field-wells common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or filled-map-measure-field-list
                                         common-lisp:null)
                         :accessor %filled-map-aggregated-field-wells-values
                         :initform common-lisp:nil)
                        (geospatial :initarg :geospatial :type
                         (common-lisp:or filled-map-dimension-field-list
                                         common-lisp:null)
                         :accessor
                         %filled-map-aggregated-field-wells-geospatial
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'filled-map-aggregated-field-wells
                    'make-filled-map-aggregated-field-wells))
 (common-lisp:defun make-filled-map-aggregated-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values geospatial)
   (common-lisp:apply #'common-lisp:make-instance
                      'filled-map-aggregated-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geospatial))
      (common-lisp:list
       (common-lisp:cons "Geospatial"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filled-map-conditional-formatting common-lisp:nil
                       ((conditional-formatting-options :initarg
                         :conditional-formatting-options :type
                         (common-lisp:or
                          filled-map-conditional-formatting-option-list
                          common-lisp:null)
                         :accessor
                         %filled-map-conditional-formatting-conditional-formatting-options
                         :initform
                         (common-lisp:error
                          ":conditional-formatting-options is required"))))
 (common-lisp:export
  (common-lisp:list 'filled-map-conditional-formatting
                    'make-filled-map-conditional-formatting))
 (common-lisp:defun make-filled-map-conditional-formatting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key conditional-formatting-options)
   (common-lisp:apply #'common-lisp:make-instance
                      'filled-map-conditional-formatting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-conditional-formatting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-conditional-formatting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-formatting-options))
      (common-lisp:list
       (common-lisp:cons "ConditionalFormattingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-conditional-formatting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filled-map-conditional-formatting-option common-lisp:nil
                       ((shape :initarg :shape :type
                         (common-lisp:or
                          filled-map-shape-conditional-formatting
                          common-lisp:null)
                         :accessor
                         %filled-map-conditional-formatting-option-shape
                         :initform (common-lisp:error ":shape is required"))))
 (common-lisp:export
  (common-lisp:list 'filled-map-conditional-formatting-option
                    'make-filled-map-conditional-formatting-option))
 (common-lisp:defun make-filled-map-conditional-formatting-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key shape)
   (common-lisp:apply #'common-lisp:make-instance
                      'filled-map-conditional-formatting-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-conditional-formatting-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-conditional-formatting-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shape))
      (common-lisp:list
       (common-lisp:cons "Shape"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-conditional-formatting-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filled-map-conditional-formatting-option-list ()
   '(trivial-types:proper-list filled-map-conditional-formatting-option))
 (common-lisp:defun |make-filled-map-conditional-formatting-option-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            filled-map-conditional-formatting-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass filled-map-configuration common-lisp:nil
                       ((map-style-options :initarg :map-style-options :type
                         (common-lisp:or geospatial-map-style-options
                                         common-lisp:null)
                         :accessor %filled-map-configuration-map-style-options
                         :initform common-lisp:nil)
                        (window-options :initarg :window-options :type
                         (common-lisp:or geospatial-window-options
                                         common-lisp:null)
                         :accessor %filled-map-configuration-window-options
                         :initform common-lisp:nil)
                        (tooltip :initarg :tooltip :type
                         (common-lisp:or tooltip-options common-lisp:null)
                         :accessor %filled-map-configuration-tooltip :initform
                         common-lisp:nil)
                        (legend :initarg :legend :type
                         (common-lisp:or legend-options common-lisp:null)
                         :accessor %filled-map-configuration-legend :initform
                         common-lisp:nil)
                        (sort-configuration :initarg :sort-configuration :type
                         (common-lisp:or filled-map-sort-configuration
                                         common-lisp:null)
                         :accessor %filled-map-configuration-sort-configuration
                         :initform common-lisp:nil)
                        (field-wells :initarg :field-wells :type
                         (common-lisp:or filled-map-field-wells
                                         common-lisp:null)
                         :accessor %filled-map-configuration-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'filled-map-configuration 'make-filled-map-configuration))
 (common-lisp:defun make-filled-map-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key map-style-options window-options tooltip
                     legend sort-configuration field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'filled-map-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legend))
      (common-lisp:list
       (common-lisp:cons "Legend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip))
      (common-lisp:list
       (common-lisp:cons "Tooltip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-options))
      (common-lisp:list
       (common-lisp:cons "WindowOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-style-options))
      (common-lisp:list
       (common-lisp:cons "MapStyleOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filled-map-dimension-field-list ()
   '(trivial-types:proper-list dimension-field))
 (common-lisp:defun |make-filled-map-dimension-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass filled-map-field-wells common-lisp:nil
                       ((filled-map-aggregated-field-wells :initarg
                         :filled-map-aggregated-field-wells :type
                         (common-lisp:or filled-map-aggregated-field-wells
                                         common-lisp:null)
                         :accessor
                         %filled-map-field-wells-filled-map-aggregated-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'filled-map-field-wells 'make-filled-map-field-wells))
 (common-lisp:defun make-filled-map-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filled-map-aggregated-field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'filled-map-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'filled-map-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "FilledMapAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filled-map-measure-field-list ()
   '(trivial-types:proper-list measure-field))
 (common-lisp:defun |make-filled-map-measure-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list measure-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass filled-map-shape-conditional-formatting common-lisp:nil
                       ((format :initarg :format :type
                         (common-lisp:or shape-conditional-format
                                         common-lisp:null)
                         :accessor
                         %filled-map-shape-conditional-formatting-format
                         :initform common-lisp:nil)
                        (field-id :initarg :field-id :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         %filled-map-shape-conditional-formatting-field-id
                         :initform
                         (common-lisp:error ":field-id is required"))))
 (common-lisp:export
  (common-lisp:list 'filled-map-shape-conditional-formatting
                    'make-filled-map-shape-conditional-formatting))
 (common-lisp:defun make-filled-map-shape-conditional-formatting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key format field-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'filled-map-shape-conditional-formatting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-shape-conditional-formatting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-shape-conditional-formatting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-shape-conditional-formatting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filled-map-sort-configuration common-lisp:nil
                       ((category-sort :initarg :category-sort :type
                         (common-lisp:or field-sort-options-list
                                         common-lisp:null)
                         :accessor %filled-map-sort-configuration-category-sort
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'filled-map-sort-configuration
                    'make-filled-map-sort-configuration))
 (common-lisp:defun make-filled-map-sort-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key category-sort)
   (common-lisp:apply #'common-lisp:make-instance
                      'filled-map-sort-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-sort))
      (common-lisp:list
       (common-lisp:cons "CategorySort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filled-map-sort-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filled-map-visual common-lisp:nil
                       ((actions :initarg :actions :type
                         (common-lisp:or visual-custom-action-list
                                         common-lisp:null)
                         :accessor %filled-map-visual-actions :initform
                         common-lisp:nil)
                        (column-hierarchies :initarg :column-hierarchies :type
                         (common-lisp:or column-hierarchy-list
                                         common-lisp:null)
                         :accessor %filled-map-visual-column-hierarchies
                         :initform common-lisp:nil)
                        (conditional-formatting :initarg
                         :conditional-formatting :type
                         (common-lisp:or filled-map-conditional-formatting
                                         common-lisp:null)
                         :accessor %filled-map-visual-conditional-formatting
                         :initform common-lisp:nil)
                        (chart-configuration :initarg :chart-configuration
                         :type
                         (common-lisp:or filled-map-configuration
                                         common-lisp:null)
                         :accessor %filled-map-visual-chart-configuration
                         :initform common-lisp:nil)
                        (subtitle :initarg :subtitle :type
                         (common-lisp:or visual-subtitle-label-options
                                         common-lisp:null)
                         :accessor %filled-map-visual-subtitle :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or visual-title-label-options
                                         common-lisp:null)
                         :accessor %filled-map-visual-title :initform
                         common-lisp:nil)
                        (visual-id :initarg :visual-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %filled-map-visual-visual-id :initform
                         (common-lisp:error ":visual-id is required"))))
 (common-lisp:export
  (common-lisp:list 'filled-map-visual 'make-filled-map-visual))
 (common-lisp:defun make-filled-map-visual
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key actions column-hierarchies
                     conditional-formatting chart-configuration subtitle title
                     visual-id)
   (common-lisp:apply #'common-lisp:make-instance 'filled-map-visual
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filled-map-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filled-map-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-formatting))
      (common-lisp:list
       (common-lisp:cons "ConditionalFormatting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-hierarchies))
      (common-lisp:list
       (common-lisp:cons "ColumnHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filled-map-visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((top-bottom-filter :initarg :top-bottom-filter :type
                         (common-lisp:or top-bottom-filter common-lisp:null)
                         :accessor %filter-top-bottom-filter :initform
                         common-lisp:nil)
                        (relative-dates-filter :initarg :relative-dates-filter
                         :type
                         (common-lisp:or relative-dates-filter
                                         common-lisp:null)
                         :accessor %filter-relative-dates-filter :initform
                         common-lisp:nil)
                        (time-range-filter :initarg :time-range-filter :type
                         (common-lisp:or time-range-filter common-lisp:null)
                         :accessor %filter-time-range-filter :initform
                         common-lisp:nil)
                        (time-equality-filter :initarg :time-equality-filter
                         :type
                         (common-lisp:or time-equality-filter common-lisp:null)
                         :accessor %filter-time-equality-filter :initform
                         common-lisp:nil)
                        (numeric-equality-filter :initarg
                         :numeric-equality-filter :type
                         (common-lisp:or numeric-equality-filter
                                         common-lisp:null)
                         :accessor %filter-numeric-equality-filter :initform
                         common-lisp:nil)
                        (numeric-range-filter :initarg :numeric-range-filter
                         :type
                         (common-lisp:or numeric-range-filter common-lisp:null)
                         :accessor %filter-numeric-range-filter :initform
                         common-lisp:nil)
                        (category-filter :initarg :category-filter :type
                         (common-lisp:or category-filter common-lisp:null)
                         :accessor %filter-category-filter :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defun make-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key top-bottom-filter relative-dates-filter
                     time-range-filter time-equality-filter
                     numeric-equality-filter numeric-range-filter
                     category-filter)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-filter))
      (common-lisp:list
       (common-lisp:cons "CategoryFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'numeric-range-filter))
      (common-lisp:list
       (common-lisp:cons "NumericRangeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'numeric-equality-filter))
      (common-lisp:list
       (common-lisp:cons "NumericEqualityFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-equality-filter))
      (common-lisp:list
       (common-lisp:cons "TimeEqualityFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-range-filter))
      (common-lisp:list
       (common-lisp:cons "TimeRangeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relative-dates-filter))
      (common-lisp:list
       (common-lisp:cons "RelativeDatesFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'top-bottom-filter))
      (common-lisp:list
       (common-lisp:cons "TopBottomFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter-control common-lisp:nil
                       ((relative-date-time :initarg :relative-date-time :type
                         (common-lisp:or filter-relative-date-time-control
                                         common-lisp:null)
                         :accessor %filter-control-relative-date-time :initform
                         common-lisp:nil)
                        (slider :initarg :slider :type
                         (common-lisp:or filter-slider-control
                                         common-lisp:null)
                         :accessor %filter-control-slider :initform
                         common-lisp:nil)
                        (text-area :initarg :text-area :type
                         (common-lisp:or filter-text-area-control
                                         common-lisp:null)
                         :accessor %filter-control-text-area :initform
                         common-lisp:nil)
                        (text-field :initarg :text-field :type
                         (common-lisp:or filter-text-field-control
                                         common-lisp:null)
                         :accessor %filter-control-text-field :initform
                         common-lisp:nil)
                        (dropdown :initarg :dropdown :type
                         (common-lisp:or filter-drop-down-control
                                         common-lisp:null)
                         :accessor %filter-control-dropdown :initform
                         common-lisp:nil)
                        (list :initarg :list :type
                         (common-lisp:or filter-list-control common-lisp:null)
                         :accessor %filter-control-list :initform
                         common-lisp:nil)
                        (date-time-picker :initarg :date-time-picker :type
                         (common-lisp:or filter-date-time-picker-control
                                         common-lisp:null)
                         :accessor %filter-control-date-time-picker :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'filter-control 'make-filter-control))
 (common-lisp:defun make-filter-control
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key relative-date-time slider text-area
                     text-field dropdown list date-time-picker)
   (common-lisp:apply #'common-lisp:make-instance 'filter-control
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-time-picker))
      (common-lisp:list
       (common-lisp:cons "DateTimePicker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list))
      (common-lisp:list
       (common-lisp:cons "List"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dropdown))
      (common-lisp:list
       (common-lisp:cons "Dropdown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-field))
      (common-lisp:list
       (common-lisp:cons "TextField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-area))
      (common-lisp:list
       (common-lisp:cons "TextArea"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slider))
      (common-lisp:list
       (common-lisp:cons "Slider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relative-date-time))
      (common-lisp:list
       (common-lisp:cons "RelativeDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-control-list ()
   '(trivial-types:proper-list filter-control))
 (common-lisp:defun |make-filter-control-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-control))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass filter-date-time-picker-control common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or sheet-control-date-time-picker-type
                                         common-lisp:null)
                         :accessor %filter-date-time-picker-control-type
                         :initform common-lisp:nil)
                        (display-options :initarg :display-options :type
                         (common-lisp:or
                          date-time-picker-control-display-options
                          common-lisp:null)
                         :accessor
                         %filter-date-time-picker-control-display-options
                         :initform common-lisp:nil)
                        (source-filter-id :initarg :source-filter-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %filter-date-time-picker-control-source-filter-id
                         :initform
                         (common-lisp:error ":source-filter-id is required"))
                        (title :initarg :title :type
                         (common-lisp:or sheet-control-title common-lisp:null)
                         :accessor %filter-date-time-picker-control-title
                         :initform (common-lisp:error ":title is required"))
                        (filter-control-id :initarg :filter-control-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %filter-date-time-picker-control-filter-control-id
                         :initform
                         (common-lisp:error
                          ":filter-control-id is required"))))
 (common-lisp:export
  (common-lisp:list 'filter-date-time-picker-control
                    'make-filter-date-time-picker-control))
 (common-lisp:defun make-filter-date-time-picker-control
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type display-options source-filter-id
                     title filter-control-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'filter-date-time-picker-control
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filter-date-time-picker-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filter-date-time-picker-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-control-id))
      (common-lisp:list
       (common-lisp:cons "FilterControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-filter-id))
      (common-lisp:list
       (common-lisp:cons "SourceFilterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-options))
      (common-lisp:list
       (common-lisp:cons "DisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filter-date-time-picker-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter-drop-down-control common-lisp:nil
                       ((cascading-control-configuration :initarg
                         :cascading-control-configuration :type
                         (common-lisp:or cascading-control-configuration
                                         common-lisp:null)
                         :accessor
                         %filter-drop-down-control-cascading-control-configuration
                         :initform common-lisp:nil)
                        (selectable-values :initarg :selectable-values :type
                         (common-lisp:or filter-selectable-values
                                         common-lisp:null)
                         :accessor %filter-drop-down-control-selectable-values
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or sheet-control-list-type
                                         common-lisp:null)
                         :accessor %filter-drop-down-control-type :initform
                         common-lisp:nil)
                        (display-options :initarg :display-options :type
                         (common-lisp:or drop-down-control-display-options
                                         common-lisp:null)
                         :accessor %filter-drop-down-control-display-options
                         :initform common-lisp:nil)
                        (source-filter-id :initarg :source-filter-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %filter-drop-down-control-source-filter-id
                         :initform
                         (common-lisp:error ":source-filter-id is required"))
                        (title :initarg :title :type
                         (common-lisp:or sheet-control-title common-lisp:null)
                         :accessor %filter-drop-down-control-title :initform
                         (common-lisp:error ":title is required"))
                        (filter-control-id :initarg :filter-control-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %filter-drop-down-control-filter-control-id
                         :initform
                         (common-lisp:error
                          ":filter-control-id is required"))))
 (common-lisp:export
  (common-lisp:list 'filter-drop-down-control 'make-filter-drop-down-control))
 (common-lisp:defun make-filter-drop-down-control
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cascading-control-configuration
                     selectable-values type display-options source-filter-id
                     title filter-control-id)
   (common-lisp:apply #'common-lisp:make-instance 'filter-drop-down-control
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filter-drop-down-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filter-drop-down-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-control-id))
      (common-lisp:list
       (common-lisp:cons "FilterControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-filter-id))
      (common-lisp:list
       (common-lisp:cons "SourceFilterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-options))
      (common-lisp:list
       (common-lisp:cons "DisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selectable-values))
      (common-lisp:list
       (common-lisp:cons "SelectableValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cascading-control-configuration))
      (common-lisp:list
       (common-lisp:cons "CascadingControlConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filter-drop-down-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter-group common-lisp:nil
                       ((cross-dataset :initarg :cross-dataset :type
                         (common-lisp:or cross-dataset-types common-lisp:null)
                         :accessor %filter-group-cross-dataset :initform
                         (common-lisp:error ":cross-dataset is required"))
                        (status :initarg :status :type
                         (common-lisp:or widget-status common-lisp:null)
                         :accessor %filter-group-status :initform
                         common-lisp:nil)
                        (scope-configuration :initarg :scope-configuration
                         :type
                         (common-lisp:or filter-scope-configuration
                                         common-lisp:null)
                         :accessor %filter-group-scope-configuration :initform
                         (common-lisp:error
                          ":scope-configuration is required"))
                        (filters :initarg :filters :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor %filter-group-filters :initform
                         (common-lisp:error ":filters is required"))
                        (filter-group-id :initarg :filter-group-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %filter-group-filter-group-id :initform
                         (common-lisp:error ":filter-group-id is required"))))
 (common-lisp:export (common-lisp:list 'filter-group 'make-filter-group))
 (common-lisp:defun make-filter-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cross-dataset status scope-configuration
                     filters filter-group-id)
   (common-lisp:apply #'common-lisp:make-instance 'filter-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-group-id))
      (common-lisp:list
       (common-lisp:cons "FilterGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope-configuration))
      (common-lisp:list
       (common-lisp:cons "ScopeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cross-dataset))
      (common-lisp:list
       (common-lisp:cons "CrossDataset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-group-list ()
   '(trivial-types:proper-list filter-group))
 (common-lisp:defun |make-filter-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun |make-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass filter-list-configuration common-lisp:nil
                       ((select-all-options :initarg :select-all-options :type
                         (common-lisp:or category-filter-select-all-options
                                         common-lisp:null)
                         :accessor
                         %filter-list-configuration-select-all-options
                         :initform common-lisp:nil)
                        (category-values :initarg :category-values :type
                         (common-lisp:or category-value-list common-lisp:null)
                         :accessor %filter-list-configuration-category-values
                         :initform common-lisp:nil)
                        (match-operator :initarg :match-operator :type
                         (common-lisp:or category-filter-match-operator
                                         common-lisp:null)
                         :accessor %filter-list-configuration-match-operator
                         :initform
                         (common-lisp:error ":match-operator is required"))))
 (common-lisp:export
  (common-lisp:list 'filter-list-configuration
                    'make-filter-list-configuration))
 (common-lisp:defun make-filter-list-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key select-all-options category-values
                     match-operator)
   (common-lisp:apply #'common-lisp:make-instance 'filter-list-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filter-list-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filter-list-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-operator))
      (common-lisp:list
       (common-lisp:cons "MatchOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-values))
      (common-lisp:list
       (common-lisp:cons "CategoryValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-all-options))
      (common-lisp:list
       (common-lisp:cons "SelectAllOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filter-list-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter-list-control common-lisp:nil
                       ((cascading-control-configuration :initarg
                         :cascading-control-configuration :type
                         (common-lisp:or cascading-control-configuration
                                         common-lisp:null)
                         :accessor
                         %filter-list-control-cascading-control-configuration
                         :initform common-lisp:nil)
                        (selectable-values :initarg :selectable-values :type
                         (common-lisp:or filter-selectable-values
                                         common-lisp:null)
                         :accessor %filter-list-control-selectable-values
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or sheet-control-list-type
                                         common-lisp:null)
                         :accessor %filter-list-control-type :initform
                         common-lisp:nil)
                        (display-options :initarg :display-options :type
                         (common-lisp:or list-control-display-options
                                         common-lisp:null)
                         :accessor %filter-list-control-display-options
                         :initform common-lisp:nil)
                        (source-filter-id :initarg :source-filter-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %filter-list-control-source-filter-id
                         :initform
                         (common-lisp:error ":source-filter-id is required"))
                        (title :initarg :title :type
                         (common-lisp:or sheet-control-title common-lisp:null)
                         :accessor %filter-list-control-title :initform
                         (common-lisp:error ":title is required"))
                        (filter-control-id :initarg :filter-control-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %filter-list-control-filter-control-id
                         :initform
                         (common-lisp:error
                          ":filter-control-id is required"))))
 (common-lisp:export
  (common-lisp:list 'filter-list-control 'make-filter-list-control))
 (common-lisp:defun make-filter-list-control
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cascading-control-configuration
                     selectable-values type display-options source-filter-id
                     title filter-control-id)
   (common-lisp:apply #'common-lisp:make-instance 'filter-list-control
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-list-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-list-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-control-id))
      (common-lisp:list
       (common-lisp:cons "FilterControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-filter-id))
      (common-lisp:list
       (common-lisp:cons "SourceFilterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-options))
      (common-lisp:list
       (common-lisp:cons "DisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selectable-values))
      (common-lisp:list
       (common-lisp:cons "SelectableValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cascading-control-configuration))
      (common-lisp:list
       (common-lisp:cons "CascadingControlConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-list-control))
   common-lisp:nil))
(common-lisp:deftype filter-null-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass filter-operation common-lisp:nil
                       ((condition-expression :initarg :condition-expression
                         :type (common-lisp:or expression common-lisp:null)
                         :accessor %filter-operation-condition-expression
                         :initform
                         (common-lisp:error
                          ":condition-expression is required"))))
 (common-lisp:export
  (common-lisp:list 'filter-operation 'make-filter-operation))
 (common-lisp:defun make-filter-operation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key condition-expression)
   (common-lisp:apply #'common-lisp:make-instance 'filter-operation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'condition-expression))
      (common-lisp:list
       (common-lisp:cons "ConditionExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter-operation-selected-fields-configuration
                       common-lisp:nil
                       ((selected-field-options :initarg
                         :selected-field-options :type
                         (common-lisp:or selected-field-options
                                         common-lisp:null)
                         :accessor
                         %filter-operation-selected-fields-configuration-selected-field-options
                         :initform common-lisp:nil)
                        (selected-fields :initarg :selected-fields :type
                         (common-lisp:or selected-field-list common-lisp:null)
                         :accessor
                         %filter-operation-selected-fields-configuration-selected-fields
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'filter-operation-selected-fields-configuration
                    'make-filter-operation-selected-fields-configuration))
 (common-lisp:defun make-filter-operation-selected-fields-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key selected-field-options selected-fields)
   (common-lisp:apply #'common-lisp:make-instance
                      'filter-operation-selected-fields-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filter-operation-selected-fields-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filter-operation-selected-fields-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-fields))
      (common-lisp:list
       (common-lisp:cons "SelectedFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'selected-field-options))
      (common-lisp:list
       (common-lisp:cons "SelectedFieldOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filter-operation-selected-fields-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter-operation-target-visuals-configuration
                       common-lisp:nil
                       ((same-sheet-target-visual-configuration :initarg
                         :same-sheet-target-visual-configuration :type
                         (common-lisp:or same-sheet-target-visual-configuration
                                         common-lisp:null)
                         :accessor
                         %filter-operation-target-visuals-configuration-same-sheet-target-visual-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'filter-operation-target-visuals-configuration
                    'make-filter-operation-target-visuals-configuration))
 (common-lisp:defun make-filter-operation-target-visuals-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key same-sheet-target-visual-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'filter-operation-target-visuals-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filter-operation-target-visuals-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filter-operation-target-visuals-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'same-sheet-target-visual-configuration))
      (common-lisp:list
       (common-lisp:cons "SameSheetTargetVisualConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filter-operation-target-visuals-configuration))
   common-lisp:nil))
(common-lisp:deftype filter-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass filter-relative-date-time-control common-lisp:nil
                       ((display-options :initarg :display-options :type
                         (common-lisp:or
                          relative-date-time-control-display-options
                          common-lisp:null)
                         :accessor
                         %filter-relative-date-time-control-display-options
                         :initform common-lisp:nil)
                        (source-filter-id :initarg :source-filter-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %filter-relative-date-time-control-source-filter-id
                         :initform
                         (common-lisp:error ":source-filter-id is required"))
                        (title :initarg :title :type
                         (common-lisp:or sheet-control-title common-lisp:null)
                         :accessor %filter-relative-date-time-control-title
                         :initform (common-lisp:error ":title is required"))
                        (filter-control-id :initarg :filter-control-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %filter-relative-date-time-control-filter-control-id
                         :initform
                         (common-lisp:error
                          ":filter-control-id is required"))))
 (common-lisp:export
  (common-lisp:list 'filter-relative-date-time-control
                    'make-filter-relative-date-time-control))
 (common-lisp:defun make-filter-relative-date-time-control
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key display-options source-filter-id title
                     filter-control-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'filter-relative-date-time-control
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filter-relative-date-time-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filter-relative-date-time-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-control-id))
      (common-lisp:list
       (common-lisp:cons "FilterControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-filter-id))
      (common-lisp:list
       (common-lisp:cons "SourceFilterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-options))
      (common-lisp:list
       (common-lisp:cons "DisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filter-relative-date-time-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter-scope-configuration common-lisp:nil
                       ((selected-sheets :initarg :selected-sheets :type
                         (common-lisp:or
                          selected-sheets-filter-scope-configuration
                          common-lisp:null)
                         :accessor %filter-scope-configuration-selected-sheets
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'filter-scope-configuration
                    'make-filter-scope-configuration))
 (common-lisp:defun make-filter-scope-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key selected-sheets)
   (common-lisp:apply #'common-lisp:make-instance 'filter-scope-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filter-scope-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filter-scope-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-sheets))
      (common-lisp:list
       (common-lisp:cons "SelectedSheets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filter-scope-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter-selectable-values common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or parameter-selectable-value-list
                                         common-lisp:null)
                         :accessor %filter-selectable-values-values :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'filter-selectable-values 'make-filter-selectable-values))
 (common-lisp:defun make-filter-selectable-values
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values)
   (common-lisp:apply #'common-lisp:make-instance 'filter-selectable-values
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filter-selectable-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filter-selectable-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filter-selectable-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter-slider-control common-lisp:nil
                       ((step-size :initarg :step-size :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %filter-slider-control-step-size :initform
                         (common-lisp:error ":step-size is required"))
                        (minimum-value :initarg :minimum-value :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %filter-slider-control-minimum-value :initform
                         (common-lisp:error ":minimum-value is required"))
                        (maximum-value :initarg :maximum-value :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %filter-slider-control-maximum-value :initform
                         (common-lisp:error ":maximum-value is required"))
                        (type :initarg :type :type
                         (common-lisp:or sheet-control-slider-type
                                         common-lisp:null)
                         :accessor %filter-slider-control-type :initform
                         common-lisp:nil)
                        (display-options :initarg :display-options :type
                         (common-lisp:or slider-control-display-options
                                         common-lisp:null)
                         :accessor %filter-slider-control-display-options
                         :initform common-lisp:nil)
                        (source-filter-id :initarg :source-filter-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %filter-slider-control-source-filter-id
                         :initform
                         (common-lisp:error ":source-filter-id is required"))
                        (title :initarg :title :type
                         (common-lisp:or sheet-control-title common-lisp:null)
                         :accessor %filter-slider-control-title :initform
                         (common-lisp:error ":title is required"))
                        (filter-control-id :initarg :filter-control-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %filter-slider-control-filter-control-id
                         :initform
                         (common-lisp:error
                          ":filter-control-id is required"))))
 (common-lisp:export
  (common-lisp:list 'filter-slider-control 'make-filter-slider-control))
 (common-lisp:defun make-filter-slider-control
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key step-size minimum-value maximum-value
                     type display-options source-filter-id title
                     filter-control-id)
   (common-lisp:apply #'common-lisp:make-instance 'filter-slider-control
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filter-slider-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filter-slider-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-control-id))
      (common-lisp:list
       (common-lisp:cons "FilterControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-filter-id))
      (common-lisp:list
       (common-lisp:cons "SourceFilterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-options))
      (common-lisp:list
       (common-lisp:cons "DisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-value))
      (common-lisp:list
       (common-lisp:cons "MaximumValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-value))
      (common-lisp:list
       (common-lisp:cons "MinimumValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-size))
      (common-lisp:list
       (common-lisp:cons "StepSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filter-slider-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter-text-area-control common-lisp:nil
                       ((display-options :initarg :display-options :type
                         (common-lisp:or text-area-control-display-options
                                         common-lisp:null)
                         :accessor %filter-text-area-control-display-options
                         :initform common-lisp:nil)
                        (delimiter :initarg :delimiter :type
                         (common-lisp:or text-area-control-delimiter
                                         common-lisp:null)
                         :accessor %filter-text-area-control-delimiter
                         :initform common-lisp:nil)
                        (source-filter-id :initarg :source-filter-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %filter-text-area-control-source-filter-id
                         :initform
                         (common-lisp:error ":source-filter-id is required"))
                        (title :initarg :title :type
                         (common-lisp:or sheet-control-title common-lisp:null)
                         :accessor %filter-text-area-control-title :initform
                         (common-lisp:error ":title is required"))
                        (filter-control-id :initarg :filter-control-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %filter-text-area-control-filter-control-id
                         :initform
                         (common-lisp:error
                          ":filter-control-id is required"))))
 (common-lisp:export
  (common-lisp:list 'filter-text-area-control 'make-filter-text-area-control))
 (common-lisp:defun make-filter-text-area-control
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key display-options delimiter
                     source-filter-id title filter-control-id)
   (common-lisp:apply #'common-lisp:make-instance 'filter-text-area-control
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filter-text-area-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filter-text-area-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-control-id))
      (common-lisp:list
       (common-lisp:cons "FilterControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-filter-id))
      (common-lisp:list
       (common-lisp:cons "SourceFilterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-options))
      (common-lisp:list
       (common-lisp:cons "DisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filter-text-area-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter-text-field-control common-lisp:nil
                       ((display-options :initarg :display-options :type
                         (common-lisp:or text-field-control-display-options
                                         common-lisp:null)
                         :accessor %filter-text-field-control-display-options
                         :initform common-lisp:nil)
                        (source-filter-id :initarg :source-filter-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %filter-text-field-control-source-filter-id
                         :initform
                         (common-lisp:error ":source-filter-id is required"))
                        (title :initarg :title :type
                         (common-lisp:or sheet-control-title common-lisp:null)
                         :accessor %filter-text-field-control-title :initform
                         (common-lisp:error ":title is required"))
                        (filter-control-id :initarg :filter-control-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %filter-text-field-control-filter-control-id
                         :initform
                         (common-lisp:error
                          ":filter-control-id is required"))))
 (common-lisp:export
  (common-lisp:list 'filter-text-field-control
                    'make-filter-text-field-control))
 (common-lisp:defun make-filter-text-field-control
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key display-options source-filter-id title
                     filter-control-id)
   (common-lisp:apply #'common-lisp:make-instance 'filter-text-field-control
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filter-text-field-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filter-text-field-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-control-id))
      (common-lisp:list
       (common-lisp:cons "FilterControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-filter-id))
      (common-lisp:list
       (common-lisp:cons "SourceFilterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-options))
      (common-lisp:list
       (common-lisp:cons "DisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filter-text-field-control))
   common-lisp:nil))
(common-lisp:deftype filter-visual-scope () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filtered-visuals-list ()
   '(trivial-types:proper-list short-restrictive-resource-id))
 (common-lisp:defun |make-filtered-visuals-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            short-restrictive-resource-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass folder common-lisp:nil
                       ((last-updated-time :initarg :last-updated-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %folder-last-updated-time :initform common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %folder-created-time :initform common-lisp:nil)
                        (folder-path :initarg :folder-path :type
                         (common-lisp:or path common-lisp:null) :accessor
                         %folder-folder-path :initform common-lisp:nil)
                        (folder-type :initarg :folder-type :type
                         (common-lisp:or folder-type common-lisp:null)
                         :accessor %folder-folder-type :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or folder-name common-lisp:null)
                         :accessor %folder-name :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %folder-arn :initform common-lisp:nil)
                        (folder-id :initarg :folder-id :type
                         (common-lisp:or restrictive-resource-id
                                         common-lisp:null)
                         :accessor %folder-folder-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'folder 'make-folder))
 (common-lisp:defun make-folder
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-time created-time
                     folder-path folder-type name arn folder-id)
   (common-lisp:apply #'common-lisp:make-instance 'folder
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input folder))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input folder))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-id))
      (common-lisp:list
       (common-lisp:cons "FolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-type))
      (common-lisp:list
       (common-lisp:cons "FolderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-path))
      (common-lisp:list
       (common-lisp:cons "FolderPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input folder))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype folder-column-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-folder-column-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype folder-filter-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass folder-member common-lisp:nil
                       ((member-type :initarg :member-type :type
                         (common-lisp:or member-type common-lisp:null)
                         :accessor %folder-member-member-type :initform
                         common-lisp:nil)
                        (member-id :initarg :member-id :type
                         (common-lisp:or restrictive-resource-id
                                         common-lisp:null)
                         :accessor %folder-member-member-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'folder-member 'make-folder-member))
 (common-lisp:defun make-folder-member
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key member-type member-id)
   (common-lisp:apply #'common-lisp:make-instance 'folder-member
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input folder-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input folder-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-type))
      (common-lisp:list
       (common-lisp:cons "MemberType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input folder-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype folder-member-list ()
   '(trivial-types:proper-list member-id-arn-pair))
 (common-lisp:defun |make-folder-member-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member-id-arn-pair))
   aws-sdk/generator/shape::members))
(common-lisp:deftype folder-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass folder-search-filter common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %folder-search-filter-value :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or folder-filter-attribute
                                         common-lisp:null)
                         :accessor %folder-search-filter-name :initform
                         common-lisp:nil)
                        (operator :initarg :operator :type
                         (common-lisp:or filter-operator common-lisp:null)
                         :accessor %folder-search-filter-operator :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'folder-search-filter 'make-folder-search-filter))
 (common-lisp:defun make-folder-search-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name operator)
   (common-lisp:apply #'common-lisp:make-instance 'folder-search-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input folder-search-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input folder-search-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "Operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input folder-search-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype folder-search-filter-list ()
   '(trivial-types:proper-list folder-search-filter))
 (common-lisp:defun |make-folder-search-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list folder-search-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass folder-summary common-lisp:nil
                       ((last-updated-time :initarg :last-updated-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %folder-summary-last-updated-time :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %folder-summary-created-time :initform
                         common-lisp:nil)
                        (folder-type :initarg :folder-type :type
                         (common-lisp:or folder-type common-lisp:null)
                         :accessor %folder-summary-folder-type :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or folder-name common-lisp:null)
                         :accessor %folder-summary-name :initform
                         common-lisp:nil)
                        (folder-id :initarg :folder-id :type
                         (common-lisp:or restrictive-resource-id
                                         common-lisp:null)
                         :accessor %folder-summary-folder-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %folder-summary-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'folder-summary 'make-folder-summary))
 (common-lisp:defun make-folder-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-time created-time
                     folder-type name folder-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'folder-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input folder-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input folder-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-id))
      (common-lisp:list
       (common-lisp:cons "FolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-type))
      (common-lisp:list
       (common-lisp:cons "FolderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input folder-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype folder-summary-list ()
   '(trivial-types:proper-list folder-summary))
 (common-lisp:defun |make-folder-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list folder-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype folder-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass font common-lisp:nil
                       ((font-family :initarg :font-family :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %font-font-family :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'font 'make-font))
 (common-lisp:defun make-font
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key font-family)
   (common-lisp:apply #'common-lisp:make-instance 'font
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input font))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input font))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-family))
      (common-lisp:list
       (common-lisp:cons "FontFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input font))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass font-configuration common-lisp:nil
                       ((font-style :initarg :font-style :type
                         (common-lisp:or font-style common-lisp:null) :accessor
                         %font-configuration-font-style :initform
                         common-lisp:nil)
                        (font-weight :initarg :font-weight :type
                         (common-lisp:or font-weight common-lisp:null)
                         :accessor %font-configuration-font-weight :initform
                         common-lisp:nil)
                        (font-color :initarg :font-color :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %font-configuration-font-color :initform
                         common-lisp:nil)
                        (font-decoration :initarg :font-decoration :type
                         (common-lisp:or font-decoration common-lisp:null)
                         :accessor %font-configuration-font-decoration
                         :initform common-lisp:nil)
                        (font-size :initarg :font-size :type
                         (common-lisp:or font-size common-lisp:null) :accessor
                         %font-configuration-font-size :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'font-configuration 'make-font-configuration))
 (common-lisp:defun make-font-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key font-style font-weight font-color
                     font-decoration font-size)
   (common-lisp:apply #'common-lisp:make-instance 'font-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input font-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input font-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-size))
      (common-lisp:list
       (common-lisp:cons "FontSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-decoration))
      (common-lisp:list
       (common-lisp:cons "FontDecoration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-color))
      (common-lisp:list
       (common-lisp:cons "FontColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-weight))
      (common-lisp:list
       (common-lisp:cons "FontWeight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-style))
      (common-lisp:list
       (common-lisp:cons "FontStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input font-configuration))
   common-lisp:nil))
(common-lisp:deftype font-decoration () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype font-list () '(trivial-types:proper-list font))
 (common-lisp:defun |make-font-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list font))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass font-size common-lisp:nil
                       ((relative :initarg :relative :type
                         (common-lisp:or relative-font-size common-lisp:null)
                         :accessor %font-size-relative :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'font-size 'make-font-size))
 (common-lisp:defun make-font-size
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key relative)
   (common-lisp:apply #'common-lisp:make-instance 'font-size
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input font-size))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input font-size))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relative))
      (common-lisp:list
       (common-lisp:cons "Relative"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input font-size))
   common-lisp:nil))
(common-lisp:deftype font-style () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass font-weight common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or font-weight-name common-lisp:null)
                         :accessor %font-weight-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'font-weight 'make-font-weight))
 (common-lisp:defun make-font-weight
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'font-weight
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input font-weight))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input font-weight))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input font-weight))
   common-lisp:nil))
(common-lisp:deftype font-weight-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass forecast-computation common-lisp:nil
                       ((custom-seasonality-value :initarg
                         :custom-seasonality-value :type
                         (common-lisp:or
                          forecast-computation-custom-seasonality-value
                          common-lisp:null)
                         :accessor
                         %forecast-computation-custom-seasonality-value
                         :initform common-lisp:nil)
                        (seasonality :initarg :seasonality :type
                         (common-lisp:or forecast-computation-seasonality
                                         common-lisp:null)
                         :accessor %forecast-computation-seasonality :initform
                         common-lisp:nil)
                        (prediction-interval :initarg :prediction-interval
                         :type
                         (common-lisp:or prediction-interval common-lisp:null)
                         :accessor %forecast-computation-prediction-interval
                         :initform common-lisp:nil)
                        (lower-boundary :initarg :lower-boundary :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %forecast-computation-lower-boundary :initform
                         common-lisp:nil)
                        (upper-boundary :initarg :upper-boundary :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %forecast-computation-upper-boundary :initform
                         common-lisp:nil)
                        (periods-backward :initarg :periods-backward :type
                         (common-lisp:or periods-backward common-lisp:null)
                         :accessor %forecast-computation-periods-backward
                         :initform common-lisp:nil)
                        (periods-forward :initarg :periods-forward :type
                         (common-lisp:or periods-forward common-lisp:null)
                         :accessor %forecast-computation-periods-forward
                         :initform common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or measure-field common-lisp:null)
                         :accessor %forecast-computation-value :initform
                         common-lisp:nil)
                        (time :initarg :time :type
                         (common-lisp:or dimension-field common-lisp:null)
                         :accessor %forecast-computation-time :initform
                         (common-lisp:error ":time is required"))
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %forecast-computation-name :initform common-lisp:nil)
                        (computation-id :initarg :computation-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %forecast-computation-computation-id
                         :initform
                         (common-lisp:error ":computation-id is required"))))
 (common-lisp:export
  (common-lisp:list 'forecast-computation 'make-forecast-computation))
 (common-lisp:defun make-forecast-computation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-seasonality-value seasonality
                     prediction-interval lower-boundary upper-boundary
                     periods-backward periods-forward value time name
                     computation-id)
   (common-lisp:apply #'common-lisp:make-instance 'forecast-computation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input forecast-computation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input forecast-computation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computation-id))
      (common-lisp:list
       (common-lisp:cons "ComputationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'periods-forward))
      (common-lisp:list
       (common-lisp:cons "PeriodsForward"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'periods-backward))
      (common-lisp:list
       (common-lisp:cons "PeriodsBackward"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upper-boundary))
      (common-lisp:list
       (common-lisp:cons "UpperBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lower-boundary))
      (common-lisp:list
       (common-lisp:cons "LowerBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prediction-interval))
      (common-lisp:list
       (common-lisp:cons "PredictionInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'seasonality))
      (common-lisp:list
       (common-lisp:cons "Seasonality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-seasonality-value))
      (common-lisp:list
       (common-lisp:cons "CustomSeasonalityValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input forecast-computation))
   common-lisp:nil))
(common-lisp:deftype forecast-computation-custom-seasonality-value ()
  'common-lisp:integer)
(common-lisp:deftype forecast-computation-seasonality () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass forecast-configuration common-lisp:nil
                       ((scenario :initarg :scenario :type
                         (common-lisp:or forecast-scenario common-lisp:null)
                         :accessor %forecast-configuration-scenario :initform
                         common-lisp:nil)
                        (forecast-properties :initarg :forecast-properties
                         :type
                         (common-lisp:or time-based-forecast-properties
                                         common-lisp:null)
                         :accessor %forecast-configuration-forecast-properties
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'forecast-configuration 'make-forecast-configuration))
 (common-lisp:defun make-forecast-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scenario forecast-properties)
   (common-lisp:apply #'common-lisp:make-instance 'forecast-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          forecast-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          forecast-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-properties))
      (common-lisp:list
       (common-lisp:cons "ForecastProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scenario))
      (common-lisp:list
       (common-lisp:cons "Scenario"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          forecast-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype forecast-configuration-list ()
   '(trivial-types:proper-list forecast-configuration))
 (common-lisp:defun |make-forecast-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list forecast-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass forecast-scenario common-lisp:nil
                       ((what-if-range-scenario :initarg
                         :what-if-range-scenario :type
                         (common-lisp:or what-if-range-scenario
                                         common-lisp:null)
                         :accessor %forecast-scenario-what-if-range-scenario
                         :initform common-lisp:nil)
                        (what-if-point-scenario :initarg
                         :what-if-point-scenario :type
                         (common-lisp:or what-if-point-scenario
                                         common-lisp:null)
                         :accessor %forecast-scenario-what-if-point-scenario
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'forecast-scenario 'make-forecast-scenario))
 (common-lisp:defun make-forecast-scenario
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key what-if-range-scenario
                     what-if-point-scenario)
   (common-lisp:apply #'common-lisp:make-instance 'forecast-scenario
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input forecast-scenario))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input forecast-scenario))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-point-scenario))
      (common-lisp:list
       (common-lisp:cons "WhatIfPointScenario"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-range-scenario))
      (common-lisp:list
       (common-lisp:cons "WhatIfRangeScenario"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input forecast-scenario))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass format-configuration common-lisp:nil
                       ((date-time-format-configuration :initarg
                         :date-time-format-configuration :type
                         (common-lisp:or date-time-format-configuration
                                         common-lisp:null)
                         :accessor
                         %format-configuration-date-time-format-configuration
                         :initform common-lisp:nil)
                        (number-format-configuration :initarg
                         :number-format-configuration :type
                         (common-lisp:or number-format-configuration
                                         common-lisp:null)
                         :accessor
                         %format-configuration-number-format-configuration
                         :initform common-lisp:nil)
                        (string-format-configuration :initarg
                         :string-format-configuration :type
                         (common-lisp:or string-format-configuration
                                         common-lisp:null)
                         :accessor
                         %format-configuration-string-format-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'format-configuration 'make-format-configuration))
 (common-lisp:defun make-format-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key date-time-format-configuration
                     number-format-configuration string-format-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'format-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input format-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input format-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'string-format-configuration))
      (common-lisp:list
       (common-lisp:cons "StringFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-format-configuration))
      (common-lisp:list
       (common-lisp:cons "NumberFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'date-time-format-configuration))
      (common-lisp:list
       (common-lisp:cons "DateTimeFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input format-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass free-form-layout-canvas-size-options common-lisp:nil
                       ((screen-canvas-size-options :initarg
                         :screen-canvas-size-options :type
                         (common-lisp:or
                          free-form-layout-screen-canvas-size-options
                          common-lisp:null)
                         :accessor
                         %free-form-layout-canvas-size-options-screen-canvas-size-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'free-form-layout-canvas-size-options
                    'make-free-form-layout-canvas-size-options))
 (common-lisp:defun make-free-form-layout-canvas-size-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key screen-canvas-size-options)
   (common-lisp:apply #'common-lisp:make-instance
                      'free-form-layout-canvas-size-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-canvas-size-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-canvas-size-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'screen-canvas-size-options))
      (common-lisp:list
       (common-lisp:cons "ScreenCanvasSizeOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-canvas-size-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass free-form-layout-configuration common-lisp:nil
                       ((canvas-size-options :initarg :canvas-size-options
                         :type
                         (common-lisp:or free-form-layout-canvas-size-options
                                         common-lisp:null)
                         :accessor
                         %free-form-layout-configuration-canvas-size-options
                         :initform common-lisp:nil)
                        (elements :initarg :elements :type
                         (common-lisp:or free-from-layout-element-list
                                         common-lisp:null)
                         :accessor %free-form-layout-configuration-elements
                         :initform
                         (common-lisp:error ":elements is required"))))
 (common-lisp:export
  (common-lisp:list 'free-form-layout-configuration
                    'make-free-form-layout-configuration))
 (common-lisp:defun make-free-form-layout-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key canvas-size-options elements)
   (common-lisp:apply #'common-lisp:make-instance
                      'free-form-layout-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elements))
      (common-lisp:list
       (common-lisp:cons "Elements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canvas-size-options))
      (common-lisp:list
       (common-lisp:cons "CanvasSizeOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass free-form-layout-element common-lisp:nil
                       ((loading-animation :initarg :loading-animation :type
                         (common-lisp:or loading-animation common-lisp:null)
                         :accessor %free-form-layout-element-loading-animation
                         :initform common-lisp:nil)
                        (background-style :initarg :background-style :type
                         (common-lisp:or
                          free-form-layout-element-background-style
                          common-lisp:null)
                         :accessor %free-form-layout-element-background-style
                         :initform common-lisp:nil)
                        (selected-border-style :initarg :selected-border-style
                         :type
                         (common-lisp:or free-form-layout-element-border-style
                                         common-lisp:null)
                         :accessor
                         %free-form-layout-element-selected-border-style
                         :initform common-lisp:nil)
                        (border-style :initarg :border-style :type
                         (common-lisp:or free-form-layout-element-border-style
                                         common-lisp:null)
                         :accessor %free-form-layout-element-border-style
                         :initform common-lisp:nil)
                        (rendering-rules :initarg :rendering-rules :type
                         (common-lisp:or sheet-element-rendering-rule-list
                                         common-lisp:null)
                         :accessor %free-form-layout-element-rendering-rules
                         :initform common-lisp:nil)
                        (visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %free-form-layout-element-visibility :initform
                         common-lisp:nil)
                        (height :initarg :height :type
                         (common-lisp:or pixel-length common-lisp:null)
                         :accessor %free-form-layout-element-height :initform
                         (common-lisp:error ":height is required"))
                        (width :initarg :width :type
                         (common-lisp:or pixel-length common-lisp:null)
                         :accessor %free-form-layout-element-width :initform
                         (common-lisp:error ":width is required"))
                        (yaxis-location :initarg :yaxis-location :type
                         (common-lisp:or unlimited-pixel-length
                                         common-lisp:null)
                         :accessor %free-form-layout-element-yaxis-location
                         :initform
                         (common-lisp:error ":yaxis-location is required"))
                        (xaxis-location :initarg :xaxis-location :type
                         (common-lisp:or pixel-length common-lisp:null)
                         :accessor %free-form-layout-element-xaxis-location
                         :initform
                         (common-lisp:error ":xaxis-location is required"))
                        (element-type :initarg :element-type :type
                         (common-lisp:or layout-element-type common-lisp:null)
                         :accessor %free-form-layout-element-element-type
                         :initform
                         (common-lisp:error ":element-type is required"))
                        (element-id :initarg :element-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %free-form-layout-element-element-id
                         :initform
                         (common-lisp:error ":element-id is required"))))
 (common-lisp:export
  (common-lisp:list 'free-form-layout-element 'make-free-form-layout-element))
 (common-lisp:defun make-free-form-layout-element
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key loading-animation background-style
                     selected-border-style border-style rendering-rules
                     visibility height width yaxis-location xaxis-location
                     element-type element-id)
   (common-lisp:apply #'common-lisp:make-instance 'free-form-layout-element
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-element))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-element))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'element-id))
      (common-lisp:list
       (common-lisp:cons "ElementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'element-type))
      (common-lisp:list
       (common-lisp:cons "ElementType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xaxis-location))
      (common-lisp:list
       (common-lisp:cons "XAxisLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'yaxis-location))
      (common-lisp:list
       (common-lisp:cons "YAxisLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rendering-rules))
      (common-lisp:list
       (common-lisp:cons "RenderingRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'border-style))
      (common-lisp:list
       (common-lisp:cons "BorderStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'selected-border-style))
      (common-lisp:list
       (common-lisp:cons "SelectedBorderStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background-style))
      (common-lisp:list
       (common-lisp:cons "BackgroundStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'loading-animation))
      (common-lisp:list
       (common-lisp:cons "LoadingAnimation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-element))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass free-form-layout-element-background-style
                       common-lisp:nil
                       ((color :initarg :color :type
                         (common-lisp:or hex-color-with-transparency
                                         common-lisp:null)
                         :accessor
                         %free-form-layout-element-background-style-color
                         :initform common-lisp:nil)
                        (visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %free-form-layout-element-background-style-visibility
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'free-form-layout-element-background-style
                    'make-free-form-layout-element-background-style))
 (common-lisp:defun make-free-form-layout-element-background-style
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key color visibility)
   (common-lisp:apply #'common-lisp:make-instance
                      'free-form-layout-element-background-style
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-element-background-style))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-element-background-style))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color))
      (common-lisp:list
       (common-lisp:cons "Color"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-element-background-style))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass free-form-layout-element-border-style common-lisp:nil
                       ((color :initarg :color :type
                         (common-lisp:or hex-color-with-transparency
                                         common-lisp:null)
                         :accessor %free-form-layout-element-border-style-color
                         :initform common-lisp:nil)
                        (visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %free-form-layout-element-border-style-visibility
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'free-form-layout-element-border-style
                    'make-free-form-layout-element-border-style))
 (common-lisp:defun make-free-form-layout-element-border-style
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key color visibility)
   (common-lisp:apply #'common-lisp:make-instance
                      'free-form-layout-element-border-style
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-element-border-style))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-element-border-style))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color))
      (common-lisp:list
       (common-lisp:cons "Color"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-element-border-style))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass free-form-layout-screen-canvas-size-options
                       common-lisp:nil
                       ((optimized-view-port-width :initarg
                         :optimized-view-port-width :type
                         (common-lisp:or pixel-length common-lisp:null)
                         :accessor
                         %free-form-layout-screen-canvas-size-options-optimized-view-port-width
                         :initform
                         (common-lisp:error
                          ":optimized-view-port-width is required"))))
 (common-lisp:export
  (common-lisp:list 'free-form-layout-screen-canvas-size-options
                    'make-free-form-layout-screen-canvas-size-options))
 (common-lisp:defun make-free-form-layout-screen-canvas-size-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key optimized-view-port-width)
   (common-lisp:apply #'common-lisp:make-instance
                      'free-form-layout-screen-canvas-size-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-screen-canvas-size-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-screen-canvas-size-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'optimized-view-port-width))
      (common-lisp:list
       (common-lisp:cons "OptimizedViewPortWidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          free-form-layout-screen-canvas-size-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass free-form-section-layout-configuration common-lisp:nil
                       ((elements :initarg :elements :type
                         (common-lisp:or free-from-layout-element-list
                                         common-lisp:null)
                         :accessor
                         %free-form-section-layout-configuration-elements
                         :initform
                         (common-lisp:error ":elements is required"))))
 (common-lisp:export
  (common-lisp:list 'free-form-section-layout-configuration
                    'make-free-form-section-layout-configuration))
 (common-lisp:defun make-free-form-section-layout-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key elements)
   (common-lisp:apply #'common-lisp:make-instance
                      'free-form-section-layout-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          free-form-section-layout-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          free-form-section-layout-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elements))
      (common-lisp:list
       (common-lisp:cons "Elements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          free-form-section-layout-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype free-from-layout-element-list ()
   '(trivial-types:proper-list free-form-layout-element))
 (common-lisp:defun |make-free-from-layout-element-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            free-form-layout-element))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass funnel-chart-aggregated-field-wells common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or funnel-chart-measure-field-list
                                         common-lisp:null)
                         :accessor %funnel-chart-aggregated-field-wells-values
                         :initform common-lisp:nil)
                        (category :initarg :category :type
                         (common-lisp:or funnel-chart-dimension-field-list
                                         common-lisp:null)
                         :accessor
                         %funnel-chart-aggregated-field-wells-category
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'funnel-chart-aggregated-field-wells
                    'make-funnel-chart-aggregated-field-wells))
 (common-lisp:defun make-funnel-chart-aggregated-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values category)
   (common-lisp:apply #'common-lisp:make-instance
                      'funnel-chart-aggregated-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          funnel-chart-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          funnel-chart-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          funnel-chart-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass funnel-chart-configuration common-lisp:nil
                       ((visual-palette :initarg :visual-palette :type
                         (common-lisp:or visual-palette common-lisp:null)
                         :accessor %funnel-chart-configuration-visual-palette
                         :initform common-lisp:nil)
                        (data-label-options :initarg :data-label-options :type
                         (common-lisp:or funnel-chart-data-label-options
                                         common-lisp:null)
                         :accessor
                         %funnel-chart-configuration-data-label-options
                         :initform common-lisp:nil)
                        (tooltip :initarg :tooltip :type
                         (common-lisp:or tooltip-options common-lisp:null)
                         :accessor %funnel-chart-configuration-tooltip
                         :initform common-lisp:nil)
                        (value-label-options :initarg :value-label-options
                         :type
                         (common-lisp:or chart-axis-label-options
                                         common-lisp:null)
                         :accessor
                         %funnel-chart-configuration-value-label-options
                         :initform common-lisp:nil)
                        (category-label-options :initarg
                         :category-label-options :type
                         (common-lisp:or chart-axis-label-options
                                         common-lisp:null)
                         :accessor
                         %funnel-chart-configuration-category-label-options
                         :initform common-lisp:nil)
                        (sort-configuration :initarg :sort-configuration :type
                         (common-lisp:or funnel-chart-sort-configuration
                                         common-lisp:null)
                         :accessor
                         %funnel-chart-configuration-sort-configuration
                         :initform common-lisp:nil)
                        (field-wells :initarg :field-wells :type
                         (common-lisp:or funnel-chart-field-wells
                                         common-lisp:null)
                         :accessor %funnel-chart-configuration-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'funnel-chart-configuration
                    'make-funnel-chart-configuration))
 (common-lisp:defun make-funnel-chart-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visual-palette data-label-options tooltip
                     value-label-options category-label-options
                     sort-configuration field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'funnel-chart-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          funnel-chart-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          funnel-chart-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-label-options))
      (common-lisp:list
       (common-lisp:cons "CategoryLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-label-options))
      (common-lisp:list
       (common-lisp:cons "ValueLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip))
      (common-lisp:list
       (common-lisp:cons "Tooltip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-label-options))
      (common-lisp:list
       (common-lisp:cons "DataLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-palette))
      (common-lisp:list
       (common-lisp:cons "VisualPalette"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          funnel-chart-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass funnel-chart-data-label-options common-lisp:nil
                       ((measure-data-label-style :initarg
                         :measure-data-label-style :type
                         (common-lisp:or funnel-chart-measure-data-label-style
                                         common-lisp:null)
                         :accessor
                         %funnel-chart-data-label-options-measure-data-label-style
                         :initform common-lisp:nil)
                        (label-color :initarg :label-color :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %funnel-chart-data-label-options-label-color :initform
                         common-lisp:nil)
                        (label-font-configuration :initarg
                         :label-font-configuration :type
                         (common-lisp:or font-configuration common-lisp:null)
                         :accessor
                         %funnel-chart-data-label-options-label-font-configuration
                         :initform common-lisp:nil)
                        (position :initarg :position :type
                         (common-lisp:or data-label-position common-lisp:null)
                         :accessor %funnel-chart-data-label-options-position
                         :initform common-lisp:nil)
                        (measure-label-visibility :initarg
                         :measure-label-visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %funnel-chart-data-label-options-measure-label-visibility
                         :initform common-lisp:nil)
                        (category-label-visibility :initarg
                         :category-label-visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %funnel-chart-data-label-options-category-label-visibility
                         :initform common-lisp:nil)
                        (visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %funnel-chart-data-label-options-visibility :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'funnel-chart-data-label-options
                    'make-funnel-chart-data-label-options))
 (common-lisp:defun make-funnel-chart-data-label-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key measure-data-label-style label-color
                     label-font-configuration position measure-label-visibility
                     category-label-visibility visibility)
   (common-lisp:apply #'common-lisp:make-instance
                      'funnel-chart-data-label-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          funnel-chart-data-label-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          funnel-chart-data-label-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-label-visibility))
      (common-lisp:list
       (common-lisp:cons "CategoryLabelVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'measure-label-visibility))
      (common-lisp:list
       (common-lisp:cons "MeasureLabelVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "Position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'label-font-configuration))
      (common-lisp:list
       (common-lisp:cons "LabelFontConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-color))
      (common-lisp:list
       (common-lisp:cons "LabelColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'measure-data-label-style))
      (common-lisp:list
       (common-lisp:cons "MeasureDataLabelStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          funnel-chart-data-label-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype funnel-chart-dimension-field-list ()
   '(trivial-types:proper-list dimension-field))
 (common-lisp:defun |make-funnel-chart-dimension-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass funnel-chart-field-wells common-lisp:nil
                       ((funnel-chart-aggregated-field-wells :initarg
                         :funnel-chart-aggregated-field-wells :type
                         (common-lisp:or funnel-chart-aggregated-field-wells
                                         common-lisp:null)
                         :accessor
                         %funnel-chart-field-wells-funnel-chart-aggregated-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'funnel-chart-field-wells 'make-funnel-chart-field-wells))
 (common-lisp:defun make-funnel-chart-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key funnel-chart-aggregated-field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'funnel-chart-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          funnel-chart-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          funnel-chart-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'funnel-chart-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "FunnelChartAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          funnel-chart-field-wells))
   common-lisp:nil))
(common-lisp:deftype funnel-chart-measure-data-label-style ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype funnel-chart-measure-field-list ()
   '(trivial-types:proper-list measure-field))
 (common-lisp:defun |make-funnel-chart-measure-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list measure-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass funnel-chart-sort-configuration common-lisp:nil
                       ((category-items-limit :initarg :category-items-limit
                         :type
                         (common-lisp:or items-limit-configuration
                                         common-lisp:null)
                         :accessor
                         %funnel-chart-sort-configuration-category-items-limit
                         :initform common-lisp:nil)
                        (category-sort :initarg :category-sort :type
                         (common-lisp:or field-sort-options-list
                                         common-lisp:null)
                         :accessor
                         %funnel-chart-sort-configuration-category-sort
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'funnel-chart-sort-configuration
                    'make-funnel-chart-sort-configuration))
 (common-lisp:defun make-funnel-chart-sort-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key category-items-limit category-sort)
   (common-lisp:apply #'common-lisp:make-instance
                      'funnel-chart-sort-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          funnel-chart-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          funnel-chart-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-sort))
      (common-lisp:list
       (common-lisp:cons "CategorySort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-items-limit))
      (common-lisp:list
       (common-lisp:cons "CategoryItemsLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          funnel-chart-sort-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass funnel-chart-visual common-lisp:nil
                       ((column-hierarchies :initarg :column-hierarchies :type
                         (common-lisp:or column-hierarchy-list
                                         common-lisp:null)
                         :accessor %funnel-chart-visual-column-hierarchies
                         :initform common-lisp:nil)
                        (actions :initarg :actions :type
                         (common-lisp:or visual-custom-action-list
                                         common-lisp:null)
                         :accessor %funnel-chart-visual-actions :initform
                         common-lisp:nil)
                        (chart-configuration :initarg :chart-configuration
                         :type
                         (common-lisp:or funnel-chart-configuration
                                         common-lisp:null)
                         :accessor %funnel-chart-visual-chart-configuration
                         :initform common-lisp:nil)
                        (subtitle :initarg :subtitle :type
                         (common-lisp:or visual-subtitle-label-options
                                         common-lisp:null)
                         :accessor %funnel-chart-visual-subtitle :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or visual-title-label-options
                                         common-lisp:null)
                         :accessor %funnel-chart-visual-title :initform
                         common-lisp:nil)
                        (visual-id :initarg :visual-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %funnel-chart-visual-visual-id :initform
                         (common-lisp:error ":visual-id is required"))))
 (common-lisp:export
  (common-lisp:list 'funnel-chart-visual 'make-funnel-chart-visual))
 (common-lisp:defun make-funnel-chart-visual
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key column-hierarchies actions
                     chart-configuration subtitle title visual-id)
   (common-lisp:apply #'common-lisp:make-instance 'funnel-chart-visual
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input funnel-chart-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input funnel-chart-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-hierarchies))
      (common-lisp:list
       (common-lisp:cons "ColumnHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input funnel-chart-visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gauge-chart-arc-conditional-formatting common-lisp:nil
                       ((foreground-color :initarg :foreground-color :type
                         (common-lisp:or conditional-formatting-color
                                         common-lisp:null)
                         :accessor
                         %gauge-chart-arc-conditional-formatting-foreground-color
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'gauge-chart-arc-conditional-formatting
                    'make-gauge-chart-arc-conditional-formatting))
 (common-lisp:defun make-gauge-chart-arc-conditional-formatting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key foreground-color)
   (common-lisp:apply #'common-lisp:make-instance
                      'gauge-chart-arc-conditional-formatting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-arc-conditional-formatting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-arc-conditional-formatting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'foreground-color))
      (common-lisp:list
       (common-lisp:cons "ForegroundColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-arc-conditional-formatting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gauge-chart-conditional-formatting common-lisp:nil
                       ((conditional-formatting-options :initarg
                         :conditional-formatting-options :type
                         (common-lisp:or
                          gauge-chart-conditional-formatting-option-list
                          common-lisp:null)
                         :accessor
                         %gauge-chart-conditional-formatting-conditional-formatting-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'gauge-chart-conditional-formatting
                    'make-gauge-chart-conditional-formatting))
 (common-lisp:defun make-gauge-chart-conditional-formatting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key conditional-formatting-options)
   (common-lisp:apply #'common-lisp:make-instance
                      'gauge-chart-conditional-formatting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-conditional-formatting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-conditional-formatting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-formatting-options))
      (common-lisp:list
       (common-lisp:cons "ConditionalFormattingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-conditional-formatting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gauge-chart-conditional-formatting-option
                       common-lisp:nil
                       ((arc :initarg :arc :type
                         (common-lisp:or gauge-chart-arc-conditional-formatting
                                         common-lisp:null)
                         :accessor
                         %gauge-chart-conditional-formatting-option-arc
                         :initform common-lisp:nil)
                        (primary-value :initarg :primary-value :type
                         (common-lisp:or
                          gauge-chart-primary-value-conditional-formatting
                          common-lisp:null)
                         :accessor
                         %gauge-chart-conditional-formatting-option-primary-value
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'gauge-chart-conditional-formatting-option
                    'make-gauge-chart-conditional-formatting-option))
 (common-lisp:defun make-gauge-chart-conditional-formatting-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arc primary-value)
   (common-lisp:apply #'common-lisp:make-instance
                      'gauge-chart-conditional-formatting-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-conditional-formatting-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-conditional-formatting-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-value))
      (common-lisp:list
       (common-lisp:cons "PrimaryValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arc))
      (common-lisp:list
       (common-lisp:cons "Arc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-conditional-formatting-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype gauge-chart-conditional-formatting-option-list ()
   '(trivial-types:proper-list gauge-chart-conditional-formatting-option))
 (common-lisp:defun |make-gauge-chart-conditional-formatting-option-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            gauge-chart-conditional-formatting-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass gauge-chart-configuration common-lisp:nil
                       ((visual-palette :initarg :visual-palette :type
                         (common-lisp:or visual-palette common-lisp:null)
                         :accessor %gauge-chart-configuration-visual-palette
                         :initform common-lisp:nil)
                        (tooltip-options :initarg :tooltip-options :type
                         (common-lisp:or tooltip-options common-lisp:null)
                         :accessor %gauge-chart-configuration-tooltip-options
                         :initform common-lisp:nil)
                        (data-labels :initarg :data-labels :type
                         (common-lisp:or data-label-options common-lisp:null)
                         :accessor %gauge-chart-configuration-data-labels
                         :initform common-lisp:nil)
                        (gauge-chart-options :initarg :gauge-chart-options
                         :type
                         (common-lisp:or gauge-chart-options common-lisp:null)
                         :accessor
                         %gauge-chart-configuration-gauge-chart-options
                         :initform common-lisp:nil)
                        (field-wells :initarg :field-wells :type
                         (common-lisp:or gauge-chart-field-wells
                                         common-lisp:null)
                         :accessor %gauge-chart-configuration-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'gauge-chart-configuration
                    'make-gauge-chart-configuration))
 (common-lisp:defun make-gauge-chart-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visual-palette tooltip-options
                     data-labels gauge-chart-options field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'gauge-chart-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gauge-chart-options))
      (common-lisp:list
       (common-lisp:cons "GaugeChartOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-labels))
      (common-lisp:list
       (common-lisp:cons "DataLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip-options))
      (common-lisp:list
       (common-lisp:cons "TooltipOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-palette))
      (common-lisp:list
       (common-lisp:cons "VisualPalette"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gauge-chart-field-wells common-lisp:nil
                       ((target-values :initarg :target-values :type
                         (common-lisp:or measure-field-list common-lisp:null)
                         :accessor %gauge-chart-field-wells-target-values
                         :initform common-lisp:nil)
                        (values :initarg :values :type
                         (common-lisp:or measure-field-list common-lisp:null)
                         :accessor %gauge-chart-field-wells-values :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'gauge-chart-field-wells 'make-gauge-chart-field-wells))
 (common-lisp:defun make-gauge-chart-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-values values)
   (common-lisp:apply #'common-lisp:make-instance 'gauge-chart-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-values))
      (common-lisp:list
       (common-lisp:cons "TargetValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gauge-chart-options common-lisp:nil
                       ((primary-value-font-configuration :initarg
                         :primary-value-font-configuration :type
                         (common-lisp:or font-configuration common-lisp:null)
                         :accessor
                         %gauge-chart-options-primary-value-font-configuration
                         :initform common-lisp:nil)
                        (arc :initarg :arc :type
                         (common-lisp:or arc-configuration common-lisp:null)
                         :accessor %gauge-chart-options-arc :initform
                         common-lisp:nil)
                        (arc-axis :initarg :arc-axis :type
                         (common-lisp:or arc-axis-configuration
                                         common-lisp:null)
                         :accessor %gauge-chart-options-arc-axis :initform
                         common-lisp:nil)
                        (comparison :initarg :comparison :type
                         (common-lisp:or comparison-configuration
                                         common-lisp:null)
                         :accessor %gauge-chart-options-comparison :initform
                         common-lisp:nil)
                        (primary-value-display-type :initarg
                         :primary-value-display-type :type
                         (common-lisp:or primary-value-display-type
                                         common-lisp:null)
                         :accessor
                         %gauge-chart-options-primary-value-display-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'gauge-chart-options 'make-gauge-chart-options))
 (common-lisp:defun make-gauge-chart-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key primary-value-font-configuration arc
                     arc-axis comparison primary-value-display-type)
   (common-lisp:apply #'common-lisp:make-instance 'gauge-chart-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gauge-chart-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gauge-chart-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-value-display-type))
      (common-lisp:list
       (common-lisp:cons "PrimaryValueDisplayType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison))
      (common-lisp:list
       (common-lisp:cons "Comparison"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arc-axis))
      (common-lisp:list
       (common-lisp:cons "ArcAxis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arc))
      (common-lisp:list
       (common-lisp:cons "Arc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-value-font-configuration))
      (common-lisp:list
       (common-lisp:cons "PrimaryValueFontConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gauge-chart-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gauge-chart-primary-value-conditional-formatting
                       common-lisp:nil
                       ((icon :initarg :icon :type
                         (common-lisp:or conditional-formatting-icon
                                         common-lisp:null)
                         :accessor
                         %gauge-chart-primary-value-conditional-formatting-icon
                         :initform common-lisp:nil)
                        (text-color :initarg :text-color :type
                         (common-lisp:or conditional-formatting-color
                                         common-lisp:null)
                         :accessor
                         %gauge-chart-primary-value-conditional-formatting-text-color
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'gauge-chart-primary-value-conditional-formatting
                    'make-gauge-chart-primary-value-conditional-formatting))
 (common-lisp:defun make-gauge-chart-primary-value-conditional-formatting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key icon text-color)
   (common-lisp:apply #'common-lisp:make-instance
                      'gauge-chart-primary-value-conditional-formatting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-primary-value-conditional-formatting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-primary-value-conditional-formatting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-color))
      (common-lisp:list
       (common-lisp:cons "TextColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icon))
      (common-lisp:list
       (common-lisp:cons "Icon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          gauge-chart-primary-value-conditional-formatting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gauge-chart-visual common-lisp:nil
                       ((actions :initarg :actions :type
                         (common-lisp:or visual-custom-action-list
                                         common-lisp:null)
                         :accessor %gauge-chart-visual-actions :initform
                         common-lisp:nil)
                        (conditional-formatting :initarg
                         :conditional-formatting :type
                         (common-lisp:or gauge-chart-conditional-formatting
                                         common-lisp:null)
                         :accessor %gauge-chart-visual-conditional-formatting
                         :initform common-lisp:nil)
                        (chart-configuration :initarg :chart-configuration
                         :type
                         (common-lisp:or gauge-chart-configuration
                                         common-lisp:null)
                         :accessor %gauge-chart-visual-chart-configuration
                         :initform common-lisp:nil)
                        (subtitle :initarg :subtitle :type
                         (common-lisp:or visual-subtitle-label-options
                                         common-lisp:null)
                         :accessor %gauge-chart-visual-subtitle :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or visual-title-label-options
                                         common-lisp:null)
                         :accessor %gauge-chart-visual-title :initform
                         common-lisp:nil)
                        (visual-id :initarg :visual-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %gauge-chart-visual-visual-id :initform
                         (common-lisp:error ":visual-id is required"))))
 (common-lisp:export
  (common-lisp:list 'gauge-chart-visual 'make-gauge-chart-visual))
 (common-lisp:defun make-gauge-chart-visual
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key actions conditional-formatting
                     chart-configuration subtitle title visual-id)
   (common-lisp:apply #'common-lisp:make-instance 'gauge-chart-visual
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gauge-chart-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gauge-chart-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-formatting))
      (common-lisp:list
       (common-lisp:cons "ConditionalFormatting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gauge-chart-visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass generate-embed-url-for-anonymous-user-request
                       common-lisp:nil
                       ((allowed-domains :initarg :allowed-domains :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %generate-embed-url-for-anonymous-user-request-allowed-domains
                         :initform common-lisp:nil)
                        (experience-configuration :initarg
                         :experience-configuration :type
                         (common-lisp:or
                          anonymous-user-embedding-experience-configuration
                          common-lisp:null)
                         :accessor
                         %generate-embed-url-for-anonymous-user-request-experience-configuration
                         :initform
                         (common-lisp:error
                          ":experience-configuration is required"))
                        (authorized-resource-arns :initarg
                         :authorized-resource-arns :type
                         (common-lisp:or arn-list common-lisp:null) :accessor
                         %generate-embed-url-for-anonymous-user-request-authorized-resource-arns
                         :initform
                         (common-lisp:error
                          ":authorized-resource-arns is required"))
                        (session-tags :initarg :session-tags :type
                         (common-lisp:or session-tag-list common-lisp:null)
                         :accessor
                         %generate-embed-url-for-anonymous-user-request-session-tags
                         :initform common-lisp:nil)
                        (namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %generate-embed-url-for-anonymous-user-request-namespace
                         :initform
                         (common-lisp:error ":namespace is required"))
                        (session-lifetime-in-minutes :initarg
                         :session-lifetime-in-minutes :type
                         (common-lisp:or session-lifetime-in-minutes
                                         common-lisp:null)
                         :accessor
                         %generate-embed-url-for-anonymous-user-request-session-lifetime-in-minutes
                         :initform common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %generate-embed-url-for-anonymous-user-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'generate-embed-url-for-anonymous-user-request
                    'make-generate-embed-url-for-anonymous-user-request))
 (common-lisp:defun make-generate-embed-url-for-anonymous-user-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key allowed-domains experience-configuration
                     authorized-resource-arns session-tags namespace
                     session-lifetime-in-minutes aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'generate-embed-url-for-anonymous-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-embed-url-for-anonymous-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-embed-url-for-anonymous-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-lifetime-in-minutes))
      (common-lisp:list
       (common-lisp:cons "SessionLifetimeInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-tags))
      (common-lisp:list
       (common-lisp:cons "SessionTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorized-resource-arns))
      (common-lisp:list
       (common-lisp:cons "AuthorizedResourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'experience-configuration))
      (common-lisp:list
       (common-lisp:cons "ExperienceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-domains))
      (common-lisp:list
       (common-lisp:cons "AllowedDomains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-embed-url-for-anonymous-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass generate-embed-url-for-anonymous-user-response
                       common-lisp:nil
                       ((anonymous-user-arn :initarg :anonymous-user-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %generate-embed-url-for-anonymous-user-response-anonymous-user-arn
                         :initform
                         (common-lisp:error ":anonymous-user-arn is required"))
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %generate-embed-url-for-anonymous-user-response-request-id
                         :initform
                         (common-lisp:error ":request-id is required"))
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor
                         %generate-embed-url-for-anonymous-user-response-status
                         :initform (common-lisp:error ":status is required"))
                        (embed-url :initarg :embed-url :type
                         (common-lisp:or embedding-url common-lisp:null)
                         :accessor
                         %generate-embed-url-for-anonymous-user-response-embed-url
                         :initform
                         (common-lisp:error ":embed-url is required"))))
 (common-lisp:export
  (common-lisp:list 'generate-embed-url-for-anonymous-user-response
                    'make-generate-embed-url-for-anonymous-user-response))
 (common-lisp:defun make-generate-embed-url-for-anonymous-user-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key anonymous-user-arn request-id status
                     embed-url)
   (common-lisp:apply #'common-lisp:make-instance
                      'generate-embed-url-for-anonymous-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-embed-url-for-anonymous-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-embed-url-for-anonymous-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'embed-url))
      (common-lisp:list
       (common-lisp:cons "EmbedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anonymous-user-arn))
      (common-lisp:list
       (common-lisp:cons "AnonymousUserArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-embed-url-for-anonymous-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass generate-embed-url-for-registered-user-request
                       common-lisp:nil
                       ((allowed-domains :initarg :allowed-domains :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %generate-embed-url-for-registered-user-request-allowed-domains
                         :initform common-lisp:nil)
                        (experience-configuration :initarg
                         :experience-configuration :type
                         (common-lisp:or
                          registered-user-embedding-experience-configuration
                          common-lisp:null)
                         :accessor
                         %generate-embed-url-for-registered-user-request-experience-configuration
                         :initform
                         (common-lisp:error
                          ":experience-configuration is required"))
                        (user-arn :initarg :user-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %generate-embed-url-for-registered-user-request-user-arn
                         :initform (common-lisp:error ":user-arn is required"))
                        (session-lifetime-in-minutes :initarg
                         :session-lifetime-in-minutes :type
                         (common-lisp:or session-lifetime-in-minutes
                                         common-lisp:null)
                         :accessor
                         %generate-embed-url-for-registered-user-request-session-lifetime-in-minutes
                         :initform common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %generate-embed-url-for-registered-user-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'generate-embed-url-for-registered-user-request
                    'make-generate-embed-url-for-registered-user-request))
 (common-lisp:defun make-generate-embed-url-for-registered-user-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key allowed-domains experience-configuration
                     user-arn session-lifetime-in-minutes aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'generate-embed-url-for-registered-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-embed-url-for-registered-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-embed-url-for-registered-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-lifetime-in-minutes))
      (common-lisp:list
       (common-lisp:cons "SessionLifetimeInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn))
      (common-lisp:list
       (common-lisp:cons "UserArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'experience-configuration))
      (common-lisp:list
       (common-lisp:cons "ExperienceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-domains))
      (common-lisp:list
       (common-lisp:cons "AllowedDomains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-embed-url-for-registered-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass generate-embed-url-for-registered-user-response
                       common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %generate-embed-url-for-registered-user-response-request-id
                         :initform
                         (common-lisp:error ":request-id is required"))
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor
                         %generate-embed-url-for-registered-user-response-status
                         :initform (common-lisp:error ":status is required"))
                        (embed-url :initarg :embed-url :type
                         (common-lisp:or embedding-url common-lisp:null)
                         :accessor
                         %generate-embed-url-for-registered-user-response-embed-url
                         :initform
                         (common-lisp:error ":embed-url is required"))))
 (common-lisp:export
  (common-lisp:list 'generate-embed-url-for-registered-user-response
                    'make-generate-embed-url-for-registered-user-response))
 (common-lisp:defun make-generate-embed-url-for-registered-user-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status embed-url)
   (common-lisp:apply #'common-lisp:make-instance
                      'generate-embed-url-for-registered-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-embed-url-for-registered-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-embed-url-for-registered-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'embed-url))
      (common-lisp:list
       (common-lisp:cons "EmbedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-embed-url-for-registered-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass geo-spatial-column-group common-lisp:nil
                       ((columns :initarg :columns :type
                         (common-lisp:or column-list common-lisp:null)
                         :accessor %geo-spatial-column-group-columns :initform
                         (common-lisp:error ":columns is required"))
                        (country-code :initarg :country-code :type
                         (common-lisp:or geo-spatial-country-code
                                         common-lisp:null)
                         :accessor %geo-spatial-column-group-country-code
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or column-group-name common-lisp:null)
                         :accessor %geo-spatial-column-group-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'geo-spatial-column-group 'make-geo-spatial-column-group))
 (common-lisp:defun make-geo-spatial-column-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key columns country-code name)
   (common-lisp:apply #'common-lisp:make-instance 'geo-spatial-column-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          geo-spatial-column-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          geo-spatial-column-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country-code))
      (common-lisp:list
       (common-lisp:cons "CountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "Columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          geo-spatial-column-group))
   common-lisp:nil))
(common-lisp:deftype geo-spatial-country-code () 'common-lisp:string)
(common-lisp:deftype geo-spatial-data-role () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass geospatial-coordinate-bounds common-lisp:nil
                       ((east :initarg :east :type
                         (common-lisp:or longitude common-lisp:null) :accessor
                         %geospatial-coordinate-bounds-east :initform
                         (common-lisp:error ":east is required"))
                        (west :initarg :west :type
                         (common-lisp:or longitude common-lisp:null) :accessor
                         %geospatial-coordinate-bounds-west :initform
                         (common-lisp:error ":west is required"))
                        (south :initarg :south :type
                         (common-lisp:or latitude common-lisp:null) :accessor
                         %geospatial-coordinate-bounds-south :initform
                         (common-lisp:error ":south is required"))
                        (north :initarg :north :type
                         (common-lisp:or latitude common-lisp:null) :accessor
                         %geospatial-coordinate-bounds-north :initform
                         (common-lisp:error ":north is required"))))
 (common-lisp:export
  (common-lisp:list 'geospatial-coordinate-bounds
                    'make-geospatial-coordinate-bounds))
 (common-lisp:defun make-geospatial-coordinate-bounds
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key east west south north)
   (common-lisp:apply #'common-lisp:make-instance 'geospatial-coordinate-bounds
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-coordinate-bounds))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-coordinate-bounds))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'north))
      (common-lisp:list
       (common-lisp:cons "North"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'south))
      (common-lisp:list
       (common-lisp:cons "South"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'west))
      (common-lisp:list
       (common-lisp:cons "West"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'east))
      (common-lisp:list
       (common-lisp:cons "East"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-coordinate-bounds))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass geospatial-map-aggregated-field-wells common-lisp:nil
                       ((colors :initarg :colors :type
                         (common-lisp:or dimension-field-list common-lisp:null)
                         :accessor
                         %geospatial-map-aggregated-field-wells-colors
                         :initform common-lisp:nil)
                        (values :initarg :values :type
                         (common-lisp:or measure-field-list common-lisp:null)
                         :accessor
                         %geospatial-map-aggregated-field-wells-values
                         :initform common-lisp:nil)
                        (geospatial :initarg :geospatial :type
                         (common-lisp:or dimension-field-list common-lisp:null)
                         :accessor
                         %geospatial-map-aggregated-field-wells-geospatial
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'geospatial-map-aggregated-field-wells
                    'make-geospatial-map-aggregated-field-wells))
 (common-lisp:defun make-geospatial-map-aggregated-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key colors values geospatial)
   (common-lisp:apply #'common-lisp:make-instance
                      'geospatial-map-aggregated-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-map-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-map-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geospatial))
      (common-lisp:list
       (common-lisp:cons "Geospatial"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'colors))
      (common-lisp:list
       (common-lisp:cons "Colors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-map-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass geospatial-map-configuration common-lisp:nil
                       ((visual-palette :initarg :visual-palette :type
                         (common-lisp:or visual-palette common-lisp:null)
                         :accessor %geospatial-map-configuration-visual-palette
                         :initform common-lisp:nil)
                        (point-style-options :initarg :point-style-options
                         :type
                         (common-lisp:or geospatial-point-style-options
                                         common-lisp:null)
                         :accessor
                         %geospatial-map-configuration-point-style-options
                         :initform common-lisp:nil)
                        (map-style-options :initarg :map-style-options :type
                         (common-lisp:or geospatial-map-style-options
                                         common-lisp:null)
                         :accessor
                         %geospatial-map-configuration-map-style-options
                         :initform common-lisp:nil)
                        (window-options :initarg :window-options :type
                         (common-lisp:or geospatial-window-options
                                         common-lisp:null)
                         :accessor %geospatial-map-configuration-window-options
                         :initform common-lisp:nil)
                        (tooltip :initarg :tooltip :type
                         (common-lisp:or tooltip-options common-lisp:null)
                         :accessor %geospatial-map-configuration-tooltip
                         :initform common-lisp:nil)
                        (legend :initarg :legend :type
                         (common-lisp:or legend-options common-lisp:null)
                         :accessor %geospatial-map-configuration-legend
                         :initform common-lisp:nil)
                        (field-wells :initarg :field-wells :type
                         (common-lisp:or geospatial-map-field-wells
                                         common-lisp:null)
                         :accessor %geospatial-map-configuration-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'geospatial-map-configuration
                    'make-geospatial-map-configuration))
 (common-lisp:defun make-geospatial-map-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visual-palette point-style-options
                     map-style-options window-options tooltip legend
                     field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'geospatial-map-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-map-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-map-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legend))
      (common-lisp:list
       (common-lisp:cons "Legend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip))
      (common-lisp:list
       (common-lisp:cons "Tooltip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-options))
      (common-lisp:list
       (common-lisp:cons "WindowOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-style-options))
      (common-lisp:list
       (common-lisp:cons "MapStyleOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'point-style-options))
      (common-lisp:list
       (common-lisp:cons "PointStyleOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-palette))
      (common-lisp:list
       (common-lisp:cons "VisualPalette"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-map-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass geospatial-map-field-wells common-lisp:nil
                       ((geospatial-map-aggregated-field-wells :initarg
                         :geospatial-map-aggregated-field-wells :type
                         (common-lisp:or geospatial-map-aggregated-field-wells
                                         common-lisp:null)
                         :accessor
                         %geospatial-map-field-wells-geospatial-map-aggregated-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'geospatial-map-field-wells
                    'make-geospatial-map-field-wells))
 (common-lisp:defun make-geospatial-map-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key geospatial-map-aggregated-field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'geospatial-map-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-map-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-map-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'geospatial-map-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "GeospatialMapAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-map-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass geospatial-map-style-options common-lisp:nil
                       ((base-map-style :initarg :base-map-style :type
                         (common-lisp:or base-map-style-type common-lisp:null)
                         :accessor %geospatial-map-style-options-base-map-style
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'geospatial-map-style-options
                    'make-geospatial-map-style-options))
 (common-lisp:defun make-geospatial-map-style-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key base-map-style)
   (common-lisp:apply #'common-lisp:make-instance 'geospatial-map-style-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-map-style-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-map-style-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-map-style))
      (common-lisp:list
       (common-lisp:cons "BaseMapStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-map-style-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass geospatial-map-visual common-lisp:nil
                       ((actions :initarg :actions :type
                         (common-lisp:or visual-custom-action-list
                                         common-lisp:null)
                         :accessor %geospatial-map-visual-actions :initform
                         common-lisp:nil)
                        (column-hierarchies :initarg :column-hierarchies :type
                         (common-lisp:or column-hierarchy-list
                                         common-lisp:null)
                         :accessor %geospatial-map-visual-column-hierarchies
                         :initform common-lisp:nil)
                        (chart-configuration :initarg :chart-configuration
                         :type
                         (common-lisp:or geospatial-map-configuration
                                         common-lisp:null)
                         :accessor %geospatial-map-visual-chart-configuration
                         :initform common-lisp:nil)
                        (subtitle :initarg :subtitle :type
                         (common-lisp:or visual-subtitle-label-options
                                         common-lisp:null)
                         :accessor %geospatial-map-visual-subtitle :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or visual-title-label-options
                                         common-lisp:null)
                         :accessor %geospatial-map-visual-title :initform
                         common-lisp:nil)
                        (visual-id :initarg :visual-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %geospatial-map-visual-visual-id :initform
                         (common-lisp:error ":visual-id is required"))))
 (common-lisp:export
  (common-lisp:list 'geospatial-map-visual 'make-geospatial-map-visual))
 (common-lisp:defun make-geospatial-map-visual
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key actions column-hierarchies
                     chart-configuration subtitle title visual-id)
   (common-lisp:apply #'common-lisp:make-instance 'geospatial-map-visual
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-map-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-map-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-hierarchies))
      (common-lisp:list
       (common-lisp:cons "ColumnHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-map-visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass geospatial-point-style-options common-lisp:nil
                       ((cluster-marker-configuration :initarg
                         :cluster-marker-configuration :type
                         (common-lisp:or cluster-marker-configuration
                                         common-lisp:null)
                         :accessor
                         %geospatial-point-style-options-cluster-marker-configuration
                         :initform common-lisp:nil)
                        (selected-point-style :initarg :selected-point-style
                         :type
                         (common-lisp:or geospatial-selected-point-style
                                         common-lisp:null)
                         :accessor
                         %geospatial-point-style-options-selected-point-style
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'geospatial-point-style-options
                    'make-geospatial-point-style-options))
 (common-lisp:defun make-geospatial-point-style-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-marker-configuration
                     selected-point-style)
   (common-lisp:apply #'common-lisp:make-instance
                      'geospatial-point-style-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-point-style-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-point-style-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'selected-point-style))
      (common-lisp:list
       (common-lisp:cons "SelectedPointStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-marker-configuration))
      (common-lisp:list
       (common-lisp:cons "ClusterMarkerConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-point-style-options))
   common-lisp:nil))
(common-lisp:deftype geospatial-selected-point-style () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass geospatial-window-options common-lisp:nil
                       ((map-zoom-mode :initarg :map-zoom-mode :type
                         (common-lisp:or map-zoom-mode common-lisp:null)
                         :accessor %geospatial-window-options-map-zoom-mode
                         :initform common-lisp:nil)
                        (bounds :initarg :bounds :type
                         (common-lisp:or geospatial-coordinate-bounds
                                         common-lisp:null)
                         :accessor %geospatial-window-options-bounds :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'geospatial-window-options
                    'make-geospatial-window-options))
 (common-lisp:defun make-geospatial-window-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key map-zoom-mode bounds)
   (common-lisp:apply #'common-lisp:make-instance 'geospatial-window-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-window-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-window-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bounds))
      (common-lisp:list
       (common-lisp:cons "Bounds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-zoom-mode))
      (common-lisp:list
       (common-lisp:cons "MapZoomMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          geospatial-window-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-dashboard-embed-url-request common-lisp:nil
                       ((additional-dashboard-ids :initarg
                         :additional-dashboard-ids :type
                         (common-lisp:or additional-dashboard-id-list
                                         common-lisp:null)
                         :accessor
                         %get-dashboard-embed-url-request-additional-dashboard-ids
                         :initform common-lisp:nil)
                        (namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %get-dashboard-embed-url-request-namespace :initform
                         common-lisp:nil)
                        (user-arn :initarg :user-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-dashboard-embed-url-request-user-arn :initform
                         common-lisp:nil)
                        (state-persistence-enabled :initarg
                         :state-persistence-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %get-dashboard-embed-url-request-state-persistence-enabled
                         :initform common-lisp:nil)
                        (reset-disabled :initarg :reset-disabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %get-dashboard-embed-url-request-reset-disabled
                         :initform common-lisp:nil)
                        (undo-redo-disabled :initarg :undo-redo-disabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %get-dashboard-embed-url-request-undo-redo-disabled
                         :initform common-lisp:nil)
                        (session-lifetime-in-minutes :initarg
                         :session-lifetime-in-minutes :type
                         (common-lisp:or session-lifetime-in-minutes
                                         common-lisp:null)
                         :accessor
                         %get-dashboard-embed-url-request-session-lifetime-in-minutes
                         :initform common-lisp:nil)
                        (identity-type :initarg :identity-type :type
                         (common-lisp:or embedding-identity-type
                                         common-lisp:null)
                         :accessor
                         %get-dashboard-embed-url-request-identity-type
                         :initform
                         (common-lisp:error ":identity-type is required"))
                        (dashboard-id :initarg :dashboard-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %get-dashboard-embed-url-request-dashboard-id
                         :initform
                         (common-lisp:error ":dashboard-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %get-dashboard-embed-url-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-dashboard-embed-url-request
                    'make-get-dashboard-embed-url-request))
 (common-lisp:defun make-get-dashboard-embed-url-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key additional-dashboard-ids namespace
                     user-arn state-persistence-enabled reset-disabled
                     undo-redo-disabled session-lifetime-in-minutes
                     identity-type dashboard-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-dashboard-embed-url-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dashboard-embed-url-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dashboard-embed-url-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dashboard-embed-url-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-dashboard-embed-url-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-dashboard-embed-url-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %get-dashboard-embed-url-response-status
                         :initform common-lisp:nil)
                        (embed-url :initarg :embed-url :type
                         (common-lisp:or embedding-url common-lisp:null)
                         :accessor %get-dashboard-embed-url-response-embed-url
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-dashboard-embed-url-response
                    'make-get-dashboard-embed-url-response))
 (common-lisp:defun make-get-dashboard-embed-url-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status embed-url)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-dashboard-embed-url-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dashboard-embed-url-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dashboard-embed-url-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'embed-url))
      (common-lisp:list
       (common-lisp:cons "EmbedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dashboard-embed-url-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-session-embed-url-request common-lisp:nil
                       ((user-arn :initarg :user-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-session-embed-url-request-user-arn :initform
                         common-lisp:nil)
                        (session-lifetime-in-minutes :initarg
                         :session-lifetime-in-minutes :type
                         (common-lisp:or session-lifetime-in-minutes
                                         common-lisp:null)
                         :accessor
                         %get-session-embed-url-request-session-lifetime-in-minutes
                         :initform common-lisp:nil)
                        (entry-point :initarg :entry-point :type
                         (common-lisp:or entry-point common-lisp:null)
                         :accessor %get-session-embed-url-request-entry-point
                         :initform common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %get-session-embed-url-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-session-embed-url-request
                    'make-get-session-embed-url-request))
 (common-lisp:defun make-get-session-embed-url-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-arn session-lifetime-in-minutes
                     entry-point aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-session-embed-url-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-session-embed-url-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-session-embed-url-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-session-embed-url-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-session-embed-url-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-session-embed-url-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %get-session-embed-url-response-status
                         :initform common-lisp:nil)
                        (embed-url :initarg :embed-url :type
                         (common-lisp:or embedding-url common-lisp:null)
                         :accessor %get-session-embed-url-response-embed-url
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-session-embed-url-response
                    'make-get-session-embed-url-response))
 (common-lisp:defun make-get-session-embed-url-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status embed-url)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-session-embed-url-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-session-embed-url-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-session-embed-url-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'embed-url))
      (common-lisp:list
       (common-lisp:cons "EmbedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-session-embed-url-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass global-table-border-options common-lisp:nil
                       ((side-specific-border :initarg :side-specific-border
                         :type
                         (common-lisp:or table-side-border-options
                                         common-lisp:null)
                         :accessor
                         %global-table-border-options-side-specific-border
                         :initform common-lisp:nil)
                        (uniform-border :initarg :uniform-border :type
                         (common-lisp:or table-border-options common-lisp:null)
                         :accessor %global-table-border-options-uniform-border
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'global-table-border-options
                    'make-global-table-border-options))
 (common-lisp:defun make-global-table-border-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key side-specific-border uniform-border)
   (common-lisp:apply #'common-lisp:make-instance 'global-table-border-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          global-table-border-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          global-table-border-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uniform-border))
      (common-lisp:list
       (common-lisp:cons "UniformBorder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'side-specific-border))
      (common-lisp:list
       (common-lisp:cons "SideSpecificBorder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          global-table-border-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gradient-color common-lisp:nil
                       ((stops :initarg :stops :type
                         (common-lisp:or gradient-stop-list common-lisp:null)
                         :accessor %gradient-color-stops :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'gradient-color 'make-gradient-color))
 (common-lisp:defun make-gradient-color
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stops)
   (common-lisp:apply #'common-lisp:make-instance 'gradient-color
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gradient-color))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gradient-color))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stops))
      (common-lisp:list
       (common-lisp:cons "Stops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gradient-color))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gradient-stop common-lisp:nil
                       ((color :initarg :color :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %gradient-stop-color :initform common-lisp:nil)
                        (data-value :initarg :data-value :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %gradient-stop-data-value :initform common-lisp:nil)
                        (gradient-offset :initarg :gradient-offset :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %gradient-stop-gradient-offset :initform
                         (common-lisp:error ":gradient-offset is required"))))
 (common-lisp:export (common-lisp:list 'gradient-stop 'make-gradient-stop))
 (common-lisp:defun make-gradient-stop
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key color data-value gradient-offset)
   (common-lisp:apply #'common-lisp:make-instance 'gradient-stop
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gradient-stop))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gradient-stop))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gradient-offset))
      (common-lisp:list
       (common-lisp:cons "GradientOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-value))
      (common-lisp:list
       (common-lisp:cons "DataValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color))
      (common-lisp:list
       (common-lisp:cons "Color"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gradient-stop))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype gradient-stop-list ()
   '(trivial-types:proper-list gradient-stop))
 (common-lisp:defun |make-gradient-stop-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list gradient-stop))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass grid-layout-canvas-size-options common-lisp:nil
                       ((screen-canvas-size-options :initarg
                         :screen-canvas-size-options :type
                         (common-lisp:or grid-layout-screen-canvas-size-options
                                         common-lisp:null)
                         :accessor
                         %grid-layout-canvas-size-options-screen-canvas-size-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'grid-layout-canvas-size-options
                    'make-grid-layout-canvas-size-options))
 (common-lisp:defun make-grid-layout-canvas-size-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key screen-canvas-size-options)
   (common-lisp:apply #'common-lisp:make-instance
                      'grid-layout-canvas-size-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grid-layout-canvas-size-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grid-layout-canvas-size-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'screen-canvas-size-options))
      (common-lisp:list
       (common-lisp:cons "ScreenCanvasSizeOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grid-layout-canvas-size-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grid-layout-configuration common-lisp:nil
                       ((canvas-size-options :initarg :canvas-size-options
                         :type
                         (common-lisp:or grid-layout-canvas-size-options
                                         common-lisp:null)
                         :accessor
                         %grid-layout-configuration-canvas-size-options
                         :initform common-lisp:nil)
                        (elements :initarg :elements :type
                         (common-lisp:or grid-layout-element-list
                                         common-lisp:null)
                         :accessor %grid-layout-configuration-elements
                         :initform
                         (common-lisp:error ":elements is required"))))
 (common-lisp:export
  (common-lisp:list 'grid-layout-configuration
                    'make-grid-layout-configuration))
 (common-lisp:defun make-grid-layout-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key canvas-size-options elements)
   (common-lisp:apply #'common-lisp:make-instance 'grid-layout-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grid-layout-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grid-layout-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elements))
      (common-lisp:list
       (common-lisp:cons "Elements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canvas-size-options))
      (common-lisp:list
       (common-lisp:cons "CanvasSizeOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grid-layout-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grid-layout-element common-lisp:nil
                       ((row-span :initarg :row-span :type
                         (common-lisp:or grid-layout-element-row-span
                                         common-lisp:null)
                         :accessor %grid-layout-element-row-span :initform
                         (common-lisp:error ":row-span is required"))
                        (row-index :initarg :row-index :type
                         (common-lisp:or grid-layout-element-row-index
                                         common-lisp:null)
                         :accessor %grid-layout-element-row-index :initform
                         common-lisp:nil)
                        (column-span :initarg :column-span :type
                         (common-lisp:or grid-layout-element-column-span
                                         common-lisp:null)
                         :accessor %grid-layout-element-column-span :initform
                         (common-lisp:error ":column-span is required"))
                        (column-index :initarg :column-index :type
                         (common-lisp:or grid-layout-element-column-index
                                         common-lisp:null)
                         :accessor %grid-layout-element-column-index :initform
                         common-lisp:nil)
                        (element-type :initarg :element-type :type
                         (common-lisp:or layout-element-type common-lisp:null)
                         :accessor %grid-layout-element-element-type :initform
                         (common-lisp:error ":element-type is required"))
                        (element-id :initarg :element-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %grid-layout-element-element-id :initform
                         (common-lisp:error ":element-id is required"))))
 (common-lisp:export
  (common-lisp:list 'grid-layout-element 'make-grid-layout-element))
 (common-lisp:defun make-grid-layout-element
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key row-span row-index column-span
                     column-index element-type element-id)
   (common-lisp:apply #'common-lisp:make-instance 'grid-layout-element
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grid-layout-element))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grid-layout-element))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'element-id))
      (common-lisp:list
       (common-lisp:cons "ElementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'element-type))
      (common-lisp:list
       (common-lisp:cons "ElementType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-index))
      (common-lisp:list
       (common-lisp:cons "ColumnIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-span))
      (common-lisp:list
       (common-lisp:cons "ColumnSpan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-index))
      (common-lisp:list
       (common-lisp:cons "RowIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-span))
      (common-lisp:list
       (common-lisp:cons "RowSpan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grid-layout-element))
   common-lisp:nil))
(common-lisp:deftype grid-layout-element-column-index () 'common-lisp:integer)
(common-lisp:deftype grid-layout-element-column-span () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype grid-layout-element-list ()
   '(trivial-types:proper-list grid-layout-element))
 (common-lisp:defun |make-grid-layout-element-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list grid-layout-element))
   aws-sdk/generator/shape::members))
(common-lisp:deftype grid-layout-element-row-index () 'common-lisp:integer)
(common-lisp:deftype grid-layout-element-row-span () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass grid-layout-screen-canvas-size-options common-lisp:nil
                       ((optimized-view-port-width :initarg
                         :optimized-view-port-width :type
                         (common-lisp:or pixel-length common-lisp:null)
                         :accessor
                         %grid-layout-screen-canvas-size-options-optimized-view-port-width
                         :initform common-lisp:nil)
                        (resize-option :initarg :resize-option :type
                         (common-lisp:or resize-option common-lisp:null)
                         :accessor
                         %grid-layout-screen-canvas-size-options-resize-option
                         :initform
                         (common-lisp:error ":resize-option is required"))))
 (common-lisp:export
  (common-lisp:list 'grid-layout-screen-canvas-size-options
                    'make-grid-layout-screen-canvas-size-options))
 (common-lisp:defun make-grid-layout-screen-canvas-size-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key optimized-view-port-width resize-option)
   (common-lisp:apply #'common-lisp:make-instance
                      'grid-layout-screen-canvas-size-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grid-layout-screen-canvas-size-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grid-layout-screen-canvas-size-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resize-option))
      (common-lisp:list
       (common-lisp:cons "ResizeOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'optimized-view-port-width))
      (common-lisp:list
       (common-lisp:cons "OptimizedViewPortWidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grid-layout-screen-canvas-size-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass group common-lisp:nil
                       ((principal-id :initarg :principal-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %group-principal-id :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or group-description common-lisp:null)
                         :accessor %group-description :initform
                         common-lisp:nil)
                        (group-name :initarg :group-name :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         %group-group-name :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %group-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'group 'make-group))
 (common-lisp:defun make-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key principal-id description group-name arn)
   (common-lisp:apply #'common-lisp:make-instance 'group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "PrincipalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group))
   common-lisp:nil))
(common-lisp:deftype group-description () 'common-lisp:string)
(common-lisp:deftype group-filter-attribute () 'common-lisp:string)
(common-lisp:deftype group-filter-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype group-list () '(trivial-types:proper-list group))
 (common-lisp:defun |make-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass group-member common-lisp:nil
                       ((member-name :initarg :member-name :type
                         (common-lisp:or group-member-name common-lisp:null)
                         :accessor %group-member-member-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %group-member-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'group-member 'make-group-member))
 (common-lisp:defun make-group-member
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key member-name arn)
   (common-lisp:apply #'common-lisp:make-instance 'group-member
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-name))
      (common-lisp:list
       (common-lisp:cons "MemberName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype group-member-list ()
   '(trivial-types:proper-list group-member))
 (common-lisp:defun |make-group-member-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group-member))
   aws-sdk/generator/shape::members))
(common-lisp:deftype group-member-name () 'common-lisp:string)
(common-lisp:deftype group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass group-search-filter common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %group-search-filter-value :initform
                         (common-lisp:error ":value is required"))
                        (name :initarg :name :type
                         (common-lisp:or group-filter-attribute
                                         common-lisp:null)
                         :accessor %group-search-filter-name :initform
                         (common-lisp:error ":name is required"))
                        (operator :initarg :operator :type
                         (common-lisp:or group-filter-operator
                                         common-lisp:null)
                         :accessor %group-search-filter-operator :initform
                         (common-lisp:error ":operator is required"))))
 (common-lisp:export
  (common-lisp:list 'group-search-filter 'make-group-search-filter))
 (common-lisp:defun make-group-search-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name operator)
   (common-lisp:apply #'common-lisp:make-instance 'group-search-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-search-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-search-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "Operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-search-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype group-search-filter-list ()
   '(trivial-types:proper-list group-search-filter))
 (common-lisp:defun |make-group-search-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group-search-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype groups-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-groups-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass growth-rate-computation common-lisp:nil
                       ((period-size :initarg :period-size :type
                         (common-lisp:or growth-rate-period-size
                                         common-lisp:null)
                         :accessor %growth-rate-computation-period-size
                         :initform common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or measure-field common-lisp:null)
                         :accessor %growth-rate-computation-value :initform
                         common-lisp:nil)
                        (time :initarg :time :type
                         (common-lisp:or dimension-field common-lisp:null)
                         :accessor %growth-rate-computation-time :initform
                         (common-lisp:error ":time is required"))
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %growth-rate-computation-name :initform
                         common-lisp:nil)
                        (computation-id :initarg :computation-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %growth-rate-computation-computation-id
                         :initform
                         (common-lisp:error ":computation-id is required"))))
 (common-lisp:export
  (common-lisp:list 'growth-rate-computation 'make-growth-rate-computation))
 (common-lisp:defun make-growth-rate-computation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key period-size value time name
                     computation-id)
   (common-lisp:apply #'common-lisp:make-instance 'growth-rate-computation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          growth-rate-computation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          growth-rate-computation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computation-id))
      (common-lisp:list
       (common-lisp:cons "ComputationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period-size))
      (common-lisp:list
       (common-lisp:cons "PeriodSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          growth-rate-computation))
   common-lisp:nil))
(common-lisp:deftype growth-rate-period-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass gutter-style common-lisp:nil
                       ((show :initarg :show :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %gutter-style-show :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'gutter-style 'make-gutter-style))
 (common-lisp:defun make-gutter-style
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key show)
   (common-lisp:apply #'common-lisp:make-instance 'gutter-style
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gutter-style))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gutter-style))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'show))
      (common-lisp:list
       (common-lisp:cons "Show"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gutter-style))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass header-footer-section-configuration common-lisp:nil
                       ((style :initarg :style :type
                         (common-lisp:or section-style common-lisp:null)
                         :accessor %header-footer-section-configuration-style
                         :initform common-lisp:nil)
                        (layout :initarg :layout :type
                         (common-lisp:or section-layout-configuration
                                         common-lisp:null)
                         :accessor %header-footer-section-configuration-layout
                         :initform (common-lisp:error ":layout is required"))
                        (section-id :initarg :section-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %header-footer-section-configuration-section-id
                         :initform
                         (common-lisp:error ":section-id is required"))))
 (common-lisp:export
  (common-lisp:list 'header-footer-section-configuration
                    'make-header-footer-section-configuration))
 (common-lisp:defun make-header-footer-section-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key style layout section-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'header-footer-section-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          header-footer-section-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          header-footer-section-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'section-id))
      (common-lisp:list
       (common-lisp:cons "SectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layout))
      (common-lisp:list
       (common-lisp:cons "Layout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style))
      (common-lisp:list
       (common-lisp:cons "Style"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          header-footer-section-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype header-footer-section-configuration-list ()
   '(trivial-types:proper-list header-footer-section-configuration))
 (common-lisp:defun |make-header-footer-section-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            header-footer-section-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass heat-map-aggregated-field-wells common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or heat-map-measure-field-list
                                         common-lisp:null)
                         :accessor %heat-map-aggregated-field-wells-values
                         :initform common-lisp:nil)
                        (columns :initarg :columns :type
                         (common-lisp:or heat-map-dimension-field-list
                                         common-lisp:null)
                         :accessor %heat-map-aggregated-field-wells-columns
                         :initform common-lisp:nil)
                        (rows :initarg :rows :type
                         (common-lisp:or heat-map-dimension-field-list
                                         common-lisp:null)
                         :accessor %heat-map-aggregated-field-wells-rows
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'heat-map-aggregated-field-wells
                    'make-heat-map-aggregated-field-wells))
 (common-lisp:defun make-heat-map-aggregated-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values columns rows)
   (common-lisp:apply #'common-lisp:make-instance
                      'heat-map-aggregated-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          heat-map-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          heat-map-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rows))
      (common-lisp:list
       (common-lisp:cons "Rows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "Columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          heat-map-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass heat-map-configuration common-lisp:nil
                       ((tooltip :initarg :tooltip :type
                         (common-lisp:or tooltip-options common-lisp:null)
                         :accessor %heat-map-configuration-tooltip :initform
                         common-lisp:nil)
                        (data-labels :initarg :data-labels :type
                         (common-lisp:or data-label-options common-lisp:null)
                         :accessor %heat-map-configuration-data-labels
                         :initform common-lisp:nil)
                        (legend :initarg :legend :type
                         (common-lisp:or legend-options common-lisp:null)
                         :accessor %heat-map-configuration-legend :initform
                         common-lisp:nil)
                        (color-scale :initarg :color-scale :type
                         (common-lisp:or color-scale common-lisp:null)
                         :accessor %heat-map-configuration-color-scale
                         :initform common-lisp:nil)
                        (column-label-options :initarg :column-label-options
                         :type
                         (common-lisp:or chart-axis-label-options
                                         common-lisp:null)
                         :accessor %heat-map-configuration-column-label-options
                         :initform common-lisp:nil)
                        (row-label-options :initarg :row-label-options :type
                         (common-lisp:or chart-axis-label-options
                                         common-lisp:null)
                         :accessor %heat-map-configuration-row-label-options
                         :initform common-lisp:nil)
                        (sort-configuration :initarg :sort-configuration :type
                         (common-lisp:or heat-map-sort-configuration
                                         common-lisp:null)
                         :accessor %heat-map-configuration-sort-configuration
                         :initform common-lisp:nil)
                        (field-wells :initarg :field-wells :type
                         (common-lisp:or heat-map-field-wells common-lisp:null)
                         :accessor %heat-map-configuration-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'heat-map-configuration 'make-heat-map-configuration))
 (common-lisp:defun make-heat-map-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tooltip data-labels legend color-scale
                     column-label-options row-label-options sort-configuration
                     field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'heat-map-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          heat-map-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          heat-map-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-label-options))
      (common-lisp:list
       (common-lisp:cons "RowLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-label-options))
      (common-lisp:list
       (common-lisp:cons "ColumnLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-scale))
      (common-lisp:list
       (common-lisp:cons "ColorScale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legend))
      (common-lisp:list
       (common-lisp:cons "Legend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-labels))
      (common-lisp:list
       (common-lisp:cons "DataLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip))
      (common-lisp:list
       (common-lisp:cons "Tooltip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          heat-map-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype heat-map-dimension-field-list ()
   '(trivial-types:proper-list dimension-field))
 (common-lisp:defun |make-heat-map-dimension-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass heat-map-field-wells common-lisp:nil
                       ((heat-map-aggregated-field-wells :initarg
                         :heat-map-aggregated-field-wells :type
                         (common-lisp:or heat-map-aggregated-field-wells
                                         common-lisp:null)
                         :accessor
                         %heat-map-field-wells-heat-map-aggregated-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'heat-map-field-wells 'make-heat-map-field-wells))
 (common-lisp:defun make-heat-map-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key heat-map-aggregated-field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'heat-map-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input heat-map-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input heat-map-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'heat-map-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "HeatMapAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input heat-map-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype heat-map-measure-field-list ()
   '(trivial-types:proper-list measure-field))
 (common-lisp:defun |make-heat-map-measure-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list measure-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass heat-map-sort-configuration common-lisp:nil
                       ((heat-map-column-items-limit-configuration :initarg
                         :heat-map-column-items-limit-configuration :type
                         (common-lisp:or items-limit-configuration
                                         common-lisp:null)
                         :accessor
                         %heat-map-sort-configuration-heat-map-column-items-limit-configuration
                         :initform common-lisp:nil)
                        (heat-map-row-items-limit-configuration :initarg
                         :heat-map-row-items-limit-configuration :type
                         (common-lisp:or items-limit-configuration
                                         common-lisp:null)
                         :accessor
                         %heat-map-sort-configuration-heat-map-row-items-limit-configuration
                         :initform common-lisp:nil)
                        (heat-map-column-sort :initarg :heat-map-column-sort
                         :type
                         (common-lisp:or field-sort-options-list
                                         common-lisp:null)
                         :accessor
                         %heat-map-sort-configuration-heat-map-column-sort
                         :initform common-lisp:nil)
                        (heat-map-row-sort :initarg :heat-map-row-sort :type
                         (common-lisp:or field-sort-options-list
                                         common-lisp:null)
                         :accessor
                         %heat-map-sort-configuration-heat-map-row-sort
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'heat-map-sort-configuration
                    'make-heat-map-sort-configuration))
 (common-lisp:defun make-heat-map-sort-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key heat-map-column-items-limit-configuration
                     heat-map-row-items-limit-configuration
                     heat-map-column-sort heat-map-row-sort)
   (common-lisp:apply #'common-lisp:make-instance 'heat-map-sort-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          heat-map-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          heat-map-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'heat-map-row-sort))
      (common-lisp:list
       (common-lisp:cons "HeatMapRowSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'heat-map-column-sort))
      (common-lisp:list
       (common-lisp:cons "HeatMapColumnSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'heat-map-row-items-limit-configuration))
      (common-lisp:list
       (common-lisp:cons "HeatMapRowItemsLimitConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'heat-map-column-items-limit-configuration))
      (common-lisp:list
       (common-lisp:cons "HeatMapColumnItemsLimitConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          heat-map-sort-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass heat-map-visual common-lisp:nil
                       ((actions :initarg :actions :type
                         (common-lisp:or visual-custom-action-list
                                         common-lisp:null)
                         :accessor %heat-map-visual-actions :initform
                         common-lisp:nil)
                        (column-hierarchies :initarg :column-hierarchies :type
                         (common-lisp:or column-hierarchy-list
                                         common-lisp:null)
                         :accessor %heat-map-visual-column-hierarchies
                         :initform common-lisp:nil)
                        (chart-configuration :initarg :chart-configuration
                         :type
                         (common-lisp:or heat-map-configuration
                                         common-lisp:null)
                         :accessor %heat-map-visual-chart-configuration
                         :initform common-lisp:nil)
                        (subtitle :initarg :subtitle :type
                         (common-lisp:or visual-subtitle-label-options
                                         common-lisp:null)
                         :accessor %heat-map-visual-subtitle :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or visual-title-label-options
                                         common-lisp:null)
                         :accessor %heat-map-visual-title :initform
                         common-lisp:nil)
                        (visual-id :initarg :visual-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %heat-map-visual-visual-id :initform
                         (common-lisp:error ":visual-id is required"))))
 (common-lisp:export (common-lisp:list 'heat-map-visual 'make-heat-map-visual))
 (common-lisp:defun make-heat-map-visual
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key actions column-hierarchies
                     chart-configuration subtitle title visual-id)
   (common-lisp:apply #'common-lisp:make-instance 'heat-map-visual
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input heat-map-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input heat-map-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-hierarchies))
      (common-lisp:list
       (common-lisp:cons "ColumnHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input heat-map-visual))
   common-lisp:nil))
(common-lisp:deftype hex-color () 'common-lisp:string)
(common-lisp:deftype hex-color-with-transparency () 'common-lisp:string)
(common-lisp:deftype hierarchy-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass histogram-aggregated-field-wells common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or histogram-measure-field-list
                                         common-lisp:null)
                         :accessor %histogram-aggregated-field-wells-values
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'histogram-aggregated-field-wells
                    'make-histogram-aggregated-field-wells))
 (common-lisp:defun make-histogram-aggregated-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values)
   (common-lisp:apply #'common-lisp:make-instance
                      'histogram-aggregated-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          histogram-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          histogram-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          histogram-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass histogram-bin-options common-lisp:nil
                       ((start-value :initarg :start-value :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %histogram-bin-options-start-value :initform
                         common-lisp:nil)
                        (bin-width :initarg :bin-width :type
                         (common-lisp:or bin-width-options common-lisp:null)
                         :accessor %histogram-bin-options-bin-width :initform
                         common-lisp:nil)
                        (bin-count :initarg :bin-count :type
                         (common-lisp:or bin-count-options common-lisp:null)
                         :accessor %histogram-bin-options-bin-count :initform
                         common-lisp:nil)
                        (selected-bin-type :initarg :selected-bin-type :type
                         (common-lisp:or histogram-bin-type common-lisp:null)
                         :accessor %histogram-bin-options-selected-bin-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'histogram-bin-options 'make-histogram-bin-options))
 (common-lisp:defun make-histogram-bin-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start-value bin-width bin-count
                     selected-bin-type)
   (common-lisp:apply #'common-lisp:make-instance 'histogram-bin-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          histogram-bin-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          histogram-bin-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-bin-type))
      (common-lisp:list
       (common-lisp:cons "SelectedBinType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bin-count))
      (common-lisp:list
       (common-lisp:cons "BinCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bin-width))
      (common-lisp:list
       (common-lisp:cons "BinWidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-value))
      (common-lisp:list
       (common-lisp:cons "StartValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          histogram-bin-options))
   common-lisp:nil))
(common-lisp:deftype histogram-bin-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass histogram-configuration common-lisp:nil
                       ((visual-palette :initarg :visual-palette :type
                         (common-lisp:or visual-palette common-lisp:null)
                         :accessor %histogram-configuration-visual-palette
                         :initform common-lisp:nil)
                        (tooltip :initarg :tooltip :type
                         (common-lisp:or tooltip-options common-lisp:null)
                         :accessor %histogram-configuration-tooltip :initform
                         common-lisp:nil)
                        (data-labels :initarg :data-labels :type
                         (common-lisp:or data-label-options common-lisp:null)
                         :accessor %histogram-configuration-data-labels
                         :initform common-lisp:nil)
                        (bin-options :initarg :bin-options :type
                         (common-lisp:or histogram-bin-options
                                         common-lisp:null)
                         :accessor %histogram-configuration-bin-options
                         :initform common-lisp:nil)
                        (yaxis-display-options :initarg :yaxis-display-options
                         :type
                         (common-lisp:or axis-display-options common-lisp:null)
                         :accessor
                         %histogram-configuration-yaxis-display-options
                         :initform common-lisp:nil)
                        (xaxis-label-options :initarg :xaxis-label-options
                         :type
                         (common-lisp:or chart-axis-label-options
                                         common-lisp:null)
                         :accessor %histogram-configuration-xaxis-label-options
                         :initform common-lisp:nil)
                        (xaxis-display-options :initarg :xaxis-display-options
                         :type
                         (common-lisp:or axis-display-options common-lisp:null)
                         :accessor
                         %histogram-configuration-xaxis-display-options
                         :initform common-lisp:nil)
                        (field-wells :initarg :field-wells :type
                         (common-lisp:or histogram-field-wells
                                         common-lisp:null)
                         :accessor %histogram-configuration-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'histogram-configuration 'make-histogram-configuration))
 (common-lisp:defun make-histogram-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visual-palette tooltip data-labels
                     bin-options yaxis-display-options xaxis-label-options
                     xaxis-display-options field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'histogram-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          histogram-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          histogram-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'xaxis-display-options))
      (common-lisp:list
       (common-lisp:cons "XAxisDisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xaxis-label-options))
      (common-lisp:list
       (common-lisp:cons "XAxisLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'yaxis-display-options))
      (common-lisp:list
       (common-lisp:cons "YAxisDisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bin-options))
      (common-lisp:list
       (common-lisp:cons "BinOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-labels))
      (common-lisp:list
       (common-lisp:cons "DataLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip))
      (common-lisp:list
       (common-lisp:cons "Tooltip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-palette))
      (common-lisp:list
       (common-lisp:cons "VisualPalette"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          histogram-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass histogram-field-wells common-lisp:nil
                       ((histogram-aggregated-field-wells :initarg
                         :histogram-aggregated-field-wells :type
                         (common-lisp:or histogram-aggregated-field-wells
                                         common-lisp:null)
                         :accessor
                         %histogram-field-wells-histogram-aggregated-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'histogram-field-wells 'make-histogram-field-wells))
 (common-lisp:defun make-histogram-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key histogram-aggregated-field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'histogram-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          histogram-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          histogram-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'histogram-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "HistogramAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          histogram-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype histogram-measure-field-list ()
   '(trivial-types:proper-list measure-field))
 (common-lisp:defun |make-histogram-measure-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list measure-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass histogram-visual common-lisp:nil
                       ((actions :initarg :actions :type
                         (common-lisp:or visual-custom-action-list
                                         common-lisp:null)
                         :accessor %histogram-visual-actions :initform
                         common-lisp:nil)
                        (chart-configuration :initarg :chart-configuration
                         :type
                         (common-lisp:or histogram-configuration
                                         common-lisp:null)
                         :accessor %histogram-visual-chart-configuration
                         :initform common-lisp:nil)
                        (subtitle :initarg :subtitle :type
                         (common-lisp:or visual-subtitle-label-options
                                         common-lisp:null)
                         :accessor %histogram-visual-subtitle :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or visual-title-label-options
                                         common-lisp:null)
                         :accessor %histogram-visual-title :initform
                         common-lisp:nil)
                        (visual-id :initarg :visual-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %histogram-visual-visual-id :initform
                         (common-lisp:error ":visual-id is required"))))
 (common-lisp:export
  (common-lisp:list 'histogram-visual 'make-histogram-visual))
 (common-lisp:defun make-histogram-visual
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key actions chart-configuration subtitle
                     title visual-id)
   (common-lisp:apply #'common-lisp:make-instance 'histogram-visual
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input histogram-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input histogram-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input histogram-visual))
   common-lisp:nil))
(common-lisp:deftype horizontal-text-alignment () 'common-lisp:string)
(common-lisp:deftype host () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass iampolicy-assignment common-lisp:nil
                       ((assignment-status :initarg :assignment-status :type
                         (common-lisp:or assignment-status common-lisp:null)
                         :accessor %iampolicy-assignment-assignment-status
                         :initform common-lisp:nil)
                        (identities :initarg :identities :type
                         (common-lisp:or identity-map common-lisp:null)
                         :accessor %iampolicy-assignment-identities :initform
                         common-lisp:nil)
                        (policy-arn :initarg :policy-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %iampolicy-assignment-policy-arn :initform
                         common-lisp:nil)
                        (assignment-name :initarg :assignment-name :type
                         (common-lisp:or iampolicy-assignment-name
                                         common-lisp:null)
                         :accessor %iampolicy-assignment-assignment-name
                         :initform common-lisp:nil)
                        (assignment-id :initarg :assignment-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %iampolicy-assignment-assignment-id :initform
                         common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %iampolicy-assignment-aws-account-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'iampolicy-assignment 'make-iampolicy-assignment))
 (common-lisp:defun make-iampolicy-assignment
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key assignment-status identities policy-arn
                     assignment-name assignment-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'iampolicy-assignment
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input iampolicy-assignment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input iampolicy-assignment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "AwsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-id))
      (common-lisp:list
       (common-lisp:cons "AssignmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-name))
      (common-lisp:list
       (common-lisp:cons "AssignmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identities))
      (common-lisp:list
       (common-lisp:cons "Identities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-status))
      (common-lisp:list
       (common-lisp:cons "AssignmentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input iampolicy-assignment))
   common-lisp:nil))
(common-lisp:deftype iampolicy-assignment-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass iampolicy-assignment-summary common-lisp:nil
                       ((assignment-status :initarg :assignment-status :type
                         (common-lisp:or assignment-status common-lisp:null)
                         :accessor
                         %iampolicy-assignment-summary-assignment-status
                         :initform common-lisp:nil)
                        (assignment-name :initarg :assignment-name :type
                         (common-lisp:or iampolicy-assignment-name
                                         common-lisp:null)
                         :accessor
                         %iampolicy-assignment-summary-assignment-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'iampolicy-assignment-summary
                    'make-iampolicy-assignment-summary))
 (common-lisp:defun make-iampolicy-assignment-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key assignment-status assignment-name)
   (common-lisp:apply #'common-lisp:make-instance 'iampolicy-assignment-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          iampolicy-assignment-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          iampolicy-assignment-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-name))
      (common-lisp:list
       (common-lisp:cons "AssignmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-status))
      (common-lisp:list
       (common-lisp:cons "AssignmentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          iampolicy-assignment-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype iampolicy-assignment-summary-list ()
   '(trivial-types:proper-list iampolicy-assignment-summary))
 (common-lisp:defun |make-iampolicy-assignment-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            iampolicy-assignment-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype icon () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype identity-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-identity-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype identity-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype identity-name-list ()
   '(trivial-types:proper-list identity-name))
 (common-lisp:defun |make-identity-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list identity-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype identity-store () 'common-lisp:string)
(common-lisp:deftype identity-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition identity-type-not-supported-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       identity-type-not-supported-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       identity-type-not-supported-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'identity-type-not-supported-exception
                    'identity-type-not-supported-exception-message
                    'identity-type-not-supported-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass incremental-refresh common-lisp:nil
                       ((lookback-window :initarg :lookback-window :type
                         (common-lisp:or lookback-window common-lisp:null)
                         :accessor %incremental-refresh-lookback-window
                         :initform
                         (common-lisp:error ":lookback-window is required"))))
 (common-lisp:export
  (common-lisp:list 'incremental-refresh 'make-incremental-refresh))
 (common-lisp:defun make-incremental-refresh
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lookback-window)
   (common-lisp:apply #'common-lisp:make-instance 'incremental-refresh
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input incremental-refresh))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input incremental-refresh))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lookback-window))
      (common-lisp:list
       (common-lisp:cons "LookbackWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input incremental-refresh))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ingestion common-lisp:nil
                       ((request-type :initarg :request-type :type
                         (common-lisp:or ingestion-request-type
                                         common-lisp:null)
                         :accessor %ingestion-request-type :initform
                         common-lisp:nil)
                        (request-source :initarg :request-source :type
                         (common-lisp:or ingestion-request-source
                                         common-lisp:null)
                         :accessor %ingestion-request-source :initform
                         common-lisp:nil)
                        (ingestion-size-in-bytes :initarg
                         :ingestion-size-in-bytes :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %ingestion-ingestion-size-in-bytes :initform
                         common-lisp:nil)
                        (ingestion-time-in-seconds :initarg
                         :ingestion-time-in-seconds :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %ingestion-ingestion-time-in-seconds :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %ingestion-created-time :initform
                         (common-lisp:error ":created-time is required"))
                        (queue-info :initarg :queue-info :type
                         (common-lisp:or queue-info common-lisp:null) :accessor
                         %ingestion-queue-info :initform common-lisp:nil)
                        (row-info :initarg :row-info :type
                         (common-lisp:or row-info common-lisp:null) :accessor
                         %ingestion-row-info :initform common-lisp:nil)
                        (error-info :initarg :error-info :type
                         (common-lisp:or error-info common-lisp:null) :accessor
                         %ingestion-error-info :initform common-lisp:nil)
                        (ingestion-status :initarg :ingestion-status :type
                         (common-lisp:or ingestion-status common-lisp:null)
                         :accessor %ingestion-ingestion-status :initform
                         (common-lisp:error ":ingestion-status is required"))
                        (ingestion-id :initarg :ingestion-id :type
                         (common-lisp:or ingestion-id common-lisp:null)
                         :accessor %ingestion-ingestion-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %ingestion-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export (common-lisp:list 'ingestion 'make-ingestion))
 (common-lisp:defun make-ingestion
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-type request-source
                     ingestion-size-in-bytes ingestion-time-in-seconds
                     created-time queue-info row-info error-info
                     ingestion-status ingestion-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'ingestion
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ingestion))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ingestion))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-id))
      (common-lisp:list
       (common-lisp:cons "IngestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-status))
      (common-lisp:list
       (common-lisp:cons "IngestionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-info))
      (common-lisp:list
       (common-lisp:cons "ErrorInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-info))
      (common-lisp:list
       (common-lisp:cons "RowInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-info))
      (common-lisp:list
       (common-lisp:cons "QueueInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingestion-time-in-seconds))
      (common-lisp:list
       (common-lisp:cons "IngestionTimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingestion-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "IngestionSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-source))
      (common-lisp:list
       (common-lisp:cons "RequestSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-type))
      (common-lisp:list
       (common-lisp:cons "RequestType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ingestion))
   common-lisp:nil))
(common-lisp:deftype ingestion-error-type () 'common-lisp:string)
(common-lisp:deftype ingestion-id () 'common-lisp:string)
(common-lisp:deftype ingestion-max-results () 'common-lisp:integer)
(common-lisp:deftype ingestion-request-source () 'common-lisp:string)
(common-lisp:deftype ingestion-request-type () 'common-lisp:string)
(common-lisp:deftype ingestion-status () 'common-lisp:string)
(common-lisp:deftype ingestion-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ingestions () '(trivial-types:proper-list ingestion))
 (common-lisp:defun |make-ingestions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ingestion))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass input-column common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or input-column-data-type
                                         common-lisp:null)
                         :accessor %input-column-type :initform
                         (common-lisp:error ":type is required"))
                        (name :initarg :name :type
                         (common-lisp:or column-name common-lisp:null)
                         :accessor %input-column-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'input-column 'make-input-column))
 (common-lisp:defun make-input-column
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type name)
   (common-lisp:apply #'common-lisp:make-instance 'input-column
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-column))
   common-lisp:nil))
(common-lisp:deftype input-column-data-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype input-column-list ()
   '(trivial-types:proper-list input-column))
 (common-lisp:defun |make-input-column-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-column))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass insight-configuration common-lisp:nil
                       ((custom-narrative :initarg :custom-narrative :type
                         (common-lisp:or custom-narrative-options
                                         common-lisp:null)
                         :accessor %insight-configuration-custom-narrative
                         :initform common-lisp:nil)
                        (computations :initarg :computations :type
                         (common-lisp:or computation-list common-lisp:null)
                         :accessor %insight-configuration-computations
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'insight-configuration 'make-insight-configuration))
 (common-lisp:defun make-insight-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-narrative computations)
   (common-lisp:apply #'common-lisp:make-instance 'insight-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          insight-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          insight-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computations))
      (common-lisp:list
       (common-lisp:cons "Computations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-narrative))
      (common-lisp:list
       (common-lisp:cons "CustomNarrative"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          insight-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass insight-visual common-lisp:nil
                       ((data-set-identifier :initarg :data-set-identifier
                         :type
                         (common-lisp:or data-set-identifier common-lisp:null)
                         :accessor %insight-visual-data-set-identifier
                         :initform
                         (common-lisp:error
                          ":data-set-identifier is required"))
                        (actions :initarg :actions :type
                         (common-lisp:or visual-custom-action-list
                                         common-lisp:null)
                         :accessor %insight-visual-actions :initform
                         common-lisp:nil)
                        (insight-configuration :initarg :insight-configuration
                         :type
                         (common-lisp:or insight-configuration
                                         common-lisp:null)
                         :accessor %insight-visual-insight-configuration
                         :initform common-lisp:nil)
                        (subtitle :initarg :subtitle :type
                         (common-lisp:or visual-subtitle-label-options
                                         common-lisp:null)
                         :accessor %insight-visual-subtitle :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or visual-title-label-options
                                         common-lisp:null)
                         :accessor %insight-visual-title :initform
                         common-lisp:nil)
                        (visual-id :initarg :visual-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %insight-visual-visual-id :initform
                         (common-lisp:error ":visual-id is required"))))
 (common-lisp:export (common-lisp:list 'insight-visual 'make-insight-visual))
 (common-lisp:defun make-insight-visual
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-set-identifier actions
                     insight-configuration subtitle title visual-id)
   (common-lisp:apply #'common-lisp:make-instance 'insight-visual
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input insight-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input insight-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'insight-configuration))
      (common-lisp:list
       (common-lisp:cons "InsightConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-identifier))
      (common-lisp:list
       (common-lisp:cons "DataSetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input insight-visual))
   common-lisp:nil))
(common-lisp:deftype instance-id () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype integer-default-value-list ()
   '(trivial-types:proper-list sensitive-long-object))
 (common-lisp:defun |make-integer-default-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sensitive-long-object))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass integer-default-values common-lisp:nil
                       ((static-values :initarg :static-values :type
                         (common-lisp:or integer-default-value-list
                                         common-lisp:null)
                         :accessor %integer-default-values-static-values
                         :initform common-lisp:nil)
                        (dynamic-value :initarg :dynamic-value :type
                         (common-lisp:or dynamic-default-value
                                         common-lisp:null)
                         :accessor %integer-default-values-dynamic-value
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'integer-default-values 'make-integer-default-values))
 (common-lisp:defun make-integer-default-values
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key static-values dynamic-value)
   (common-lisp:apply #'common-lisp:make-instance 'integer-default-values
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          integer-default-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          integer-default-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamic-value))
      (common-lisp:list
       (common-lisp:cons "DynamicValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-values))
      (common-lisp:list
       (common-lisp:cons "StaticValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          integer-default-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass integer-parameter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or sensitive-long-list common-lisp:null)
                         :accessor %integer-parameter-values :initform
                         (common-lisp:error ":values is required"))
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %integer-parameter-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'integer-parameter 'make-integer-parameter))
 (common-lisp:defun make-integer-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values name)
   (common-lisp:apply #'common-lisp:make-instance 'integer-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input integer-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input integer-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input integer-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass integer-parameter-declaration common-lisp:nil
                       ((value-when-unset :initarg :value-when-unset :type
                         (common-lisp:or integer-value-when-unset-configuration
                                         common-lisp:null)
                         :accessor
                         %integer-parameter-declaration-value-when-unset
                         :initform common-lisp:nil)
                        (default-values :initarg :default-values :type
                         (common-lisp:or integer-default-values
                                         common-lisp:null)
                         :accessor
                         %integer-parameter-declaration-default-values
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or parameter-name common-lisp:null)
                         :accessor %integer-parameter-declaration-name
                         :initform (common-lisp:error ":name is required"))
                        (parameter-value-type :initarg :parameter-value-type
                         :type
                         (common-lisp:or parameter-value-type common-lisp:null)
                         :accessor
                         %integer-parameter-declaration-parameter-value-type
                         :initform
                         (common-lisp:error
                          ":parameter-value-type is required"))))
 (common-lisp:export
  (common-lisp:list 'integer-parameter-declaration
                    'make-integer-parameter-declaration))
 (common-lisp:defun make-integer-parameter-declaration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value-when-unset default-values name
                     parameter-value-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'integer-parameter-declaration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          integer-parameter-declaration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          integer-parameter-declaration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-value-type))
      (common-lisp:list
       (common-lisp:cons "ParameterValueType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-values))
      (common-lisp:list
       (common-lisp:cons "DefaultValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-when-unset))
      (common-lisp:list
       (common-lisp:cons "ValueWhenUnset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          integer-parameter-declaration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype integer-parameter-list ()
   '(trivial-types:proper-list integer-parameter))
 (common-lisp:defun |make-integer-parameter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list integer-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass integer-value-when-unset-configuration common-lisp:nil
                       ((custom-value :initarg :custom-value :type
                         (common-lisp:or sensitive-long common-lisp:null)
                         :accessor
                         %integer-value-when-unset-configuration-custom-value
                         :initform common-lisp:nil)
                        (value-when-unset-option :initarg
                         :value-when-unset-option :type
                         (common-lisp:or value-when-unset-option
                                         common-lisp:null)
                         :accessor
                         %integer-value-when-unset-configuration-value-when-unset-option
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'integer-value-when-unset-configuration
                    'make-integer-value-when-unset-configuration))
 (common-lisp:defun make-integer-value-when-unset-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-value value-when-unset-option)
   (common-lisp:apply #'common-lisp:make-instance
                      'integer-value-when-unset-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          integer-value-when-unset-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          integer-value-when-unset-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-when-unset-option))
      (common-lisp:list
       (common-lisp:cons "ValueWhenUnsetOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-value))
      (common-lisp:list
       (common-lisp:cons "CustomValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          integer-value-when-unset-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-failure-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-failure-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       internal-failure-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'internal-failure-exception
                    'internal-failure-exception-message
                    'internal-failure-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-next-token-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       invalid-next-token-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token-exception
                    'invalid-next-token-exception-message
                    'invalid-next-token-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-value-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-value-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       invalid-parameter-value-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-value-exception
                    'invalid-parameter-value-exception-message
                    'invalid-parameter-value-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       invalid-request-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message
                    'invalid-request-exception-request-id)))
(common-lisp:deftype ip-restriction-rule-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ip-restriction-rule-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-ip-restriction-rule-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass items-limit-configuration common-lisp:nil
                       ((other-categories :initarg :other-categories :type
                         (common-lisp:or other-categories common-lisp:null)
                         :accessor %items-limit-configuration-other-categories
                         :initform common-lisp:nil)
                        (items-limit :initarg :items-limit :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %items-limit-configuration-items-limit :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'items-limit-configuration
                    'make-items-limit-configuration))
 (common-lisp:defun make-items-limit-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key other-categories items-limit)
   (common-lisp:apply #'common-lisp:make-instance 'items-limit-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          items-limit-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          items-limit-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items-limit))
      (common-lisp:list
       (common-lisp:cons "ItemsLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'other-categories))
      (common-lisp:list
       (common-lisp:cons "OtherCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          items-limit-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass jira-parameters common-lisp:nil
                       ((site-base-url :initarg :site-base-url :type
                         (common-lisp:or site-base-url common-lisp:null)
                         :accessor %jira-parameters-site-base-url :initform
                         (common-lisp:error ":site-base-url is required"))))
 (common-lisp:export (common-lisp:list 'jira-parameters 'make-jira-parameters))
 (common-lisp:defun make-jira-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key site-base-url)
   (common-lisp:apply #'common-lisp:make-instance 'jira-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input jira-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input jira-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'site-base-url))
      (common-lisp:list
       (common-lisp:cons "SiteBaseUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input jira-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass join-instruction common-lisp:nil
                       ((on-clause :initarg :on-clause :type
                         (common-lisp:or on-clause common-lisp:null) :accessor
                         %join-instruction-on-clause :initform
                         (common-lisp:error ":on-clause is required"))
                        (type :initarg :type :type
                         (common-lisp:or join-type common-lisp:null) :accessor
                         %join-instruction-type :initform
                         (common-lisp:error ":type is required"))
                        (right-join-key-properties :initarg
                         :right-join-key-properties :type
                         (common-lisp:or join-key-properties common-lisp:null)
                         :accessor %join-instruction-right-join-key-properties
                         :initform common-lisp:nil)
                        (left-join-key-properties :initarg
                         :left-join-key-properties :type
                         (common-lisp:or join-key-properties common-lisp:null)
                         :accessor %join-instruction-left-join-key-properties
                         :initform common-lisp:nil)
                        (right-operand :initarg :right-operand :type
                         (common-lisp:or logical-table-id common-lisp:null)
                         :accessor %join-instruction-right-operand :initform
                         (common-lisp:error ":right-operand is required"))
                        (left-operand :initarg :left-operand :type
                         (common-lisp:or logical-table-id common-lisp:null)
                         :accessor %join-instruction-left-operand :initform
                         (common-lisp:error ":left-operand is required"))))
 (common-lisp:export
  (common-lisp:list 'join-instruction 'make-join-instruction))
 (common-lisp:defun make-join-instruction
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key on-clause type right-join-key-properties
                     left-join-key-properties right-operand left-operand)
   (common-lisp:apply #'common-lisp:make-instance 'join-instruction
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input join-instruction))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input join-instruction))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'left-operand))
      (common-lisp:list
       (common-lisp:cons "LeftOperand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'right-operand))
      (common-lisp:list
       (common-lisp:cons "RightOperand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'left-join-key-properties))
      (common-lisp:list
       (common-lisp:cons "LeftJoinKeyProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'right-join-key-properties))
      (common-lisp:list
       (common-lisp:cons "RightJoinKeyProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-clause))
      (common-lisp:list
       (common-lisp:cons "OnClause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input join-instruction))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass join-key-properties common-lisp:nil
                       ((unique-key :initarg :unique-key :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %join-key-properties-unique-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'join-key-properties 'make-join-key-properties))
 (common-lisp:defun make-join-key-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unique-key)
   (common-lisp:apply #'common-lisp:make-instance 'join-key-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input join-key-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input join-key-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unique-key))
      (common-lisp:list
       (common-lisp:cons "UniqueKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input join-key-properties))
   common-lisp:nil))
(common-lisp:deftype join-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kpiconditional-formatting common-lisp:nil
                       ((conditional-formatting-options :initarg
                         :conditional-formatting-options :type
                         (common-lisp:or kpiconditional-formatting-option-list
                                         common-lisp:null)
                         :accessor
                         %kpiconditional-formatting-conditional-formatting-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'kpiconditional-formatting
                    'make-kpiconditional-formatting))
 (common-lisp:defun make-kpiconditional-formatting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key conditional-formatting-options)
   (common-lisp:apply #'common-lisp:make-instance 'kpiconditional-formatting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kpiconditional-formatting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kpiconditional-formatting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-formatting-options))
      (common-lisp:list
       (common-lisp:cons "ConditionalFormattingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kpiconditional-formatting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kpiconditional-formatting-option common-lisp:nil
                       ((progress-bar :initarg :progress-bar :type
                         (common-lisp:or kpiprogress-bar-conditional-formatting
                                         common-lisp:null)
                         :accessor
                         %kpiconditional-formatting-option-progress-bar
                         :initform common-lisp:nil)
                        (primary-value :initarg :primary-value :type
                         (common-lisp:or
                          kpiprimary-value-conditional-formatting
                          common-lisp:null)
                         :accessor
                         %kpiconditional-formatting-option-primary-value
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'kpiconditional-formatting-option
                    'make-kpiconditional-formatting-option))
 (common-lisp:defun make-kpiconditional-formatting-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key progress-bar primary-value)
   (common-lisp:apply #'common-lisp:make-instance
                      'kpiconditional-formatting-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kpiconditional-formatting-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kpiconditional-formatting-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-value))
      (common-lisp:list
       (common-lisp:cons "PrimaryValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress-bar))
      (common-lisp:list
       (common-lisp:cons "ProgressBar"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kpiconditional-formatting-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype kpiconditional-formatting-option-list ()
   '(trivial-types:proper-list kpiconditional-formatting-option))
 (common-lisp:defun |make-kpiconditional-formatting-option-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            kpiconditional-formatting-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass kpiconfiguration common-lisp:nil
                       ((kpioptions :initarg :kpioptions :type
                         (common-lisp:or kpioptions common-lisp:null) :accessor
                         %kpiconfiguration-kpioptions :initform
                         common-lisp:nil)
                        (sort-configuration :initarg :sort-configuration :type
                         (common-lisp:or kpisort-configuration
                                         common-lisp:null)
                         :accessor %kpiconfiguration-sort-configuration
                         :initform common-lisp:nil)
                        (field-wells :initarg :field-wells :type
                         (common-lisp:or kpifield-wells common-lisp:null)
                         :accessor %kpiconfiguration-field-wells :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'kpiconfiguration 'make-kpiconfiguration))
 (common-lisp:defun make-kpiconfiguration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kpioptions sort-configuration
                     field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'kpiconfiguration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kpiconfiguration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kpiconfiguration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kpioptions))
      (common-lisp:list
       (common-lisp:cons "KPIOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kpiconfiguration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kpifield-wells common-lisp:nil
                       ((trend-groups :initarg :trend-groups :type
                         (common-lisp:or dimension-field-list common-lisp:null)
                         :accessor %kpifield-wells-trend-groups :initform
                         common-lisp:nil)
                        (target-values :initarg :target-values :type
                         (common-lisp:or measure-field-list common-lisp:null)
                         :accessor %kpifield-wells-target-values :initform
                         common-lisp:nil)
                        (values :initarg :values :type
                         (common-lisp:or measure-field-list common-lisp:null)
                         :accessor %kpifield-wells-values :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'kpifield-wells 'make-kpifield-wells))
 (common-lisp:defun make-kpifield-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key trend-groups target-values values)
   (common-lisp:apply #'common-lisp:make-instance 'kpifield-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kpifield-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kpifield-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-values))
      (common-lisp:list
       (common-lisp:cons "TargetValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trend-groups))
      (common-lisp:list
       (common-lisp:cons "TrendGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kpifield-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kpioptions common-lisp:nil
                       ((secondary-value-font-configuration :initarg
                         :secondary-value-font-configuration :type
                         (common-lisp:or font-configuration common-lisp:null)
                         :accessor
                         %kpioptions-secondary-value-font-configuration
                         :initform common-lisp:nil)
                        (primary-value-font-configuration :initarg
                         :primary-value-font-configuration :type
                         (common-lisp:or font-configuration common-lisp:null)
                         :accessor %kpioptions-primary-value-font-configuration
                         :initform common-lisp:nil)
                        (primary-value-display-type :initarg
                         :primary-value-display-type :type
                         (common-lisp:or primary-value-display-type
                                         common-lisp:null)
                         :accessor %kpioptions-primary-value-display-type
                         :initform common-lisp:nil)
                        (comparison :initarg :comparison :type
                         (common-lisp:or comparison-configuration
                                         common-lisp:null)
                         :accessor %kpioptions-comparison :initform
                         common-lisp:nil)
                        (secondary-value :initarg :secondary-value :type
                         (common-lisp:or secondary-value-options
                                         common-lisp:null)
                         :accessor %kpioptions-secondary-value :initform
                         common-lisp:nil)
                        (trend-arrows :initarg :trend-arrows :type
                         (common-lisp:or trend-arrow-options common-lisp:null)
                         :accessor %kpioptions-trend-arrows :initform
                         common-lisp:nil)
                        (progress-bar :initarg :progress-bar :type
                         (common-lisp:or progress-bar-options common-lisp:null)
                         :accessor %kpioptions-progress-bar :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'kpioptions 'make-kpioptions))
 (common-lisp:defun make-kpioptions
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key secondary-value-font-configuration
                     primary-value-font-configuration
                     primary-value-display-type comparison secondary-value
                     trend-arrows progress-bar)
   (common-lisp:apply #'common-lisp:make-instance 'kpioptions
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kpioptions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kpioptions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress-bar))
      (common-lisp:list
       (common-lisp:cons "ProgressBar"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trend-arrows))
      (common-lisp:list
       (common-lisp:cons "TrendArrows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secondary-value))
      (common-lisp:list
       (common-lisp:cons "SecondaryValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison))
      (common-lisp:list
       (common-lisp:cons "Comparison"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-value-display-type))
      (common-lisp:list
       (common-lisp:cons "PrimaryValueDisplayType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-value-font-configuration))
      (common-lisp:list
       (common-lisp:cons "PrimaryValueFontConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secondary-value-font-configuration))
      (common-lisp:list
       (common-lisp:cons "SecondaryValueFontConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kpioptions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kpiprimary-value-conditional-formatting common-lisp:nil
                       ((icon :initarg :icon :type
                         (common-lisp:or conditional-formatting-icon
                                         common-lisp:null)
                         :accessor
                         %kpiprimary-value-conditional-formatting-icon
                         :initform common-lisp:nil)
                        (text-color :initarg :text-color :type
                         (common-lisp:or conditional-formatting-color
                                         common-lisp:null)
                         :accessor
                         %kpiprimary-value-conditional-formatting-text-color
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'kpiprimary-value-conditional-formatting
                    'make-kpiprimary-value-conditional-formatting))
 (common-lisp:defun make-kpiprimary-value-conditional-formatting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key icon text-color)
   (common-lisp:apply #'common-lisp:make-instance
                      'kpiprimary-value-conditional-formatting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kpiprimary-value-conditional-formatting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kpiprimary-value-conditional-formatting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-color))
      (common-lisp:list
       (common-lisp:cons "TextColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icon))
      (common-lisp:list
       (common-lisp:cons "Icon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kpiprimary-value-conditional-formatting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kpiprogress-bar-conditional-formatting common-lisp:nil
                       ((foreground-color :initarg :foreground-color :type
                         (common-lisp:or conditional-formatting-color
                                         common-lisp:null)
                         :accessor
                         %kpiprogress-bar-conditional-formatting-foreground-color
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'kpiprogress-bar-conditional-formatting
                    'make-kpiprogress-bar-conditional-formatting))
 (common-lisp:defun make-kpiprogress-bar-conditional-formatting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key foreground-color)
   (common-lisp:apply #'common-lisp:make-instance
                      'kpiprogress-bar-conditional-formatting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kpiprogress-bar-conditional-formatting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kpiprogress-bar-conditional-formatting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'foreground-color))
      (common-lisp:list
       (common-lisp:cons "ForegroundColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kpiprogress-bar-conditional-formatting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kpisort-configuration common-lisp:nil
                       ((trend-group-sort :initarg :trend-group-sort :type
                         (common-lisp:or field-sort-options-list
                                         common-lisp:null)
                         :accessor %kpisort-configuration-trend-group-sort
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'kpisort-configuration 'make-kpisort-configuration))
 (common-lisp:defun make-kpisort-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key trend-group-sort)
   (common-lisp:apply #'common-lisp:make-instance 'kpisort-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kpisort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kpisort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trend-group-sort))
      (common-lisp:list
       (common-lisp:cons "TrendGroupSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kpisort-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kpivisual common-lisp:nil
                       ((column-hierarchies :initarg :column-hierarchies :type
                         (common-lisp:or column-hierarchy-list
                                         common-lisp:null)
                         :accessor %kpivisual-column-hierarchies :initform
                         common-lisp:nil)
                        (actions :initarg :actions :type
                         (common-lisp:or visual-custom-action-list
                                         common-lisp:null)
                         :accessor %kpivisual-actions :initform
                         common-lisp:nil)
                        (conditional-formatting :initarg
                         :conditional-formatting :type
                         (common-lisp:or kpiconditional-formatting
                                         common-lisp:null)
                         :accessor %kpivisual-conditional-formatting :initform
                         common-lisp:nil)
                        (chart-configuration :initarg :chart-configuration
                         :type
                         (common-lisp:or kpiconfiguration common-lisp:null)
                         :accessor %kpivisual-chart-configuration :initform
                         common-lisp:nil)
                        (subtitle :initarg :subtitle :type
                         (common-lisp:or visual-subtitle-label-options
                                         common-lisp:null)
                         :accessor %kpivisual-subtitle :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or visual-title-label-options
                                         common-lisp:null)
                         :accessor %kpivisual-title :initform common-lisp:nil)
                        (visual-id :initarg :visual-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %kpivisual-visual-id :initform
                         (common-lisp:error ":visual-id is required"))))
 (common-lisp:export (common-lisp:list 'kpivisual 'make-kpivisual))
 (common-lisp:defun make-kpivisual
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key column-hierarchies actions
                     conditional-formatting chart-configuration subtitle title
                     visual-id)
   (common-lisp:apply #'common-lisp:make-instance 'kpivisual
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kpivisual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kpivisual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-formatting))
      (common-lisp:list
       (common-lisp:cons "ConditionalFormatting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-hierarchies))
      (common-lisp:list
       (common-lisp:cons "ColumnHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kpivisual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass label-options common-lisp:nil
                       ((custom-label :initarg :custom-label :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %label-options-custom-label :initform common-lisp:nil)
                        (font-configuration :initarg :font-configuration :type
                         (common-lisp:or font-configuration common-lisp:null)
                         :accessor %label-options-font-configuration :initform
                         common-lisp:nil)
                        (visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %label-options-visibility :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'label-options 'make-label-options))
 (common-lisp:defun make-label-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-label font-configuration
                     visibility)
   (common-lisp:apply #'common-lisp:make-instance 'label-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input label-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input label-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-configuration))
      (common-lisp:list
       (common-lisp:cons "FontConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-label))
      (common-lisp:list
       (common-lisp:cons "CustomLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input label-options))
   common-lisp:nil))
(common-lisp:deftype latitude () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass layout common-lisp:nil
                       ((configuration :initarg :configuration :type
                         (common-lisp:or layout-configuration common-lisp:null)
                         :accessor %layout-configuration :initform
                         (common-lisp:error ":configuration is required"))))
 (common-lisp:export (common-lisp:list 'layout 'make-layout))
 (common-lisp:defun make-layout
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configuration)
   (common-lisp:apply #'common-lisp:make-instance 'layout
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input layout))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input layout))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input layout))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass layout-configuration common-lisp:nil
                       ((section-based-layout :initarg :section-based-layout
                         :type
                         (common-lisp:or section-based-layout-configuration
                                         common-lisp:null)
                         :accessor %layout-configuration-section-based-layout
                         :initform common-lisp:nil)
                        (free-form-layout :initarg :free-form-layout :type
                         (common-lisp:or free-form-layout-configuration
                                         common-lisp:null)
                         :accessor %layout-configuration-free-form-layout
                         :initform common-lisp:nil)
                        (grid-layout :initarg :grid-layout :type
                         (common-lisp:or grid-layout-configuration
                                         common-lisp:null)
                         :accessor %layout-configuration-grid-layout :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'layout-configuration 'make-layout-configuration))
 (common-lisp:defun make-layout-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key section-based-layout free-form-layout
                     grid-layout)
   (common-lisp:apply #'common-lisp:make-instance 'layout-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input layout-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input layout-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grid-layout))
      (common-lisp:list
       (common-lisp:cons "GridLayout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'free-form-layout))
      (common-lisp:list
       (common-lisp:cons "FreeFormLayout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'section-based-layout))
      (common-lisp:list
       (common-lisp:cons "SectionBasedLayout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input layout-configuration))
   common-lisp:nil))
(common-lisp:deftype layout-element-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype layout-list () '(trivial-types:proper-list layout))
 (common-lisp:defun |make-layout-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list layout))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass legend-options common-lisp:nil
                       ((height :initarg :height :type
                         (common-lisp:or pixel-length common-lisp:null)
                         :accessor %legend-options-height :initform
                         common-lisp:nil)
                        (width :initarg :width :type
                         (common-lisp:or pixel-length common-lisp:null)
                         :accessor %legend-options-width :initform
                         common-lisp:nil)
                        (position :initarg :position :type
                         (common-lisp:or legend-position common-lisp:null)
                         :accessor %legend-options-position :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or label-options common-lisp:null)
                         :accessor %legend-options-title :initform
                         common-lisp:nil)
                        (visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %legend-options-visibility :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'legend-options 'make-legend-options))
 (common-lisp:defun make-legend-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key height width position title visibility)
   (common-lisp:apply #'common-lisp:make-instance 'legend-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input legend-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input legend-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "Position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input legend-options))
   common-lisp:nil))
(common-lisp:deftype legend-position () 'common-lisp:string)
(common-lisp:deftype length () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       limit-exceeded-exception-resource-type)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       limit-exceeded-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception 'limit-exceeded-exception-message
                    'limit-exceeded-exception-resource-type
                    'limit-exceeded-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass line-chart-aggregated-field-wells common-lisp:nil
                       ((small-multiples :initarg :small-multiples :type
                         (common-lisp:or small-multiples-dimension-field-list
                                         common-lisp:null)
                         :accessor
                         %line-chart-aggregated-field-wells-small-multiples
                         :initform common-lisp:nil)
                        (colors :initarg :colors :type
                         (common-lisp:or dimension-field-list common-lisp:null)
                         :accessor %line-chart-aggregated-field-wells-colors
                         :initform common-lisp:nil)
                        (values :initarg :values :type
                         (common-lisp:or measure-field-list common-lisp:null)
                         :accessor %line-chart-aggregated-field-wells-values
                         :initform common-lisp:nil)
                        (category :initarg :category :type
                         (common-lisp:or dimension-field-list common-lisp:null)
                         :accessor %line-chart-aggregated-field-wells-category
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'line-chart-aggregated-field-wells
                    'make-line-chart-aggregated-field-wells))
 (common-lisp:defun make-line-chart-aggregated-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key small-multiples colors values category)
   (common-lisp:apply #'common-lisp:make-instance
                      'line-chart-aggregated-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'colors))
      (common-lisp:list
       (common-lisp:cons "Colors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'small-multiples))
      (common-lisp:list
       (common-lisp:cons "SmallMultiples"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass line-chart-configuration common-lisp:nil
                       ((visual-palette :initarg :visual-palette :type
                         (common-lisp:or visual-palette common-lisp:null)
                         :accessor %line-chart-configuration-visual-palette
                         :initform common-lisp:nil)
                        (contribution-analysis-defaults :initarg
                         :contribution-analysis-defaults :type
                         (common-lisp:or contribution-analysis-default-list
                                         common-lisp:null)
                         :accessor
                         %line-chart-configuration-contribution-analysis-defaults
                         :initform common-lisp:nil)
                        (tooltip :initarg :tooltip :type
                         (common-lisp:or tooltip-options common-lisp:null)
                         :accessor %line-chart-configuration-tooltip :initform
                         common-lisp:nil)
                        (reference-lines :initarg :reference-lines :type
                         (common-lisp:or reference-line-list common-lisp:null)
                         :accessor %line-chart-configuration-reference-lines
                         :initform common-lisp:nil)
                        (data-labels :initarg :data-labels :type
                         (common-lisp:or data-label-options common-lisp:null)
                         :accessor %line-chart-configuration-data-labels
                         :initform common-lisp:nil)
                        (legend :initarg :legend :type
                         (common-lisp:or legend-options common-lisp:null)
                         :accessor %line-chart-configuration-legend :initform
                         common-lisp:nil)
                        (series :initarg :series :type
                         (common-lisp:or series-item-list common-lisp:null)
                         :accessor %line-chart-configuration-series :initform
                         common-lisp:nil)
                        (default-series-settings :initarg
                         :default-series-settings :type
                         (common-lisp:or line-chart-default-series-settings
                                         common-lisp:null)
                         :accessor
                         %line-chart-configuration-default-series-settings
                         :initform common-lisp:nil)
                        (secondary-yaxis-label-options :initarg
                         :secondary-yaxis-label-options :type
                         (common-lisp:or chart-axis-label-options
                                         common-lisp:null)
                         :accessor
                         %line-chart-configuration-secondary-yaxis-label-options
                         :initform common-lisp:nil)
                        (secondary-yaxis-display-options :initarg
                         :secondary-yaxis-display-options :type
                         (common-lisp:or line-series-axis-display-options
                                         common-lisp:null)
                         :accessor
                         %line-chart-configuration-secondary-yaxis-display-options
                         :initform common-lisp:nil)
                        (primary-yaxis-label-options :initarg
                         :primary-yaxis-label-options :type
                         (common-lisp:or chart-axis-label-options
                                         common-lisp:null)
                         :accessor
                         %line-chart-configuration-primary-yaxis-label-options
                         :initform common-lisp:nil)
                        (primary-yaxis-display-options :initarg
                         :primary-yaxis-display-options :type
                         (common-lisp:or line-series-axis-display-options
                                         common-lisp:null)
                         :accessor
                         %line-chart-configuration-primary-yaxis-display-options
                         :initform common-lisp:nil)
                        (xaxis-label-options :initarg :xaxis-label-options
                         :type
                         (common-lisp:or chart-axis-label-options
                                         common-lisp:null)
                         :accessor
                         %line-chart-configuration-xaxis-label-options
                         :initform common-lisp:nil)
                        (xaxis-display-options :initarg :xaxis-display-options
                         :type
                         (common-lisp:or axis-display-options common-lisp:null)
                         :accessor
                         %line-chart-configuration-xaxis-display-options
                         :initform common-lisp:nil)
                        (small-multiples-options :initarg
                         :small-multiples-options :type
                         (common-lisp:or small-multiples-options
                                         common-lisp:null)
                         :accessor
                         %line-chart-configuration-small-multiples-options
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or line-chart-type common-lisp:null)
                         :accessor %line-chart-configuration-type :initform
                         common-lisp:nil)
                        (forecast-configurations :initarg
                         :forecast-configurations :type
                         (common-lisp:or forecast-configuration-list
                                         common-lisp:null)
                         :accessor
                         %line-chart-configuration-forecast-configurations
                         :initform common-lisp:nil)
                        (sort-configuration :initarg :sort-configuration :type
                         (common-lisp:or line-chart-sort-configuration
                                         common-lisp:null)
                         :accessor %line-chart-configuration-sort-configuration
                         :initform common-lisp:nil)
                        (field-wells :initarg :field-wells :type
                         (common-lisp:or line-chart-field-wells
                                         common-lisp:null)
                         :accessor %line-chart-configuration-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'line-chart-configuration 'make-line-chart-configuration))
 (common-lisp:defun make-line-chart-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visual-palette
                     contribution-analysis-defaults tooltip reference-lines
                     data-labels legend series default-series-settings
                     secondary-yaxis-label-options
                     secondary-yaxis-display-options
                     primary-yaxis-label-options primary-yaxis-display-options
                     xaxis-label-options xaxis-display-options
                     small-multiples-options type forecast-configurations
                     sort-configuration field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'line-chart-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forecast-configurations))
      (common-lisp:list
       (common-lisp:cons "ForecastConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'small-multiples-options))
      (common-lisp:list
       (common-lisp:cons "SmallMultiplesOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'xaxis-display-options))
      (common-lisp:list
       (common-lisp:cons "XAxisDisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xaxis-label-options))
      (common-lisp:list
       (common-lisp:cons "XAxisLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-yaxis-display-options))
      (common-lisp:list
       (common-lisp:cons "PrimaryYAxisDisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-yaxis-label-options))
      (common-lisp:list
       (common-lisp:cons "PrimaryYAxisLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secondary-yaxis-display-options))
      (common-lisp:list
       (common-lisp:cons "SecondaryYAxisDisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secondary-yaxis-label-options))
      (common-lisp:list
       (common-lisp:cons "SecondaryYAxisLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-series-settings))
      (common-lisp:list
       (common-lisp:cons "DefaultSeriesSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'series))
      (common-lisp:list
       (common-lisp:cons "Series"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legend))
      (common-lisp:list
       (common-lisp:cons "Legend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-labels))
      (common-lisp:list
       (common-lisp:cons "DataLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-lines))
      (common-lisp:list
       (common-lisp:cons "ReferenceLines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip))
      (common-lisp:list
       (common-lisp:cons "Tooltip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contribution-analysis-defaults))
      (common-lisp:list
       (common-lisp:cons "ContributionAnalysisDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-palette))
      (common-lisp:list
       (common-lisp:cons "VisualPalette"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass line-chart-default-series-settings common-lisp:nil
                       ((marker-style-settings :initarg :marker-style-settings
                         :type
                         (common-lisp:or line-chart-marker-style-settings
                                         common-lisp:null)
                         :accessor
                         %line-chart-default-series-settings-marker-style-settings
                         :initform common-lisp:nil)
                        (line-style-settings :initarg :line-style-settings
                         :type
                         (common-lisp:or line-chart-line-style-settings
                                         common-lisp:null)
                         :accessor
                         %line-chart-default-series-settings-line-style-settings
                         :initform common-lisp:nil)
                        (axis-binding :initarg :axis-binding :type
                         (common-lisp:or axis-binding common-lisp:null)
                         :accessor
                         %line-chart-default-series-settings-axis-binding
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'line-chart-default-series-settings
                    'make-line-chart-default-series-settings))
 (common-lisp:defun make-line-chart-default-series-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker-style-settings line-style-settings
                     axis-binding)
   (common-lisp:apply #'common-lisp:make-instance
                      'line-chart-default-series-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-default-series-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-default-series-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'axis-binding))
      (common-lisp:list
       (common-lisp:cons "AxisBinding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-style-settings))
      (common-lisp:list
       (common-lisp:cons "LineStyleSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'marker-style-settings))
      (common-lisp:list
       (common-lisp:cons "MarkerStyleSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-default-series-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass line-chart-field-wells common-lisp:nil
                       ((line-chart-aggregated-field-wells :initarg
                         :line-chart-aggregated-field-wells :type
                         (common-lisp:or line-chart-aggregated-field-wells
                                         common-lisp:null)
                         :accessor
                         %line-chart-field-wells-line-chart-aggregated-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'line-chart-field-wells 'make-line-chart-field-wells))
 (common-lisp:defun make-line-chart-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key line-chart-aggregated-field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'line-chart-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'line-chart-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "LineChartAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-field-wells))
   common-lisp:nil))
(common-lisp:deftype line-chart-line-style () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass line-chart-line-style-settings common-lisp:nil
                       ((line-width :initarg :line-width :type
                         (common-lisp:or pixel-length common-lisp:null)
                         :accessor %line-chart-line-style-settings-line-width
                         :initform common-lisp:nil)
                        (line-style :initarg :line-style :type
                         (common-lisp:or line-chart-line-style
                                         common-lisp:null)
                         :accessor %line-chart-line-style-settings-line-style
                         :initform common-lisp:nil)
                        (line-interpolation :initarg :line-interpolation :type
                         (common-lisp:or line-interpolation common-lisp:null)
                         :accessor
                         %line-chart-line-style-settings-line-interpolation
                         :initform common-lisp:nil)
                        (line-visibility :initarg :line-visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %line-chart-line-style-settings-line-visibility
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'line-chart-line-style-settings
                    'make-line-chart-line-style-settings))
 (common-lisp:defun make-line-chart-line-style-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key line-width line-style line-interpolation
                     line-visibility)
   (common-lisp:apply #'common-lisp:make-instance
                      'line-chart-line-style-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-line-style-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-line-style-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-visibility))
      (common-lisp:list
       (common-lisp:cons "LineVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-interpolation))
      (common-lisp:list
       (common-lisp:cons "LineInterpolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-style))
      (common-lisp:list
       (common-lisp:cons "LineStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-width))
      (common-lisp:list
       (common-lisp:cons "LineWidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-line-style-settings))
   common-lisp:nil))
(common-lisp:deftype line-chart-marker-shape () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass line-chart-marker-style-settings common-lisp:nil
                       ((marker-color :initarg :marker-color :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %line-chart-marker-style-settings-marker-color
                         :initform common-lisp:nil)
                        (marker-size :initarg :marker-size :type
                         (common-lisp:or pixel-length common-lisp:null)
                         :accessor
                         %line-chart-marker-style-settings-marker-size
                         :initform common-lisp:nil)
                        (marker-shape :initarg :marker-shape :type
                         (common-lisp:or line-chart-marker-shape
                                         common-lisp:null)
                         :accessor
                         %line-chart-marker-style-settings-marker-shape
                         :initform common-lisp:nil)
                        (marker-visibility :initarg :marker-visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %line-chart-marker-style-settings-marker-visibility
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'line-chart-marker-style-settings
                    'make-line-chart-marker-style-settings))
 (common-lisp:defun make-line-chart-marker-style-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker-color marker-size marker-shape
                     marker-visibility)
   (common-lisp:apply #'common-lisp:make-instance
                      'line-chart-marker-style-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-marker-style-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-marker-style-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker-visibility))
      (common-lisp:list
       (common-lisp:cons "MarkerVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker-shape))
      (common-lisp:list
       (common-lisp:cons "MarkerShape"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker-size))
      (common-lisp:list
       (common-lisp:cons "MarkerSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker-color))
      (common-lisp:list
       (common-lisp:cons "MarkerColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-marker-style-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass line-chart-series-settings common-lisp:nil
                       ((marker-style-settings :initarg :marker-style-settings
                         :type
                         (common-lisp:or line-chart-marker-style-settings
                                         common-lisp:null)
                         :accessor
                         %line-chart-series-settings-marker-style-settings
                         :initform common-lisp:nil)
                        (line-style-settings :initarg :line-style-settings
                         :type
                         (common-lisp:or line-chart-line-style-settings
                                         common-lisp:null)
                         :accessor
                         %line-chart-series-settings-line-style-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'line-chart-series-settings
                    'make-line-chart-series-settings))
 (common-lisp:defun make-line-chart-series-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker-style-settings
                     line-style-settings)
   (common-lisp:apply #'common-lisp:make-instance 'line-chart-series-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-series-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-series-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-style-settings))
      (common-lisp:list
       (common-lisp:cons "LineStyleSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'marker-style-settings))
      (common-lisp:list
       (common-lisp:cons "MarkerStyleSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-series-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass line-chart-sort-configuration common-lisp:nil
                       ((small-multiples-limit-configuration :initarg
                         :small-multiples-limit-configuration :type
                         (common-lisp:or items-limit-configuration
                                         common-lisp:null)
                         :accessor
                         %line-chart-sort-configuration-small-multiples-limit-configuration
                         :initform common-lisp:nil)
                        (small-multiples-sort :initarg :small-multiples-sort
                         :type
                         (common-lisp:or field-sort-options-list
                                         common-lisp:null)
                         :accessor
                         %line-chart-sort-configuration-small-multiples-sort
                         :initform common-lisp:nil)
                        (color-items-limit-configuration :initarg
                         :color-items-limit-configuration :type
                         (common-lisp:or items-limit-configuration
                                         common-lisp:null)
                         :accessor
                         %line-chart-sort-configuration-color-items-limit-configuration
                         :initform common-lisp:nil)
                        (category-items-limit-configuration :initarg
                         :category-items-limit-configuration :type
                         (common-lisp:or items-limit-configuration
                                         common-lisp:null)
                         :accessor
                         %line-chart-sort-configuration-category-items-limit-configuration
                         :initform common-lisp:nil)
                        (category-sort :initarg :category-sort :type
                         (common-lisp:or field-sort-options-list
                                         common-lisp:null)
                         :accessor %line-chart-sort-configuration-category-sort
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'line-chart-sort-configuration
                    'make-line-chart-sort-configuration))
 (common-lisp:defun make-line-chart-sort-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key small-multiples-limit-configuration
                     small-multiples-sort color-items-limit-configuration
                     category-items-limit-configuration category-sort)
   (common-lisp:apply #'common-lisp:make-instance
                      'line-chart-sort-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-sort))
      (common-lisp:list
       (common-lisp:cons "CategorySort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-items-limit-configuration))
      (common-lisp:list
       (common-lisp:cons "CategoryItemsLimitConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'color-items-limit-configuration))
      (common-lisp:list
       (common-lisp:cons "ColorItemsLimitConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'small-multiples-sort))
      (common-lisp:list
       (common-lisp:cons "SmallMultiplesSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'small-multiples-limit-configuration))
      (common-lisp:list
       (common-lisp:cons "SmallMultiplesLimitConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          line-chart-sort-configuration))
   common-lisp:nil))
(common-lisp:deftype line-chart-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass line-chart-visual common-lisp:nil
                       ((column-hierarchies :initarg :column-hierarchies :type
                         (common-lisp:or column-hierarchy-list
                                         common-lisp:null)
                         :accessor %line-chart-visual-column-hierarchies
                         :initform common-lisp:nil)
                        (actions :initarg :actions :type
                         (common-lisp:or visual-custom-action-list
                                         common-lisp:null)
                         :accessor %line-chart-visual-actions :initform
                         common-lisp:nil)
                        (chart-configuration :initarg :chart-configuration
                         :type
                         (common-lisp:or line-chart-configuration
                                         common-lisp:null)
                         :accessor %line-chart-visual-chart-configuration
                         :initform common-lisp:nil)
                        (subtitle :initarg :subtitle :type
                         (common-lisp:or visual-subtitle-label-options
                                         common-lisp:null)
                         :accessor %line-chart-visual-subtitle :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or visual-title-label-options
                                         common-lisp:null)
                         :accessor %line-chart-visual-title :initform
                         common-lisp:nil)
                        (visual-id :initarg :visual-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %line-chart-visual-visual-id :initform
                         (common-lisp:error ":visual-id is required"))))
 (common-lisp:export
  (common-lisp:list 'line-chart-visual 'make-line-chart-visual))
 (common-lisp:defun make-line-chart-visual
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key column-hierarchies actions
                     chart-configuration subtitle title visual-id)
   (common-lisp:apply #'common-lisp:make-instance 'line-chart-visual
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input line-chart-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input line-chart-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-hierarchies))
      (common-lisp:list
       (common-lisp:cons "ColumnHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input line-chart-visual))
   common-lisp:nil))
(common-lisp:deftype line-interpolation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass line-series-axis-display-options common-lisp:nil
                       ((missing-data-configurations :initarg
                         :missing-data-configurations :type
                         (common-lisp:or missing-data-configuration-list
                                         common-lisp:null)
                         :accessor
                         %line-series-axis-display-options-missing-data-configurations
                         :initform common-lisp:nil)
                        (axis-options :initarg :axis-options :type
                         (common-lisp:or axis-display-options common-lisp:null)
                         :accessor
                         %line-series-axis-display-options-axis-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'line-series-axis-display-options
                    'make-line-series-axis-display-options))
 (common-lisp:defun make-line-series-axis-display-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key missing-data-configurations axis-options)
   (common-lisp:apply #'common-lisp:make-instance
                      'line-series-axis-display-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          line-series-axis-display-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          line-series-axis-display-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'axis-options))
      (common-lisp:list
       (common-lisp:cons "AxisOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'missing-data-configurations))
      (common-lisp:list
       (common-lisp:cons "MissingDataConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          line-series-axis-display-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass link-sharing-configuration common-lisp:nil
                       ((permissions :initarg :permissions :type
                         (common-lisp:or resource-permission-list
                                         common-lisp:null)
                         :accessor %link-sharing-configuration-permissions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'link-sharing-configuration
                    'make-link-sharing-configuration))
 (common-lisp:defun make-link-sharing-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key permissions)
   (common-lisp:apply #'common-lisp:make-instance 'link-sharing-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          link-sharing-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          link-sharing-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          link-sharing-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-analyses-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-analyses-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-analyses-request-next-token :initform
                         common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %list-analyses-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-analyses-request 'make-list-analyses-request))
 (common-lisp:defun make-list-analyses-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-analyses-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-analyses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-analyses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-analyses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-analyses-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-analyses-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %list-analyses-response-status :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-analyses-response-next-token :initform
                         common-lisp:nil)
                        (analysis-summary-list :initarg :analysis-summary-list
                         :type
                         (common-lisp:or analysis-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-analyses-response-analysis-summary-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-analyses-response 'make-list-analyses-response))
 (common-lisp:defun make-list-analyses-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status next-token
                     analysis-summary-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-analyses-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-analyses-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-analyses-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analysis-summary-list))
      (common-lisp:list
       (common-lisp:cons "AnalysisSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-analyses-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-control-display-options common-lisp:nil
                       ((title-options :initarg :title-options :type
                         (common-lisp:or label-options common-lisp:null)
                         :accessor %list-control-display-options-title-options
                         :initform common-lisp:nil)
                        (select-all-options :initarg :select-all-options :type
                         (common-lisp:or list-control-select-all-options
                                         common-lisp:null)
                         :accessor
                         %list-control-display-options-select-all-options
                         :initform common-lisp:nil)
                        (search-options :initarg :search-options :type
                         (common-lisp:or list-control-search-options
                                         common-lisp:null)
                         :accessor %list-control-display-options-search-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-control-display-options
                    'make-list-control-display-options))
 (common-lisp:defun make-list-control-display-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key title-options select-all-options
                     search-options)
   (common-lisp:apply #'common-lisp:make-instance 'list-control-display-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-control-display-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-control-display-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-options))
      (common-lisp:list
       (common-lisp:cons "SearchOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-all-options))
      (common-lisp:list
       (common-lisp:cons "SelectAllOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title-options))
      (common-lisp:list
       (common-lisp:cons "TitleOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-control-display-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-control-search-options common-lisp:nil
                       ((visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %list-control-search-options-visibility :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-control-search-options
                    'make-list-control-search-options))
 (common-lisp:defun make-list-control-search-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visibility)
   (common-lisp:apply #'common-lisp:make-instance 'list-control-search-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-control-search-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-control-search-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-control-search-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-control-select-all-options common-lisp:nil
                       ((visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %list-control-select-all-options-visibility :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-control-select-all-options
                    'make-list-control-select-all-options))
 (common-lisp:defun make-list-control-select-all-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visibility)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-control-select-all-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-control-select-all-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-control-select-all-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-control-select-all-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-dashboard-versions-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-dashboard-versions-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-dashboard-versions-request-next-token :initform
                         common-lisp:nil)
                        (dashboard-id :initarg :dashboard-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %list-dashboard-versions-request-dashboard-id
                         :initform
                         (common-lisp:error ":dashboard-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %list-dashboard-versions-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-dashboard-versions-request
                    'make-list-dashboard-versions-request))
 (common-lisp:defun make-list-dashboard-versions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token dashboard-id
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-dashboard-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboard-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboard-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboard-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-dashboard-versions-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-dashboard-versions-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %list-dashboard-versions-response-status
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-dashboard-versions-response-next-token :initform
                         common-lisp:nil)
                        (dashboard-version-summary-list :initarg
                         :dashboard-version-summary-list :type
                         (common-lisp:or dashboard-version-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-dashboard-versions-response-dashboard-version-summary-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-dashboard-versions-response
                    'make-list-dashboard-versions-response))
 (common-lisp:defun make-list-dashboard-versions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status next-token
                     dashboard-version-summary-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-dashboard-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboard-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboard-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dashboard-version-summary-list))
      (common-lisp:list
       (common-lisp:cons "DashboardVersionSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboard-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-dashboards-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-dashboards-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-dashboards-request-next-token :initform
                         common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %list-dashboards-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-dashboards-request 'make-list-dashboards-request))
 (common-lisp:defun make-list-dashboards-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-dashboards-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboards-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboards-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboards-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-dashboards-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-dashboards-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %list-dashboards-response-status :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-dashboards-response-next-token :initform
                         common-lisp:nil)
                        (dashboard-summary-list :initarg
                         :dashboard-summary-list :type
                         (common-lisp:or dashboard-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-dashboards-response-dashboard-summary-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-dashboards-response 'make-list-dashboards-response))
 (common-lisp:defun make-list-dashboards-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status next-token
                     dashboard-summary-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-dashboards-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboards-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboards-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dashboard-summary-list))
      (common-lisp:list
       (common-lisp:cons "DashboardSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboards-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-sets-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-data-sets-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-data-sets-request-next-token :initform
                         common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %list-data-sets-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-data-sets-request 'make-list-data-sets-request))
 (common-lisp:defun make-list-data-sets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-data-sets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-sets-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %list-data-sets-response-status :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-data-sets-response-request-id :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-data-sets-response-next-token :initform
                         common-lisp:nil)
                        (data-set-summaries :initarg :data-set-summaries :type
                         (common-lisp:or data-set-summary-list
                                         common-lisp:null)
                         :accessor %list-data-sets-response-data-set-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-data-sets-response 'make-list-data-sets-response))
 (common-lisp:defun make-list-data-sets-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id next-token
                     data-set-summaries)
   (common-lisp:apply #'common-lisp:make-instance 'list-data-sets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-summaries))
      (common-lisp:list
       (common-lisp:cons "DataSetSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-sources-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-data-sources-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-data-sources-request-next-token :initform
                         common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %list-data-sources-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-data-sources-request
                    'make-list-data-sources-request))
 (common-lisp:defun make-list-data-sources-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-data-sources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-sources-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %list-data-sources-response-status :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-data-sources-response-request-id :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-data-sources-response-next-token :initform
                         common-lisp:nil)
                        (data-sources :initarg :data-sources :type
                         (common-lisp:or data-source-list common-lisp:null)
                         :accessor %list-data-sources-response-data-sources
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-data-sources-response
                    'make-list-data-sources-response))
 (common-lisp:defun make-list-data-sources-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id next-token
                     data-sources)
   (common-lisp:apply #'common-lisp:make-instance 'list-data-sources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-sources))
      (common-lisp:list
       (common-lisp:cons "DataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-folder-members-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-folder-members-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-folder-members-request-next-token :initform
                         common-lisp:nil)
                        (folder-id :initarg :folder-id :type
                         (common-lisp:or restrictive-resource-id
                                         common-lisp:null)
                         :accessor %list-folder-members-request-folder-id
                         :initform
                         (common-lisp:error ":folder-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %list-folder-members-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-folder-members-request
                    'make-list-folder-members-request))
 (common-lisp:defun make-list-folder-members-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token folder-id
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-folder-members-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-folder-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-folder-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-folder-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-folder-members-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-folder-members-response-request-id :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-folder-members-response-next-token :initform
                         common-lisp:nil)
                        (folder-member-list :initarg :folder-member-list :type
                         (common-lisp:or folder-member-list common-lisp:null)
                         :accessor
                         %list-folder-members-response-folder-member-list
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %list-folder-members-response-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-folder-members-response
                    'make-list-folder-members-response))
 (common-lisp:defun make-list-folder-members-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id next-token folder-member-list
                     status)
   (common-lisp:apply #'common-lisp:make-instance 'list-folder-members-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-folder-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-folder-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-member-list))
      (common-lisp:list
       (common-lisp:cons "FolderMemberList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-folder-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-folders-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-folders-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-folders-request-next-token :initform
                         common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %list-folders-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-folders-request 'make-list-folders-request))
 (common-lisp:defun make-list-folders-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-folders-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-folders-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-folders-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-folders-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-folders-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-folders-response-request-id :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-folders-response-next-token :initform
                         common-lisp:nil)
                        (folder-summary-list :initarg :folder-summary-list
                         :type
                         (common-lisp:or folder-summary-list common-lisp:null)
                         :accessor %list-folders-response-folder-summary-list
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %list-folders-response-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-folders-response 'make-list-folders-response))
 (common-lisp:defun make-list-folders-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id next-token folder-summary-list
                     status)
   (common-lisp:apply #'common-lisp:make-instance 'list-folders-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-folders-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-folders-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-summary-list))
      (common-lisp:list
       (common-lisp:cons "FolderSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-folders-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-group-memberships-request common-lisp:nil
                       ((namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %list-group-memberships-request-namespace :initform
                         (common-lisp:error ":namespace is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %list-group-memberships-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-group-memberships-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-group-memberships-request-next-token :initform
                         common-lisp:nil)
                        (group-name :initarg :group-name :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         %list-group-memberships-request-group-name :initform
                         (common-lisp:error ":group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-group-memberships-request
                    'make-list-group-memberships-request))
 (common-lisp:defun make-list-group-memberships-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key namespace aws-account-id max-results
                     next-token group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-group-memberships-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-group-memberships-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-group-memberships-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-group-memberships-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-group-memberships-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %list-group-memberships-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-group-memberships-response-request-id :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-group-memberships-response-next-token :initform
                         common-lisp:nil)
                        (group-member-list :initarg :group-member-list :type
                         (common-lisp:or group-member-list common-lisp:null)
                         :accessor
                         %list-group-memberships-response-group-member-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-group-memberships-response
                    'make-list-group-memberships-response))
 (common-lisp:defun make-list-group-memberships-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id next-token
                     group-member-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-group-memberships-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-group-memberships-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-group-memberships-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-member-list))
      (common-lisp:list
       (common-lisp:cons "GroupMemberList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-group-memberships-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-groups-request common-lisp:nil
                       ((namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %list-groups-request-namespace :initform
                         (common-lisp:error ":namespace is required"))
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-groups-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-groups-request-next-token :initform
                         common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %list-groups-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-groups-request 'make-list-groups-request))
 (common-lisp:defun make-list-groups-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key namespace max-results next-token
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-groups-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %list-groups-response-status :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-groups-response-request-id :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-groups-response-next-token :initform
                         common-lisp:nil)
                        (group-list :initarg :group-list :type
                         (common-lisp:or group-list common-lisp:null) :accessor
                         %list-groups-response-group-list :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-groups-response 'make-list-groups-response))
 (common-lisp:defun make-list-groups-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id next-token group-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-list))
      (common-lisp:list
       (common-lisp:cons "GroupList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-iampolicy-assignments-for-user-request
                       common-lisp:nil
                       ((namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %list-iampolicy-assignments-for-user-request-namespace
                         :initform
                         (common-lisp:error ":namespace is required"))
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-iampolicy-assignments-for-user-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-iampolicy-assignments-for-user-request-next-token
                         :initform common-lisp:nil)
                        (user-name :initarg :user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %list-iampolicy-assignments-for-user-request-user-name
                         :initform
                         (common-lisp:error ":user-name is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %list-iampolicy-assignments-for-user-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-iampolicy-assignments-for-user-request
                    'make-list-iampolicy-assignments-for-user-request))
 (common-lisp:defun make-list-iampolicy-assignments-for-user-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key namespace max-results next-token
                     user-name aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-iampolicy-assignments-for-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-iampolicy-assignments-for-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-iampolicy-assignments-for-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-iampolicy-assignments-for-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-iampolicy-assignments-for-user-response
                       common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor
                         %list-iampolicy-assignments-for-user-response-status
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-iampolicy-assignments-for-user-response-next-token
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-iampolicy-assignments-for-user-response-request-id
                         :initform common-lisp:nil)
                        (active-assignments :initarg :active-assignments :type
                         (common-lisp:or active-iampolicy-assignment-list
                                         common-lisp:null)
                         :accessor
                         %list-iampolicy-assignments-for-user-response-active-assignments
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-iampolicy-assignments-for-user-response
                    'make-list-iampolicy-assignments-for-user-response))
 (common-lisp:defun make-list-iampolicy-assignments-for-user-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status next-token request-id
                     active-assignments)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-iampolicy-assignments-for-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-iampolicy-assignments-for-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-iampolicy-assignments-for-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-assignments))
      (common-lisp:list
       (common-lisp:cons "ActiveAssignments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-iampolicy-assignments-for-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-iampolicy-assignments-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-iampolicy-assignments-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-iampolicy-assignments-request-next-token
                         :initform common-lisp:nil)
                        (namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %list-iampolicy-assignments-request-namespace
                         :initform
                         (common-lisp:error ":namespace is required"))
                        (assignment-status :initarg :assignment-status :type
                         (common-lisp:or assignment-status common-lisp:null)
                         :accessor
                         %list-iampolicy-assignments-request-assignment-status
                         :initform common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %list-iampolicy-assignments-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-iampolicy-assignments-request
                    'make-list-iampolicy-assignments-request))
 (common-lisp:defun make-list-iampolicy-assignments-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token namespace
                     assignment-status aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-iampolicy-assignments-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-iampolicy-assignments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-iampolicy-assignments-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-status))
      (common-lisp:list
       (common-lisp:cons "AssignmentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-iampolicy-assignments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-iampolicy-assignments-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %list-iampolicy-assignments-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-iampolicy-assignments-response-request-id
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-iampolicy-assignments-response-next-token
                         :initform common-lisp:nil)
                        (iampolicy-assignments :initarg :iampolicy-assignments
                         :type
                         (common-lisp:or iampolicy-assignment-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-iampolicy-assignments-response-iampolicy-assignments
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-iampolicy-assignments-response
                    'make-list-iampolicy-assignments-response))
 (common-lisp:defun make-list-iampolicy-assignments-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id next-token
                     iampolicy-assignments)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-iampolicy-assignments-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-iampolicy-assignments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-iampolicy-assignments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iampolicy-assignments))
      (common-lisp:list
       (common-lisp:cons "IAMPolicyAssignments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-iampolicy-assignments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-ingestions-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or ingestion-max-results
                                         common-lisp:null)
                         :accessor %list-ingestions-request-max-results
                         :initform common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %list-ingestions-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-ingestions-request-next-token :initform
                         common-lisp:nil)
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-ingestions-request-data-set-id :initform
                         (common-lisp:error ":data-set-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-ingestions-request 'make-list-ingestions-request))
 (common-lisp:defun make-list-ingestions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results aws-account-id next-token
                     data-set-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-ingestions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-ingestions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-ingestions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-ingestions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-ingestions-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %list-ingestions-response-status :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-ingestions-response-request-id :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-ingestions-response-next-token :initform
                         common-lisp:nil)
                        (ingestions :initarg :ingestions :type
                         (common-lisp:or ingestions common-lisp:null) :accessor
                         %list-ingestions-response-ingestions :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-ingestions-response 'make-list-ingestions-response))
 (common-lisp:defun make-list-ingestions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id next-token ingestions)
   (common-lisp:apply #'common-lisp:make-instance 'list-ingestions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-ingestions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-ingestions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestions))
      (common-lisp:list
       (common-lisp:cons "Ingestions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-ingestions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-namespaces-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-namespaces-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-namespaces-request-next-token :initform
                         common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %list-namespaces-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-namespaces-request 'make-list-namespaces-request))
 (common-lisp:defun make-list-namespaces-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-namespaces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-namespaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-namespaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-namespaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-namespaces-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %list-namespaces-response-status :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-namespaces-response-request-id :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-namespaces-response-next-token :initform
                         common-lisp:nil)
                        (namespaces :initarg :namespaces :type
                         (common-lisp:or namespaces common-lisp:null) :accessor
                         %list-namespaces-response-namespaces :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-namespaces-response 'make-list-namespaces-response))
 (common-lisp:defun make-list-namespaces-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id next-token namespaces)
   (common-lisp:apply #'common-lisp:make-instance 'list-namespaces-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-namespaces-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-namespaces-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespaces))
      (common-lisp:list
       (common-lisp:cons "Namespaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-namespaces-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-refresh-schedules-request common-lisp:nil
                       ((data-set-id :initarg :data-set-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %list-refresh-schedules-request-data-set-id
                         :initform
                         (common-lisp:error ":data-set-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %list-refresh-schedules-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-refresh-schedules-request
                    'make-list-refresh-schedules-request))
 (common-lisp:defun make-list-refresh-schedules-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-set-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-refresh-schedules-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-refresh-schedules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-refresh-schedules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-refresh-schedules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-refresh-schedules-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-refresh-schedules-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %list-refresh-schedules-response-status
                         :initform common-lisp:nil)
                        (refresh-schedules :initarg :refresh-schedules :type
                         (common-lisp:or refresh-schedules common-lisp:null)
                         :accessor
                         %list-refresh-schedules-response-refresh-schedules
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-refresh-schedules-response
                    'make-list-refresh-schedules-response))
 (common-lisp:defun make-list-refresh-schedules-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status refresh-schedules)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-refresh-schedules-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-refresh-schedules-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-refresh-schedules-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'refresh-schedules))
      (common-lisp:list
       (common-lisp:cons "RefreshSchedules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-refresh-schedules-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-tags-for-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %list-tags-for-resource-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-tags-for-resource-response-request-id :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-template-aliases-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-template-aliases-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-template-aliases-request-next-token :initform
                         common-lisp:nil)
                        (template-id :initarg :template-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %list-template-aliases-request-template-id
                         :initform
                         (common-lisp:error ":template-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %list-template-aliases-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-template-aliases-request
                    'make-list-template-aliases-request))
 (common-lisp:defun make-list-template-aliases-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token template-id
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-template-aliases-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-template-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-template-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-template-aliases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-template-aliases-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-template-aliases-response-next-token :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-template-aliases-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %list-template-aliases-response-status
                         :initform common-lisp:nil)
                        (template-alias-list :initarg :template-alias-list
                         :type
                         (common-lisp:or template-alias-list common-lisp:null)
                         :accessor
                         %list-template-aliases-response-template-alias-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-template-aliases-response
                    'make-list-template-aliases-response))
 (common-lisp:defun make-list-template-aliases-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token request-id status
                     template-alias-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-template-aliases-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-template-aliases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-template-aliases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-alias-list))
      (common-lisp:list
       (common-lisp:cons "TemplateAliasList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-template-aliases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-template-versions-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-template-versions-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-template-versions-request-next-token :initform
                         common-lisp:nil)
                        (template-id :initarg :template-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %list-template-versions-request-template-id
                         :initform
                         (common-lisp:error ":template-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %list-template-versions-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-template-versions-request
                    'make-list-template-versions-request))
 (common-lisp:defun make-list-template-versions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token template-id
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-template-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-template-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-template-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-template-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-template-versions-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-template-versions-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %list-template-versions-response-status
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-template-versions-response-next-token :initform
                         common-lisp:nil)
                        (template-version-summary-list :initarg
                         :template-version-summary-list :type
                         (common-lisp:or template-version-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-template-versions-response-template-version-summary-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-template-versions-response
                    'make-list-template-versions-response))
 (common-lisp:defun make-list-template-versions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status next-token
                     template-version-summary-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-template-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-template-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-template-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-version-summary-list))
      (common-lisp:list
       (common-lisp:cons "TemplateVersionSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-template-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-templates-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-templates-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-templates-request-next-token :initform
                         common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %list-templates-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-templates-request 'make-list-templates-request))
 (common-lisp:defun make-list-templates-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-templates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-templates-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-templates-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %list-templates-response-status :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-templates-response-next-token :initform
                         common-lisp:nil)
                        (template-summary-list :initarg :template-summary-list
                         :type
                         (common-lisp:or template-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-templates-response-template-summary-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-templates-response 'make-list-templates-response))
 (common-lisp:defun make-list-templates-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status next-token
                     template-summary-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-templates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-summary-list))
      (common-lisp:list
       (common-lisp:cons "TemplateSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-theme-aliases-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-theme-aliases-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-theme-aliases-request-next-token :initform
                         common-lisp:nil)
                        (theme-id :initarg :theme-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %list-theme-aliases-request-theme-id
                         :initform (common-lisp:error ":theme-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %list-theme-aliases-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-theme-aliases-request
                    'make-list-theme-aliases-request))
 (common-lisp:defun make-list-theme-aliases-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token theme-id
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-theme-aliases-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-theme-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-theme-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-theme-aliases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-theme-aliases-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-theme-aliases-response-next-token :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-theme-aliases-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %list-theme-aliases-response-status
                         :initform common-lisp:nil)
                        (theme-alias-list :initarg :theme-alias-list :type
                         (common-lisp:or theme-alias-list common-lisp:null)
                         :accessor
                         %list-theme-aliases-response-theme-alias-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-theme-aliases-response
                    'make-list-theme-aliases-response))
 (common-lisp:defun make-list-theme-aliases-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token request-id status
                     theme-alias-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-theme-aliases-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-theme-aliases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-theme-aliases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-alias-list))
      (common-lisp:list
       (common-lisp:cons "ThemeAliasList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-theme-aliases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-theme-versions-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-theme-versions-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-theme-versions-request-next-token :initform
                         common-lisp:nil)
                        (theme-id :initarg :theme-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %list-theme-versions-request-theme-id
                         :initform (common-lisp:error ":theme-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %list-theme-versions-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-theme-versions-request
                    'make-list-theme-versions-request))
 (common-lisp:defun make-list-theme-versions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token theme-id
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-theme-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-theme-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-theme-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-theme-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-theme-versions-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-theme-versions-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %list-theme-versions-response-status
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-theme-versions-response-next-token :initform
                         common-lisp:nil)
                        (theme-version-summary-list :initarg
                         :theme-version-summary-list :type
                         (common-lisp:or theme-version-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-theme-versions-response-theme-version-summary-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-theme-versions-response
                    'make-list-theme-versions-response))
 (common-lisp:defun make-list-theme-versions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status next-token
                     theme-version-summary-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-theme-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-theme-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-theme-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'theme-version-summary-list))
      (common-lisp:list
       (common-lisp:cons "ThemeVersionSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-theme-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-themes-request common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or theme-type common-lisp:null) :accessor
                         %list-themes-request-type :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-themes-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-themes-request-next-token :initform
                         common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %list-themes-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-themes-request 'make-list-themes-request))
 (common-lisp:defun make-list-themes-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type max-results next-token
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-themes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-themes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-themes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-themes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-themes-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-themes-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %list-themes-response-status :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-themes-response-next-token :initform
                         common-lisp:nil)
                        (theme-summary-list :initarg :theme-summary-list :type
                         (common-lisp:or theme-summary-list common-lisp:null)
                         :accessor %list-themes-response-theme-summary-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-themes-response 'make-list-themes-response))
 (common-lisp:defun make-list-themes-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status next-token
                     theme-summary-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-themes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-themes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-themes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-summary-list))
      (common-lisp:list
       (common-lisp:cons "ThemeSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-themes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-user-groups-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-user-groups-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-user-groups-request-next-token :initform
                         common-lisp:nil)
                        (namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %list-user-groups-request-namespace :initform
                         (common-lisp:error ":namespace is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %list-user-groups-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))
                        (user-name :initarg :user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %list-user-groups-request-user-name :initform
                         (common-lisp:error ":user-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-user-groups-request 'make-list-user-groups-request))
 (common-lisp:defun make-list-user-groups-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token namespace
                     aws-account-id user-name)
   (common-lisp:apply #'common-lisp:make-instance 'list-user-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-user-groups-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %list-user-groups-response-status :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-user-groups-response-request-id :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-user-groups-response-next-token :initform
                         common-lisp:nil)
                        (group-list :initarg :group-list :type
                         (common-lisp:or group-list common-lisp:null) :accessor
                         %list-user-groups-response-group-list :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-user-groups-response
                    'make-list-user-groups-response))
 (common-lisp:defun make-list-user-groups-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id next-token group-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-user-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-list))
      (common-lisp:list
       (common-lisp:cons "GroupList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-users-request common-lisp:nil
                       ((namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %list-users-request-namespace :initform
                         (common-lisp:error ":namespace is required"))
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-users-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-users-request-next-token :initform
                         common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %list-users-request-aws-account-id :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-users-request 'make-list-users-request))
 (common-lisp:defun make-list-users-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key namespace max-results next-token
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-users-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-users-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-users-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-users-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-users-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %list-users-response-status :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-users-response-request-id :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-users-response-next-token :initform
                         common-lisp:nil)
                        (user-list :initarg :user-list :type
                         (common-lisp:or user-list common-lisp:null) :accessor
                         %list-users-response-user-list :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-users-response 'make-list-users-response))
 (common-lisp:defun make-list-users-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id next-token user-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-users-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-users-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-users-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-list))
      (common-lisp:list
       (common-lisp:cons "UserList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-users-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass loading-animation common-lisp:nil
                       ((visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %loading-animation-visibility :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'loading-animation 'make-loading-animation))
 (common-lisp:defun make-loading-animation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visibility)
   (common-lisp:apply #'common-lisp:make-instance 'loading-animation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input loading-animation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input loading-animation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input loading-animation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass local-navigation-configuration common-lisp:nil
                       ((target-sheet-id :initarg :target-sheet-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %local-navigation-configuration-target-sheet-id
                         :initform
                         (common-lisp:error ":target-sheet-id is required"))))
 (common-lisp:export
  (common-lisp:list 'local-navigation-configuration
                    'make-local-navigation-configuration))
 (common-lisp:defun make-local-navigation-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-sheet-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'local-navigation-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          local-navigation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          local-navigation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-sheet-id))
      (common-lisp:list
       (common-lisp:cons "TargetSheetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          local-navigation-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass logical-table common-lisp:nil
                       ((source :initarg :source :type
                         (common-lisp:or logical-table-source common-lisp:null)
                         :accessor %logical-table-source :initform
                         (common-lisp:error ":source is required"))
                        (data-transforms :initarg :data-transforms :type
                         (common-lisp:or transform-operation-list
                                         common-lisp:null)
                         :accessor %logical-table-data-transforms :initform
                         common-lisp:nil)
                        (alias :initarg :alias :type
                         (common-lisp:or logical-table-alias common-lisp:null)
                         :accessor %logical-table-alias :initform
                         (common-lisp:error ":alias is required"))))
 (common-lisp:export (common-lisp:list 'logical-table 'make-logical-table))
 (common-lisp:defun make-logical-table
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source data-transforms alias)
   (common-lisp:apply #'common-lisp:make-instance 'logical-table
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logical-table))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logical-table))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-transforms))
      (common-lisp:list
       (common-lisp:cons "DataTransforms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logical-table))
   common-lisp:nil))
(common-lisp:deftype logical-table-alias () 'common-lisp:string)
(common-lisp:deftype logical-table-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype logical-table-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-logical-table-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass logical-table-source common-lisp:nil
                       ((data-set-arn :initarg :data-set-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %logical-table-source-data-set-arn :initform
                         common-lisp:nil)
                        (physical-table-id :initarg :physical-table-id :type
                         (common-lisp:or physical-table-id common-lisp:null)
                         :accessor %logical-table-source-physical-table-id
                         :initform common-lisp:nil)
                        (join-instruction :initarg :join-instruction :type
                         (common-lisp:or join-instruction common-lisp:null)
                         :accessor %logical-table-source-join-instruction
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'logical-table-source 'make-logical-table-source))
 (common-lisp:defun make-logical-table-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-set-arn physical-table-id
                     join-instruction)
   (common-lisp:apply #'common-lisp:make-instance 'logical-table-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logical-table-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logical-table-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'join-instruction))
      (common-lisp:list
       (common-lisp:cons "JoinInstruction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'physical-table-id))
      (common-lisp:list
       (common-lisp:cons "PhysicalTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-arn))
      (common-lisp:list
       (common-lisp:cons "DataSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logical-table-source))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass long-format-text common-lisp:nil
                       ((rich-text :initarg :rich-text :type
                         (common-lisp:or long-rich-text common-lisp:null)
                         :accessor %long-format-text-rich-text :initform
                         common-lisp:nil)
                        (plain-text :initarg :plain-text :type
                         (common-lisp:or long-plain-text common-lisp:null)
                         :accessor %long-format-text-plain-text :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'long-format-text 'make-long-format-text))
 (common-lisp:defun make-long-format-text
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rich-text plain-text)
   (common-lisp:apply #'common-lisp:make-instance 'long-format-text
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input long-format-text))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input long-format-text))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plain-text))
      (common-lisp:list
       (common-lisp:cons "PlainText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rich-text))
      (common-lisp:list
       (common-lisp:cons "RichText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input long-format-text))
   common-lisp:nil))
(common-lisp:deftype long-plain-text () 'common-lisp:string)
(common-lisp:deftype long-rich-text () 'common-lisp:string)
(common-lisp:deftype longitude () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass lookback-window common-lisp:nil
                       ((size-unit :initarg :size-unit :type
                         (common-lisp:or lookback-window-size-unit
                                         common-lisp:null)
                         :accessor %lookback-window-size-unit :initform
                         (common-lisp:error ":size-unit is required"))
                        (size :initarg :size :type
                         (common-lisp:or positive-long common-lisp:null)
                         :accessor %lookback-window-size :initform
                         (common-lisp:error ":size is required"))
                        (column-name :initarg :column-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %lookback-window-column-name :initform
                         (common-lisp:error ":column-name is required"))))
 (common-lisp:export (common-lisp:list 'lookback-window 'make-lookback-window))
 (common-lisp:defun make-lookback-window
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key size-unit size column-name)
   (common-lisp:apply #'common-lisp:make-instance 'lookback-window
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lookback-window))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lookback-window))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "ColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-unit))
      (common-lisp:list
       (common-lisp:cons "SizeUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lookback-window))
   common-lisp:nil))
(common-lisp:deftype lookback-window-size-unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass manifest-file-location common-lisp:nil
                       ((key :initarg :key :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         %manifest-file-location-key :initform
                         (common-lisp:error ":key is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or s3bucket common-lisp:null) :accessor
                         %manifest-file-location-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'manifest-file-location 'make-manifest-file-location))
 (common-lisp:defun make-manifest-file-location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key bucket)
   (common-lisp:apply #'common-lisp:make-instance 'manifest-file-location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          manifest-file-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          manifest-file-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          manifest-file-location))
   common-lisp:nil))
(common-lisp:deftype map-zoom-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass margin-style common-lisp:nil
                       ((show :initarg :show :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %margin-style-show :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'margin-style 'make-margin-style))
 (common-lisp:defun make-margin-style
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key show)
   (common-lisp:apply #'common-lisp:make-instance 'margin-style
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input margin-style))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input margin-style))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'show))
      (common-lisp:list
       (common-lisp:cons "Show"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input margin-style))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass maria-db-parameters common-lisp:nil
                       ((database :initarg :database :type
                         (common-lisp:or database common-lisp:null) :accessor
                         %maria-db-parameters-database :initform
                         (common-lisp:error ":database is required"))
                        (port :initarg :port :type
                         (common-lisp:or port common-lisp:null) :accessor
                         %maria-db-parameters-port :initform
                         (common-lisp:error ":port is required"))
                        (host :initarg :host :type
                         (common-lisp:or host common-lisp:null) :accessor
                         %maria-db-parameters-host :initform
                         (common-lisp:error ":host is required"))))
 (common-lisp:export
  (common-lisp:list 'maria-db-parameters 'make-maria-db-parameters))
 (common-lisp:defun make-maria-db-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key database port host)
   (common-lisp:apply #'common-lisp:make-instance 'maria-db-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input maria-db-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input maria-db-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input maria-db-parameters))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass maximum-label-type common-lisp:nil
                       ((visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %maximum-label-type-visibility :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'maximum-label-type 'make-maximum-label-type))
 (common-lisp:defun make-maximum-label-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visibility)
   (common-lisp:apply #'common-lisp:make-instance 'maximum-label-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input maximum-label-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input maximum-label-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input maximum-label-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass maximum-minimum-computation common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or maximum-minimum-computation-type
                                         common-lisp:null)
                         :accessor %maximum-minimum-computation-type :initform
                         (common-lisp:error ":type is required"))
                        (value :initarg :value :type
                         (common-lisp:or measure-field common-lisp:null)
                         :accessor %maximum-minimum-computation-value :initform
                         common-lisp:nil)
                        (time :initarg :time :type
                         (common-lisp:or dimension-field common-lisp:null)
                         :accessor %maximum-minimum-computation-time :initform
                         (common-lisp:error ":time is required"))
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %maximum-minimum-computation-name :initform
                         common-lisp:nil)
                        (computation-id :initarg :computation-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %maximum-minimum-computation-computation-id
                         :initform
                         (common-lisp:error ":computation-id is required"))))
 (common-lisp:export
  (common-lisp:list 'maximum-minimum-computation
                    'make-maximum-minimum-computation))
 (common-lisp:defun make-maximum-minimum-computation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type value time name computation-id)
   (common-lisp:apply #'common-lisp:make-instance 'maximum-minimum-computation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          maximum-minimum-computation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          maximum-minimum-computation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computation-id))
      (common-lisp:list
       (common-lisp:cons "ComputationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          maximum-minimum-computation))
   common-lisp:nil))
(common-lisp:deftype maximum-minimum-computation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass measure-field common-lisp:nil
                       ((calculated-measure-field :initarg
                         :calculated-measure-field :type
                         (common-lisp:or calculated-measure-field
                                         common-lisp:null)
                         :accessor %measure-field-calculated-measure-field
                         :initform common-lisp:nil)
                        (date-measure-field :initarg :date-measure-field :type
                         (common-lisp:or date-measure-field common-lisp:null)
                         :accessor %measure-field-date-measure-field :initform
                         common-lisp:nil)
                        (categorical-measure-field :initarg
                         :categorical-measure-field :type
                         (common-lisp:or categorical-measure-field
                                         common-lisp:null)
                         :accessor %measure-field-categorical-measure-field
                         :initform common-lisp:nil)
                        (numerical-measure-field :initarg
                         :numerical-measure-field :type
                         (common-lisp:or numerical-measure-field
                                         common-lisp:null)
                         :accessor %measure-field-numerical-measure-field
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'measure-field 'make-measure-field))
 (common-lisp:defun make-measure-field
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key calculated-measure-field
                     date-measure-field categorical-measure-field
                     numerical-measure-field)
   (common-lisp:apply #'common-lisp:make-instance 'measure-field
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input measure-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input measure-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'numerical-measure-field))
      (common-lisp:list
       (common-lisp:cons "NumericalMeasureField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'categorical-measure-field))
      (common-lisp:list
       (common-lisp:cons "CategoricalMeasureField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-measure-field))
      (common-lisp:list
       (common-lisp:cons "DateMeasureField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculated-measure-field))
      (common-lisp:list
       (common-lisp:cons "CalculatedMeasureField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input measure-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype measure-field-list ()
   '(trivial-types:proper-list measure-field))
 (common-lisp:defun |make-measure-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list measure-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass member-id-arn-pair common-lisp:nil
                       ((member-arn :initarg :member-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %member-id-arn-pair-member-arn :initform
                         common-lisp:nil)
                        (member-id :initarg :member-id :type
                         (common-lisp:or restrictive-resource-id
                                         common-lisp:null)
                         :accessor %member-id-arn-pair-member-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'member-id-arn-pair 'make-member-id-arn-pair))
 (common-lisp:defun make-member-id-arn-pair
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key member-arn member-id)
   (common-lisp:apply #'common-lisp:make-instance 'member-id-arn-pair
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member-id-arn-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member-id-arn-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-arn))
      (common-lisp:list
       (common-lisp:cons "MemberArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member-id-arn-pair))
   common-lisp:nil))
(common-lisp:deftype member-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass metric-comparison-computation common-lisp:nil
                       ((target-value :initarg :target-value :type
                         (common-lisp:or measure-field common-lisp:null)
                         :accessor %metric-comparison-computation-target-value
                         :initform
                         (common-lisp:error ":target-value is required"))
                        (from-value :initarg :from-value :type
                         (common-lisp:or measure-field common-lisp:null)
                         :accessor %metric-comparison-computation-from-value
                         :initform
                         (common-lisp:error ":from-value is required"))
                        (time :initarg :time :type
                         (common-lisp:or dimension-field common-lisp:null)
                         :accessor %metric-comparison-computation-time
                         :initform (common-lisp:error ":time is required"))
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %metric-comparison-computation-name :initform
                         common-lisp:nil)
                        (computation-id :initarg :computation-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %metric-comparison-computation-computation-id
                         :initform
                         (common-lisp:error ":computation-id is required"))))
 (common-lisp:export
  (common-lisp:list 'metric-comparison-computation
                    'make-metric-comparison-computation))
 (common-lisp:defun make-metric-comparison-computation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-value from-value time name
                     computation-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'metric-comparison-computation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metric-comparison-computation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metric-comparison-computation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computation-id))
      (common-lisp:list
       (common-lisp:cons "ComputationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-value))
      (common-lisp:list
       (common-lisp:cons "FromValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-value))
      (common-lisp:list
       (common-lisp:cons "TargetValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metric-comparison-computation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass minimum-label-type common-lisp:nil
                       ((visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %minimum-label-type-visibility :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'minimum-label-type 'make-minimum-label-type))
 (common-lisp:defun make-minimum-label-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visibility)
   (common-lisp:apply #'common-lisp:make-instance 'minimum-label-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input minimum-label-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input minimum-label-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input minimum-label-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass missing-data-configuration common-lisp:nil
                       ((treatment-option :initarg :treatment-option :type
                         (common-lisp:or missing-data-treatment-option
                                         common-lisp:null)
                         :accessor %missing-data-configuration-treatment-option
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'missing-data-configuration
                    'make-missing-data-configuration))
 (common-lisp:defun make-missing-data-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key treatment-option)
   (common-lisp:apply #'common-lisp:make-instance 'missing-data-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          missing-data-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          missing-data-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'treatment-option))
      (common-lisp:list
       (common-lisp:cons "TreatmentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          missing-data-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype missing-data-configuration-list ()
   '(trivial-types:proper-list missing-data-configuration))
 (common-lisp:defun |make-missing-data-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            missing-data-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype missing-data-treatment-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass my-sql-parameters common-lisp:nil
                       ((database :initarg :database :type
                         (common-lisp:or database common-lisp:null) :accessor
                         %my-sql-parameters-database :initform
                         (common-lisp:error ":database is required"))
                        (port :initarg :port :type
                         (common-lisp:or port common-lisp:null) :accessor
                         %my-sql-parameters-port :initform
                         (common-lisp:error ":port is required"))
                        (host :initarg :host :type
                         (common-lisp:or host common-lisp:null) :accessor
                         %my-sql-parameters-host :initform
                         (common-lisp:error ":host is required"))))
 (common-lisp:export
  (common-lisp:list 'my-sql-parameters 'make-my-sql-parameters))
 (common-lisp:defun make-my-sql-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key database port host)
   (common-lisp:apply #'common-lisp:make-instance 'my-sql-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input my-sql-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input my-sql-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input my-sql-parameters))
   common-lisp:nil))
(common-lisp:deftype namespace () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass namespace-error common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %namespace-error-message :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or namespace-error-type common-lisp:null)
                         :accessor %namespace-error-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'namespace-error 'make-namespace-error))
 (common-lisp:defun make-namespace-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message type)
   (common-lisp:apply #'common-lisp:make-instance 'namespace-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input namespace-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input namespace-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input namespace-error))
   common-lisp:nil))
(common-lisp:deftype namespace-error-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass namespace-info-v2 common-lisp:nil
                       ((namespace-error :initarg :namespace-error :type
                         (common-lisp:or namespace-error common-lisp:null)
                         :accessor %namespace-info-v2-namespace-error :initform
                         common-lisp:nil)
                        (identity-store :initarg :identity-store :type
                         (common-lisp:or identity-store common-lisp:null)
                         :accessor %namespace-info-v2-identity-store :initform
                         common-lisp:nil)
                        (creation-status :initarg :creation-status :type
                         (common-lisp:or namespace-status common-lisp:null)
                         :accessor %namespace-info-v2-creation-status :initform
                         common-lisp:nil)
                        (capacity-region :initarg :capacity-region :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %namespace-info-v2-capacity-region :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %namespace-info-v2-arn :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %namespace-info-v2-name :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'namespace-info-v2 'make-namespace-info-v2))
 (common-lisp:defun make-namespace-info-v2
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key namespace-error identity-store
                     creation-status capacity-region arn name)
   (common-lisp:apply #'common-lisp:make-instance 'namespace-info-v2
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input namespace-info-v2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input namespace-info-v2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-region))
      (common-lisp:list
       (common-lisp:cons "CapacityRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-status))
      (common-lisp:list
       (common-lisp:cons "CreationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store))
      (common-lisp:list
       (common-lisp:cons "IdentityStore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-error))
      (common-lisp:list
       (common-lisp:cons "NamespaceError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input namespace-info-v2))
   common-lisp:nil))
(common-lisp:deftype namespace-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype namespaces ()
   '(trivial-types:proper-list namespace-info-v2))
 (common-lisp:defun |make-namespaces|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list namespace-info-v2))
   aws-sdk/generator/shape::members))
(common-lisp:deftype narrative-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass negative-value-configuration common-lisp:nil
                       ((display-mode :initarg :display-mode :type
                         (common-lisp:or negative-value-display-mode
                                         common-lisp:null)
                         :accessor %negative-value-configuration-display-mode
                         :initform
                         (common-lisp:error ":display-mode is required"))))
 (common-lisp:export
  (common-lisp:list 'negative-value-configuration
                    'make-negative-value-configuration))
 (common-lisp:defun make-negative-value-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key display-mode)
   (common-lisp:apply #'common-lisp:make-instance 'negative-value-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          negative-value-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          negative-value-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-mode))
      (common-lisp:list
       (common-lisp:cons "DisplayMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          negative-value-configuration))
   common-lisp:nil))
(common-lisp:deftype negative-value-display-mode () 'common-lisp:string)
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:deftype null-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass null-value-format-configuration common-lisp:nil
                       ((null-string :initarg :null-string :type
                         (common-lisp:or null-string common-lisp:null)
                         :accessor %null-value-format-configuration-null-string
                         :initform
                         (common-lisp:error ":null-string is required"))))
 (common-lisp:export
  (common-lisp:list 'null-value-format-configuration
                    'make-null-value-format-configuration))
 (common-lisp:defun make-null-value-format-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key null-string)
   (common-lisp:apply #'common-lisp:make-instance
                      'null-value-format-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          null-value-format-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          null-value-format-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'null-string))
      (common-lisp:list
       (common-lisp:cons "NullString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          null-value-format-configuration))
   common-lisp:nil))
(common-lisp:deftype nullable-boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass number-display-format-configuration common-lisp:nil
                       ((null-value-format-configuration :initarg
                         :null-value-format-configuration :type
                         (common-lisp:or null-value-format-configuration
                                         common-lisp:null)
                         :accessor
                         %number-display-format-configuration-null-value-format-configuration
                         :initform common-lisp:nil)
                        (negative-value-configuration :initarg
                         :negative-value-configuration :type
                         (common-lisp:or negative-value-configuration
                                         common-lisp:null)
                         :accessor
                         %number-display-format-configuration-negative-value-configuration
                         :initform common-lisp:nil)
                        (number-scale :initarg :number-scale :type
                         (common-lisp:or number-scale common-lisp:null)
                         :accessor
                         %number-display-format-configuration-number-scale
                         :initform common-lisp:nil)
                        (decimal-places-configuration :initarg
                         :decimal-places-configuration :type
                         (common-lisp:or decimal-places-configuration
                                         common-lisp:null)
                         :accessor
                         %number-display-format-configuration-decimal-places-configuration
                         :initform common-lisp:nil)
                        (separator-configuration :initarg
                         :separator-configuration :type
                         (common-lisp:or numeric-separator-configuration
                                         common-lisp:null)
                         :accessor
                         %number-display-format-configuration-separator-configuration
                         :initform common-lisp:nil)
                        (suffix :initarg :suffix :type
                         (common-lisp:or suffix common-lisp:null) :accessor
                         %number-display-format-configuration-suffix :initform
                         common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %number-display-format-configuration-prefix :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'number-display-format-configuration
                    'make-number-display-format-configuration))
 (common-lisp:defun make-number-display-format-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key null-value-format-configuration
                     negative-value-configuration number-scale
                     decimal-places-configuration separator-configuration
                     suffix prefix)
   (common-lisp:apply #'common-lisp:make-instance
                      'number-display-format-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          number-display-format-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          number-display-format-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suffix))
      (common-lisp:list
       (common-lisp:cons "Suffix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'separator-configuration))
      (common-lisp:list
       (common-lisp:cons "SeparatorConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decimal-places-configuration))
      (common-lisp:list
       (common-lisp:cons "DecimalPlacesConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-scale))
      (common-lisp:list
       (common-lisp:cons "NumberScale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'negative-value-configuration))
      (common-lisp:list
       (common-lisp:cons "NegativeValueConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'null-value-format-configuration))
      (common-lisp:list
       (common-lisp:cons "NullValueFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          number-display-format-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass number-format-configuration common-lisp:nil
                       ((format-configuration :initarg :format-configuration
                         :type
                         (common-lisp:or numeric-format-configuration
                                         common-lisp:null)
                         :accessor
                         %number-format-configuration-format-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'number-format-configuration
                    'make-number-format-configuration))
 (common-lisp:defun make-number-format-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key format-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'number-format-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          number-format-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          number-format-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'format-configuration))
      (common-lisp:list
       (common-lisp:cons "FormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          number-format-configuration))
   common-lisp:nil))
(common-lisp:deftype number-scale () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass numeric-axis-options common-lisp:nil
                       ((range :initarg :range :type
                         (common-lisp:or axis-display-range common-lisp:null)
                         :accessor %numeric-axis-options-range :initform
                         common-lisp:nil)
                        (scale :initarg :scale :type
                         (common-lisp:or axis-scale common-lisp:null) :accessor
                         %numeric-axis-options-scale :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'numeric-axis-options 'make-numeric-axis-options))
 (common-lisp:defun make-numeric-axis-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key range scale)
   (common-lisp:apply #'common-lisp:make-instance 'numeric-axis-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input numeric-axis-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input numeric-axis-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale))
      (common-lisp:list
       (common-lisp:cons "Scale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range))
      (common-lisp:list
       (common-lisp:cons "Range"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input numeric-axis-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass numeric-equality-drill-down-filter common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %numeric-equality-drill-down-filter-value :initform
                         (common-lisp:error ":value is required"))
                        (column :initarg :column :type
                         (common-lisp:or column-identifier common-lisp:null)
                         :accessor %numeric-equality-drill-down-filter-column
                         :initform (common-lisp:error ":column is required"))))
 (common-lisp:export
  (common-lisp:list 'numeric-equality-drill-down-filter
                    'make-numeric-equality-drill-down-filter))
 (common-lisp:defun make-numeric-equality-drill-down-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value column)
   (common-lisp:apply #'common-lisp:make-instance
                      'numeric-equality-drill-down-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          numeric-equality-drill-down-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          numeric-equality-drill-down-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          numeric-equality-drill-down-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass numeric-equality-filter common-lisp:nil
                       ((null-option :initarg :null-option :type
                         (common-lisp:or filter-null-option common-lisp:null)
                         :accessor %numeric-equality-filter-null-option
                         :initform
                         (common-lisp:error ":null-option is required"))
                        (parameter-name :initarg :parameter-name :type
                         (common-lisp:or parameter-name common-lisp:null)
                         :accessor %numeric-equality-filter-parameter-name
                         :initform common-lisp:nil)
                        (aggregation-function :initarg :aggregation-function
                         :type
                         (common-lisp:or aggregation-function common-lisp:null)
                         :accessor
                         %numeric-equality-filter-aggregation-function
                         :initform common-lisp:nil)
                        (match-operator :initarg :match-operator :type
                         (common-lisp:or numeric-equality-match-operator
                                         common-lisp:null)
                         :accessor %numeric-equality-filter-match-operator
                         :initform
                         (common-lisp:error ":match-operator is required"))
                        (select-all-options :initarg :select-all-options :type
                         (common-lisp:or numeric-filter-select-all-options
                                         common-lisp:null)
                         :accessor %numeric-equality-filter-select-all-options
                         :initform common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %numeric-equality-filter-value :initform
                         common-lisp:nil)
                        (column :initarg :column :type
                         (common-lisp:or column-identifier common-lisp:null)
                         :accessor %numeric-equality-filter-column :initform
                         (common-lisp:error ":column is required"))
                        (filter-id :initarg :filter-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %numeric-equality-filter-filter-id :initform
                         (common-lisp:error ":filter-id is required"))))
 (common-lisp:export
  (common-lisp:list 'numeric-equality-filter 'make-numeric-equality-filter))
 (common-lisp:defun make-numeric-equality-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key null-option parameter-name
                     aggregation-function match-operator select-all-options
                     value column filter-id)
   (common-lisp:apply #'common-lisp:make-instance 'numeric-equality-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          numeric-equality-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          numeric-equality-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-id))
      (common-lisp:list
       (common-lisp:cons "FilterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-all-options))
      (common-lisp:list
       (common-lisp:cons "SelectAllOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-operator))
      (common-lisp:list
       (common-lisp:cons "MatchOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-function))
      (common-lisp:list
       (common-lisp:cons "AggregationFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'null-option))
      (common-lisp:list
       (common-lisp:cons "NullOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          numeric-equality-filter))
   common-lisp:nil))
(common-lisp:deftype numeric-equality-match-operator () 'common-lisp:string)
(common-lisp:deftype numeric-filter-select-all-options () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass numeric-format-configuration common-lisp:nil
                       ((percentage-display-format-configuration :initarg
                         :percentage-display-format-configuration :type
                         (common-lisp:or
                          percentage-display-format-configuration
                          common-lisp:null)
                         :accessor
                         %numeric-format-configuration-percentage-display-format-configuration
                         :initform common-lisp:nil)
                        (currency-display-format-configuration :initarg
                         :currency-display-format-configuration :type
                         (common-lisp:or currency-display-format-configuration
                                         common-lisp:null)
                         :accessor
                         %numeric-format-configuration-currency-display-format-configuration
                         :initform common-lisp:nil)
                        (number-display-format-configuration :initarg
                         :number-display-format-configuration :type
                         (common-lisp:or number-display-format-configuration
                                         common-lisp:null)
                         :accessor
                         %numeric-format-configuration-number-display-format-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'numeric-format-configuration
                    'make-numeric-format-configuration))
 (common-lisp:defun make-numeric-format-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key percentage-display-format-configuration
                     currency-display-format-configuration
                     number-display-format-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'numeric-format-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          numeric-format-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          numeric-format-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-display-format-configuration))
      (common-lisp:list
       (common-lisp:cons "NumberDisplayFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'currency-display-format-configuration))
      (common-lisp:list
       (common-lisp:cons "CurrencyDisplayFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'percentage-display-format-configuration))
      (common-lisp:list
       (common-lisp:cons "PercentageDisplayFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          numeric-format-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass numeric-range-filter common-lisp:nil
                       ((null-option :initarg :null-option :type
                         (common-lisp:or filter-null-option common-lisp:null)
                         :accessor %numeric-range-filter-null-option :initform
                         (common-lisp:error ":null-option is required"))
                        (aggregation-function :initarg :aggregation-function
                         :type
                         (common-lisp:or aggregation-function common-lisp:null)
                         :accessor %numeric-range-filter-aggregation-function
                         :initform common-lisp:nil)
                        (select-all-options :initarg :select-all-options :type
                         (common-lisp:or numeric-filter-select-all-options
                                         common-lisp:null)
                         :accessor %numeric-range-filter-select-all-options
                         :initform common-lisp:nil)
                        (range-maximum :initarg :range-maximum :type
                         (common-lisp:or numeric-range-filter-value
                                         common-lisp:null)
                         :accessor %numeric-range-filter-range-maximum
                         :initform common-lisp:nil)
                        (range-minimum :initarg :range-minimum :type
                         (common-lisp:or numeric-range-filter-value
                                         common-lisp:null)
                         :accessor %numeric-range-filter-range-minimum
                         :initform common-lisp:nil)
                        (include-maximum :initarg :include-maximum :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %numeric-range-filter-include-maximum :initform
                         common-lisp:nil)
                        (include-minimum :initarg :include-minimum :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %numeric-range-filter-include-minimum :initform
                         common-lisp:nil)
                        (column :initarg :column :type
                         (common-lisp:or column-identifier common-lisp:null)
                         :accessor %numeric-range-filter-column :initform
                         (common-lisp:error ":column is required"))
                        (filter-id :initarg :filter-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %numeric-range-filter-filter-id :initform
                         (common-lisp:error ":filter-id is required"))))
 (common-lisp:export
  (common-lisp:list 'numeric-range-filter 'make-numeric-range-filter))
 (common-lisp:defun make-numeric-range-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key null-option aggregation-function
                     select-all-options range-maximum range-minimum
                     include-maximum include-minimum column filter-id)
   (common-lisp:apply #'common-lisp:make-instance 'numeric-range-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input numeric-range-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input numeric-range-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-id))
      (common-lisp:list
       (common-lisp:cons "FilterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-minimum))
      (common-lisp:list
       (common-lisp:cons "IncludeMinimum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-maximum))
      (common-lisp:list
       (common-lisp:cons "IncludeMaximum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range-minimum))
      (common-lisp:list
       (common-lisp:cons "RangeMinimum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range-maximum))
      (common-lisp:list
       (common-lisp:cons "RangeMaximum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-all-options))
      (common-lisp:list
       (common-lisp:cons "SelectAllOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-function))
      (common-lisp:list
       (common-lisp:cons "AggregationFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'null-option))
      (common-lisp:list
       (common-lisp:cons "NullOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input numeric-range-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass numeric-range-filter-value common-lisp:nil
                       ((parameter :initarg :parameter :type
                         (common-lisp:or parameter-name common-lisp:null)
                         :accessor %numeric-range-filter-value-parameter
                         :initform common-lisp:nil)
                        (static-value :initarg :static-value :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %numeric-range-filter-value-static-value :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'numeric-range-filter-value
                    'make-numeric-range-filter-value))
 (common-lisp:defun make-numeric-range-filter-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter static-value)
   (common-lisp:apply #'common-lisp:make-instance 'numeric-range-filter-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          numeric-range-filter-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          numeric-range-filter-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-value))
      (common-lisp:list
       (common-lisp:cons "StaticValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter))
      (common-lisp:list
       (common-lisp:cons "Parameter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          numeric-range-filter-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass numeric-separator-configuration common-lisp:nil
                       ((thousands-separator :initarg :thousands-separator
                         :type
                         (common-lisp:or thousand-separator-options
                                         common-lisp:null)
                         :accessor
                         %numeric-separator-configuration-thousands-separator
                         :initform common-lisp:nil)
                        (decimal-separator :initarg :decimal-separator :type
                         (common-lisp:or numeric-separator-symbol
                                         common-lisp:null)
                         :accessor
                         %numeric-separator-configuration-decimal-separator
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'numeric-separator-configuration
                    'make-numeric-separator-configuration))
 (common-lisp:defun make-numeric-separator-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key thousands-separator decimal-separator)
   (common-lisp:apply #'common-lisp:make-instance
                      'numeric-separator-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          numeric-separator-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          numeric-separator-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decimal-separator))
      (common-lisp:list
       (common-lisp:cons "DecimalSeparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thousands-separator))
      (common-lisp:list
       (common-lisp:cons "ThousandsSeparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          numeric-separator-configuration))
   common-lisp:nil))
(common-lisp:deftype numeric-separator-symbol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass numerical-aggregation-function common-lisp:nil
                       ((percentile-aggregation :initarg
                         :percentile-aggregation :type
                         (common-lisp:or percentile-aggregation
                                         common-lisp:null)
                         :accessor
                         %numerical-aggregation-function-percentile-aggregation
                         :initform common-lisp:nil)
                        (simple-numerical-aggregation :initarg
                         :simple-numerical-aggregation :type
                         (common-lisp:or simple-numerical-aggregation-function
                                         common-lisp:null)
                         :accessor
                         %numerical-aggregation-function-simple-numerical-aggregation
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'numerical-aggregation-function
                    'make-numerical-aggregation-function))
 (common-lisp:defun make-numerical-aggregation-function
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key percentile-aggregation
                     simple-numerical-aggregation)
   (common-lisp:apply #'common-lisp:make-instance
                      'numerical-aggregation-function
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          numerical-aggregation-function))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          numerical-aggregation-function))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'simple-numerical-aggregation))
      (common-lisp:list
       (common-lisp:cons "SimpleNumericalAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'percentile-aggregation))
      (common-lisp:list
       (common-lisp:cons "PercentileAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          numerical-aggregation-function))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass numerical-dimension-field common-lisp:nil
                       ((format-configuration :initarg :format-configuration
                         :type
                         (common-lisp:or number-format-configuration
                                         common-lisp:null)
                         :accessor
                         %numerical-dimension-field-format-configuration
                         :initform common-lisp:nil)
                        (hierarchy-id :initarg :hierarchy-id :type
                         (common-lisp:or hierarchy-id common-lisp:null)
                         :accessor %numerical-dimension-field-hierarchy-id
                         :initform common-lisp:nil)
                        (column :initarg :column :type
                         (common-lisp:or column-identifier common-lisp:null)
                         :accessor %numerical-dimension-field-column :initform
                         (common-lisp:error ":column is required"))
                        (field-id :initarg :field-id :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         %numerical-dimension-field-field-id :initform
                         (common-lisp:error ":field-id is required"))))
 (common-lisp:export
  (common-lisp:list 'numerical-dimension-field
                    'make-numerical-dimension-field))
 (common-lisp:defun make-numerical-dimension-field
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key format-configuration hierarchy-id column
                     field-id)
   (common-lisp:apply #'common-lisp:make-instance 'numerical-dimension-field
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          numerical-dimension-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          numerical-dimension-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-id))
      (common-lisp:list
       (common-lisp:cons "HierarchyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'format-configuration))
      (common-lisp:list
       (common-lisp:cons "FormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          numerical-dimension-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass numerical-measure-field common-lisp:nil
                       ((format-configuration :initarg :format-configuration
                         :type
                         (common-lisp:or number-format-configuration
                                         common-lisp:null)
                         :accessor
                         %numerical-measure-field-format-configuration
                         :initform common-lisp:nil)
                        (aggregation-function :initarg :aggregation-function
                         :type
                         (common-lisp:or numerical-aggregation-function
                                         common-lisp:null)
                         :accessor
                         %numerical-measure-field-aggregation-function
                         :initform common-lisp:nil)
                        (column :initarg :column :type
                         (common-lisp:or column-identifier common-lisp:null)
                         :accessor %numerical-measure-field-column :initform
                         (common-lisp:error ":column is required"))
                        (field-id :initarg :field-id :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         %numerical-measure-field-field-id :initform
                         (common-lisp:error ":field-id is required"))))
 (common-lisp:export
  (common-lisp:list 'numerical-measure-field 'make-numerical-measure-field))
 (common-lisp:defun make-numerical-measure-field
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key format-configuration aggregation-function
                     column field-id)
   (common-lisp:apply #'common-lisp:make-instance 'numerical-measure-field
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          numerical-measure-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          numerical-measure-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-function))
      (common-lisp:list
       (common-lisp:cons "AggregationFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'format-configuration))
      (common-lisp:list
       (common-lisp:cons "FormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          numerical-measure-field))
   common-lisp:nil))
(common-lisp:deftype on-clause () 'common-lisp:string)
(common-lisp:deftype optional-port () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass oracle-parameters common-lisp:nil
                       ((database :initarg :database :type
                         (common-lisp:or database common-lisp:null) :accessor
                         %oracle-parameters-database :initform
                         (common-lisp:error ":database is required"))
                        (port :initarg :port :type
                         (common-lisp:or port common-lisp:null) :accessor
                         %oracle-parameters-port :initform
                         (common-lisp:error ":port is required"))
                        (host :initarg :host :type
                         (common-lisp:or host common-lisp:null) :accessor
                         %oracle-parameters-host :initform
                         (common-lisp:error ":host is required"))))
 (common-lisp:export
  (common-lisp:list 'oracle-parameters 'make-oracle-parameters))
 (common-lisp:defun make-oracle-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key database port host)
   (common-lisp:apply #'common-lisp:make-instance 'oracle-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input oracle-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input oracle-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input oracle-parameters))
   common-lisp:nil))
(common-lisp:deftype other-categories () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass output-column common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or column-data-type common-lisp:null)
                         :accessor %output-column-type :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or column-descriptive-text
                                         common-lisp:null)
                         :accessor %output-column-description :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or column-name common-lisp:null)
                         :accessor %output-column-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'output-column 'make-output-column))
 (common-lisp:defun make-output-column
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type description name)
   (common-lisp:apply #'common-lisp:make-instance 'output-column
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-column))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype output-column-list ()
   '(trivial-types:proper-list output-column))
 (common-lisp:defun |make-output-column-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-column))
   aws-sdk/generator/shape::members))
(common-lisp:deftype page-number () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass pagination-configuration common-lisp:nil
                       ((page-number :initarg :page-number :type
                         (common-lisp:or page-number common-lisp:null)
                         :accessor %pagination-configuration-page-number
                         :initform
                         (common-lisp:error ":page-number is required"))
                        (page-size :initarg :page-size :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %pagination-configuration-page-size :initform
                         (common-lisp:error ":page-size is required"))))
 (common-lisp:export
  (common-lisp:list 'pagination-configuration 'make-pagination-configuration))
 (common-lisp:defun make-pagination-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-number page-size)
   (common-lisp:apply #'common-lisp:make-instance 'pagination-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pagination-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pagination-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-number))
      (common-lisp:list
       (common-lisp:cons "PageNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pagination-configuration))
   common-lisp:nil))
(common-lisp:deftype panel-border-style () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass panel-configuration common-lisp:nil
                       ((background-color :initarg :background-color :type
                         (common-lisp:or hex-color-with-transparency
                                         common-lisp:null)
                         :accessor %panel-configuration-background-color
                         :initform common-lisp:nil)
                        (background-visibility :initarg :background-visibility
                         :type (common-lisp:or visibility common-lisp:null)
                         :accessor %panel-configuration-background-visibility
                         :initform common-lisp:nil)
                        (gutter-spacing :initarg :gutter-spacing :type
                         (common-lisp:or pixel-length common-lisp:null)
                         :accessor %panel-configuration-gutter-spacing
                         :initform common-lisp:nil)
                        (gutter-visibility :initarg :gutter-visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %panel-configuration-gutter-visibility :initform
                         common-lisp:nil)
                        (border-color :initarg :border-color :type
                         (common-lisp:or hex-color-with-transparency
                                         common-lisp:null)
                         :accessor %panel-configuration-border-color :initform
                         common-lisp:nil)
                        (border-style :initarg :border-style :type
                         (common-lisp:or panel-border-style common-lisp:null)
                         :accessor %panel-configuration-border-style :initform
                         common-lisp:nil)
                        (border-thickness :initarg :border-thickness :type
                         (common-lisp:or pixel-length common-lisp:null)
                         :accessor %panel-configuration-border-thickness
                         :initform common-lisp:nil)
                        (border-visibility :initarg :border-visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %panel-configuration-border-visibility :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or panel-title-options common-lisp:null)
                         :accessor %panel-configuration-title :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'panel-configuration 'make-panel-configuration))
 (common-lisp:defun make-panel-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key background-color background-visibility
                     gutter-spacing gutter-visibility border-color border-style
                     border-thickness border-visibility title)
   (common-lisp:apply #'common-lisp:make-instance 'panel-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input panel-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input panel-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'border-visibility))
      (common-lisp:list
       (common-lisp:cons "BorderVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'border-thickness))
      (common-lisp:list
       (common-lisp:cons "BorderThickness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'border-style))
      (common-lisp:list
       (common-lisp:cons "BorderStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'border-color))
      (common-lisp:list
       (common-lisp:cons "BorderColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gutter-visibility))
      (common-lisp:list
       (common-lisp:cons "GutterVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gutter-spacing))
      (common-lisp:list
       (common-lisp:cons "GutterSpacing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'background-visibility))
      (common-lisp:list
       (common-lisp:cons "BackgroundVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background-color))
      (common-lisp:list
       (common-lisp:cons "BackgroundColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input panel-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass panel-title-options common-lisp:nil
                       ((horizontal-text-alignment :initarg
                         :horizontal-text-alignment :type
                         (common-lisp:or horizontal-text-alignment
                                         common-lisp:null)
                         :accessor
                         %panel-title-options-horizontal-text-alignment
                         :initform common-lisp:nil)
                        (font-configuration :initarg :font-configuration :type
                         (common-lisp:or font-configuration common-lisp:null)
                         :accessor %panel-title-options-font-configuration
                         :initform common-lisp:nil)
                        (visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %panel-title-options-visibility :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'panel-title-options 'make-panel-title-options))
 (common-lisp:defun make-panel-title-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key horizontal-text-alignment
                     font-configuration visibility)
   (common-lisp:apply #'common-lisp:make-instance 'panel-title-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input panel-title-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input panel-title-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-configuration))
      (common-lisp:list
       (common-lisp:cons "FontConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'horizontal-text-alignment))
      (common-lisp:list
       (common-lisp:cons "HorizontalTextAlignment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input panel-title-options))
   common-lisp:nil))
(common-lisp:deftype paper-orientation () 'common-lisp:string)
(common-lisp:deftype paper-size () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass parameter-control common-lisp:nil
                       ((slider :initarg :slider :type
                         (common-lisp:or parameter-slider-control
                                         common-lisp:null)
                         :accessor %parameter-control-slider :initform
                         common-lisp:nil)
                        (text-area :initarg :text-area :type
                         (common-lisp:or parameter-text-area-control
                                         common-lisp:null)
                         :accessor %parameter-control-text-area :initform
                         common-lisp:nil)
                        (text-field :initarg :text-field :type
                         (common-lisp:or parameter-text-field-control
                                         common-lisp:null)
                         :accessor %parameter-control-text-field :initform
                         common-lisp:nil)
                        (dropdown :initarg :dropdown :type
                         (common-lisp:or parameter-drop-down-control
                                         common-lisp:null)
                         :accessor %parameter-control-dropdown :initform
                         common-lisp:nil)
                        (list :initarg :list :type
                         (common-lisp:or parameter-list-control
                                         common-lisp:null)
                         :accessor %parameter-control-list :initform
                         common-lisp:nil)
                        (date-time-picker :initarg :date-time-picker :type
                         (common-lisp:or parameter-date-time-picker-control
                                         common-lisp:null)
                         :accessor %parameter-control-date-time-picker
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'parameter-control 'make-parameter-control))
 (common-lisp:defun make-parameter-control
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key slider text-area text-field dropdown list
                     date-time-picker)
   (common-lisp:apply #'common-lisp:make-instance 'parameter-control
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-time-picker))
      (common-lisp:list
       (common-lisp:cons "DateTimePicker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list))
      (common-lisp:list
       (common-lisp:cons "List"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dropdown))
      (common-lisp:list
       (common-lisp:cons "Dropdown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-field))
      (common-lisp:list
       (common-lisp:cons "TextField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-area))
      (common-lisp:list
       (common-lisp:cons "TextArea"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slider))
      (common-lisp:list
       (common-lisp:cons "Slider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parameter-control-list ()
   '(trivial-types:proper-list parameter-control))
 (common-lisp:defun |make-parameter-control-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-control))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass parameter-date-time-picker-control common-lisp:nil
                       ((display-options :initarg :display-options :type
                         (common-lisp:or
                          date-time-picker-control-display-options
                          common-lisp:null)
                         :accessor
                         %parameter-date-time-picker-control-display-options
                         :initform common-lisp:nil)
                        (source-parameter-name :initarg :source-parameter-name
                         :type (common-lisp:or parameter-name common-lisp:null)
                         :accessor
                         %parameter-date-time-picker-control-source-parameter-name
                         :initform
                         (common-lisp:error
                          ":source-parameter-name is required"))
                        (title :initarg :title :type
                         (common-lisp:or sheet-control-title common-lisp:null)
                         :accessor %parameter-date-time-picker-control-title
                         :initform (common-lisp:error ":title is required"))
                        (parameter-control-id :initarg :parameter-control-id
                         :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %parameter-date-time-picker-control-parameter-control-id
                         :initform
                         (common-lisp:error
                          ":parameter-control-id is required"))))
 (common-lisp:export
  (common-lisp:list 'parameter-date-time-picker-control
                    'make-parameter-date-time-picker-control))
 (common-lisp:defun make-parameter-date-time-picker-control
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key display-options source-parameter-name
                     title parameter-control-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'parameter-date-time-picker-control
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parameter-date-time-picker-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parameter-date-time-picker-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-control-id))
      (common-lisp:list
       (common-lisp:cons "ParameterControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-parameter-name))
      (common-lisp:list
       (common-lisp:cons "SourceParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-options))
      (common-lisp:list
       (common-lisp:cons "DisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parameter-date-time-picker-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass parameter-declaration common-lisp:nil
                       ((date-time-parameter-declaration :initarg
                         :date-time-parameter-declaration :type
                         (common-lisp:or date-time-parameter-declaration
                                         common-lisp:null)
                         :accessor
                         %parameter-declaration-date-time-parameter-declaration
                         :initform common-lisp:nil)
                        (integer-parameter-declaration :initarg
                         :integer-parameter-declaration :type
                         (common-lisp:or integer-parameter-declaration
                                         common-lisp:null)
                         :accessor
                         %parameter-declaration-integer-parameter-declaration
                         :initform common-lisp:nil)
                        (decimal-parameter-declaration :initarg
                         :decimal-parameter-declaration :type
                         (common-lisp:or decimal-parameter-declaration
                                         common-lisp:null)
                         :accessor
                         %parameter-declaration-decimal-parameter-declaration
                         :initform common-lisp:nil)
                        (string-parameter-declaration :initarg
                         :string-parameter-declaration :type
                         (common-lisp:or string-parameter-declaration
                                         common-lisp:null)
                         :accessor
                         %parameter-declaration-string-parameter-declaration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'parameter-declaration 'make-parameter-declaration))
 (common-lisp:defun make-parameter-declaration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key date-time-parameter-declaration
                     integer-parameter-declaration
                     decimal-parameter-declaration
                     string-parameter-declaration)
   (common-lisp:apply #'common-lisp:make-instance 'parameter-declaration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parameter-declaration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parameter-declaration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'string-parameter-declaration))
      (common-lisp:list
       (common-lisp:cons "StringParameterDeclaration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decimal-parameter-declaration))
      (common-lisp:list
       (common-lisp:cons "DecimalParameterDeclaration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'integer-parameter-declaration))
      (common-lisp:list
       (common-lisp:cons "IntegerParameterDeclaration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'date-time-parameter-declaration))
      (common-lisp:list
       (common-lisp:cons "DateTimeParameterDeclaration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parameter-declaration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parameter-declaration-list ()
   '(trivial-types:proper-list parameter-declaration))
 (common-lisp:defun |make-parameter-declaration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-declaration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass parameter-drop-down-control common-lisp:nil
                       ((cascading-control-configuration :initarg
                         :cascading-control-configuration :type
                         (common-lisp:or cascading-control-configuration
                                         common-lisp:null)
                         :accessor
                         %parameter-drop-down-control-cascading-control-configuration
                         :initform common-lisp:nil)
                        (selectable-values :initarg :selectable-values :type
                         (common-lisp:or parameter-selectable-values
                                         common-lisp:null)
                         :accessor
                         %parameter-drop-down-control-selectable-values
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or sheet-control-list-type
                                         common-lisp:null)
                         :accessor %parameter-drop-down-control-type :initform
                         common-lisp:nil)
                        (display-options :initarg :display-options :type
                         (common-lisp:or drop-down-control-display-options
                                         common-lisp:null)
                         :accessor %parameter-drop-down-control-display-options
                         :initform common-lisp:nil)
                        (source-parameter-name :initarg :source-parameter-name
                         :type (common-lisp:or parameter-name common-lisp:null)
                         :accessor
                         %parameter-drop-down-control-source-parameter-name
                         :initform
                         (common-lisp:error
                          ":source-parameter-name is required"))
                        (title :initarg :title :type
                         (common-lisp:or sheet-control-title common-lisp:null)
                         :accessor %parameter-drop-down-control-title :initform
                         (common-lisp:error ":title is required"))
                        (parameter-control-id :initarg :parameter-control-id
                         :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %parameter-drop-down-control-parameter-control-id
                         :initform
                         (common-lisp:error
                          ":parameter-control-id is required"))))
 (common-lisp:export
  (common-lisp:list 'parameter-drop-down-control
                    'make-parameter-drop-down-control))
 (common-lisp:defun make-parameter-drop-down-control
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cascading-control-configuration
                     selectable-values type display-options
                     source-parameter-name title parameter-control-id)
   (common-lisp:apply #'common-lisp:make-instance 'parameter-drop-down-control
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parameter-drop-down-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parameter-drop-down-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-control-id))
      (common-lisp:list
       (common-lisp:cons "ParameterControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-parameter-name))
      (common-lisp:list
       (common-lisp:cons "SourceParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-options))
      (common-lisp:list
       (common-lisp:cons "DisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selectable-values))
      (common-lisp:list
       (common-lisp:cons "SelectableValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cascading-control-configuration))
      (common-lisp:list
       (common-lisp:cons "CascadingControlConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parameter-drop-down-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass parameter-list-control common-lisp:nil
                       ((cascading-control-configuration :initarg
                         :cascading-control-configuration :type
                         (common-lisp:or cascading-control-configuration
                                         common-lisp:null)
                         :accessor
                         %parameter-list-control-cascading-control-configuration
                         :initform common-lisp:nil)
                        (selectable-values :initarg :selectable-values :type
                         (common-lisp:or parameter-selectable-values
                                         common-lisp:null)
                         :accessor %parameter-list-control-selectable-values
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or sheet-control-list-type
                                         common-lisp:null)
                         :accessor %parameter-list-control-type :initform
                         common-lisp:nil)
                        (display-options :initarg :display-options :type
                         (common-lisp:or list-control-display-options
                                         common-lisp:null)
                         :accessor %parameter-list-control-display-options
                         :initform common-lisp:nil)
                        (source-parameter-name :initarg :source-parameter-name
                         :type (common-lisp:or parameter-name common-lisp:null)
                         :accessor
                         %parameter-list-control-source-parameter-name
                         :initform
                         (common-lisp:error
                          ":source-parameter-name is required"))
                        (title :initarg :title :type
                         (common-lisp:or sheet-control-title common-lisp:null)
                         :accessor %parameter-list-control-title :initform
                         (common-lisp:error ":title is required"))
                        (parameter-control-id :initarg :parameter-control-id
                         :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %parameter-list-control-parameter-control-id
                         :initform
                         (common-lisp:error
                          ":parameter-control-id is required"))))
 (common-lisp:export
  (common-lisp:list 'parameter-list-control 'make-parameter-list-control))
 (common-lisp:defun make-parameter-list-control
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cascading-control-configuration
                     selectable-values type display-options
                     source-parameter-name title parameter-control-id)
   (common-lisp:apply #'common-lisp:make-instance 'parameter-list-control
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parameter-list-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parameter-list-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-control-id))
      (common-lisp:list
       (common-lisp:cons "ParameterControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-parameter-name))
      (common-lisp:list
       (common-lisp:cons "SourceParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-options))
      (common-lisp:list
       (common-lisp:cons "DisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selectable-values))
      (common-lisp:list
       (common-lisp:cons "SelectableValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cascading-control-configuration))
      (common-lisp:list
       (common-lisp:cons "CascadingControlConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parameter-list-control))
   common-lisp:nil))
(common-lisp:deftype parameter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parameter-selectable-value-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-parameter-selectable-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass parameter-selectable-values common-lisp:nil
                       ((link-to-data-set-column :initarg
                         :link-to-data-set-column :type
                         (common-lisp:or column-identifier common-lisp:null)
                         :accessor
                         %parameter-selectable-values-link-to-data-set-column
                         :initform common-lisp:nil)
                        (values :initarg :values :type
                         (common-lisp:or parameter-selectable-value-list
                                         common-lisp:null)
                         :accessor %parameter-selectable-values-values
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'parameter-selectable-values
                    'make-parameter-selectable-values))
 (common-lisp:defun make-parameter-selectable-values
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key link-to-data-set-column values)
   (common-lisp:apply #'common-lisp:make-instance 'parameter-selectable-values
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parameter-selectable-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parameter-selectable-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'link-to-data-set-column))
      (common-lisp:list
       (common-lisp:cons "LinkToDataSetColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parameter-selectable-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass parameter-slider-control common-lisp:nil
                       ((step-size :initarg :step-size :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %parameter-slider-control-step-size :initform
                         (common-lisp:error ":step-size is required"))
                        (minimum-value :initarg :minimum-value :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %parameter-slider-control-minimum-value :initform
                         (common-lisp:error ":minimum-value is required"))
                        (maximum-value :initarg :maximum-value :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %parameter-slider-control-maximum-value :initform
                         (common-lisp:error ":maximum-value is required"))
                        (display-options :initarg :display-options :type
                         (common-lisp:or slider-control-display-options
                                         common-lisp:null)
                         :accessor %parameter-slider-control-display-options
                         :initform common-lisp:nil)
                        (source-parameter-name :initarg :source-parameter-name
                         :type (common-lisp:or parameter-name common-lisp:null)
                         :accessor
                         %parameter-slider-control-source-parameter-name
                         :initform
                         (common-lisp:error
                          ":source-parameter-name is required"))
                        (title :initarg :title :type
                         (common-lisp:or sheet-control-title common-lisp:null)
                         :accessor %parameter-slider-control-title :initform
                         (common-lisp:error ":title is required"))
                        (parameter-control-id :initarg :parameter-control-id
                         :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %parameter-slider-control-parameter-control-id
                         :initform
                         (common-lisp:error
                          ":parameter-control-id is required"))))
 (common-lisp:export
  (common-lisp:list 'parameter-slider-control 'make-parameter-slider-control))
 (common-lisp:defun make-parameter-slider-control
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key step-size minimum-value maximum-value
                     display-options source-parameter-name title
                     parameter-control-id)
   (common-lisp:apply #'common-lisp:make-instance 'parameter-slider-control
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parameter-slider-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parameter-slider-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-control-id))
      (common-lisp:list
       (common-lisp:cons "ParameterControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-parameter-name))
      (common-lisp:list
       (common-lisp:cons "SourceParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-options))
      (common-lisp:list
       (common-lisp:cons "DisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-value))
      (common-lisp:list
       (common-lisp:cons "MaximumValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-value))
      (common-lisp:list
       (common-lisp:cons "MinimumValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-size))
      (common-lisp:list
       (common-lisp:cons "StepSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parameter-slider-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass parameter-text-area-control common-lisp:nil
                       ((display-options :initarg :display-options :type
                         (common-lisp:or text-area-control-display-options
                                         common-lisp:null)
                         :accessor %parameter-text-area-control-display-options
                         :initform common-lisp:nil)
                        (delimiter :initarg :delimiter :type
                         (common-lisp:or text-area-control-delimiter
                                         common-lisp:null)
                         :accessor %parameter-text-area-control-delimiter
                         :initform common-lisp:nil)
                        (source-parameter-name :initarg :source-parameter-name
                         :type (common-lisp:or parameter-name common-lisp:null)
                         :accessor
                         %parameter-text-area-control-source-parameter-name
                         :initform
                         (common-lisp:error
                          ":source-parameter-name is required"))
                        (title :initarg :title :type
                         (common-lisp:or sheet-control-title common-lisp:null)
                         :accessor %parameter-text-area-control-title :initform
                         (common-lisp:error ":title is required"))
                        (parameter-control-id :initarg :parameter-control-id
                         :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %parameter-text-area-control-parameter-control-id
                         :initform
                         (common-lisp:error
                          ":parameter-control-id is required"))))
 (common-lisp:export
  (common-lisp:list 'parameter-text-area-control
                    'make-parameter-text-area-control))
 (common-lisp:defun make-parameter-text-area-control
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key display-options delimiter
                     source-parameter-name title parameter-control-id)
   (common-lisp:apply #'common-lisp:make-instance 'parameter-text-area-control
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parameter-text-area-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parameter-text-area-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-control-id))
      (common-lisp:list
       (common-lisp:cons "ParameterControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-parameter-name))
      (common-lisp:list
       (common-lisp:cons "SourceParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-options))
      (common-lisp:list
       (common-lisp:cons "DisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parameter-text-area-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass parameter-text-field-control common-lisp:nil
                       ((display-options :initarg :display-options :type
                         (common-lisp:or text-field-control-display-options
                                         common-lisp:null)
                         :accessor
                         %parameter-text-field-control-display-options
                         :initform common-lisp:nil)
                        (source-parameter-name :initarg :source-parameter-name
                         :type (common-lisp:or parameter-name common-lisp:null)
                         :accessor
                         %parameter-text-field-control-source-parameter-name
                         :initform
                         (common-lisp:error
                          ":source-parameter-name is required"))
                        (title :initarg :title :type
                         (common-lisp:or sheet-control-title common-lisp:null)
                         :accessor %parameter-text-field-control-title
                         :initform (common-lisp:error ":title is required"))
                        (parameter-control-id :initarg :parameter-control-id
                         :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %parameter-text-field-control-parameter-control-id
                         :initform
                         (common-lisp:error
                          ":parameter-control-id is required"))))
 (common-lisp:export
  (common-lisp:list 'parameter-text-field-control
                    'make-parameter-text-field-control))
 (common-lisp:defun make-parameter-text-field-control
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key display-options source-parameter-name
                     title parameter-control-id)
   (common-lisp:apply #'common-lisp:make-instance 'parameter-text-field-control
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parameter-text-field-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parameter-text-field-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-control-id))
      (common-lisp:list
       (common-lisp:cons "ParameterControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-parameter-name))
      (common-lisp:list
       (common-lisp:cons "SourceParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-options))
      (common-lisp:list
       (common-lisp:cons "DisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parameter-text-field-control))
   common-lisp:nil))
(common-lisp:deftype parameter-value-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass parameters common-lisp:nil
                       ((date-time-parameters :initarg :date-time-parameters
                         :type
                         (common-lisp:or date-time-parameter-list
                                         common-lisp:null)
                         :accessor %parameters-date-time-parameters :initform
                         common-lisp:nil)
                        (decimal-parameters :initarg :decimal-parameters :type
                         (common-lisp:or decimal-parameter-list
                                         common-lisp:null)
                         :accessor %parameters-decimal-parameters :initform
                         common-lisp:nil)
                        (integer-parameters :initarg :integer-parameters :type
                         (common-lisp:or integer-parameter-list
                                         common-lisp:null)
                         :accessor %parameters-integer-parameters :initform
                         common-lisp:nil)
                        (string-parameters :initarg :string-parameters :type
                         (common-lisp:or string-parameter-list
                                         common-lisp:null)
                         :accessor %parameters-string-parameters :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'parameters 'make-parameters))
 (common-lisp:defun make-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key date-time-parameters decimal-parameters
                     integer-parameters string-parameters)
   (common-lisp:apply #'common-lisp:make-instance 'parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-parameters))
      (common-lisp:list
       (common-lisp:cons "StringParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integer-parameters))
      (common-lisp:list
       (common-lisp:cons "IntegerParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decimal-parameters))
      (common-lisp:list
       (common-lisp:cons "DecimalParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'date-time-parameters))
      (common-lisp:list
       (common-lisp:cons "DateTimeParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameters))
   common-lisp:nil))
(common-lisp:deftype password () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype path () '(trivial-types:proper-list arn))
 (common-lisp:defun |make-path|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype percent-number () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass percent-visible-range common-lisp:nil
                       ((to :initarg :to :type
                         (common-lisp:or percent-number common-lisp:null)
                         :accessor %percent-visible-range-to :initform
                         common-lisp:nil)
                        (from :initarg :from :type
                         (common-lisp:or percent-number common-lisp:null)
                         :accessor %percent-visible-range-from :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'percent-visible-range 'make-percent-visible-range))
 (common-lisp:defun make-percent-visible-range
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key to from)
   (common-lisp:apply #'common-lisp:make-instance 'percent-visible-range
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          percent-visible-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          percent-visible-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from))
      (common-lisp:list
       (common-lisp:cons "From"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to))
      (common-lisp:list
       (common-lisp:cons "To"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          percent-visible-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass percentage-display-format-configuration common-lisp:nil
                       ((null-value-format-configuration :initarg
                         :null-value-format-configuration :type
                         (common-lisp:or null-value-format-configuration
                                         common-lisp:null)
                         :accessor
                         %percentage-display-format-configuration-null-value-format-configuration
                         :initform common-lisp:nil)
                        (negative-value-configuration :initarg
                         :negative-value-configuration :type
                         (common-lisp:or negative-value-configuration
                                         common-lisp:null)
                         :accessor
                         %percentage-display-format-configuration-negative-value-configuration
                         :initform common-lisp:nil)
                        (decimal-places-configuration :initarg
                         :decimal-places-configuration :type
                         (common-lisp:or decimal-places-configuration
                                         common-lisp:null)
                         :accessor
                         %percentage-display-format-configuration-decimal-places-configuration
                         :initform common-lisp:nil)
                        (separator-configuration :initarg
                         :separator-configuration :type
                         (common-lisp:or numeric-separator-configuration
                                         common-lisp:null)
                         :accessor
                         %percentage-display-format-configuration-separator-configuration
                         :initform common-lisp:nil)
                        (suffix :initarg :suffix :type
                         (common-lisp:or suffix common-lisp:null) :accessor
                         %percentage-display-format-configuration-suffix
                         :initform common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %percentage-display-format-configuration-prefix
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'percentage-display-format-configuration
                    'make-percentage-display-format-configuration))
 (common-lisp:defun make-percentage-display-format-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key null-value-format-configuration
                     negative-value-configuration decimal-places-configuration
                     separator-configuration suffix prefix)
   (common-lisp:apply #'common-lisp:make-instance
                      'percentage-display-format-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          percentage-display-format-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          percentage-display-format-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suffix))
      (common-lisp:list
       (common-lisp:cons "Suffix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'separator-configuration))
      (common-lisp:list
       (common-lisp:cons "SeparatorConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decimal-places-configuration))
      (common-lisp:list
       (common-lisp:cons "DecimalPlacesConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'negative-value-configuration))
      (common-lisp:list
       (common-lisp:cons "NegativeValueConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'null-value-format-configuration))
      (common-lisp:list
       (common-lisp:cons "NullValueFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          percentage-display-format-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass percentile-aggregation common-lisp:nil
                       ((percentile-value :initarg :percentile-value :type
                         (common-lisp:or percentile-value common-lisp:null)
                         :accessor %percentile-aggregation-percentile-value
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'percentile-aggregation 'make-percentile-aggregation))
 (common-lisp:defun make-percentile-aggregation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key percentile-value)
   (common-lisp:apply #'common-lisp:make-instance 'percentile-aggregation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          percentile-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          percentile-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percentile-value))
      (common-lisp:list
       (common-lisp:cons "PercentileValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          percentile-aggregation))
   common-lisp:nil))
(common-lisp:deftype percentile-value () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass period-over-period-computation common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or measure-field common-lisp:null)
                         :accessor %period-over-period-computation-value
                         :initform common-lisp:nil)
                        (time :initarg :time :type
                         (common-lisp:or dimension-field common-lisp:null)
                         :accessor %period-over-period-computation-time
                         :initform (common-lisp:error ":time is required"))
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %period-over-period-computation-name :initform
                         common-lisp:nil)
                        (computation-id :initarg :computation-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %period-over-period-computation-computation-id
                         :initform
                         (common-lisp:error ":computation-id is required"))))
 (common-lisp:export
  (common-lisp:list 'period-over-period-computation
                    'make-period-over-period-computation))
 (common-lisp:defun make-period-over-period-computation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value time name computation-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'period-over-period-computation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          period-over-period-computation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          period-over-period-computation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computation-id))
      (common-lisp:list
       (common-lisp:cons "ComputationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          period-over-period-computation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass period-to-date-computation common-lisp:nil
                       ((period-time-granularity :initarg
                         :period-time-granularity :type
                         (common-lisp:or time-granularity common-lisp:null)
                         :accessor
                         %period-to-date-computation-period-time-granularity
                         :initform common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or measure-field common-lisp:null)
                         :accessor %period-to-date-computation-value :initform
                         common-lisp:nil)
                        (time :initarg :time :type
                         (common-lisp:or dimension-field common-lisp:null)
                         :accessor %period-to-date-computation-time :initform
                         (common-lisp:error ":time is required"))
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %period-to-date-computation-name :initform
                         common-lisp:nil)
                        (computation-id :initarg :computation-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %period-to-date-computation-computation-id
                         :initform
                         (common-lisp:error ":computation-id is required"))))
 (common-lisp:export
  (common-lisp:list 'period-to-date-computation
                    'make-period-to-date-computation))
 (common-lisp:defun make-period-to-date-computation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key period-time-granularity value time name
                     computation-id)
   (common-lisp:apply #'common-lisp:make-instance 'period-to-date-computation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          period-to-date-computation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          period-to-date-computation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computation-id))
      (common-lisp:list
       (common-lisp:cons "ComputationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'period-time-granularity))
      (common-lisp:list
       (common-lisp:cons "PeriodTimeGranularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          period-to-date-computation))
   common-lisp:nil))
(common-lisp:deftype periods-backward () 'common-lisp:integer)
(common-lisp:deftype periods-forward () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass physical-table common-lisp:nil
                       ((s3source :initarg :s3source :type
                         (common-lisp:or s3source common-lisp:null) :accessor
                         %physical-table-s3source :initform common-lisp:nil)
                        (custom-sql :initarg :custom-sql :type
                         (common-lisp:or custom-sql common-lisp:null) :accessor
                         %physical-table-custom-sql :initform common-lisp:nil)
                        (relational-table :initarg :relational-table :type
                         (common-lisp:or relational-table common-lisp:null)
                         :accessor %physical-table-relational-table :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'physical-table 'make-physical-table))
 (common-lisp:defun make-physical-table
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3source custom-sql relational-table)
   (common-lisp:apply #'common-lisp:make-instance 'physical-table
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input physical-table))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input physical-table))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relational-table))
      (common-lisp:list
       (common-lisp:cons "RelationalTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-sql))
      (common-lisp:list
       (common-lisp:cons "CustomSql"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3source))
      (common-lisp:list
       (common-lisp:cons "S3Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input physical-table))
   common-lisp:nil))
(common-lisp:deftype physical-table-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype physical-table-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-physical-table-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass pie-chart-aggregated-field-wells common-lisp:nil
                       ((small-multiples :initarg :small-multiples :type
                         (common-lisp:or small-multiples-dimension-field-list
                                         common-lisp:null)
                         :accessor
                         %pie-chart-aggregated-field-wells-small-multiples
                         :initform common-lisp:nil)
                        (values :initarg :values :type
                         (common-lisp:or measure-field-list common-lisp:null)
                         :accessor %pie-chart-aggregated-field-wells-values
                         :initform common-lisp:nil)
                        (category :initarg :category :type
                         (common-lisp:or dimension-field-list common-lisp:null)
                         :accessor %pie-chart-aggregated-field-wells-category
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pie-chart-aggregated-field-wells
                    'make-pie-chart-aggregated-field-wells))
 (common-lisp:defun make-pie-chart-aggregated-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key small-multiples values category)
   (common-lisp:apply #'common-lisp:make-instance
                      'pie-chart-aggregated-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pie-chart-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pie-chart-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'small-multiples))
      (common-lisp:list
       (common-lisp:cons "SmallMultiples"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pie-chart-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pie-chart-configuration common-lisp:nil
                       ((contribution-analysis-defaults :initarg
                         :contribution-analysis-defaults :type
                         (common-lisp:or contribution-analysis-default-list
                                         common-lisp:null)
                         :accessor
                         %pie-chart-configuration-contribution-analysis-defaults
                         :initform common-lisp:nil)
                        (visual-palette :initarg :visual-palette :type
                         (common-lisp:or visual-palette common-lisp:null)
                         :accessor %pie-chart-configuration-visual-palette
                         :initform common-lisp:nil)
                        (tooltip :initarg :tooltip :type
                         (common-lisp:or tooltip-options common-lisp:null)
                         :accessor %pie-chart-configuration-tooltip :initform
                         common-lisp:nil)
                        (data-labels :initarg :data-labels :type
                         (common-lisp:or data-label-options common-lisp:null)
                         :accessor %pie-chart-configuration-data-labels
                         :initform common-lisp:nil)
                        (legend :initarg :legend :type
                         (common-lisp:or legend-options common-lisp:null)
                         :accessor %pie-chart-configuration-legend :initform
                         common-lisp:nil)
                        (value-label-options :initarg :value-label-options
                         :type
                         (common-lisp:or chart-axis-label-options
                                         common-lisp:null)
                         :accessor %pie-chart-configuration-value-label-options
                         :initform common-lisp:nil)
                        (category-label-options :initarg
                         :category-label-options :type
                         (common-lisp:or chart-axis-label-options
                                         common-lisp:null)
                         :accessor
                         %pie-chart-configuration-category-label-options
                         :initform common-lisp:nil)
                        (small-multiples-options :initarg
                         :small-multiples-options :type
                         (common-lisp:or small-multiples-options
                                         common-lisp:null)
                         :accessor
                         %pie-chart-configuration-small-multiples-options
                         :initform common-lisp:nil)
                        (donut-options :initarg :donut-options :type
                         (common-lisp:or donut-options common-lisp:null)
                         :accessor %pie-chart-configuration-donut-options
                         :initform common-lisp:nil)
                        (sort-configuration :initarg :sort-configuration :type
                         (common-lisp:or pie-chart-sort-configuration
                                         common-lisp:null)
                         :accessor %pie-chart-configuration-sort-configuration
                         :initform common-lisp:nil)
                        (field-wells :initarg :field-wells :type
                         (common-lisp:or pie-chart-field-wells
                                         common-lisp:null)
                         :accessor %pie-chart-configuration-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pie-chart-configuration 'make-pie-chart-configuration))
 (common-lisp:defun make-pie-chart-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key contribution-analysis-defaults
                     visual-palette tooltip data-labels legend
                     value-label-options category-label-options
                     small-multiples-options donut-options sort-configuration
                     field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'pie-chart-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pie-chart-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pie-chart-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'donut-options))
      (common-lisp:list
       (common-lisp:cons "DonutOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'small-multiples-options))
      (common-lisp:list
       (common-lisp:cons "SmallMultiplesOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-label-options))
      (common-lisp:list
       (common-lisp:cons "CategoryLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-label-options))
      (common-lisp:list
       (common-lisp:cons "ValueLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legend))
      (common-lisp:list
       (common-lisp:cons "Legend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-labels))
      (common-lisp:list
       (common-lisp:cons "DataLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip))
      (common-lisp:list
       (common-lisp:cons "Tooltip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-palette))
      (common-lisp:list
       (common-lisp:cons "VisualPalette"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contribution-analysis-defaults))
      (common-lisp:list
       (common-lisp:cons "ContributionAnalysisDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pie-chart-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pie-chart-field-wells common-lisp:nil
                       ((pie-chart-aggregated-field-wells :initarg
                         :pie-chart-aggregated-field-wells :type
                         (common-lisp:or pie-chart-aggregated-field-wells
                                         common-lisp:null)
                         :accessor
                         %pie-chart-field-wells-pie-chart-aggregated-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pie-chart-field-wells 'make-pie-chart-field-wells))
 (common-lisp:defun make-pie-chart-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pie-chart-aggregated-field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'pie-chart-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pie-chart-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pie-chart-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pie-chart-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "PieChartAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pie-chart-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pie-chart-sort-configuration common-lisp:nil
                       ((small-multiples-limit-configuration :initarg
                         :small-multiples-limit-configuration :type
                         (common-lisp:or items-limit-configuration
                                         common-lisp:null)
                         :accessor
                         %pie-chart-sort-configuration-small-multiples-limit-configuration
                         :initform common-lisp:nil)
                        (small-multiples-sort :initarg :small-multiples-sort
                         :type
                         (common-lisp:or field-sort-options-list
                                         common-lisp:null)
                         :accessor
                         %pie-chart-sort-configuration-small-multiples-sort
                         :initform common-lisp:nil)
                        (category-items-limit :initarg :category-items-limit
                         :type
                         (common-lisp:or items-limit-configuration
                                         common-lisp:null)
                         :accessor
                         %pie-chart-sort-configuration-category-items-limit
                         :initform common-lisp:nil)
                        (category-sort :initarg :category-sort :type
                         (common-lisp:or field-sort-options-list
                                         common-lisp:null)
                         :accessor %pie-chart-sort-configuration-category-sort
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pie-chart-sort-configuration
                    'make-pie-chart-sort-configuration))
 (common-lisp:defun make-pie-chart-sort-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key small-multiples-limit-configuration
                     small-multiples-sort category-items-limit category-sort)
   (common-lisp:apply #'common-lisp:make-instance 'pie-chart-sort-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pie-chart-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pie-chart-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-sort))
      (common-lisp:list
       (common-lisp:cons "CategorySort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-items-limit))
      (common-lisp:list
       (common-lisp:cons "CategoryItemsLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'small-multiples-sort))
      (common-lisp:list
       (common-lisp:cons "SmallMultiplesSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'small-multiples-limit-configuration))
      (common-lisp:list
       (common-lisp:cons "SmallMultiplesLimitConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pie-chart-sort-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pie-chart-visual common-lisp:nil
                       ((column-hierarchies :initarg :column-hierarchies :type
                         (common-lisp:or column-hierarchy-list
                                         common-lisp:null)
                         :accessor %pie-chart-visual-column-hierarchies
                         :initform common-lisp:nil)
                        (actions :initarg :actions :type
                         (common-lisp:or visual-custom-action-list
                                         common-lisp:null)
                         :accessor %pie-chart-visual-actions :initform
                         common-lisp:nil)
                        (chart-configuration :initarg :chart-configuration
                         :type
                         (common-lisp:or pie-chart-configuration
                                         common-lisp:null)
                         :accessor %pie-chart-visual-chart-configuration
                         :initform common-lisp:nil)
                        (subtitle :initarg :subtitle :type
                         (common-lisp:or visual-subtitle-label-options
                                         common-lisp:null)
                         :accessor %pie-chart-visual-subtitle :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or visual-title-label-options
                                         common-lisp:null)
                         :accessor %pie-chart-visual-title :initform
                         common-lisp:nil)
                        (visual-id :initarg :visual-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %pie-chart-visual-visual-id :initform
                         (common-lisp:error ":visual-id is required"))))
 (common-lisp:export
  (common-lisp:list 'pie-chart-visual 'make-pie-chart-visual))
 (common-lisp:defun make-pie-chart-visual
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key column-hierarchies actions
                     chart-configuration subtitle title visual-id)
   (common-lisp:apply #'common-lisp:make-instance 'pie-chart-visual
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pie-chart-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pie-chart-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-hierarchies))
      (common-lisp:list
       (common-lisp:cons "ColumnHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pie-chart-visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pivot-field-sort-options common-lisp:nil
                       ((sort-by :initarg :sort-by :type
                         (common-lisp:or pivot-table-sort-by common-lisp:null)
                         :accessor %pivot-field-sort-options-sort-by :initform
                         (common-lisp:error ":sort-by is required"))
                        (field-id :initarg :field-id :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         %pivot-field-sort-options-field-id :initform
                         (common-lisp:error ":field-id is required"))))
 (common-lisp:export
  (common-lisp:list 'pivot-field-sort-options 'make-pivot-field-sort-options))
 (common-lisp:defun make-pivot-field-sort-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sort-by field-id)
   (common-lisp:apply #'common-lisp:make-instance 'pivot-field-sort-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pivot-field-sort-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pivot-field-sort-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pivot-field-sort-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pivot-field-sort-options-list ()
   '(trivial-types:proper-list pivot-field-sort-options))
 (common-lisp:defun |make-pivot-field-sort-options-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pivot-field-sort-options))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype pivot-measure-field-list ()
   '(trivial-types:proper-list measure-field))
 (common-lisp:defun |make-pivot-measure-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list measure-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass pivot-table-aggregated-field-wells common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or pivot-measure-field-list
                                         common-lisp:null)
                         :accessor %pivot-table-aggregated-field-wells-values
                         :initform common-lisp:nil)
                        (columns :initarg :columns :type
                         (common-lisp:or pivot-table-dimension-list
                                         common-lisp:null)
                         :accessor %pivot-table-aggregated-field-wells-columns
                         :initform common-lisp:nil)
                        (rows :initarg :rows :type
                         (common-lisp:or pivot-table-dimension-list
                                         common-lisp:null)
                         :accessor %pivot-table-aggregated-field-wells-rows
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pivot-table-aggregated-field-wells
                    'make-pivot-table-aggregated-field-wells))
 (common-lisp:defun make-pivot-table-aggregated-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values columns rows)
   (common-lisp:apply #'common-lisp:make-instance
                      'pivot-table-aggregated-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rows))
      (common-lisp:list
       (common-lisp:cons "Rows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "Columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pivot-table-cell-conditional-formatting common-lisp:nil
                       ((scope :initarg :scope :type
                         (common-lisp:or
                          pivot-table-conditional-formatting-scope
                          common-lisp:null)
                         :accessor
                         %pivot-table-cell-conditional-formatting-scope
                         :initform common-lisp:nil)
                        (text-format :initarg :text-format :type
                         (common-lisp:or text-conditional-format
                                         common-lisp:null)
                         :accessor
                         %pivot-table-cell-conditional-formatting-text-format
                         :initform common-lisp:nil)
                        (field-id :initarg :field-id :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         %pivot-table-cell-conditional-formatting-field-id
                         :initform
                         (common-lisp:error ":field-id is required"))))
 (common-lisp:export
  (common-lisp:list 'pivot-table-cell-conditional-formatting
                    'make-pivot-table-cell-conditional-formatting))
 (common-lisp:defun make-pivot-table-cell-conditional-formatting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scope text-format field-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'pivot-table-cell-conditional-formatting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-cell-conditional-formatting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-cell-conditional-formatting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-format))
      (common-lisp:list
       (common-lisp:cons "TextFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-cell-conditional-formatting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pivot-table-conditional-formatting common-lisp:nil
                       ((conditional-formatting-options :initarg
                         :conditional-formatting-options :type
                         (common-lisp:or
                          pivot-table-conditional-formatting-option-list
                          common-lisp:null)
                         :accessor
                         %pivot-table-conditional-formatting-conditional-formatting-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pivot-table-conditional-formatting
                    'make-pivot-table-conditional-formatting))
 (common-lisp:defun make-pivot-table-conditional-formatting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key conditional-formatting-options)
   (common-lisp:apply #'common-lisp:make-instance
                      'pivot-table-conditional-formatting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-conditional-formatting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-conditional-formatting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-formatting-options))
      (common-lisp:list
       (common-lisp:cons "ConditionalFormattingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-conditional-formatting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pivot-table-conditional-formatting-option
                       common-lisp:nil
                       ((cell :initarg :cell :type
                         (common-lisp:or
                          pivot-table-cell-conditional-formatting
                          common-lisp:null)
                         :accessor
                         %pivot-table-conditional-formatting-option-cell
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pivot-table-conditional-formatting-option
                    'make-pivot-table-conditional-formatting-option))
 (common-lisp:defun make-pivot-table-conditional-formatting-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cell)
   (common-lisp:apply #'common-lisp:make-instance
                      'pivot-table-conditional-formatting-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-conditional-formatting-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-conditional-formatting-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cell))
      (common-lisp:list
       (common-lisp:cons "Cell"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-conditional-formatting-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pivot-table-conditional-formatting-option-list ()
   '(trivial-types:proper-list pivot-table-conditional-formatting-option))
 (common-lisp:defun |make-pivot-table-conditional-formatting-option-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pivot-table-conditional-formatting-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass pivot-table-conditional-formatting-scope common-lisp:nil
                       ((role :initarg :role :type
                         (common-lisp:or
                          pivot-table-conditional-formatting-scope-role
                          common-lisp:null)
                         :accessor
                         %pivot-table-conditional-formatting-scope-role
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pivot-table-conditional-formatting-scope
                    'make-pivot-table-conditional-formatting-scope))
 (common-lisp:defun make-pivot-table-conditional-formatting-scope
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role)
   (common-lisp:apply #'common-lisp:make-instance
                      'pivot-table-conditional-formatting-scope
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-conditional-formatting-scope))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-conditional-formatting-scope))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-conditional-formatting-scope))
   common-lisp:nil))
(common-lisp:deftype pivot-table-conditional-formatting-scope-role ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pivot-table-configuration common-lisp:nil
                       ((paginated-report-options :initarg
                         :paginated-report-options :type
                         (common-lisp:or pivot-table-paginated-report-options
                                         common-lisp:null)
                         :accessor
                         %pivot-table-configuration-paginated-report-options
                         :initform common-lisp:nil)
                        (field-options :initarg :field-options :type
                         (common-lisp:or pivot-table-field-options
                                         common-lisp:null)
                         :accessor %pivot-table-configuration-field-options
                         :initform common-lisp:nil)
                        (total-options :initarg :total-options :type
                         (common-lisp:or pivot-table-total-options
                                         common-lisp:null)
                         :accessor %pivot-table-configuration-total-options
                         :initform common-lisp:nil)
                        (table-options :initarg :table-options :type
                         (common-lisp:or pivot-table-options common-lisp:null)
                         :accessor %pivot-table-configuration-table-options
                         :initform common-lisp:nil)
                        (sort-configuration :initarg :sort-configuration :type
                         (common-lisp:or pivot-table-sort-configuration
                                         common-lisp:null)
                         :accessor
                         %pivot-table-configuration-sort-configuration
                         :initform common-lisp:nil)
                        (field-wells :initarg :field-wells :type
                         (common-lisp:or pivot-table-field-wells
                                         common-lisp:null)
                         :accessor %pivot-table-configuration-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pivot-table-configuration
                    'make-pivot-table-configuration))
 (common-lisp:defun make-pivot-table-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key paginated-report-options field-options
                     total-options table-options sort-configuration
                     field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'pivot-table-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-options))
      (common-lisp:list
       (common-lisp:cons "TableOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-options))
      (common-lisp:list
       (common-lisp:cons "TotalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-options))
      (common-lisp:list
       (common-lisp:cons "FieldOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'paginated-report-options))
      (common-lisp:list
       (common-lisp:cons "PaginatedReportOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pivot-table-data-path-option common-lisp:nil
                       ((width :initarg :width :type
                         (common-lisp:or pixel-length common-lisp:null)
                         :accessor %pivot-table-data-path-option-width
                         :initform common-lisp:nil)
                        (data-path-list :initarg :data-path-list :type
                         (common-lisp:or data-path-value-list common-lisp:null)
                         :accessor %pivot-table-data-path-option-data-path-list
                         :initform
                         (common-lisp:error ":data-path-list is required"))))
 (common-lisp:export
  (common-lisp:list 'pivot-table-data-path-option
                    'make-pivot-table-data-path-option))
 (common-lisp:defun make-pivot-table-data-path-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key width data-path-list)
   (common-lisp:apply #'common-lisp:make-instance 'pivot-table-data-path-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-data-path-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-data-path-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-path-list))
      (common-lisp:list
       (common-lisp:cons "DataPathList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-data-path-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pivot-table-data-path-option-list ()
   '(trivial-types:proper-list pivot-table-data-path-option))
 (common-lisp:defun |make-pivot-table-data-path-option-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pivot-table-data-path-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype pivot-table-dimension-list ()
   '(trivial-types:proper-list dimension-field))
 (common-lisp:defun |make-pivot-table-dimension-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass pivot-table-field-option common-lisp:nil
                       ((visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %pivot-table-field-option-visibility :initform
                         common-lisp:nil)
                        (custom-label :initarg :custom-label :type
                         (common-lisp:or custom-label common-lisp:null)
                         :accessor %pivot-table-field-option-custom-label
                         :initform common-lisp:nil)
                        (field-id :initarg :field-id :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         %pivot-table-field-option-field-id :initform
                         (common-lisp:error ":field-id is required"))))
 (common-lisp:export
  (common-lisp:list 'pivot-table-field-option 'make-pivot-table-field-option))
 (common-lisp:defun make-pivot-table-field-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visibility custom-label field-id)
   (common-lisp:apply #'common-lisp:make-instance 'pivot-table-field-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-field-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-field-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-label))
      (common-lisp:list
       (common-lisp:cons "CustomLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-field-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pivot-table-field-option-list ()
   '(trivial-types:proper-list pivot-table-field-option))
 (common-lisp:defun |make-pivot-table-field-option-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pivot-table-field-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass pivot-table-field-options common-lisp:nil
                       ((data-path-options :initarg :data-path-options :type
                         (common-lisp:or pivot-table-data-path-option-list
                                         common-lisp:null)
                         :accessor %pivot-table-field-options-data-path-options
                         :initform common-lisp:nil)
                        (selected-field-options :initarg
                         :selected-field-options :type
                         (common-lisp:or pivot-table-field-option-list
                                         common-lisp:null)
                         :accessor
                         %pivot-table-field-options-selected-field-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pivot-table-field-options
                    'make-pivot-table-field-options))
 (common-lisp:defun make-pivot-table-field-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-path-options selected-field-options)
   (common-lisp:apply #'common-lisp:make-instance 'pivot-table-field-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-field-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-field-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'selected-field-options))
      (common-lisp:list
       (common-lisp:cons "SelectedFieldOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-path-options))
      (common-lisp:list
       (common-lisp:cons "DataPathOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-field-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pivot-table-field-subtotal-options common-lisp:nil
                       ((field-id :initarg :field-id :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         %pivot-table-field-subtotal-options-field-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pivot-table-field-subtotal-options
                    'make-pivot-table-field-subtotal-options))
 (common-lisp:defun make-pivot-table-field-subtotal-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key field-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'pivot-table-field-subtotal-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-field-subtotal-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-field-subtotal-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-field-subtotal-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pivot-table-field-subtotal-options-list ()
   '(trivial-types:proper-list pivot-table-field-subtotal-options))
 (common-lisp:defun |make-pivot-table-field-subtotal-options-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pivot-table-field-subtotal-options))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass pivot-table-field-wells common-lisp:nil
                       ((pivot-table-aggregated-field-wells :initarg
                         :pivot-table-aggregated-field-wells :type
                         (common-lisp:or pivot-table-aggregated-field-wells
                                         common-lisp:null)
                         :accessor
                         %pivot-table-field-wells-pivot-table-aggregated-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pivot-table-field-wells 'make-pivot-table-field-wells))
 (common-lisp:defun make-pivot-table-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pivot-table-aggregated-field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'pivot-table-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pivot-table-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "PivotTableAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-field-wells))
   common-lisp:nil))
(common-lisp:deftype pivot-table-metric-placement () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pivot-table-options common-lisp:nil
                       ((collapsed-row-dimensions-visibility :initarg
                         :collapsed-row-dimensions-visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %pivot-table-options-collapsed-row-dimensions-visibility
                         :initform common-lisp:nil)
                        (row-alternate-color-options :initarg
                         :row-alternate-color-options :type
                         (common-lisp:or row-alternate-color-options
                                         common-lisp:null)
                         :accessor
                         %pivot-table-options-row-alternate-color-options
                         :initform common-lisp:nil)
                        (row-field-names-style :initarg :row-field-names-style
                         :type
                         (common-lisp:or table-cell-style common-lisp:null)
                         :accessor %pivot-table-options-row-field-names-style
                         :initform common-lisp:nil)
                        (cell-style :initarg :cell-style :type
                         (common-lisp:or table-cell-style common-lisp:null)
                         :accessor %pivot-table-options-cell-style :initform
                         common-lisp:nil)
                        (row-header-style :initarg :row-header-style :type
                         (common-lisp:or table-cell-style common-lisp:null)
                         :accessor %pivot-table-options-row-header-style
                         :initform common-lisp:nil)
                        (column-header-style :initarg :column-header-style
                         :type
                         (common-lisp:or table-cell-style common-lisp:null)
                         :accessor %pivot-table-options-column-header-style
                         :initform common-lisp:nil)
                        (toggle-buttons-visibility :initarg
                         :toggle-buttons-visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %pivot-table-options-toggle-buttons-visibility
                         :initform common-lisp:nil)
                        (column-names-visibility :initarg
                         :column-names-visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %pivot-table-options-column-names-visibility :initform
                         common-lisp:nil)
                        (single-metric-visibility :initarg
                         :single-metric-visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %pivot-table-options-single-metric-visibility
                         :initform common-lisp:nil)
                        (metric-placement :initarg :metric-placement :type
                         (common-lisp:or pivot-table-metric-placement
                                         common-lisp:null)
                         :accessor %pivot-table-options-metric-placement
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pivot-table-options 'make-pivot-table-options))
 (common-lisp:defun make-pivot-table-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key collapsed-row-dimensions-visibility
                     row-alternate-color-options row-field-names-style
                     cell-style row-header-style column-header-style
                     toggle-buttons-visibility column-names-visibility
                     single-metric-visibility metric-placement)
   (common-lisp:apply #'common-lisp:make-instance 'pivot-table-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pivot-table-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pivot-table-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-placement))
      (common-lisp:list
       (common-lisp:cons "MetricPlacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'single-metric-visibility))
      (common-lisp:list
       (common-lisp:cons "SingleMetricVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-names-visibility))
      (common-lisp:list
       (common-lisp:cons "ColumnNamesVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'toggle-buttons-visibility))
      (common-lisp:list
       (common-lisp:cons "ToggleButtonsVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-header-style))
      (common-lisp:list
       (common-lisp:cons "ColumnHeaderStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-header-style))
      (common-lisp:list
       (common-lisp:cons "RowHeaderStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cell-style))
      (common-lisp:list
       (common-lisp:cons "CellStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'row-field-names-style))
      (common-lisp:list
       (common-lisp:cons "RowFieldNamesStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'row-alternate-color-options))
      (common-lisp:list
       (common-lisp:cons "RowAlternateColorOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collapsed-row-dimensions-visibility))
      (common-lisp:list
       (common-lisp:cons "CollapsedRowDimensionsVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pivot-table-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pivot-table-paginated-report-options common-lisp:nil
                       ((overflow-column-header-visibility :initarg
                         :overflow-column-header-visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %pivot-table-paginated-report-options-overflow-column-header-visibility
                         :initform common-lisp:nil)
                        (vertical-overflow-visibility :initarg
                         :vertical-overflow-visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %pivot-table-paginated-report-options-vertical-overflow-visibility
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pivot-table-paginated-report-options
                    'make-pivot-table-paginated-report-options))
 (common-lisp:defun make-pivot-table-paginated-report-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key overflow-column-header-visibility
                     vertical-overflow-visibility)
   (common-lisp:apply #'common-lisp:make-instance
                      'pivot-table-paginated-report-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-paginated-report-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-paginated-report-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vertical-overflow-visibility))
      (common-lisp:list
       (common-lisp:cons "VerticalOverflowVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'overflow-column-header-visibility))
      (common-lisp:list
       (common-lisp:cons "OverflowColumnHeaderVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-paginated-report-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pivot-table-sort-by common-lisp:nil
                       ((data-path :initarg :data-path :type
                         (common-lisp:or data-path-sort common-lisp:null)
                         :accessor %pivot-table-sort-by-data-path :initform
                         common-lisp:nil)
                        (column :initarg :column :type
                         (common-lisp:or column-sort common-lisp:null)
                         :accessor %pivot-table-sort-by-column :initform
                         common-lisp:nil)
                        (field :initarg :field :type
                         (common-lisp:or field-sort common-lisp:null) :accessor
                         %pivot-table-sort-by-field :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pivot-table-sort-by 'make-pivot-table-sort-by))
 (common-lisp:defun make-pivot-table-sort-by
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-path column field)
   (common-lisp:apply #'common-lisp:make-instance 'pivot-table-sort-by
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pivot-table-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pivot-table-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "Field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-path))
      (common-lisp:list
       (common-lisp:cons "DataPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pivot-table-sort-by))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pivot-table-sort-configuration common-lisp:nil
                       ((field-sort-options :initarg :field-sort-options :type
                         (common-lisp:or pivot-field-sort-options-list
                                         common-lisp:null)
                         :accessor
                         %pivot-table-sort-configuration-field-sort-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pivot-table-sort-configuration
                    'make-pivot-table-sort-configuration))
 (common-lisp:defun make-pivot-table-sort-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key field-sort-options)
   (common-lisp:apply #'common-lisp:make-instance
                      'pivot-table-sort-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-sort-options))
      (common-lisp:list
       (common-lisp:cons "FieldSortOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-sort-configuration))
   common-lisp:nil))
(common-lisp:deftype pivot-table-subtotal-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pivot-table-total-options common-lisp:nil
                       ((column-total-options :initarg :column-total-options
                         :type
                         (common-lisp:or pivot-total-options common-lisp:null)
                         :accessor
                         %pivot-table-total-options-column-total-options
                         :initform common-lisp:nil)
                        (row-total-options :initarg :row-total-options :type
                         (common-lisp:or pivot-total-options common-lisp:null)
                         :accessor %pivot-table-total-options-row-total-options
                         :initform common-lisp:nil)
                        (column-subtotal-options :initarg
                         :column-subtotal-options :type
                         (common-lisp:or subtotal-options common-lisp:null)
                         :accessor
                         %pivot-table-total-options-column-subtotal-options
                         :initform common-lisp:nil)
                        (row-subtotal-options :initarg :row-subtotal-options
                         :type
                         (common-lisp:or subtotal-options common-lisp:null)
                         :accessor
                         %pivot-table-total-options-row-subtotal-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pivot-table-total-options
                    'make-pivot-table-total-options))
 (common-lisp:defun make-pivot-table-total-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key column-total-options row-total-options
                     column-subtotal-options row-subtotal-options)
   (common-lisp:apply #'common-lisp:make-instance 'pivot-table-total-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-total-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-total-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'row-subtotal-options))
      (common-lisp:list
       (common-lisp:cons "RowSubtotalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-subtotal-options))
      (common-lisp:list
       (common-lisp:cons "ColumnSubtotalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-total-options))
      (common-lisp:list
       (common-lisp:cons "RowTotalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-total-options))
      (common-lisp:list
       (common-lisp:cons "ColumnTotalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pivot-table-total-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pivot-table-visual common-lisp:nil
                       ((actions :initarg :actions :type
                         (common-lisp:or visual-custom-action-list
                                         common-lisp:null)
                         :accessor %pivot-table-visual-actions :initform
                         common-lisp:nil)
                        (conditional-formatting :initarg
                         :conditional-formatting :type
                         (common-lisp:or pivot-table-conditional-formatting
                                         common-lisp:null)
                         :accessor %pivot-table-visual-conditional-formatting
                         :initform common-lisp:nil)
                        (chart-configuration :initarg :chart-configuration
                         :type
                         (common-lisp:or pivot-table-configuration
                                         common-lisp:null)
                         :accessor %pivot-table-visual-chart-configuration
                         :initform common-lisp:nil)
                        (subtitle :initarg :subtitle :type
                         (common-lisp:or visual-subtitle-label-options
                                         common-lisp:null)
                         :accessor %pivot-table-visual-subtitle :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or visual-title-label-options
                                         common-lisp:null)
                         :accessor %pivot-table-visual-title :initform
                         common-lisp:nil)
                        (visual-id :initarg :visual-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %pivot-table-visual-visual-id :initform
                         (common-lisp:error ":visual-id is required"))))
 (common-lisp:export
  (common-lisp:list 'pivot-table-visual 'make-pivot-table-visual))
 (common-lisp:defun make-pivot-table-visual
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key actions conditional-formatting
                     chart-configuration subtitle title visual-id)
   (common-lisp:apply #'common-lisp:make-instance 'pivot-table-visual
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pivot-table-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pivot-table-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-formatting))
      (common-lisp:list
       (common-lisp:cons "ConditionalFormatting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pivot-table-visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pivot-total-options common-lisp:nil
                       ((metric-header-cell-style :initarg
                         :metric-header-cell-style :type
                         (common-lisp:or table-cell-style common-lisp:null)
                         :accessor
                         %pivot-total-options-metric-header-cell-style
                         :initform common-lisp:nil)
                        (value-cell-style :initarg :value-cell-style :type
                         (common-lisp:or table-cell-style common-lisp:null)
                         :accessor %pivot-total-options-value-cell-style
                         :initform common-lisp:nil)
                        (total-cell-style :initarg :total-cell-style :type
                         (common-lisp:or table-cell-style common-lisp:null)
                         :accessor %pivot-total-options-total-cell-style
                         :initform common-lisp:nil)
                        (custom-label :initarg :custom-label :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %pivot-total-options-custom-label :initform
                         common-lisp:nil)
                        (scroll-status :initarg :scroll-status :type
                         (common-lisp:or table-totals-scroll-status
                                         common-lisp:null)
                         :accessor %pivot-total-options-scroll-status :initform
                         common-lisp:nil)
                        (placement :initarg :placement :type
                         (common-lisp:or table-totals-placement
                                         common-lisp:null)
                         :accessor %pivot-total-options-placement :initform
                         common-lisp:nil)
                        (totals-visibility :initarg :totals-visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %pivot-total-options-totals-visibility :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pivot-total-options 'make-pivot-total-options))
 (common-lisp:defun make-pivot-total-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metric-header-cell-style value-cell-style
                     total-cell-style custom-label scroll-status placement
                     totals-visibility)
   (common-lisp:apply #'common-lisp:make-instance 'pivot-total-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pivot-total-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pivot-total-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'totals-visibility))
      (common-lisp:list
       (common-lisp:cons "TotalsVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement))
      (common-lisp:list
       (common-lisp:cons "Placement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scroll-status))
      (common-lisp:list
       (common-lisp:cons "ScrollStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-label))
      (common-lisp:list
       (common-lisp:cons "CustomLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-cell-style))
      (common-lisp:list
       (common-lisp:cons "TotalCellStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-cell-style))
      (common-lisp:list
       (common-lisp:cons "ValueCellStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-header-cell-style))
      (common-lisp:list
       (common-lisp:cons "MetricHeaderCellStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pivot-total-options))
   common-lisp:nil))
(common-lisp:deftype pixel-length () 'common-lisp:string)
(common-lisp:deftype port () 'common-lisp:integer)
(common-lisp:deftype positive-integer () 'common-lisp:integer)
(common-lisp:deftype positive-long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass postgre-sql-parameters common-lisp:nil
                       ((database :initarg :database :type
                         (common-lisp:or database common-lisp:null) :accessor
                         %postgre-sql-parameters-database :initform
                         (common-lisp:error ":database is required"))
                        (port :initarg :port :type
                         (common-lisp:or port common-lisp:null) :accessor
                         %postgre-sql-parameters-port :initform
                         (common-lisp:error ":port is required"))
                        (host :initarg :host :type
                         (common-lisp:or host common-lisp:null) :accessor
                         %postgre-sql-parameters-host :initform
                         (common-lisp:error ":host is required"))))
 (common-lisp:export
  (common-lisp:list 'postgre-sql-parameters 'make-postgre-sql-parameters))
 (common-lisp:defun make-postgre-sql-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key database port host)
   (common-lisp:apply #'common-lisp:make-instance 'postgre-sql-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          postgre-sql-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          postgre-sql-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          postgre-sql-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition precondition-not-met-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       precondition-not-met-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       precondition-not-met-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'precondition-not-met-exception
                    'precondition-not-met-exception-message
                    'precondition-not-met-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass predefined-hierarchy common-lisp:nil
                       ((drill-down-filters :initarg :drill-down-filters :type
                         (common-lisp:or drill-down-filter-list
                                         common-lisp:null)
                         :accessor %predefined-hierarchy-drill-down-filters
                         :initform common-lisp:nil)
                        (columns :initarg :columns :type
                         (common-lisp:or predefined-hierarchy-column-list
                                         common-lisp:null)
                         :accessor %predefined-hierarchy-columns :initform
                         (common-lisp:error ":columns is required"))
                        (hierarchy-id :initarg :hierarchy-id :type
                         (common-lisp:or hierarchy-id common-lisp:null)
                         :accessor %predefined-hierarchy-hierarchy-id :initform
                         (common-lisp:error ":hierarchy-id is required"))))
 (common-lisp:export
  (common-lisp:list 'predefined-hierarchy 'make-predefined-hierarchy))
 (common-lisp:defun make-predefined-hierarchy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key drill-down-filters columns hierarchy-id)
   (common-lisp:apply #'common-lisp:make-instance 'predefined-hierarchy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input predefined-hierarchy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input predefined-hierarchy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-id))
      (common-lisp:list
       (common-lisp:cons "HierarchyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "Columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drill-down-filters))
      (common-lisp:list
       (common-lisp:cons "DrillDownFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input predefined-hierarchy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype predefined-hierarchy-column-list ()
   '(trivial-types:proper-list column-identifier))
 (common-lisp:defun |make-predefined-hierarchy-column-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype prediction-interval () 'common-lisp:integer)
(common-lisp:deftype prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass presto-parameters common-lisp:nil
                       ((catalog :initarg :catalog :type
                         (common-lisp:or catalog common-lisp:null) :accessor
                         %presto-parameters-catalog :initform
                         (common-lisp:error ":catalog is required"))
                        (port :initarg :port :type
                         (common-lisp:or port common-lisp:null) :accessor
                         %presto-parameters-port :initform
                         (common-lisp:error ":port is required"))
                        (host :initarg :host :type
                         (common-lisp:or host common-lisp:null) :accessor
                         %presto-parameters-host :initform
                         (common-lisp:error ":host is required"))))
 (common-lisp:export
  (common-lisp:list 'presto-parameters 'make-presto-parameters))
 (common-lisp:defun make-presto-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key catalog port host)
   (common-lisp:apply #'common-lisp:make-instance 'presto-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input presto-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input presto-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog))
      (common-lisp:list
       (common-lisp:cons "Catalog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input presto-parameters))
   common-lisp:nil))
(common-lisp:deftype primary-value-display-type () 'common-lisp:string)
(common-lisp:deftype principal () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype principal-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-principal-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass progress-bar-options common-lisp:nil
                       ((visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %progress-bar-options-visibility :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'progress-bar-options 'make-progress-bar-options))
 (common-lisp:defun make-progress-bar-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visibility)
   (common-lisp:apply #'common-lisp:make-instance 'progress-bar-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input progress-bar-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input progress-bar-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input progress-bar-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass project-operation common-lisp:nil
                       ((projected-columns :initarg :projected-columns :type
                         (common-lisp:or projected-column-list
                                         common-lisp:null)
                         :accessor %project-operation-projected-columns
                         :initform
                         (common-lisp:error
                          ":projected-columns is required"))))
 (common-lisp:export
  (common-lisp:list 'project-operation 'make-project-operation))
 (common-lisp:defun make-project-operation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key projected-columns)
   (common-lisp:apply #'common-lisp:make-instance 'project-operation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'projected-columns))
      (common-lisp:list
       (common-lisp:cons "ProjectedColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype projected-column-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-projected-column-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass put-data-set-refresh-properties-request common-lisp:nil
                       ((data-set-refresh-properties :initarg
                         :data-set-refresh-properties :type
                         (common-lisp:or data-set-refresh-properties
                                         common-lisp:null)
                         :accessor
                         %put-data-set-refresh-properties-request-data-set-refresh-properties
                         :initform
                         (common-lisp:error
                          ":data-set-refresh-properties is required"))
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %put-data-set-refresh-properties-request-data-set-id
                         :initform
                         (common-lisp:error ":data-set-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %put-data-set-refresh-properties-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'put-data-set-refresh-properties-request
                    'make-put-data-set-refresh-properties-request))
 (common-lisp:defun make-put-data-set-refresh-properties-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-set-refresh-properties data-set-id
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-data-set-refresh-properties-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-data-set-refresh-properties-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-data-set-refresh-properties-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-set-refresh-properties))
      (common-lisp:list
       (common-lisp:cons "DataSetRefreshProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-data-set-refresh-properties-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-data-set-refresh-properties-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor
                         %put-data-set-refresh-properties-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-data-set-refresh-properties-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-data-set-refresh-properties-response
                    'make-put-data-set-refresh-properties-response))
 (common-lisp:defun make-put-data-set-refresh-properties-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-data-set-refresh-properties-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-data-set-refresh-properties-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-data-set-refresh-properties-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-data-set-refresh-properties-response))
   common-lisp:nil))
(common-lisp:deftype query () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass queue-info common-lisp:nil
                       ((queued-ingestion :initarg :queued-ingestion :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %queue-info-queued-ingestion :initform
                         (common-lisp:error ":queued-ingestion is required"))
                        (waiting-on-ingestion :initarg :waiting-on-ingestion
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %queue-info-waiting-on-ingestion :initform
                         (common-lisp:error
                          ":waiting-on-ingestion is required"))))
 (common-lisp:export (common-lisp:list 'queue-info 'make-queue-info))
 (common-lisp:defun make-queue-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key queued-ingestion waiting-on-ingestion)
   (common-lisp:apply #'common-lisp:make-instance 'queue-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input queue-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input queue-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'waiting-on-ingestion))
      (common-lisp:list
       (common-lisp:cons "WaitingOnIngestion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queued-ingestion))
      (common-lisp:list
       (common-lisp:cons "QueuedIngestion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input queue-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition quick-sight-user-not-found-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       quick-sight-user-not-found-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       quick-sight-user-not-found-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'quick-sight-user-not-found-exception
                    'quick-sight-user-not-found-exception-message
                    'quick-sight-user-not-found-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass radar-chart-aggregated-field-wells common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or radar-chart-values-field-list
                                         common-lisp:null)
                         :accessor %radar-chart-aggregated-field-wells-values
                         :initform common-lisp:nil)
                        (color :initarg :color :type
                         (common-lisp:or radar-chart-color-field-list
                                         common-lisp:null)
                         :accessor %radar-chart-aggregated-field-wells-color
                         :initform common-lisp:nil)
                        (category :initarg :category :type
                         (common-lisp:or radar-chart-category-field-list
                                         common-lisp:null)
                         :accessor %radar-chart-aggregated-field-wells-category
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'radar-chart-aggregated-field-wells
                    'make-radar-chart-aggregated-field-wells))
 (common-lisp:defun make-radar-chart-aggregated-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values color category)
   (common-lisp:apply #'common-lisp:make-instance
                      'radar-chart-aggregated-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color))
      (common-lisp:list
       (common-lisp:cons "Color"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass radar-chart-area-style-settings common-lisp:nil
                       ((visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %radar-chart-area-style-settings-visibility :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'radar-chart-area-style-settings
                    'make-radar-chart-area-style-settings))
 (common-lisp:defun make-radar-chart-area-style-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visibility)
   (common-lisp:apply #'common-lisp:make-instance
                      'radar-chart-area-style-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-area-style-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-area-style-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-area-style-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype radar-chart-category-field-list ()
   '(trivial-types:proper-list dimension-field))
 (common-lisp:defun |make-radar-chart-category-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype radar-chart-color-field-list ()
   '(trivial-types:proper-list dimension-field))
 (common-lisp:defun |make-radar-chart-color-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass radar-chart-configuration common-lisp:nil
                       ((legend :initarg :legend :type
                         (common-lisp:or legend-options common-lisp:null)
                         :accessor %radar-chart-configuration-legend :initform
                         common-lisp:nil)
                        (color-label-options :initarg :color-label-options
                         :type
                         (common-lisp:or chart-axis-label-options
                                         common-lisp:null)
                         :accessor
                         %radar-chart-configuration-color-label-options
                         :initform common-lisp:nil)
                        (color-axis :initarg :color-axis :type
                         (common-lisp:or axis-display-options common-lisp:null)
                         :accessor %radar-chart-configuration-color-axis
                         :initform common-lisp:nil)
                        (category-label-options :initarg
                         :category-label-options :type
                         (common-lisp:or chart-axis-label-options
                                         common-lisp:null)
                         :accessor
                         %radar-chart-configuration-category-label-options
                         :initform common-lisp:nil)
                        (category-axis :initarg :category-axis :type
                         (common-lisp:or axis-display-options common-lisp:null)
                         :accessor %radar-chart-configuration-category-axis
                         :initform common-lisp:nil)
                        (alternate-band-odd-color :initarg
                         :alternate-band-odd-color :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %radar-chart-configuration-alternate-band-odd-color
                         :initform common-lisp:nil)
                        (alternate-band-even-color :initarg
                         :alternate-band-even-color :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %radar-chart-configuration-alternate-band-even-color
                         :initform common-lisp:nil)
                        (alternate-band-colors-visibility :initarg
                         :alternate-band-colors-visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %radar-chart-configuration-alternate-band-colors-visibility
                         :initform common-lisp:nil)
                        (visual-palette :initarg :visual-palette :type
                         (common-lisp:or visual-palette common-lisp:null)
                         :accessor %radar-chart-configuration-visual-palette
                         :initform common-lisp:nil)
                        (start-angle :initarg :start-angle :type
                         (common-lisp:or radar-chart-start-angle
                                         common-lisp:null)
                         :accessor %radar-chart-configuration-start-angle
                         :initform common-lisp:nil)
                        (base-series-settings :initarg :base-series-settings
                         :type
                         (common-lisp:or radar-chart-series-settings
                                         common-lisp:null)
                         :accessor
                         %radar-chart-configuration-base-series-settings
                         :initform common-lisp:nil)
                        (shape :initarg :shape :type
                         (common-lisp:or radar-chart-shape common-lisp:null)
                         :accessor %radar-chart-configuration-shape :initform
                         common-lisp:nil)
                        (sort-configuration :initarg :sort-configuration :type
                         (common-lisp:or radar-chart-sort-configuration
                                         common-lisp:null)
                         :accessor
                         %radar-chart-configuration-sort-configuration
                         :initform common-lisp:nil)
                        (field-wells :initarg :field-wells :type
                         (common-lisp:or radar-chart-field-wells
                                         common-lisp:null)
                         :accessor %radar-chart-configuration-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'radar-chart-configuration
                    'make-radar-chart-configuration))
 (common-lisp:defun make-radar-chart-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key legend color-label-options color-axis
                     category-label-options category-axis
                     alternate-band-odd-color alternate-band-even-color
                     alternate-band-colors-visibility visual-palette
                     start-angle base-series-settings shape sort-configuration
                     field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'radar-chart-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shape))
      (common-lisp:list
       (common-lisp:cons "Shape"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'base-series-settings))
      (common-lisp:list
       (common-lisp:cons "BaseSeriesSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-angle))
      (common-lisp:list
       (common-lisp:cons "StartAngle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-palette))
      (common-lisp:list
       (common-lisp:cons "VisualPalette"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alternate-band-colors-visibility))
      (common-lisp:list
       (common-lisp:cons "AlternateBandColorsVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alternate-band-even-color))
      (common-lisp:list
       (common-lisp:cons "AlternateBandEvenColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alternate-band-odd-color))
      (common-lisp:list
       (common-lisp:cons "AlternateBandOddColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-axis))
      (common-lisp:list
       (common-lisp:cons "CategoryAxis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-label-options))
      (common-lisp:list
       (common-lisp:cons "CategoryLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-axis))
      (common-lisp:list
       (common-lisp:cons "ColorAxis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-label-options))
      (common-lisp:list
       (common-lisp:cons "ColorLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legend))
      (common-lisp:list
       (common-lisp:cons "Legend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass radar-chart-field-wells common-lisp:nil
                       ((radar-chart-aggregated-field-wells :initarg
                         :radar-chart-aggregated-field-wells :type
                         (common-lisp:or radar-chart-aggregated-field-wells
                                         common-lisp:null)
                         :accessor
                         %radar-chart-field-wells-radar-chart-aggregated-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'radar-chart-field-wells 'make-radar-chart-field-wells))
 (common-lisp:defun make-radar-chart-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key radar-chart-aggregated-field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'radar-chart-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'radar-chart-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "RadarChartAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass radar-chart-series-settings common-lisp:nil
                       ((area-style-settings :initarg :area-style-settings
                         :type
                         (common-lisp:or radar-chart-area-style-settings
                                         common-lisp:null)
                         :accessor
                         %radar-chart-series-settings-area-style-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'radar-chart-series-settings
                    'make-radar-chart-series-settings))
 (common-lisp:defun make-radar-chart-series-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key area-style-settings)
   (common-lisp:apply #'common-lisp:make-instance 'radar-chart-series-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-series-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-series-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'area-style-settings))
      (common-lisp:list
       (common-lisp:cons "AreaStyleSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-series-settings))
   common-lisp:nil))
(common-lisp:deftype radar-chart-shape () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass radar-chart-sort-configuration common-lisp:nil
                       ((color-items-limit :initarg :color-items-limit :type
                         (common-lisp:or items-limit-configuration
                                         common-lisp:null)
                         :accessor
                         %radar-chart-sort-configuration-color-items-limit
                         :initform common-lisp:nil)
                        (color-sort :initarg :color-sort :type
                         (common-lisp:or field-sort-options-list
                                         common-lisp:null)
                         :accessor %radar-chart-sort-configuration-color-sort
                         :initform common-lisp:nil)
                        (category-items-limit :initarg :category-items-limit
                         :type
                         (common-lisp:or items-limit-configuration
                                         common-lisp:null)
                         :accessor
                         %radar-chart-sort-configuration-category-items-limit
                         :initform common-lisp:nil)
                        (category-sort :initarg :category-sort :type
                         (common-lisp:or field-sort-options-list
                                         common-lisp:null)
                         :accessor
                         %radar-chart-sort-configuration-category-sort
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'radar-chart-sort-configuration
                    'make-radar-chart-sort-configuration))
 (common-lisp:defun make-radar-chart-sort-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key color-items-limit color-sort
                     category-items-limit category-sort)
   (common-lisp:apply #'common-lisp:make-instance
                      'radar-chart-sort-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-sort))
      (common-lisp:list
       (common-lisp:cons "CategorySort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-items-limit))
      (common-lisp:list
       (common-lisp:cons "CategoryItemsLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-sort))
      (common-lisp:list
       (common-lisp:cons "ColorSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-items-limit))
      (common-lisp:list
       (common-lisp:cons "ColorItemsLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          radar-chart-sort-configuration))
   common-lisp:nil))
(common-lisp:deftype radar-chart-start-angle () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:deftype radar-chart-values-field-list ()
   '(trivial-types:proper-list measure-field))
 (common-lisp:defun |make-radar-chart-values-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list measure-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass radar-chart-visual common-lisp:nil
                       ((column-hierarchies :initarg :column-hierarchies :type
                         (common-lisp:or column-hierarchy-list
                                         common-lisp:null)
                         :accessor %radar-chart-visual-column-hierarchies
                         :initform common-lisp:nil)
                        (actions :initarg :actions :type
                         (common-lisp:or visual-custom-action-list
                                         common-lisp:null)
                         :accessor %radar-chart-visual-actions :initform
                         common-lisp:nil)
                        (chart-configuration :initarg :chart-configuration
                         :type
                         (common-lisp:or radar-chart-configuration
                                         common-lisp:null)
                         :accessor %radar-chart-visual-chart-configuration
                         :initform common-lisp:nil)
                        (subtitle :initarg :subtitle :type
                         (common-lisp:or visual-subtitle-label-options
                                         common-lisp:null)
                         :accessor %radar-chart-visual-subtitle :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or visual-title-label-options
                                         common-lisp:null)
                         :accessor %radar-chart-visual-title :initform
                         common-lisp:nil)
                        (visual-id :initarg :visual-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %radar-chart-visual-visual-id :initform
                         (common-lisp:error ":visual-id is required"))))
 (common-lisp:export
  (common-lisp:list 'radar-chart-visual 'make-radar-chart-visual))
 (common-lisp:defun make-radar-chart-visual
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key column-hierarchies actions
                     chart-configuration subtitle title visual-id)
   (common-lisp:apply #'common-lisp:make-instance 'radar-chart-visual
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input radar-chart-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input radar-chart-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-hierarchies))
      (common-lisp:list
       (common-lisp:cons "ColumnHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input radar-chart-visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass range-ends-label-type common-lisp:nil
                       ((visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %range-ends-label-type-visibility :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'range-ends-label-type 'make-range-ends-label-type))
 (common-lisp:defun make-range-ends-label-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visibility)
   (common-lisp:apply #'common-lisp:make-instance 'range-ends-label-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          range-ends-label-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          range-ends-label-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          range-ends-label-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rds-parameters common-lisp:nil
                       ((database :initarg :database :type
                         (common-lisp:or database common-lisp:null) :accessor
                         %rds-parameters-database :initform
                         (common-lisp:error ":database is required"))
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor %rds-parameters-instance-id :initform
                         (common-lisp:error ":instance-id is required"))))
 (common-lisp:export (common-lisp:list 'rds-parameters 'make-rds-parameters))
 (common-lisp:defun make-rds-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key database instance-id)
   (common-lisp:apply #'common-lisp:make-instance 'rds-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rds-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rds-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rds-parameters))
   common-lisp:nil))
(common-lisp:deftype recovery-window-in-days () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass redshift-parameters common-lisp:nil
                       ((cluster-id :initarg :cluster-id :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         %redshift-parameters-cluster-id :initform
                         common-lisp:nil)
                        (database :initarg :database :type
                         (common-lisp:or database common-lisp:null) :accessor
                         %redshift-parameters-database :initform
                         (common-lisp:error ":database is required"))
                        (port :initarg :port :type
                         (common-lisp:or optional-port common-lisp:null)
                         :accessor %redshift-parameters-port :initform
                         common-lisp:nil)
                        (host :initarg :host :type
                         (common-lisp:or host common-lisp:null) :accessor
                         %redshift-parameters-host :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'redshift-parameters 'make-redshift-parameters))
 (common-lisp:defun make-redshift-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-id database port host)
   (common-lisp:apply #'common-lisp:make-instance 'redshift-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input redshift-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input redshift-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input redshift-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reference-line common-lisp:nil
                       ((label-configuration :initarg :label-configuration
                         :type
                         (common-lisp:or reference-line-label-configuration
                                         common-lisp:null)
                         :accessor %reference-line-label-configuration
                         :initform common-lisp:nil)
                        (style-configuration :initarg :style-configuration
                         :type
                         (common-lisp:or reference-line-style-configuration
                                         common-lisp:null)
                         :accessor %reference-line-style-configuration
                         :initform common-lisp:nil)
                        (data-configuration :initarg :data-configuration :type
                         (common-lisp:or reference-line-data-configuration
                                         common-lisp:null)
                         :accessor %reference-line-data-configuration :initform
                         (common-lisp:error ":data-configuration is required"))
                        (status :initarg :status :type
                         (common-lisp:or widget-status common-lisp:null)
                         :accessor %reference-line-status :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'reference-line 'make-reference-line))
 (common-lisp:defun make-reference-line
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key label-configuration style-configuration
                     data-configuration status)
   (common-lisp:apply #'common-lisp:make-instance 'reference-line
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reference-line))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reference-line))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-configuration))
      (common-lisp:list
       (common-lisp:cons "DataConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style-configuration))
      (common-lisp:list
       (common-lisp:cons "StyleConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-configuration))
      (common-lisp:list
       (common-lisp:cons "LabelConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reference-line))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reference-line-custom-label-configuration
                       common-lisp:nil
                       ((custom-label :initarg :custom-label :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %reference-line-custom-label-configuration-custom-label
                         :initform
                         (common-lisp:error ":custom-label is required"))))
 (common-lisp:export
  (common-lisp:list 'reference-line-custom-label-configuration
                    'make-reference-line-custom-label-configuration))
 (common-lisp:defun make-reference-line-custom-label-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-label)
   (common-lisp:apply #'common-lisp:make-instance
                      'reference-line-custom-label-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-custom-label-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-custom-label-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-label))
      (common-lisp:list
       (common-lisp:cons "CustomLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-custom-label-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reference-line-data-configuration common-lisp:nil
                       ((axis-binding :initarg :axis-binding :type
                         (common-lisp:or axis-binding common-lisp:null)
                         :accessor
                         %reference-line-data-configuration-axis-binding
                         :initform common-lisp:nil)
                        (dynamic-configuration :initarg :dynamic-configuration
                         :type
                         (common-lisp:or
                          reference-line-dynamic-data-configuration
                          common-lisp:null)
                         :accessor
                         %reference-line-data-configuration-dynamic-configuration
                         :initform common-lisp:nil)
                        (static-configuration :initarg :static-configuration
                         :type
                         (common-lisp:or
                          reference-line-static-data-configuration
                          common-lisp:null)
                         :accessor
                         %reference-line-data-configuration-static-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'reference-line-data-configuration
                    'make-reference-line-data-configuration))
 (common-lisp:defun make-reference-line-data-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key axis-binding dynamic-configuration
                     static-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'reference-line-data-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-data-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-data-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'static-configuration))
      (common-lisp:list
       (common-lisp:cons "StaticConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dynamic-configuration))
      (common-lisp:list
       (common-lisp:cons "DynamicConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'axis-binding))
      (common-lisp:list
       (common-lisp:cons "AxisBinding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-data-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reference-line-dynamic-data-configuration
                       common-lisp:nil
                       ((calculation :initarg :calculation :type
                         (common-lisp:or numerical-aggregation-function
                                         common-lisp:null)
                         :accessor
                         %reference-line-dynamic-data-configuration-calculation
                         :initform
                         (common-lisp:error ":calculation is required"))
                        (measure-aggregation-function :initarg
                         :measure-aggregation-function :type
                         (common-lisp:or aggregation-function common-lisp:null)
                         :accessor
                         %reference-line-dynamic-data-configuration-measure-aggregation-function
                         :initform
                         (common-lisp:error
                          ":measure-aggregation-function is required"))
                        (column :initarg :column :type
                         (common-lisp:or column-identifier common-lisp:null)
                         :accessor
                         %reference-line-dynamic-data-configuration-column
                         :initform (common-lisp:error ":column is required"))))
 (common-lisp:export
  (common-lisp:list 'reference-line-dynamic-data-configuration
                    'make-reference-line-dynamic-data-configuration))
 (common-lisp:defun make-reference-line-dynamic-data-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key calculation measure-aggregation-function
                     column)
   (common-lisp:apply #'common-lisp:make-instance
                      'reference-line-dynamic-data-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-dynamic-data-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-dynamic-data-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'measure-aggregation-function))
      (common-lisp:list
       (common-lisp:cons "MeasureAggregationFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'calculation))
      (common-lisp:list
       (common-lisp:cons "Calculation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-dynamic-data-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reference-line-label-configuration common-lisp:nil
                       ((vertical-position :initarg :vertical-position :type
                         (common-lisp:or reference-line-label-vertical-position
                                         common-lisp:null)
                         :accessor
                         %reference-line-label-configuration-vertical-position
                         :initform common-lisp:nil)
                        (horizontal-position :initarg :horizontal-position
                         :type
                         (common-lisp:or
                          reference-line-label-horizontal-position
                          common-lisp:null)
                         :accessor
                         %reference-line-label-configuration-horizontal-position
                         :initform common-lisp:nil)
                        (font-color :initarg :font-color :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %reference-line-label-configuration-font-color
                         :initform common-lisp:nil)
                        (font-configuration :initarg :font-configuration :type
                         (common-lisp:or font-configuration common-lisp:null)
                         :accessor
                         %reference-line-label-configuration-font-configuration
                         :initform common-lisp:nil)
                        (custom-label-configuration :initarg
                         :custom-label-configuration :type
                         (common-lisp:or
                          reference-line-custom-label-configuration
                          common-lisp:null)
                         :accessor
                         %reference-line-label-configuration-custom-label-configuration
                         :initform common-lisp:nil)
                        (value-label-configuration :initarg
                         :value-label-configuration :type
                         (common-lisp:or
                          reference-line-value-label-configuration
                          common-lisp:null)
                         :accessor
                         %reference-line-label-configuration-value-label-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'reference-line-label-configuration
                    'make-reference-line-label-configuration))
 (common-lisp:defun make-reference-line-label-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vertical-position horizontal-position
                     font-color font-configuration custom-label-configuration
                     value-label-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'reference-line-label-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-label-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-label-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-label-configuration))
      (common-lisp:list
       (common-lisp:cons "ValueLabelConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-label-configuration))
      (common-lisp:list
       (common-lisp:cons "CustomLabelConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-configuration))
      (common-lisp:list
       (common-lisp:cons "FontConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-color))
      (common-lisp:list
       (common-lisp:cons "FontColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'horizontal-position))
      (common-lisp:list
       (common-lisp:cons "HorizontalPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vertical-position))
      (common-lisp:list
       (common-lisp:cons "VerticalPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-label-configuration))
   common-lisp:nil))
(common-lisp:deftype reference-line-label-horizontal-position ()
  'common-lisp:string)
(common-lisp:deftype reference-line-label-vertical-position ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype reference-line-list ()
   '(trivial-types:proper-list reference-line))
 (common-lisp:defun |make-reference-line-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reference-line))
   aws-sdk/generator/shape::members))
(common-lisp:deftype reference-line-pattern-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reference-line-static-data-configuration common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or sensitive-double common-lisp:null)
                         :accessor
                         %reference-line-static-data-configuration-value
                         :initform (common-lisp:error ":value is required"))))
 (common-lisp:export
  (common-lisp:list 'reference-line-static-data-configuration
                    'make-reference-line-static-data-configuration))
 (common-lisp:defun make-reference-line-static-data-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value)
   (common-lisp:apply #'common-lisp:make-instance
                      'reference-line-static-data-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-static-data-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-static-data-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-static-data-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reference-line-style-configuration common-lisp:nil
                       ((color :initarg :color :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %reference-line-style-configuration-color :initform
                         common-lisp:nil)
                        (pattern :initarg :pattern :type
                         (common-lisp:or reference-line-pattern-type
                                         common-lisp:null)
                         :accessor %reference-line-style-configuration-pattern
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'reference-line-style-configuration
                    'make-reference-line-style-configuration))
 (common-lisp:defun make-reference-line-style-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key color pattern)
   (common-lisp:apply #'common-lisp:make-instance
                      'reference-line-style-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-style-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-style-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern))
      (common-lisp:list
       (common-lisp:cons "Pattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color))
      (common-lisp:list
       (common-lisp:cons "Color"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-style-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reference-line-value-label-configuration common-lisp:nil
                       ((format-configuration :initarg :format-configuration
                         :type
                         (common-lisp:or numeric-format-configuration
                                         common-lisp:null)
                         :accessor
                         %reference-line-value-label-configuration-format-configuration
                         :initform common-lisp:nil)
                        (relative-position :initarg :relative-position :type
                         (common-lisp:or
                          reference-line-value-label-relative-position
                          common-lisp:null)
                         :accessor
                         %reference-line-value-label-configuration-relative-position
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'reference-line-value-label-configuration
                    'make-reference-line-value-label-configuration))
 (common-lisp:defun make-reference-line-value-label-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key format-configuration relative-position)
   (common-lisp:apply #'common-lisp:make-instance
                      'reference-line-value-label-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-value-label-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-value-label-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relative-position))
      (common-lisp:list
       (common-lisp:cons "RelativePosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'format-configuration))
      (common-lisp:list
       (common-lisp:cons "FormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reference-line-value-label-configuration))
   common-lisp:nil))
(common-lisp:deftype reference-line-value-label-relative-position ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass refresh-configuration common-lisp:nil
                       ((incremental-refresh :initarg :incremental-refresh
                         :type
                         (common-lisp:or incremental-refresh common-lisp:null)
                         :accessor %refresh-configuration-incremental-refresh
                         :initform
                         (common-lisp:error
                          ":incremental-refresh is required"))))
 (common-lisp:export
  (common-lisp:list 'refresh-configuration 'make-refresh-configuration))
 (common-lisp:defun make-refresh-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key incremental-refresh)
   (common-lisp:apply #'common-lisp:make-instance 'refresh-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          refresh-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          refresh-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'incremental-refresh))
      (common-lisp:list
       (common-lisp:cons "IncrementalRefresh"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          refresh-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass refresh-frequency common-lisp:nil
                       ((time-of-the-day :initarg :time-of-the-day :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %refresh-frequency-time-of-the-day :initform
                         common-lisp:nil)
                        (timezone :initarg :timezone :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %refresh-frequency-timezone :initform common-lisp:nil)
                        (refresh-on-day :initarg :refresh-on-day :type
                         (common-lisp:or schedule-refresh-on-entity
                                         common-lisp:null)
                         :accessor %refresh-frequency-refresh-on-day :initform
                         common-lisp:nil)
                        (interval :initarg :interval :type
                         (common-lisp:or refresh-interval common-lisp:null)
                         :accessor %refresh-frequency-interval :initform
                         (common-lisp:error ":interval is required"))))
 (common-lisp:export
  (common-lisp:list 'refresh-frequency 'make-refresh-frequency))
 (common-lisp:defun make-refresh-frequency
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key time-of-the-day timezone refresh-on-day
                     interval)
   (common-lisp:apply #'common-lisp:make-instance 'refresh-frequency
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input refresh-frequency))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input refresh-frequency))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'refresh-on-day))
      (common-lisp:list
       (common-lisp:cons "RefreshOnDay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-of-the-day))
      (common-lisp:list
       (common-lisp:cons "TimeOfTheDay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input refresh-frequency))
   common-lisp:nil))
(common-lisp:deftype refresh-interval () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass refresh-schedule common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %refresh-schedule-arn :initform common-lisp:nil)
                        (refresh-type :initarg :refresh-type :type
                         (common-lisp:or ingestion-type common-lisp:null)
                         :accessor %refresh-schedule-refresh-type :initform
                         (common-lisp:error ":refresh-type is required"))
                        (start-after-date-time :initarg :start-after-date-time
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor %refresh-schedule-start-after-date-time
                         :initform common-lisp:nil)
                        (schedule-frequency :initarg :schedule-frequency :type
                         (common-lisp:or refresh-frequency common-lisp:null)
                         :accessor %refresh-schedule-schedule-frequency
                         :initform
                         (common-lisp:error ":schedule-frequency is required"))
                        (schedule-id :initarg :schedule-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %refresh-schedule-schedule-id :initform
                         (common-lisp:error ":schedule-id is required"))))
 (common-lisp:export
  (common-lisp:list 'refresh-schedule 'make-refresh-schedule))
 (common-lisp:defun make-refresh-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn refresh-type start-after-date-time
                     schedule-frequency schedule-id)
   (common-lisp:apply #'common-lisp:make-instance 'refresh-schedule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input refresh-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input refresh-schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-id))
      (common-lisp:list
       (common-lisp:cons "ScheduleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-frequency))
      (common-lisp:list
       (common-lisp:cons "ScheduleFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-after-date-time))
      (common-lisp:list
       (common-lisp:cons "StartAfterDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'refresh-type))
      (common-lisp:list
       (common-lisp:cons "RefreshType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input refresh-schedule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype refresh-schedules ()
   '(trivial-types:proper-list refresh-schedule))
 (common-lisp:defun |make-refresh-schedules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list refresh-schedule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass register-user-request common-lisp:nil
                       ((external-login-id :initarg :external-login-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %register-user-request-external-login-id :initform
                         common-lisp:nil)
                        (custom-federation-provider-url :initarg
                         :custom-federation-provider-url :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %register-user-request-custom-federation-provider-url
                         :initform common-lisp:nil)
                        (external-login-federation-provider-type :initarg
                         :external-login-federation-provider-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %register-user-request-external-login-federation-provider-type
                         :initform common-lisp:nil)
                        (custom-permissions-name :initarg
                         :custom-permissions-name :type
                         (common-lisp:or role-name common-lisp:null) :accessor
                         %register-user-request-custom-permissions-name
                         :initform common-lisp:nil)
                        (user-name :initarg :user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %register-user-request-user-name :initform
                         common-lisp:nil)
                        (namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %register-user-request-namespace :initform
                         (common-lisp:error ":namespace is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %register-user-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))
                        (session-name :initarg :session-name :type
                         (common-lisp:or role-session-name common-lisp:null)
                         :accessor %register-user-request-session-name
                         :initform common-lisp:nil)
                        (iam-arn :initarg :iam-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %register-user-request-iam-arn :initform
                         common-lisp:nil)
                        (user-role :initarg :user-role :type
                         (common-lisp:or user-role common-lisp:null) :accessor
                         %register-user-request-user-role :initform
                         (common-lisp:error ":user-role is required"))
                        (email :initarg :email :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %register-user-request-email :initform
                         (common-lisp:error ":email is required"))
                        (identity-type :initarg :identity-type :type
                         (common-lisp:or identity-type common-lisp:null)
                         :accessor %register-user-request-identity-type
                         :initform
                         (common-lisp:error ":identity-type is required"))))
 (common-lisp:export
  (common-lisp:list 'register-user-request 'make-register-user-request))
 (common-lisp:defun make-register-user-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key external-login-id
                     custom-federation-provider-url
                     external-login-federation-provider-type
                     custom-permissions-name user-name namespace aws-account-id
                     session-name iam-arn user-role email identity-type)
   (common-lisp:apply #'common-lisp:make-instance 'register-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-type))
      (common-lisp:list
       (common-lisp:cons "IdentityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-role))
      (common-lisp:list
       (common-lisp:cons "UserRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-arn))
      (common-lisp:list
       (common-lisp:cons "IamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-name))
      (common-lisp:list
       (common-lisp:cons "SessionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-permissions-name))
      (common-lisp:list
       (common-lisp:cons "CustomPermissionsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-login-federation-provider-type))
      (common-lisp:list
       (common-lisp:cons "ExternalLoginFederationProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-federation-provider-url))
      (common-lisp:list
       (common-lisp:cons "CustomFederationProviderUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-login-id))
      (common-lisp:list
       (common-lisp:cons "ExternalLoginId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-user-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %register-user-response-status :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %register-user-response-request-id :initform
                         common-lisp:nil)
                        (user-invitation-url :initarg :user-invitation-url
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %register-user-response-user-invitation-url
                         :initform common-lisp:nil)
                        (user :initarg :user :type
                         (common-lisp:or user common-lisp:null) :accessor
                         %register-user-response-user :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'register-user-response 'make-register-user-response))
 (common-lisp:defun make-register-user-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id user-invitation-url
                     user)
   (common-lisp:apply #'common-lisp:make-instance 'register-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-invitation-url))
      (common-lisp:list
       (common-lisp:cons "UserInvitationUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass registered-user-console-feature-configurations
                       common-lisp:nil
                       ((state-persistence :initarg :state-persistence :type
                         (common-lisp:or state-persistence-configurations
                                         common-lisp:null)
                         :accessor
                         %registered-user-console-feature-configurations-state-persistence
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'registered-user-console-feature-configurations
                    'make-registered-user-console-feature-configurations))
 (common-lisp:defun make-registered-user-console-feature-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state-persistence)
   (common-lisp:apply #'common-lisp:make-instance
                      'registered-user-console-feature-configurations
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-console-feature-configurations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-console-feature-configurations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-persistence))
      (common-lisp:list
       (common-lisp:cons "StatePersistence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-console-feature-configurations))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass registered-user-dashboard-embedding-configuration
                       common-lisp:nil
                       ((feature-configurations :initarg
                         :feature-configurations :type
                         (common-lisp:or
                          registered-user-dashboard-feature-configurations
                          common-lisp:null)
                         :accessor
                         %registered-user-dashboard-embedding-configuration-feature-configurations
                         :initform common-lisp:nil)
                        (initial-dashboard-id :initarg :initial-dashboard-id
                         :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %registered-user-dashboard-embedding-configuration-initial-dashboard-id
                         :initform
                         (common-lisp:error
                          ":initial-dashboard-id is required"))))
 (common-lisp:export
  (common-lisp:list 'registered-user-dashboard-embedding-configuration
                    'make-registered-user-dashboard-embedding-configuration))
 (common-lisp:defun make-registered-user-dashboard-embedding-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key feature-configurations
                     initial-dashboard-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'registered-user-dashboard-embedding-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-dashboard-embedding-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-dashboard-embedding-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initial-dashboard-id))
      (common-lisp:list
       (common-lisp:cons "InitialDashboardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'feature-configurations))
      (common-lisp:list
       (common-lisp:cons "FeatureConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-dashboard-embedding-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass registered-user-dashboard-feature-configurations
                       common-lisp:nil
                       ((state-persistence :initarg :state-persistence :type
                         (common-lisp:or state-persistence-configurations
                                         common-lisp:null)
                         :accessor
                         %registered-user-dashboard-feature-configurations-state-persistence
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'registered-user-dashboard-feature-configurations
                    'make-registered-user-dashboard-feature-configurations))
 (common-lisp:defun make-registered-user-dashboard-feature-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state-persistence)
   (common-lisp:apply #'common-lisp:make-instance
                      'registered-user-dashboard-feature-configurations
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-dashboard-feature-configurations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-dashboard-feature-configurations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-persistence))
      (common-lisp:list
       (common-lisp:cons "StatePersistence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-dashboard-feature-configurations))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass registered-user-dashboard-visual-embedding-configuration
                       common-lisp:nil
                       ((initial-dashboard-visual-id :initarg
                         :initial-dashboard-visual-id :type
                         (common-lisp:or dashboard-visual-id common-lisp:null)
                         :accessor
                         %registered-user-dashboard-visual-embedding-configuration-initial-dashboard-visual-id
                         :initform
                         (common-lisp:error
                          ":initial-dashboard-visual-id is required"))))
 (common-lisp:export
  (common-lisp:list 'registered-user-dashboard-visual-embedding-configuration
                    'make-registered-user-dashboard-visual-embedding-configuration))
 (common-lisp:defun make-registered-user-dashboard-visual-embedding-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key initial-dashboard-visual-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'registered-user-dashboard-visual-embedding-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-dashboard-visual-embedding-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-dashboard-visual-embedding-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initial-dashboard-visual-id))
      (common-lisp:list
       (common-lisp:cons "InitialDashboardVisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-dashboard-visual-embedding-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass registered-user-embedding-experience-configuration
                       common-lisp:nil
                       ((dashboard-visual :initarg :dashboard-visual :type
                         (common-lisp:or
                          registered-user-dashboard-visual-embedding-configuration
                          common-lisp:null)
                         :accessor
                         %registered-user-embedding-experience-configuration-dashboard-visual
                         :initform common-lisp:nil)
                        (qsearch-bar :initarg :qsearch-bar :type
                         (common-lisp:or
                          registered-user-qsearch-bar-embedding-configuration
                          common-lisp:null)
                         :accessor
                         %registered-user-embedding-experience-configuration-qsearch-bar
                         :initform common-lisp:nil)
                        (quick-sight-console :initarg :quick-sight-console
                         :type
                         (common-lisp:or
                          registered-user-quick-sight-console-embedding-configuration
                          common-lisp:null)
                         :accessor
                         %registered-user-embedding-experience-configuration-quick-sight-console
                         :initform common-lisp:nil)
                        (dashboard :initarg :dashboard :type
                         (common-lisp:or
                          registered-user-dashboard-embedding-configuration
                          common-lisp:null)
                         :accessor
                         %registered-user-embedding-experience-configuration-dashboard
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'registered-user-embedding-experience-configuration
                    'make-registered-user-embedding-experience-configuration))
 (common-lisp:defun make-registered-user-embedding-experience-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dashboard-visual qsearch-bar
                     quick-sight-console dashboard)
   (common-lisp:apply #'common-lisp:make-instance
                      'registered-user-embedding-experience-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-embedding-experience-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-embedding-experience-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard))
      (common-lisp:list
       (common-lisp:cons "Dashboard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-sight-console))
      (common-lisp:list
       (common-lisp:cons "QuickSightConsole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qsearch-bar))
      (common-lisp:list
       (common-lisp:cons "QSearchBar"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-visual))
      (common-lisp:list
       (common-lisp:cons "DashboardVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-embedding-experience-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass registered-user-qsearch-bar-embedding-configuration
                       common-lisp:nil
                       ((initial-topic-id :initarg :initial-topic-id :type
                         (common-lisp:or restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %registered-user-qsearch-bar-embedding-configuration-initial-topic-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'registered-user-qsearch-bar-embedding-configuration
                    'make-registered-user-qsearch-bar-embedding-configuration))
 (common-lisp:defun make-registered-user-qsearch-bar-embedding-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key initial-topic-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'registered-user-qsearch-bar-embedding-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-qsearch-bar-embedding-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-qsearch-bar-embedding-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-topic-id))
      (common-lisp:list
       (common-lisp:cons "InitialTopicId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-qsearch-bar-embedding-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  registered-user-quick-sight-console-embedding-configuration common-lisp:nil
  ((feature-configurations :initarg :feature-configurations :type
    (common-lisp:or registered-user-console-feature-configurations
                    common-lisp:null)
    :accessor
    %registered-user-quick-sight-console-embedding-configuration-feature-configurations
    :initform common-lisp:nil)
   (initial-path :initarg :initial-path :type
    (common-lisp:or entry-path common-lisp:null) :accessor
    %registered-user-quick-sight-console-embedding-configuration-initial-path
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'registered-user-quick-sight-console-embedding-configuration
   'make-registered-user-quick-sight-console-embedding-configuration))
 (common-lisp:defun make-registered-user-quick-sight-console-embedding-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key feature-configurations initial-path)
   (common-lisp:apply #'common-lisp:make-instance
                      'registered-user-quick-sight-console-embedding-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-quick-sight-console-embedding-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-quick-sight-console-embedding-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-path))
      (common-lisp:list
       (common-lisp:cons "InitialPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'feature-configurations))
      (common-lisp:list
       (common-lisp:cons "FeatureConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registered-user-quick-sight-console-embedding-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass relational-table common-lisp:nil
                       ((input-columns :initarg :input-columns :type
                         (common-lisp:or input-column-list common-lisp:null)
                         :accessor %relational-table-input-columns :initform
                         (common-lisp:error ":input-columns is required"))
                        (name :initarg :name :type
                         (common-lisp:or relational-table-name
                                         common-lisp:null)
                         :accessor %relational-table-name :initform
                         (common-lisp:error ":name is required"))
                        (schema :initarg :schema :type
                         (common-lisp:or relational-table-schema
                                         common-lisp:null)
                         :accessor %relational-table-schema :initform
                         common-lisp:nil)
                        (catalog :initarg :catalog :type
                         (common-lisp:or relational-table-catalog
                                         common-lisp:null)
                         :accessor %relational-table-catalog :initform
                         common-lisp:nil)
                        (data-source-arn :initarg :data-source-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %relational-table-data-source-arn :initform
                         (common-lisp:error ":data-source-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'relational-table 'make-relational-table))
 (common-lisp:defun make-relational-table
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-columns name schema catalog
                     data-source-arn)
   (common-lisp:apply #'common-lisp:make-instance 'relational-table
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input relational-table))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input relational-table))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-arn))
      (common-lisp:list
       (common-lisp:cons "DataSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog))
      (common-lisp:list
       (common-lisp:cons "Catalog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "Schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-columns))
      (common-lisp:list
       (common-lisp:cons "InputColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input relational-table))
   common-lisp:nil))
(common-lisp:deftype relational-table-catalog () 'common-lisp:string)
(common-lisp:deftype relational-table-name () 'common-lisp:string)
(common-lisp:deftype relational-table-schema () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass relative-date-time-control-display-options
                       common-lisp:nil
                       ((date-time-format :initarg :date-time-format :type
                         (common-lisp:or date-time-format common-lisp:null)
                         :accessor
                         %relative-date-time-control-display-options-date-time-format
                         :initform common-lisp:nil)
                        (title-options :initarg :title-options :type
                         (common-lisp:or label-options common-lisp:null)
                         :accessor
                         %relative-date-time-control-display-options-title-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'relative-date-time-control-display-options
                    'make-relative-date-time-control-display-options))
 (common-lisp:defun make-relative-date-time-control-display-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key date-time-format title-options)
   (common-lisp:apply #'common-lisp:make-instance
                      'relative-date-time-control-display-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          relative-date-time-control-display-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          relative-date-time-control-display-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title-options))
      (common-lisp:list
       (common-lisp:cons "TitleOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-time-format))
      (common-lisp:list
       (common-lisp:cons "DateTimeFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          relative-date-time-control-display-options))
   common-lisp:nil))
(common-lisp:deftype relative-date-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass relative-dates-filter common-lisp:nil
                       ((exclude-period-configuration :initarg
                         :exclude-period-configuration :type
                         (common-lisp:or exclude-period-configuration
                                         common-lisp:null)
                         :accessor
                         %relative-dates-filter-exclude-period-configuration
                         :initform common-lisp:nil)
                        (null-option :initarg :null-option :type
                         (common-lisp:or filter-null-option common-lisp:null)
                         :accessor %relative-dates-filter-null-option :initform
                         (common-lisp:error ":null-option is required"))
                        (parameter-name :initarg :parameter-name :type
                         (common-lisp:or parameter-name common-lisp:null)
                         :accessor %relative-dates-filter-parameter-name
                         :initform common-lisp:nil)
                        (relative-date-value :initarg :relative-date-value
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor %relative-dates-filter-relative-date-value
                         :initform common-lisp:nil)
                        (relative-date-type :initarg :relative-date-type :type
                         (common-lisp:or relative-date-type common-lisp:null)
                         :accessor %relative-dates-filter-relative-date-type
                         :initform
                         (common-lisp:error ":relative-date-type is required"))
                        (time-granularity :initarg :time-granularity :type
                         (common-lisp:or time-granularity common-lisp:null)
                         :accessor %relative-dates-filter-time-granularity
                         :initform
                         (common-lisp:error ":time-granularity is required"))
                        (minimum-granularity :initarg :minimum-granularity
                         :type
                         (common-lisp:or time-granularity common-lisp:null)
                         :accessor %relative-dates-filter-minimum-granularity
                         :initform common-lisp:nil)
                        (anchor-date-configuration :initarg
                         :anchor-date-configuration :type
                         (common-lisp:or anchor-date-configuration
                                         common-lisp:null)
                         :accessor
                         %relative-dates-filter-anchor-date-configuration
                         :initform
                         (common-lisp:error
                          ":anchor-date-configuration is required"))
                        (column :initarg :column :type
                         (common-lisp:or column-identifier common-lisp:null)
                         :accessor %relative-dates-filter-column :initform
                         (common-lisp:error ":column is required"))
                        (filter-id :initarg :filter-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %relative-dates-filter-filter-id :initform
                         (common-lisp:error ":filter-id is required"))))
 (common-lisp:export
  (common-lisp:list 'relative-dates-filter 'make-relative-dates-filter))
 (common-lisp:defun make-relative-dates-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key exclude-period-configuration null-option
                     parameter-name relative-date-value relative-date-type
                     time-granularity minimum-granularity
                     anchor-date-configuration column filter-id)
   (common-lisp:apply #'common-lisp:make-instance 'relative-dates-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          relative-dates-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          relative-dates-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-id))
      (common-lisp:list
       (common-lisp:cons "FilterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anchor-date-configuration))
      (common-lisp:list
       (common-lisp:cons "AnchorDateConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-granularity))
      (common-lisp:list
       (common-lisp:cons "MinimumGranularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-granularity))
      (common-lisp:list
       (common-lisp:cons "TimeGranularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relative-date-type))
      (common-lisp:list
       (common-lisp:cons "RelativeDateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relative-date-value))
      (common-lisp:list
       (common-lisp:cons "RelativeDateValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'null-option))
      (common-lisp:list
       (common-lisp:cons "NullOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclude-period-configuration))
      (common-lisp:list
       (common-lisp:cons "ExcludePeriodConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          relative-dates-filter))
   common-lisp:nil))
(common-lisp:deftype relative-font-size () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rename-column-operation common-lisp:nil
                       ((new-column-name :initarg :new-column-name :type
                         (common-lisp:or column-name common-lisp:null)
                         :accessor %rename-column-operation-new-column-name
                         :initform
                         (common-lisp:error ":new-column-name is required"))
                        (column-name :initarg :column-name :type
                         (common-lisp:or column-name common-lisp:null)
                         :accessor %rename-column-operation-column-name
                         :initform
                         (common-lisp:error ":column-name is required"))))
 (common-lisp:export
  (common-lisp:list 'rename-column-operation 'make-rename-column-operation))
 (common-lisp:defun make-rename-column-operation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key new-column-name column-name)
   (common-lisp:apply #'common-lisp:make-instance 'rename-column-operation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rename-column-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rename-column-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "ColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-column-name))
      (common-lisp:list
       (common-lisp:cons "NewColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rename-column-operation))
   common-lisp:nil))
(common-lisp:deftype resize-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-exists-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-exists-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-exists-exception-resource-type)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       resource-exists-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'resource-exists-exception
                    'resource-exists-exception-message
                    'resource-exists-exception-resource-type
                    'resource-exists-exception-request-id)))
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       resource-not-found-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-type
                    'resource-not-found-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass resource-permission common-lisp:nil
                       ((actions :initarg :actions :type
                         (common-lisp:or action-list common-lisp:null)
                         :accessor %resource-permission-actions :initform
                         (common-lisp:error ":actions is required"))
                        (principal :initarg :principal :type
                         (common-lisp:or principal common-lisp:null) :accessor
                         %resource-permission-principal :initform
                         (common-lisp:error ":principal is required"))))
 (common-lisp:export
  (common-lisp:list 'resource-permission 'make-resource-permission))
 (common-lisp:defun make-resource-permission
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key actions principal)
   (common-lisp:apply #'common-lisp:make-instance 'resource-permission
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-permission))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-permission))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-permission))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-permission-list ()
   '(trivial-types:proper-list resource-permission))
 (common-lisp:defun |make-resource-permission-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-permission))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-unavailable-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-unavailable-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-unavailable-exception-resource-type)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       resource-unavailable-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'resource-unavailable-exception
                    'resource-unavailable-exception-message
                    'resource-unavailable-exception-resource-type
                    'resource-unavailable-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass restore-analysis-request common-lisp:nil
                       ((analysis-id :initarg :analysis-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %restore-analysis-request-analysis-id
                         :initform
                         (common-lisp:error ":analysis-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %restore-analysis-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'restore-analysis-request 'make-restore-analysis-request))
 (common-lisp:defun make-restore-analysis-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key analysis-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'restore-analysis-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-analysis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-analysis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-analysis-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-analysis-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %restore-analysis-response-request-id :initform
                         common-lisp:nil)
                        (analysis-id :initarg :analysis-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %restore-analysis-response-analysis-id
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %restore-analysis-response-arn :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %restore-analysis-response-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'restore-analysis-response
                    'make-restore-analysis-response))
 (common-lisp:defun make-restore-analysis-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id analysis-id arn status)
   (common-lisp:apply #'common-lisp:make-instance 'restore-analysis-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-analysis-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-analysis-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-id))
      (common-lisp:list
       (common-lisp:cons "AnalysisId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-analysis-response))
   common-lisp:nil))
(common-lisp:deftype restrictive-resource-id () 'common-lisp:string)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype role-name () 'common-lisp:string)
(common-lisp:deftype role-session-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rolling-date-configuration common-lisp:nil
                       ((expression :initarg :expression :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         %rolling-date-configuration-expression :initform
                         (common-lisp:error ":expression is required"))
                        (data-set-identifier :initarg :data-set-identifier
                         :type
                         (common-lisp:or data-set-identifier common-lisp:null)
                         :accessor
                         %rolling-date-configuration-data-set-identifier
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rolling-date-configuration
                    'make-rolling-date-configuration))
 (common-lisp:defun make-rolling-date-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expression data-set-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'rolling-date-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rolling-date-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rolling-date-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-identifier))
      (common-lisp:list
       (common-lisp:cons "DataSetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rolling-date-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype row-alternate-color-list ()
   '(trivial-types:proper-list hex-color))
 (common-lisp:defun |make-row-alternate-color-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hex-color))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass row-alternate-color-options common-lisp:nil
                       ((row-alternate-colors :initarg :row-alternate-colors
                         :type
                         (common-lisp:or row-alternate-color-list
                                         common-lisp:null)
                         :accessor
                         %row-alternate-color-options-row-alternate-colors
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or widget-status common-lisp:null)
                         :accessor %row-alternate-color-options-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'row-alternate-color-options
                    'make-row-alternate-color-options))
 (common-lisp:defun make-row-alternate-color-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key row-alternate-colors status)
   (common-lisp:apply #'common-lisp:make-instance 'row-alternate-color-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          row-alternate-color-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          row-alternate-color-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'row-alternate-colors))
      (common-lisp:list
       (common-lisp:cons "RowAlternateColors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          row-alternate-color-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass row-info common-lisp:nil
                       ((total-rows-in-dataset :initarg :total-rows-in-dataset
                         :type (common-lisp:or long common-lisp:null) :accessor
                         %row-info-total-rows-in-dataset :initform
                         common-lisp:nil)
                        (rows-dropped :initarg :rows-dropped :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %row-info-rows-dropped :initform common-lisp:nil)
                        (rows-ingested :initarg :rows-ingested :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %row-info-rows-ingested :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'row-info 'make-row-info))
 (common-lisp:defun make-row-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key total-rows-in-dataset rows-dropped
                     rows-ingested)
   (common-lisp:apply #'common-lisp:make-instance 'row-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input row-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input row-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rows-ingested))
      (common-lisp:list
       (common-lisp:cons "RowsIngested"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rows-dropped))
      (common-lisp:list
       (common-lisp:cons "RowsDropped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-rows-in-dataset))
      (common-lisp:list
       (common-lisp:cons "TotalRowsInDataset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input row-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass row-level-permission-data-set common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %row-level-permission-data-set-status :initform
                         common-lisp:nil)
                        (format-version :initarg :format-version :type
                         (common-lisp:or row-level-permission-format-version
                                         common-lisp:null)
                         :accessor
                         %row-level-permission-data-set-format-version
                         :initform common-lisp:nil)
                        (permission-policy :initarg :permission-policy :type
                         (common-lisp:or row-level-permission-policy
                                         common-lisp:null)
                         :accessor
                         %row-level-permission-data-set-permission-policy
                         :initform
                         (common-lisp:error ":permission-policy is required"))
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %row-level-permission-data-set-arn :initform
                         (common-lisp:error ":arn is required"))
                        (namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %row-level-permission-data-set-namespace :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'row-level-permission-data-set
                    'make-row-level-permission-data-set))
 (common-lisp:defun make-row-level-permission-data-set
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status format-version permission-policy
                     arn namespace)
   (common-lisp:apply #'common-lisp:make-instance
                      'row-level-permission-data-set
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          row-level-permission-data-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          row-level-permission-data-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-policy))
      (common-lisp:list
       (common-lisp:cons "PermissionPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format-version))
      (common-lisp:list
       (common-lisp:cons "FormatVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          row-level-permission-data-set))
   common-lisp:nil))
(common-lisp:deftype row-level-permission-format-version () 'common-lisp:string)
(common-lisp:deftype row-level-permission-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass row-level-permission-tag-configuration common-lisp:nil
                       ((tag-rule-configurations :initarg
                         :tag-rule-configurations :type
                         (common-lisp:or
                          row-level-permission-tag-rule-configuration-list
                          common-lisp:null)
                         :accessor
                         %row-level-permission-tag-configuration-tag-rule-configurations
                         :initform common-lisp:nil)
                        (tag-rules :initarg :tag-rules :type
                         (common-lisp:or row-level-permission-tag-rule-list
                                         common-lisp:null)
                         :accessor
                         %row-level-permission-tag-configuration-tag-rules
                         :initform
                         (common-lisp:error ":tag-rules is required"))
                        (status :initarg :status :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %row-level-permission-tag-configuration-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'row-level-permission-tag-configuration
                    'make-row-level-permission-tag-configuration))
 (common-lisp:defun make-row-level-permission-tag-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-rule-configurations tag-rules status)
   (common-lisp:apply #'common-lisp:make-instance
                      'row-level-permission-tag-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          row-level-permission-tag-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          row-level-permission-tag-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-rules))
      (common-lisp:list
       (common-lisp:cons "TagRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tag-rule-configurations))
      (common-lisp:list
       (common-lisp:cons "TagRuleConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          row-level-permission-tag-configuration))
   common-lisp:nil))
(common-lisp:deftype row-level-permission-tag-delimiter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass row-level-permission-tag-rule common-lisp:nil
                       ((match-all-value :initarg :match-all-value :type
                         (common-lisp:or session-tag-value common-lisp:null)
                         :accessor
                         %row-level-permission-tag-rule-match-all-value
                         :initform common-lisp:nil)
                        (tag-multi-value-delimiter :initarg
                         :tag-multi-value-delimiter :type
                         (common-lisp:or row-level-permission-tag-delimiter
                                         common-lisp:null)
                         :accessor
                         %row-level-permission-tag-rule-tag-multi-value-delimiter
                         :initform common-lisp:nil)
                        (column-name :initarg :column-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %row-level-permission-tag-rule-column-name :initform
                         (common-lisp:error ":column-name is required"))
                        (tag-key :initarg :tag-key :type
                         (common-lisp:or session-tag-key common-lisp:null)
                         :accessor %row-level-permission-tag-rule-tag-key
                         :initform
                         (common-lisp:error ":tag-key is required"))))
 (common-lisp:export
  (common-lisp:list 'row-level-permission-tag-rule
                    'make-row-level-permission-tag-rule))
 (common-lisp:defun make-row-level-permission-tag-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key match-all-value tag-multi-value-delimiter
                     column-name tag-key)
   (common-lisp:apply #'common-lisp:make-instance
                      'row-level-permission-tag-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          row-level-permission-tag-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          row-level-permission-tag-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "ColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tag-multi-value-delimiter))
      (common-lisp:list
       (common-lisp:cons "TagMultiValueDelimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-all-value))
      (common-lisp:list
       (common-lisp:cons "MatchAllValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          row-level-permission-tag-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype row-level-permission-tag-rule-configuration ()
   '(trivial-types:proper-list session-tag-key))
 (common-lisp:defun |make-row-level-permission-tag-rule-configuration|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list session-tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype row-level-permission-tag-rule-configuration-list ()
   '(trivial-types:proper-list row-level-permission-tag-rule-configuration))
 (common-lisp:defun |make-row-level-permission-tag-rule-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            row-level-permission-tag-rule-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype row-level-permission-tag-rule-list ()
   '(trivial-types:proper-list row-level-permission-tag-rule))
 (common-lisp:defun |make-row-level-permission-tag-rule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            row-level-permission-tag-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype row-sort-list ()
   '(trivial-types:proper-list field-sort-options))
 (common-lisp:defun |make-row-sort-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-sort-options))
   aws-sdk/generator/shape::members))
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3parameters common-lisp:nil
                       ((role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %s3parameters-role-arn :initform common-lisp:nil)
                        (manifest-file-location :initarg
                         :manifest-file-location :type
                         (common-lisp:or manifest-file-location
                                         common-lisp:null)
                         :accessor %s3parameters-manifest-file-location
                         :initform
                         (common-lisp:error
                          ":manifest-file-location is required"))))
 (common-lisp:export (common-lisp:list 's3parameters 'make-s3parameters))
 (common-lisp:defun make-s3parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn manifest-file-location)
   (common-lisp:apply #'common-lisp:make-instance 's3parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manifest-file-location))
      (common-lisp:list
       (common-lisp:cons "ManifestFileLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3source common-lisp:nil
                       ((input-columns :initarg :input-columns :type
                         (common-lisp:or input-column-list common-lisp:null)
                         :accessor %s3source-input-columns :initform
                         (common-lisp:error ":input-columns is required"))
                        (upload-settings :initarg :upload-settings :type
                         (common-lisp:or upload-settings common-lisp:null)
                         :accessor %s3source-upload-settings :initform
                         common-lisp:nil)
                        (data-source-arn :initarg :data-source-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %s3source-data-source-arn :initform
                         (common-lisp:error ":data-source-arn is required"))))
 (common-lisp:export (common-lisp:list 's3source 'make-s3source))
 (common-lisp:defun make-s3source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-columns upload-settings
                     data-source-arn)
   (common-lisp:apply #'common-lisp:make-instance 's3source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-arn))
      (common-lisp:list
       (common-lisp:cons "DataSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-settings))
      (common-lisp:list
       (common-lisp:cons "UploadSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-columns))
      (common-lisp:list
       (common-lisp:cons "InputColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass same-sheet-target-visual-configuration common-lisp:nil
                       ((target-visual-options :initarg :target-visual-options
                         :type
                         (common-lisp:or target-visual-options
                                         common-lisp:null)
                         :accessor
                         %same-sheet-target-visual-configuration-target-visual-options
                         :initform common-lisp:nil)
                        (target-visuals :initarg :target-visuals :type
                         (common-lisp:or target-visual-list common-lisp:null)
                         :accessor
                         %same-sheet-target-visual-configuration-target-visuals
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'same-sheet-target-visual-configuration
                    'make-same-sheet-target-visual-configuration))
 (common-lisp:defun make-same-sheet-target-visual-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-visual-options target-visuals)
   (common-lisp:apply #'common-lisp:make-instance
                      'same-sheet-target-visual-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          same-sheet-target-visual-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          same-sheet-target-visual-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-visuals))
      (common-lisp:list
       (common-lisp:cons "TargetVisuals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-visual-options))
      (common-lisp:list
       (common-lisp:cons "TargetVisualOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          same-sheet-target-visual-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sankey-diagram-aggregated-field-wells common-lisp:nil
                       ((weight :initarg :weight :type
                         (common-lisp:or measure-field-list common-lisp:null)
                         :accessor
                         %sankey-diagram-aggregated-field-wells-weight
                         :initform common-lisp:nil)
                        (destination :initarg :destination :type
                         (common-lisp:or dimension-field-list common-lisp:null)
                         :accessor
                         %sankey-diagram-aggregated-field-wells-destination
                         :initform common-lisp:nil)
                        (source :initarg :source :type
                         (common-lisp:or dimension-field-list common-lisp:null)
                         :accessor
                         %sankey-diagram-aggregated-field-wells-source
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sankey-diagram-aggregated-field-wells
                    'make-sankey-diagram-aggregated-field-wells))
 (common-lisp:defun make-sankey-diagram-aggregated-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key weight destination source)
   (common-lisp:apply #'common-lisp:make-instance
                      'sankey-diagram-aggregated-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sankey-diagram-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sankey-diagram-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "Weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sankey-diagram-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sankey-diagram-chart-configuration common-lisp:nil
                       ((data-labels :initarg :data-labels :type
                         (common-lisp:or data-label-options common-lisp:null)
                         :accessor
                         %sankey-diagram-chart-configuration-data-labels
                         :initform common-lisp:nil)
                        (sort-configuration :initarg :sort-configuration :type
                         (common-lisp:or sankey-diagram-sort-configuration
                                         common-lisp:null)
                         :accessor
                         %sankey-diagram-chart-configuration-sort-configuration
                         :initform common-lisp:nil)
                        (field-wells :initarg :field-wells :type
                         (common-lisp:or sankey-diagram-field-wells
                                         common-lisp:null)
                         :accessor
                         %sankey-diagram-chart-configuration-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sankey-diagram-chart-configuration
                    'make-sankey-diagram-chart-configuration))
 (common-lisp:defun make-sankey-diagram-chart-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-labels sort-configuration
                     field-wells)
   (common-lisp:apply #'common-lisp:make-instance
                      'sankey-diagram-chart-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sankey-diagram-chart-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sankey-diagram-chart-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-labels))
      (common-lisp:list
       (common-lisp:cons "DataLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sankey-diagram-chart-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sankey-diagram-field-wells common-lisp:nil
                       ((sankey-diagram-aggregated-field-wells :initarg
                         :sankey-diagram-aggregated-field-wells :type
                         (common-lisp:or sankey-diagram-aggregated-field-wells
                                         common-lisp:null)
                         :accessor
                         %sankey-diagram-field-wells-sankey-diagram-aggregated-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sankey-diagram-field-wells
                    'make-sankey-diagram-field-wells))
 (common-lisp:defun make-sankey-diagram-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sankey-diagram-aggregated-field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'sankey-diagram-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sankey-diagram-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sankey-diagram-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sankey-diagram-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "SankeyDiagramAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sankey-diagram-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sankey-diagram-sort-configuration common-lisp:nil
                       ((destination-items-limit :initarg
                         :destination-items-limit :type
                         (common-lisp:or items-limit-configuration
                                         common-lisp:null)
                         :accessor
                         %sankey-diagram-sort-configuration-destination-items-limit
                         :initform common-lisp:nil)
                        (source-items-limit :initarg :source-items-limit :type
                         (common-lisp:or items-limit-configuration
                                         common-lisp:null)
                         :accessor
                         %sankey-diagram-sort-configuration-source-items-limit
                         :initform common-lisp:nil)
                        (weight-sort :initarg :weight-sort :type
                         (common-lisp:or field-sort-options-list
                                         common-lisp:null)
                         :accessor
                         %sankey-diagram-sort-configuration-weight-sort
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sankey-diagram-sort-configuration
                    'make-sankey-diagram-sort-configuration))
 (common-lisp:defun make-sankey-diagram-sort-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination-items-limit
                     source-items-limit weight-sort)
   (common-lisp:apply #'common-lisp:make-instance
                      'sankey-diagram-sort-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sankey-diagram-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sankey-diagram-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight-sort))
      (common-lisp:list
       (common-lisp:cons "WeightSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-items-limit))
      (common-lisp:list
       (common-lisp:cons "SourceItemsLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-items-limit))
      (common-lisp:list
       (common-lisp:cons "DestinationItemsLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sankey-diagram-sort-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sankey-diagram-visual common-lisp:nil
                       ((actions :initarg :actions :type
                         (common-lisp:or visual-custom-action-list
                                         common-lisp:null)
                         :accessor %sankey-diagram-visual-actions :initform
                         common-lisp:nil)
                        (chart-configuration :initarg :chart-configuration
                         :type
                         (common-lisp:or sankey-diagram-chart-configuration
                                         common-lisp:null)
                         :accessor %sankey-diagram-visual-chart-configuration
                         :initform common-lisp:nil)
                        (subtitle :initarg :subtitle :type
                         (common-lisp:or visual-subtitle-label-options
                                         common-lisp:null)
                         :accessor %sankey-diagram-visual-subtitle :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or visual-title-label-options
                                         common-lisp:null)
                         :accessor %sankey-diagram-visual-title :initform
                         common-lisp:nil)
                        (visual-id :initarg :visual-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %sankey-diagram-visual-visual-id :initform
                         (common-lisp:error ":visual-id is required"))))
 (common-lisp:export
  (common-lisp:list 'sankey-diagram-visual 'make-sankey-diagram-visual))
 (common-lisp:defun make-sankey-diagram-visual
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key actions chart-configuration subtitle
                     title visual-id)
   (common-lisp:apply #'common-lisp:make-instance 'sankey-diagram-visual
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sankey-diagram-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sankey-diagram-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sankey-diagram-visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scatter-plot-categorically-aggregated-field-wells
                       common-lisp:nil
                       ((size :initarg :size :type
                         (common-lisp:or measure-field-list common-lisp:null)
                         :accessor
                         %scatter-plot-categorically-aggregated-field-wells-size
                         :initform common-lisp:nil)
                        (category :initarg :category :type
                         (common-lisp:or dimension-field-list common-lisp:null)
                         :accessor
                         %scatter-plot-categorically-aggregated-field-wells-category
                         :initform common-lisp:nil)
                        (yaxis :initarg :yaxis :type
                         (common-lisp:or measure-field-list common-lisp:null)
                         :accessor
                         %scatter-plot-categorically-aggregated-field-wells-yaxis
                         :initform common-lisp:nil)
                        (xaxis :initarg :xaxis :type
                         (common-lisp:or measure-field-list common-lisp:null)
                         :accessor
                         %scatter-plot-categorically-aggregated-field-wells-xaxis
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'scatter-plot-categorically-aggregated-field-wells
                    'make-scatter-plot-categorically-aggregated-field-wells))
 (common-lisp:defun make-scatter-plot-categorically-aggregated-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key size category yaxis xaxis)
   (common-lisp:apply #'common-lisp:make-instance
                      'scatter-plot-categorically-aggregated-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scatter-plot-categorically-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scatter-plot-categorically-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xaxis))
      (common-lisp:list
       (common-lisp:cons "XAxis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'yaxis))
      (common-lisp:list
       (common-lisp:cons "YAxis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scatter-plot-categorically-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scatter-plot-configuration common-lisp:nil
                       ((visual-palette :initarg :visual-palette :type
                         (common-lisp:or visual-palette common-lisp:null)
                         :accessor %scatter-plot-configuration-visual-palette
                         :initform common-lisp:nil)
                        (tooltip :initarg :tooltip :type
                         (common-lisp:or tooltip-options common-lisp:null)
                         :accessor %scatter-plot-configuration-tooltip
                         :initform common-lisp:nil)
                        (data-labels :initarg :data-labels :type
                         (common-lisp:or data-label-options common-lisp:null)
                         :accessor %scatter-plot-configuration-data-labels
                         :initform common-lisp:nil)
                        (legend :initarg :legend :type
                         (common-lisp:or legend-options common-lisp:null)
                         :accessor %scatter-plot-configuration-legend :initform
                         common-lisp:nil)
                        (yaxis-display-options :initarg :yaxis-display-options
                         :type
                         (common-lisp:or axis-display-options common-lisp:null)
                         :accessor
                         %scatter-plot-configuration-yaxis-display-options
                         :initform common-lisp:nil)
                        (yaxis-label-options :initarg :yaxis-label-options
                         :type
                         (common-lisp:or chart-axis-label-options
                                         common-lisp:null)
                         :accessor
                         %scatter-plot-configuration-yaxis-label-options
                         :initform common-lisp:nil)
                        (xaxis-display-options :initarg :xaxis-display-options
                         :type
                         (common-lisp:or axis-display-options common-lisp:null)
                         :accessor
                         %scatter-plot-configuration-xaxis-display-options
                         :initform common-lisp:nil)
                        (xaxis-label-options :initarg :xaxis-label-options
                         :type
                         (common-lisp:or chart-axis-label-options
                                         common-lisp:null)
                         :accessor
                         %scatter-plot-configuration-xaxis-label-options
                         :initform common-lisp:nil)
                        (field-wells :initarg :field-wells :type
                         (common-lisp:or scatter-plot-field-wells
                                         common-lisp:null)
                         :accessor %scatter-plot-configuration-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'scatter-plot-configuration
                    'make-scatter-plot-configuration))
 (common-lisp:defun make-scatter-plot-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visual-palette tooltip data-labels legend
                     yaxis-display-options yaxis-label-options
                     xaxis-display-options xaxis-label-options field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'scatter-plot-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scatter-plot-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scatter-plot-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xaxis-label-options))
      (common-lisp:list
       (common-lisp:cons "XAxisLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'xaxis-display-options))
      (common-lisp:list
       (common-lisp:cons "XAxisDisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'yaxis-label-options))
      (common-lisp:list
       (common-lisp:cons "YAxisLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'yaxis-display-options))
      (common-lisp:list
       (common-lisp:cons "YAxisDisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legend))
      (common-lisp:list
       (common-lisp:cons "Legend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-labels))
      (common-lisp:list
       (common-lisp:cons "DataLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip))
      (common-lisp:list
       (common-lisp:cons "Tooltip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-palette))
      (common-lisp:list
       (common-lisp:cons "VisualPalette"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scatter-plot-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scatter-plot-field-wells common-lisp:nil
                       ((scatter-plot-unaggregated-field-wells :initarg
                         :scatter-plot-unaggregated-field-wells :type
                         (common-lisp:or scatter-plot-unaggregated-field-wells
                                         common-lisp:null)
                         :accessor
                         %scatter-plot-field-wells-scatter-plot-unaggregated-field-wells
                         :initform common-lisp:nil)
                        (scatter-plot-categorically-aggregated-field-wells
                         :initarg
                         :scatter-plot-categorically-aggregated-field-wells
                         :type
                         (common-lisp:or
                          scatter-plot-categorically-aggregated-field-wells
                          common-lisp:null)
                         :accessor
                         %scatter-plot-field-wells-scatter-plot-categorically-aggregated-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'scatter-plot-field-wells 'make-scatter-plot-field-wells))
 (common-lisp:defun make-scatter-plot-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scatter-plot-unaggregated-field-wells
                     scatter-plot-categorically-aggregated-field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'scatter-plot-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scatter-plot-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scatter-plot-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scatter-plot-categorically-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "ScatterPlotCategoricallyAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scatter-plot-unaggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "ScatterPlotUnaggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scatter-plot-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scatter-plot-unaggregated-field-wells common-lisp:nil
                       ((size :initarg :size :type
                         (common-lisp:or measure-field-list common-lisp:null)
                         :accessor %scatter-plot-unaggregated-field-wells-size
                         :initform common-lisp:nil)
                        (yaxis :initarg :yaxis :type
                         (common-lisp:or dimension-field-list common-lisp:null)
                         :accessor %scatter-plot-unaggregated-field-wells-yaxis
                         :initform common-lisp:nil)
                        (xaxis :initarg :xaxis :type
                         (common-lisp:or dimension-field-list common-lisp:null)
                         :accessor %scatter-plot-unaggregated-field-wells-xaxis
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'scatter-plot-unaggregated-field-wells
                    'make-scatter-plot-unaggregated-field-wells))
 (common-lisp:defun make-scatter-plot-unaggregated-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key size yaxis xaxis)
   (common-lisp:apply #'common-lisp:make-instance
                      'scatter-plot-unaggregated-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scatter-plot-unaggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scatter-plot-unaggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xaxis))
      (common-lisp:list
       (common-lisp:cons "XAxis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'yaxis))
      (common-lisp:list
       (common-lisp:cons "YAxis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scatter-plot-unaggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scatter-plot-visual common-lisp:nil
                       ((column-hierarchies :initarg :column-hierarchies :type
                         (common-lisp:or column-hierarchy-list
                                         common-lisp:null)
                         :accessor %scatter-plot-visual-column-hierarchies
                         :initform common-lisp:nil)
                        (actions :initarg :actions :type
                         (common-lisp:or visual-custom-action-list
                                         common-lisp:null)
                         :accessor %scatter-plot-visual-actions :initform
                         common-lisp:nil)
                        (chart-configuration :initarg :chart-configuration
                         :type
                         (common-lisp:or scatter-plot-configuration
                                         common-lisp:null)
                         :accessor %scatter-plot-visual-chart-configuration
                         :initform common-lisp:nil)
                        (subtitle :initarg :subtitle :type
                         (common-lisp:or visual-subtitle-label-options
                                         common-lisp:null)
                         :accessor %scatter-plot-visual-subtitle :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or visual-title-label-options
                                         common-lisp:null)
                         :accessor %scatter-plot-visual-title :initform
                         common-lisp:nil)
                        (visual-id :initarg :visual-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %scatter-plot-visual-visual-id :initform
                         (common-lisp:error ":visual-id is required"))))
 (common-lisp:export
  (common-lisp:list 'scatter-plot-visual 'make-scatter-plot-visual))
 (common-lisp:defun make-scatter-plot-visual
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key column-hierarchies actions
                     chart-configuration subtitle title visual-id)
   (common-lisp:apply #'common-lisp:make-instance 'scatter-plot-visual
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scatter-plot-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scatter-plot-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-hierarchies))
      (common-lisp:list
       (common-lisp:cons "ColumnHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scatter-plot-visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass schedule-refresh-on-entity common-lisp:nil
                       ((day-of-month :initarg :day-of-month :type
                         (common-lisp:or day-of-month common-lisp:null)
                         :accessor %schedule-refresh-on-entity-day-of-month
                         :initform common-lisp:nil)
                        (day-of-week :initarg :day-of-week :type
                         (common-lisp:or day-of-week common-lisp:null)
                         :accessor %schedule-refresh-on-entity-day-of-week
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'schedule-refresh-on-entity
                    'make-schedule-refresh-on-entity))
 (common-lisp:defun make-schedule-refresh-on-entity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key day-of-month day-of-week)
   (common-lisp:apply #'common-lisp:make-instance 'schedule-refresh-on-entity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schedule-refresh-on-entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schedule-refresh-on-entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'day-of-week))
      (common-lisp:list
       (common-lisp:cons "DayOfWeek"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'day-of-month))
      (common-lisp:list
       (common-lisp:cons "DayOfMonth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schedule-refresh-on-entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scroll-bar-options common-lisp:nil
                       ((visible-range :initarg :visible-range :type
                         (common-lisp:or visible-range-options
                                         common-lisp:null)
                         :accessor %scroll-bar-options-visible-range :initform
                         common-lisp:nil)
                        (visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %scroll-bar-options-visibility :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'scroll-bar-options 'make-scroll-bar-options))
 (common-lisp:defun make-scroll-bar-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visible-range visibility)
   (common-lisp:apply #'common-lisp:make-instance 'scroll-bar-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scroll-bar-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scroll-bar-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visible-range))
      (common-lisp:list
       (common-lisp:cons "VisibleRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scroll-bar-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-analyses-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %search-analyses-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %search-analyses-request-next-token :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or analysis-search-filter-list
                                         common-lisp:null)
                         :accessor %search-analyses-request-filters :initform
                         (common-lisp:error ":filters is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %search-analyses-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'search-analyses-request 'make-search-analyses-request))
 (common-lisp:defun make-search-analyses-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'search-analyses-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-analyses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-analyses-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-analyses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-analyses-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %search-analyses-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %search-analyses-response-status :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %search-analyses-response-next-token :initform
                         common-lisp:nil)
                        (analysis-summary-list :initarg :analysis-summary-list
                         :type
                         (common-lisp:or analysis-summary-list
                                         common-lisp:null)
                         :accessor
                         %search-analyses-response-analysis-summary-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-analyses-response 'make-search-analyses-response))
 (common-lisp:defun make-search-analyses-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status next-token
                     analysis-summary-list)
   (common-lisp:apply #'common-lisp:make-instance 'search-analyses-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-analyses-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-analyses-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analysis-summary-list))
      (common-lisp:list
       (common-lisp:cons "AnalysisSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-analyses-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-dashboards-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %search-dashboards-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %search-dashboards-request-next-token :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or dashboard-search-filter-list
                                         common-lisp:null)
                         :accessor %search-dashboards-request-filters :initform
                         (common-lisp:error ":filters is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %search-dashboards-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'search-dashboards-request
                    'make-search-dashboards-request))
 (common-lisp:defun make-search-dashboards-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'search-dashboards-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-dashboards-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-dashboards-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-dashboards-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-dashboards-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %search-dashboards-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %search-dashboards-response-status :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %search-dashboards-response-next-token :initform
                         common-lisp:nil)
                        (dashboard-summary-list :initarg
                         :dashboard-summary-list :type
                         (common-lisp:or dashboard-summary-list
                                         common-lisp:null)
                         :accessor
                         %search-dashboards-response-dashboard-summary-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-dashboards-response
                    'make-search-dashboards-response))
 (common-lisp:defun make-search-dashboards-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status next-token
                     dashboard-summary-list)
   (common-lisp:apply #'common-lisp:make-instance 'search-dashboards-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-dashboards-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-dashboards-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dashboard-summary-list))
      (common-lisp:list
       (common-lisp:cons "DashboardSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-dashboards-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-data-sets-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %search-data-sets-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %search-data-sets-request-next-token :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or data-set-search-filter-list
                                         common-lisp:null)
                         :accessor %search-data-sets-request-filters :initform
                         (common-lisp:error ":filters is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %search-data-sets-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'search-data-sets-request 'make-search-data-sets-request))
 (common-lisp:defun make-search-data-sets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'search-data-sets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-data-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-data-sets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-data-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-data-sets-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %search-data-sets-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %search-data-sets-response-status :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %search-data-sets-response-next-token :initform
                         common-lisp:nil)
                        (data-set-summaries :initarg :data-set-summaries :type
                         (common-lisp:or data-set-summary-list
                                         common-lisp:null)
                         :accessor
                         %search-data-sets-response-data-set-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-data-sets-response
                    'make-search-data-sets-response))
 (common-lisp:defun make-search-data-sets-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status next-token
                     data-set-summaries)
   (common-lisp:apply #'common-lisp:make-instance 'search-data-sets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-data-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-data-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-summaries))
      (common-lisp:list
       (common-lisp:cons "DataSetSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-data-sets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-data-sources-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %search-data-sources-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %search-data-sources-request-next-token :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or data-source-search-filter-list
                                         common-lisp:null)
                         :accessor %search-data-sources-request-filters
                         :initform (common-lisp:error ":filters is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %search-data-sources-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'search-data-sources-request
                    'make-search-data-sources-request))
 (common-lisp:defun make-search-data-sources-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'search-data-sources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-data-sources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-data-sources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-data-sources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-data-sources-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %search-data-sources-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %search-data-sources-response-status
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %search-data-sources-response-next-token :initform
                         common-lisp:nil)
                        (data-source-summaries :initarg :data-source-summaries
                         :type
                         (common-lisp:or data-source-summary-list
                                         common-lisp:null)
                         :accessor
                         %search-data-sources-response-data-source-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-data-sources-response
                    'make-search-data-sources-response))
 (common-lisp:defun make-search-data-sources-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status next-token
                     data-source-summaries)
   (common-lisp:apply #'common-lisp:make-instance 'search-data-sources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-data-sources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-data-sources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-summaries))
      (common-lisp:list
       (common-lisp:cons "DataSourceSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-data-sources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-folders-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %search-folders-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %search-folders-request-next-token :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or folder-search-filter-list
                                         common-lisp:null)
                         :accessor %search-folders-request-filters :initform
                         (common-lisp:error ":filters is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %search-folders-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'search-folders-request 'make-search-folders-request))
 (common-lisp:defun make-search-folders-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'search-folders-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-folders-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-folders-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-folders-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-folders-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %search-folders-response-request-id :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %search-folders-response-next-token :initform
                         common-lisp:nil)
                        (folder-summary-list :initarg :folder-summary-list
                         :type
                         (common-lisp:or folder-summary-list common-lisp:null)
                         :accessor %search-folders-response-folder-summary-list
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %search-folders-response-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-folders-response 'make-search-folders-response))
 (common-lisp:defun make-search-folders-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id next-token folder-summary-list
                     status)
   (common-lisp:apply #'common-lisp:make-instance 'search-folders-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-folders-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-folders-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-summary-list))
      (common-lisp:list
       (common-lisp:cons "FolderSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-folders-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-groups-request common-lisp:nil
                       ((filters :initarg :filters :type
                         (common-lisp:or group-search-filter-list
                                         common-lisp:null)
                         :accessor %search-groups-request-filters :initform
                         (common-lisp:error ":filters is required"))
                        (namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %search-groups-request-namespace :initform
                         (common-lisp:error ":namespace is required"))
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %search-groups-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %search-groups-request-next-token :initform
                         common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %search-groups-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'search-groups-request 'make-search-groups-request))
 (common-lisp:defun make-search-groups-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filters namespace max-results next-token
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'search-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-groups-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %search-groups-response-status :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %search-groups-response-request-id :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %search-groups-response-next-token :initform
                         common-lisp:nil)
                        (group-list :initarg :group-list :type
                         (common-lisp:or group-list common-lisp:null) :accessor
                         %search-groups-response-group-list :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-groups-response 'make-search-groups-response))
 (common-lisp:defun make-search-groups-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id next-token group-list)
   (common-lisp:apply #'common-lisp:make-instance 'search-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-list))
      (common-lisp:list
       (common-lisp:cons "GroupList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-groups-response))
   common-lisp:nil))
(common-lisp:deftype seasonality () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass secondary-value-options common-lisp:nil
                       ((visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %secondary-value-options-visibility :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'secondary-value-options 'make-secondary-value-options))
 (common-lisp:defun make-secondary-value-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visibility)
   (common-lisp:apply #'common-lisp:make-instance 'secondary-value-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          secondary-value-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          secondary-value-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          secondary-value-options))
   common-lisp:nil))
(common-lisp:deftype secret-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass section-after-page-break common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or section-page-break-status
                                         common-lisp:null)
                         :accessor %section-after-page-break-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'section-after-page-break 'make-section-after-page-break))
 (common-lisp:defun make-section-after-page-break
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance 'section-after-page-break
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          section-after-page-break))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          section-after-page-break))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          section-after-page-break))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass section-based-layout-canvas-size-options common-lisp:nil
                       ((paper-canvas-size-options :initarg
                         :paper-canvas-size-options :type
                         (common-lisp:or
                          section-based-layout-paper-canvas-size-options
                          common-lisp:null)
                         :accessor
                         %section-based-layout-canvas-size-options-paper-canvas-size-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'section-based-layout-canvas-size-options
                    'make-section-based-layout-canvas-size-options))
 (common-lisp:defun make-section-based-layout-canvas-size-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key paper-canvas-size-options)
   (common-lisp:apply #'common-lisp:make-instance
                      'section-based-layout-canvas-size-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          section-based-layout-canvas-size-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          section-based-layout-canvas-size-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'paper-canvas-size-options))
      (common-lisp:list
       (common-lisp:cons "PaperCanvasSizeOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          section-based-layout-canvas-size-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass section-based-layout-configuration common-lisp:nil
                       ((canvas-size-options :initarg :canvas-size-options
                         :type
                         (common-lisp:or
                          section-based-layout-canvas-size-options
                          common-lisp:null)
                         :accessor
                         %section-based-layout-configuration-canvas-size-options
                         :initform
                         (common-lisp:error
                          ":canvas-size-options is required"))
                        (footer-sections :initarg :footer-sections :type
                         (common-lisp:or
                          header-footer-section-configuration-list
                          common-lisp:null)
                         :accessor
                         %section-based-layout-configuration-footer-sections
                         :initform
                         (common-lisp:error ":footer-sections is required"))
                        (body-sections :initarg :body-sections :type
                         (common-lisp:or body-section-configuration-list
                                         common-lisp:null)
                         :accessor
                         %section-based-layout-configuration-body-sections
                         :initform
                         (common-lisp:error ":body-sections is required"))
                        (header-sections :initarg :header-sections :type
                         (common-lisp:or
                          header-footer-section-configuration-list
                          common-lisp:null)
                         :accessor
                         %section-based-layout-configuration-header-sections
                         :initform
                         (common-lisp:error ":header-sections is required"))))
 (common-lisp:export
  (common-lisp:list 'section-based-layout-configuration
                    'make-section-based-layout-configuration))
 (common-lisp:defun make-section-based-layout-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key canvas-size-options footer-sections
                     body-sections header-sections)
   (common-lisp:apply #'common-lisp:make-instance
                      'section-based-layout-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          section-based-layout-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          section-based-layout-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header-sections))
      (common-lisp:list
       (common-lisp:cons "HeaderSections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body-sections))
      (common-lisp:list
       (common-lisp:cons "BodySections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'footer-sections))
      (common-lisp:list
       (common-lisp:cons "FooterSections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canvas-size-options))
      (common-lisp:list
       (common-lisp:cons "CanvasSizeOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          section-based-layout-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass section-based-layout-paper-canvas-size-options
                       common-lisp:nil
                       ((paper-margin :initarg :paper-margin :type
                         (common-lisp:or spacing common-lisp:null) :accessor
                         %section-based-layout-paper-canvas-size-options-paper-margin
                         :initform common-lisp:nil)
                        (paper-orientation :initarg :paper-orientation :type
                         (common-lisp:or paper-orientation common-lisp:null)
                         :accessor
                         %section-based-layout-paper-canvas-size-options-paper-orientation
                         :initform common-lisp:nil)
                        (paper-size :initarg :paper-size :type
                         (common-lisp:or paper-size common-lisp:null) :accessor
                         %section-based-layout-paper-canvas-size-options-paper-size
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'section-based-layout-paper-canvas-size-options
                    'make-section-based-layout-paper-canvas-size-options))
 (common-lisp:defun make-section-based-layout-paper-canvas-size-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key paper-margin paper-orientation
                     paper-size)
   (common-lisp:apply #'common-lisp:make-instance
                      'section-based-layout-paper-canvas-size-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          section-based-layout-paper-canvas-size-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          section-based-layout-paper-canvas-size-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paper-size))
      (common-lisp:list
       (common-lisp:cons "PaperSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paper-orientation))
      (common-lisp:list
       (common-lisp:cons "PaperOrientation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paper-margin))
      (common-lisp:list
       (common-lisp:cons "PaperMargin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          section-based-layout-paper-canvas-size-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass section-layout-configuration common-lisp:nil
                       ((free-form-layout :initarg :free-form-layout :type
                         (common-lisp:or free-form-section-layout-configuration
                                         common-lisp:null)
                         :accessor
                         %section-layout-configuration-free-form-layout
                         :initform
                         (common-lisp:error ":free-form-layout is required"))))
 (common-lisp:export
  (common-lisp:list 'section-layout-configuration
                    'make-section-layout-configuration))
 (common-lisp:defun make-section-layout-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key free-form-layout)
   (common-lisp:apply #'common-lisp:make-instance 'section-layout-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          section-layout-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          section-layout-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'free-form-layout))
      (common-lisp:list
       (common-lisp:cons "FreeFormLayout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          section-layout-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass section-page-break-configuration common-lisp:nil
                       ((after :initarg :after :type
                         (common-lisp:or section-after-page-break
                                         common-lisp:null)
                         :accessor %section-page-break-configuration-after
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'section-page-break-configuration
                    'make-section-page-break-configuration))
 (common-lisp:defun make-section-page-break-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key after)
   (common-lisp:apply #'common-lisp:make-instance
                      'section-page-break-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          section-page-break-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          section-page-break-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after))
      (common-lisp:list
       (common-lisp:cons "After"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          section-page-break-configuration))
   common-lisp:nil))
(common-lisp:deftype section-page-break-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass section-style common-lisp:nil
                       ((padding :initarg :padding :type
                         (common-lisp:or spacing common-lisp:null) :accessor
                         %section-style-padding :initform common-lisp:nil)
                        (height :initarg :height :type
                         (common-lisp:or pixel-length common-lisp:null)
                         :accessor %section-style-height :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'section-style 'make-section-style))
 (common-lisp:defun make-section-style
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key padding height)
   (common-lisp:apply #'common-lisp:make-instance 'section-style
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input section-style))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input section-style))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'padding))
      (common-lisp:list
       (common-lisp:cons "Padding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input section-style))
   common-lisp:nil))
(common-lisp:deftype select-all-value-options () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype selected-field-list ()
   '(trivial-types:proper-list field-id))
 (common-lisp:defun |make-selected-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype selected-field-options () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass selected-sheets-filter-scope-configuration
                       common-lisp:nil
                       ((sheet-visual-scoping-configurations :initarg
                         :sheet-visual-scoping-configurations :type
                         (common-lisp:or sheet-visual-scoping-configurations
                                         common-lisp:null)
                         :accessor
                         %selected-sheets-filter-scope-configuration-sheet-visual-scoping-configurations
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'selected-sheets-filter-scope-configuration
                    'make-selected-sheets-filter-scope-configuration))
 (common-lisp:defun make-selected-sheets-filter-scope-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sheet-visual-scoping-configurations)
   (common-lisp:apply #'common-lisp:make-instance
                      'selected-sheets-filter-scope-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          selected-sheets-filter-scope-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          selected-sheets-filter-scope-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sheet-visual-scoping-configurations))
      (common-lisp:list
       (common-lisp:cons "SheetVisualScopingConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          selected-sheets-filter-scope-configuration))
   common-lisp:nil))
(common-lisp:deftype selected-tooltip-type () 'common-lisp:string)
(common-lisp:deftype sensitive-double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:deftype sensitive-double-list ()
   '(trivial-types:proper-list sensitive-double))
 (common-lisp:defun |make-sensitive-double-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sensitive-double))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sensitive-double-object () 'common-lisp:double-float)
(common-lisp:deftype sensitive-long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype sensitive-long-list ()
   '(trivial-types:proper-list sensitive-long))
 (common-lisp:defun |make-sensitive-long-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sensitive-long))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sensitive-long-object () 'common-lisp:integer)
(common-lisp:deftype sensitive-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype sensitive-string-list ()
   '(trivial-types:proper-list sensitive-string))
 (common-lisp:defun |make-sensitive-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sensitive-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sensitive-string-object () 'common-lisp:string)
(common-lisp:deftype sensitive-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype sensitive-timestamp-list ()
   '(trivial-types:proper-list sensitive-timestamp))
 (common-lisp:defun |make-sensitive-timestamp-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sensitive-timestamp))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass series-item common-lisp:nil
                       ((data-field-series-item :initarg
                         :data-field-series-item :type
                         (common-lisp:or data-field-series-item
                                         common-lisp:null)
                         :accessor %series-item-data-field-series-item
                         :initform common-lisp:nil)
                        (field-series-item :initarg :field-series-item :type
                         (common-lisp:or field-series-item common-lisp:null)
                         :accessor %series-item-field-series-item :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'series-item 'make-series-item))
 (common-lisp:defun make-series-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-field-series-item field-series-item)
   (common-lisp:apply #'common-lisp:make-instance 'series-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input series-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input series-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-series-item))
      (common-lisp:list
       (common-lisp:cons "FieldSeriesItem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-field-series-item))
      (common-lisp:list
       (common-lisp:cons "DataFieldSeriesItem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input series-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype series-item-list ()
   '(trivial-types:proper-list series-item))
 (common-lisp:defun |make-series-item-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list series-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass service-now-parameters common-lisp:nil
                       ((site-base-url :initarg :site-base-url :type
                         (common-lisp:or site-base-url common-lisp:null)
                         :accessor %service-now-parameters-site-base-url
                         :initform
                         (common-lisp:error ":site-base-url is required"))))
 (common-lisp:export
  (common-lisp:list 'service-now-parameters 'make-service-now-parameters))
 (common-lisp:defun make-service-now-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key site-base-url)
   (common-lisp:apply #'common-lisp:make-instance 'service-now-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-now-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-now-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'site-base-url))
      (common-lisp:list
       (common-lisp:cons "SiteBaseUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-now-parameters))
   common-lisp:nil))
(common-lisp:deftype session-lifetime-in-minutes () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition session-lifetime-in-minutes-invalid-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       session-lifetime-in-minutes-invalid-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       session-lifetime-in-minutes-invalid-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'session-lifetime-in-minutes-invalid-exception
                    'session-lifetime-in-minutes-invalid-exception-message
                    'session-lifetime-in-minutes-invalid-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass session-tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or session-tag-value common-lisp:null)
                         :accessor %session-tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or session-tag-key common-lisp:null)
                         :accessor %session-tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'session-tag 'make-session-tag))
 (common-lisp:defun make-session-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'session-tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session-tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session-tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session-tag))
   common-lisp:nil))
(common-lisp:deftype session-tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype session-tag-list ()
   '(trivial-types:proper-list session-tag))
 (common-lisp:defun |make-session-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list session-tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype session-tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass set-parameter-value-configuration common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or
                          destination-parameter-value-configuration
                          common-lisp:null)
                         :accessor %set-parameter-value-configuration-value
                         :initform (common-lisp:error ":value is required"))
                        (destination-parameter-name :initarg
                         :destination-parameter-name :type
                         (common-lisp:or parameter-name common-lisp:null)
                         :accessor
                         %set-parameter-value-configuration-destination-parameter-name
                         :initform
                         (common-lisp:error
                          ":destination-parameter-name is required"))))
 (common-lisp:export
  (common-lisp:list 'set-parameter-value-configuration
                    'make-set-parameter-value-configuration))
 (common-lisp:defun make-set-parameter-value-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value destination-parameter-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-parameter-value-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-parameter-value-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-parameter-value-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-parameter-name))
      (common-lisp:list
       (common-lisp:cons "DestinationParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-parameter-value-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype set-parameter-value-configuration-list ()
   '(trivial-types:proper-list set-parameter-value-configuration))
 (common-lisp:defun |make-set-parameter-value-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            set-parameter-value-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass shape-conditional-format common-lisp:nil
                       ((background-color :initarg :background-color :type
                         (common-lisp:or conditional-formatting-color
                                         common-lisp:null)
                         :accessor %shape-conditional-format-background-color
                         :initform
                         (common-lisp:error ":background-color is required"))))
 (common-lisp:export
  (common-lisp:list 'shape-conditional-format 'make-shape-conditional-format))
 (common-lisp:defun make-shape-conditional-format
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key background-color)
   (common-lisp:apply #'common-lisp:make-instance 'shape-conditional-format
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          shape-conditional-format))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          shape-conditional-format))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background-color))
      (common-lisp:list
       (common-lisp:cons "BackgroundColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          shape-conditional-format))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sheet common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or sheet-name common-lisp:null) :accessor
                         %sheet-name :initform common-lisp:nil)
                        (sheet-id :initarg :sheet-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %sheet-sheet-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'sheet 'make-sheet))
 (common-lisp:defun make-sheet
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name sheet-id)
   (common-lisp:apply #'common-lisp:make-instance 'sheet
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sheet))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sheet))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sheet-id))
      (common-lisp:list
       (common-lisp:cons "SheetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sheet))
   common-lisp:nil))
(common-lisp:deftype sheet-content-type () 'common-lisp:string)
(common-lisp:deftype sheet-control-date-time-picker-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sheet-control-layout common-lisp:nil
                       ((configuration :initarg :configuration :type
                         (common-lisp:or sheet-control-layout-configuration
                                         common-lisp:null)
                         :accessor %sheet-control-layout-configuration
                         :initform
                         (common-lisp:error ":configuration is required"))))
 (common-lisp:export
  (common-lisp:list 'sheet-control-layout 'make-sheet-control-layout))
 (common-lisp:defun make-sheet-control-layout
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configuration)
   (common-lisp:apply #'common-lisp:make-instance 'sheet-control-layout
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sheet-control-layout))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sheet-control-layout))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sheet-control-layout))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sheet-control-layout-configuration common-lisp:nil
                       ((grid-layout :initarg :grid-layout :type
                         (common-lisp:or grid-layout-configuration
                                         common-lisp:null)
                         :accessor
                         %sheet-control-layout-configuration-grid-layout
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sheet-control-layout-configuration
                    'make-sheet-control-layout-configuration))
 (common-lisp:defun make-sheet-control-layout-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key grid-layout)
   (common-lisp:apply #'common-lisp:make-instance
                      'sheet-control-layout-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sheet-control-layout-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sheet-control-layout-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grid-layout))
      (common-lisp:list
       (common-lisp:cons "GridLayout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sheet-control-layout-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sheet-control-layout-list ()
   '(trivial-types:proper-list sheet-control-layout))
 (common-lisp:defun |make-sheet-control-layout-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sheet-control-layout))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sheet-control-list-type () 'common-lisp:string)
(common-lisp:deftype sheet-control-slider-type () 'common-lisp:string)
(common-lisp:deftype sheet-control-title () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sheet-controls-option common-lisp:nil
                       ((visibility-state :initarg :visibility-state :type
                         (common-lisp:or dashboard-uistate common-lisp:null)
                         :accessor %sheet-controls-option-visibility-state
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sheet-controls-option 'make-sheet-controls-option))
 (common-lisp:defun make-sheet-controls-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visibility-state)
   (common-lisp:apply #'common-lisp:make-instance 'sheet-controls-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sheet-controls-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sheet-controls-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility-state))
      (common-lisp:list
       (common-lisp:cons "VisibilityState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sheet-controls-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sheet-definition common-lisp:nil
                       ((content-type :initarg :content-type :type
                         (common-lisp:or sheet-content-type common-lisp:null)
                         :accessor %sheet-definition-content-type :initform
                         common-lisp:nil)
                        (sheet-control-layouts :initarg :sheet-control-layouts
                         :type
                         (common-lisp:or sheet-control-layout-list
                                         common-lisp:null)
                         :accessor %sheet-definition-sheet-control-layouts
                         :initform common-lisp:nil)
                        (layouts :initarg :layouts :type
                         (common-lisp:or layout-list common-lisp:null)
                         :accessor %sheet-definition-layouts :initform
                         common-lisp:nil)
                        (text-boxes :initarg :text-boxes :type
                         (common-lisp:or sheet-text-box-list common-lisp:null)
                         :accessor %sheet-definition-text-boxes :initform
                         common-lisp:nil)
                        (visuals :initarg :visuals :type
                         (common-lisp:or visual-list common-lisp:null)
                         :accessor %sheet-definition-visuals :initform
                         common-lisp:nil)
                        (filter-controls :initarg :filter-controls :type
                         (common-lisp:or filter-control-list common-lisp:null)
                         :accessor %sheet-definition-filter-controls :initform
                         common-lisp:nil)
                        (parameter-controls :initarg :parameter-controls :type
                         (common-lisp:or parameter-control-list
                                         common-lisp:null)
                         :accessor %sheet-definition-parameter-controls
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or sheet-name common-lisp:null) :accessor
                         %sheet-definition-name :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or sheet-description common-lisp:null)
                         :accessor %sheet-definition-description :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or sheet-title common-lisp:null)
                         :accessor %sheet-definition-title :initform
                         common-lisp:nil)
                        (sheet-id :initarg :sheet-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %sheet-definition-sheet-id :initform
                         (common-lisp:error ":sheet-id is required"))))
 (common-lisp:export
  (common-lisp:list 'sheet-definition 'make-sheet-definition))
 (common-lisp:defun make-sheet-definition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key content-type sheet-control-layouts
                     layouts text-boxes visuals filter-controls
                     parameter-controls name description title sheet-id)
   (common-lisp:apply #'common-lisp:make-instance 'sheet-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sheet-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sheet-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sheet-id))
      (common-lisp:list
       (common-lisp:cons "SheetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-controls))
      (common-lisp:list
       (common-lisp:cons "ParameterControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-controls))
      (common-lisp:list
       (common-lisp:cons "FilterControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visuals))
      (common-lisp:list
       (common-lisp:cons "Visuals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-boxes))
      (common-lisp:list
       (common-lisp:cons "TextBoxes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layouts))
      (common-lisp:list
       (common-lisp:cons "Layouts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sheet-control-layouts))
      (common-lisp:list
       (common-lisp:cons "SheetControlLayouts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sheet-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sheet-definition-list ()
   '(trivial-types:proper-list sheet-definition))
 (common-lisp:defun |make-sheet-definition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sheet-definition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sheet-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sheet-element-configuration-overrides common-lisp:nil
                       ((visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %sheet-element-configuration-overrides-visibility
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sheet-element-configuration-overrides
                    'make-sheet-element-configuration-overrides))
 (common-lisp:defun make-sheet-element-configuration-overrides
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visibility)
   (common-lisp:apply #'common-lisp:make-instance
                      'sheet-element-configuration-overrides
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sheet-element-configuration-overrides))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sheet-element-configuration-overrides))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sheet-element-configuration-overrides))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sheet-element-rendering-rule common-lisp:nil
                       ((configuration-overrides :initarg
                         :configuration-overrides :type
                         (common-lisp:or sheet-element-configuration-overrides
                                         common-lisp:null)
                         :accessor
                         %sheet-element-rendering-rule-configuration-overrides
                         :initform
                         (common-lisp:error
                          ":configuration-overrides is required"))
                        (expression :initarg :expression :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         %sheet-element-rendering-rule-expression :initform
                         (common-lisp:error ":expression is required"))))
 (common-lisp:export
  (common-lisp:list 'sheet-element-rendering-rule
                    'make-sheet-element-rendering-rule))
 (common-lisp:defun make-sheet-element-rendering-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configuration-overrides expression)
   (common-lisp:apply #'common-lisp:make-instance 'sheet-element-rendering-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sheet-element-rendering-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sheet-element-rendering-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-overrides))
      (common-lisp:list
       (common-lisp:cons "ConfigurationOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sheet-element-rendering-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sheet-element-rendering-rule-list ()
   '(trivial-types:proper-list sheet-element-rendering-rule))
 (common-lisp:defun |make-sheet-element-rendering-rule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            sheet-element-rendering-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sheet-layout-element-maximization-option common-lisp:nil
                       ((availability-status :initarg :availability-status
                         :type
                         (common-lisp:or dashboard-behavior common-lisp:null)
                         :accessor
                         %sheet-layout-element-maximization-option-availability-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sheet-layout-element-maximization-option
                    'make-sheet-layout-element-maximization-option))
 (common-lisp:defun make-sheet-layout-element-maximization-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key availability-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'sheet-layout-element-maximization-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sheet-layout-element-maximization-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sheet-layout-element-maximization-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-status))
      (common-lisp:list
       (common-lisp:cons "AvailabilityStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sheet-layout-element-maximization-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sheet-list () '(trivial-types:proper-list sheet))
 (common-lisp:defun |make-sheet-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sheet))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sheet-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sheet-style common-lisp:nil
                       ((tile-layout :initarg :tile-layout :type
                         (common-lisp:or tile-layout-style common-lisp:null)
                         :accessor %sheet-style-tile-layout :initform
                         common-lisp:nil)
                        (tile :initarg :tile :type
                         (common-lisp:or tile-style common-lisp:null) :accessor
                         %sheet-style-tile :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'sheet-style 'make-sheet-style))
 (common-lisp:defun make-sheet-style
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tile-layout tile)
   (common-lisp:apply #'common-lisp:make-instance 'sheet-style
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sheet-style))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sheet-style))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tile))
      (common-lisp:list
       (common-lisp:cons "Tile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tile-layout))
      (common-lisp:list
       (common-lisp:cons "TileLayout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sheet-style))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sheet-text-box common-lisp:nil
                       ((content :initarg :content :type
                         (common-lisp:or sheet-text-box-content
                                         common-lisp:null)
                         :accessor %sheet-text-box-content :initform
                         common-lisp:nil)
                        (sheet-text-box-id :initarg :sheet-text-box-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %sheet-text-box-sheet-text-box-id :initform
                         (common-lisp:error
                          ":sheet-text-box-id is required"))))
 (common-lisp:export (common-lisp:list 'sheet-text-box 'make-sheet-text-box))
 (common-lisp:defun make-sheet-text-box
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key content sheet-text-box-id)
   (common-lisp:apply #'common-lisp:make-instance 'sheet-text-box
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sheet-text-box))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sheet-text-box))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sheet-text-box-id))
      (common-lisp:list
       (common-lisp:cons "SheetTextBoxId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sheet-text-box))
   common-lisp:nil))
(common-lisp:deftype sheet-text-box-content () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype sheet-text-box-list ()
   '(trivial-types:proper-list sheet-text-box))
 (common-lisp:defun |make-sheet-text-box-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sheet-text-box))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sheet-title () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sheet-visual-scoping-configuration common-lisp:nil
                       ((visual-ids :initarg :visual-ids :type
                         (common-lisp:or filtered-visuals-list
                                         common-lisp:null)
                         :accessor
                         %sheet-visual-scoping-configuration-visual-ids
                         :initform common-lisp:nil)
                        (scope :initarg :scope :type
                         (common-lisp:or filter-visual-scope common-lisp:null)
                         :accessor %sheet-visual-scoping-configuration-scope
                         :initform (common-lisp:error ":scope is required"))
                        (sheet-id :initarg :sheet-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %sheet-visual-scoping-configuration-sheet-id
                         :initform
                         (common-lisp:error ":sheet-id is required"))))
 (common-lisp:export
  (common-lisp:list 'sheet-visual-scoping-configuration
                    'make-sheet-visual-scoping-configuration))
 (common-lisp:defun make-sheet-visual-scoping-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visual-ids scope sheet-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'sheet-visual-scoping-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sheet-visual-scoping-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sheet-visual-scoping-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sheet-id))
      (common-lisp:list
       (common-lisp:cons "SheetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-ids))
      (common-lisp:list
       (common-lisp:cons "VisualIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sheet-visual-scoping-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sheet-visual-scoping-configurations ()
   '(trivial-types:proper-list sheet-visual-scoping-configuration))
 (common-lisp:defun |make-sheet-visual-scoping-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            sheet-visual-scoping-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass short-format-text common-lisp:nil
                       ((rich-text :initarg :rich-text :type
                         (common-lisp:or short-rich-text common-lisp:null)
                         :accessor %short-format-text-rich-text :initform
                         common-lisp:nil)
                        (plain-text :initarg :plain-text :type
                         (common-lisp:or short-plain-text common-lisp:null)
                         :accessor %short-format-text-plain-text :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'short-format-text 'make-short-format-text))
 (common-lisp:defun make-short-format-text
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rich-text plain-text)
   (common-lisp:apply #'common-lisp:make-instance 'short-format-text
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input short-format-text))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input short-format-text))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plain-text))
      (common-lisp:list
       (common-lisp:cons "PlainText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rich-text))
      (common-lisp:list
       (common-lisp:cons "RichText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input short-format-text))
   common-lisp:nil))
(common-lisp:deftype short-plain-text () 'common-lisp:string)
(common-lisp:deftype short-restrictive-resource-id () 'common-lisp:string)
(common-lisp:deftype short-rich-text () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass signup-response common-lisp:nil
                       ((directory-type :initarg :|directoryType| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %signup-response-directory-type :initform
                         common-lisp:nil)
                        (account-name :initarg :|accountName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %signup-response-account-name :initform
                         common-lisp:nil)
                        (user-login-name :initarg :|userLoginName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %signup-response-user-login-name :initform
                         common-lisp:nil)
                        (iamuser :initarg :iamuser :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %signup-response-iamuser :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'signup-response 'make-signup-response))
 (common-lisp:defun make-signup-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key directory-type account-name
                     user-login-name iamuser)
   (common-lisp:apply #'common-lisp:make-instance 'signup-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input signup-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input signup-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iamuser))
      (common-lisp:list
       (common-lisp:cons "IAMUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-login-name))
      (common-lisp:list
       (common-lisp:cons "userLoginName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-name))
      (common-lisp:list
       (common-lisp:cons "accountName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-type))
      (common-lisp:list
       (common-lisp:cons "directoryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input signup-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass simple-cluster-marker common-lisp:nil
                       ((color :initarg :color :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %simple-cluster-marker-color :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'simple-cluster-marker 'make-simple-cluster-marker))
 (common-lisp:defun make-simple-cluster-marker
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key color)
   (common-lisp:apply #'common-lisp:make-instance 'simple-cluster-marker
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          simple-cluster-marker))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          simple-cluster-marker))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color))
      (common-lisp:list
       (common-lisp:cons "Color"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          simple-cluster-marker))
   common-lisp:nil))
(common-lisp:deftype simple-numerical-aggregation-function ()
  'common-lisp:string)
(common-lisp:deftype site-base-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass slider-control-display-options common-lisp:nil
                       ((title-options :initarg :title-options :type
                         (common-lisp:or label-options common-lisp:null)
                         :accessor
                         %slider-control-display-options-title-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'slider-control-display-options
                    'make-slider-control-display-options))
 (common-lisp:defun make-slider-control-display-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key title-options)
   (common-lisp:apply #'common-lisp:make-instance
                      'slider-control-display-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          slider-control-display-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          slider-control-display-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title-options))
      (common-lisp:list
       (common-lisp:cons "TitleOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          slider-control-display-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype small-multiples-dimension-field-list ()
   '(trivial-types:proper-list dimension-field))
 (common-lisp:defun |make-small-multiples-dimension-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass small-multiples-options common-lisp:nil
                       ((panel-configuration :initarg :panel-configuration
                         :type
                         (common-lisp:or panel-configuration common-lisp:null)
                         :accessor %small-multiples-options-panel-configuration
                         :initform common-lisp:nil)
                        (max-visible-columns :initarg :max-visible-columns
                         :type
                         (common-lisp:or visible-panel-columns
                                         common-lisp:null)
                         :accessor %small-multiples-options-max-visible-columns
                         :initform common-lisp:nil)
                        (max-visible-rows :initarg :max-visible-rows :type
                         (common-lisp:or visible-panel-rows common-lisp:null)
                         :accessor %small-multiples-options-max-visible-rows
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'small-multiples-options 'make-small-multiples-options))
 (common-lisp:defun make-small-multiples-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key panel-configuration max-visible-columns
                     max-visible-rows)
   (common-lisp:apply #'common-lisp:make-instance 'small-multiples-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          small-multiples-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          small-multiples-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-visible-rows))
      (common-lisp:list
       (common-lisp:cons "MaxVisibleRows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-visible-columns))
      (common-lisp:list
       (common-lisp:cons "MaxVisibleColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'panel-configuration))
      (common-lisp:list
       (common-lisp:cons "PanelConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          small-multiples-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass snowflake-parameters common-lisp:nil
                       ((warehouse :initarg :warehouse :type
                         (common-lisp:or warehouse common-lisp:null) :accessor
                         %snowflake-parameters-warehouse :initform
                         (common-lisp:error ":warehouse is required"))
                        (database :initarg :database :type
                         (common-lisp:or database common-lisp:null) :accessor
                         %snowflake-parameters-database :initform
                         (common-lisp:error ":database is required"))
                        (host :initarg :host :type
                         (common-lisp:or host common-lisp:null) :accessor
                         %snowflake-parameters-host :initform
                         (common-lisp:error ":host is required"))))
 (common-lisp:export
  (common-lisp:list 'snowflake-parameters 'make-snowflake-parameters))
 (common-lisp:defun make-snowflake-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key warehouse database host)
   (common-lisp:apply #'common-lisp:make-instance 'snowflake-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snowflake-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snowflake-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warehouse))
      (common-lisp:list
       (common-lisp:cons "Warehouse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snowflake-parameters))
   common-lisp:nil))
(common-lisp:deftype sort-direction () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass spacing common-lisp:nil
                       ((right :initarg :right :type
                         (common-lisp:or length common-lisp:null) :accessor
                         %spacing-right :initform common-lisp:nil)
                        (left :initarg :left :type
                         (common-lisp:or length common-lisp:null) :accessor
                         %spacing-left :initform common-lisp:nil)
                        (bottom :initarg :bottom :type
                         (common-lisp:or length common-lisp:null) :accessor
                         %spacing-bottom :initform common-lisp:nil)
                        (top :initarg :top :type
                         (common-lisp:or length common-lisp:null) :accessor
                         %spacing-top :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'spacing 'make-spacing))
 (common-lisp:defun make-spacing
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key right left bottom top)
   (common-lisp:apply #'common-lisp:make-instance 'spacing
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input spacing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input spacing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'top))
      (common-lisp:list
       (common-lisp:cons "Top"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bottom))
      (common-lisp:list
       (common-lisp:cons "Bottom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'left))
      (common-lisp:list
       (common-lisp:cons "Left"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'right))
      (common-lisp:list
       (common-lisp:cons "Right"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input spacing))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass spark-parameters common-lisp:nil
                       ((port :initarg :port :type
                         (common-lisp:or port common-lisp:null) :accessor
                         %spark-parameters-port :initform
                         (common-lisp:error ":port is required"))
                        (host :initarg :host :type
                         (common-lisp:or host common-lisp:null) :accessor
                         %spark-parameters-host :initform
                         (common-lisp:error ":host is required"))))
 (common-lisp:export
  (common-lisp:list 'spark-parameters 'make-spark-parameters))
 (common-lisp:defun make-spark-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key port host)
   (common-lisp:apply #'common-lisp:make-instance 'spark-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input spark-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input spark-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input spark-parameters))
   common-lisp:nil))
(common-lisp:deftype sql-endpoint-path () 'common-lisp:string)
(common-lisp:deftype sql-query () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sql-server-parameters common-lisp:nil
                       ((database :initarg :database :type
                         (common-lisp:or database common-lisp:null) :accessor
                         %sql-server-parameters-database :initform
                         (common-lisp:error ":database is required"))
                        (port :initarg :port :type
                         (common-lisp:or port common-lisp:null) :accessor
                         %sql-server-parameters-port :initform
                         (common-lisp:error ":port is required"))
                        (host :initarg :host :type
                         (common-lisp:or host common-lisp:null) :accessor
                         %sql-server-parameters-host :initform
                         (common-lisp:error ":host is required"))))
 (common-lisp:export
  (common-lisp:list 'sql-server-parameters 'make-sql-server-parameters))
 (common-lisp:defun make-sql-server-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key database port host)
   (common-lisp:apply #'common-lisp:make-instance 'sql-server-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sql-server-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sql-server-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sql-server-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ssl-properties common-lisp:nil
                       ((disable-ssl :initarg :disable-ssl :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %ssl-properties-disable-ssl :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ssl-properties 'make-ssl-properties))
 (common-lisp:defun make-ssl-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key disable-ssl)
   (common-lisp:apply #'common-lisp:make-instance 'ssl-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ssl-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ssl-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-ssl))
      (common-lisp:list
       (common-lisp:cons "DisableSsl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ssl-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass state-persistence-configurations common-lisp:nil
                       ((enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %state-persistence-configurations-enabled :initform
                         (common-lisp:error ":enabled is required"))))
 (common-lisp:export
  (common-lisp:list 'state-persistence-configurations
                    'make-state-persistence-configurations))
 (common-lisp:defun make-state-persistence-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'state-persistence-configurations
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          state-persistence-configurations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          state-persistence-configurations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          state-persistence-configurations))
   common-lisp:nil))
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:deftype status-code () 'common-lisp:integer)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-default-value-list ()
   '(trivial-types:proper-list sensitive-string-object))
 (common-lisp:defun |make-string-default-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sensitive-string-object))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass string-default-values common-lisp:nil
                       ((static-values :initarg :static-values :type
                         (common-lisp:or string-default-value-list
                                         common-lisp:null)
                         :accessor %string-default-values-static-values
                         :initform common-lisp:nil)
                        (dynamic-value :initarg :dynamic-value :type
                         (common-lisp:or dynamic-default-value
                                         common-lisp:null)
                         :accessor %string-default-values-dynamic-value
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'string-default-values 'make-string-default-values))
 (common-lisp:defun make-string-default-values
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key static-values dynamic-value)
   (common-lisp:apply #'common-lisp:make-instance 'string-default-values
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          string-default-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          string-default-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamic-value))
      (common-lisp:list
       (common-lisp:cons "DynamicValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-values))
      (common-lisp:list
       (common-lisp:cons "StaticValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          string-default-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass string-format-configuration common-lisp:nil
                       ((numeric-format-configuration :initarg
                         :numeric-format-configuration :type
                         (common-lisp:or numeric-format-configuration
                                         common-lisp:null)
                         :accessor
                         %string-format-configuration-numeric-format-configuration
                         :initform common-lisp:nil)
                        (null-value-format-configuration :initarg
                         :null-value-format-configuration :type
                         (common-lisp:or null-value-format-configuration
                                         common-lisp:null)
                         :accessor
                         %string-format-configuration-null-value-format-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'string-format-configuration
                    'make-string-format-configuration))
 (common-lisp:defun make-string-format-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key numeric-format-configuration
                     null-value-format-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'string-format-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          string-format-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          string-format-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'null-value-format-configuration))
      (common-lisp:list
       (common-lisp:cons "NullValueFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'numeric-format-configuration))
      (common-lisp:list
       (common-lisp:cons "NumericFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          string-format-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass string-parameter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or sensitive-string-list
                                         common-lisp:null)
                         :accessor %string-parameter-values :initform
                         (common-lisp:error ":values is required"))
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %string-parameter-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'string-parameter 'make-string-parameter))
 (common-lisp:defun make-string-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values name)
   (common-lisp:apply #'common-lisp:make-instance 'string-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input string-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input string-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input string-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass string-parameter-declaration common-lisp:nil
                       ((value-when-unset :initarg :value-when-unset :type
                         (common-lisp:or string-value-when-unset-configuration
                                         common-lisp:null)
                         :accessor
                         %string-parameter-declaration-value-when-unset
                         :initform common-lisp:nil)
                        (default-values :initarg :default-values :type
                         (common-lisp:or string-default-values
                                         common-lisp:null)
                         :accessor %string-parameter-declaration-default-values
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or parameter-name common-lisp:null)
                         :accessor %string-parameter-declaration-name :initform
                         (common-lisp:error ":name is required"))
                        (parameter-value-type :initarg :parameter-value-type
                         :type
                         (common-lisp:or parameter-value-type common-lisp:null)
                         :accessor
                         %string-parameter-declaration-parameter-value-type
                         :initform
                         (common-lisp:error
                          ":parameter-value-type is required"))))
 (common-lisp:export
  (common-lisp:list 'string-parameter-declaration
                    'make-string-parameter-declaration))
 (common-lisp:defun make-string-parameter-declaration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value-when-unset default-values name
                     parameter-value-type)
   (common-lisp:apply #'common-lisp:make-instance 'string-parameter-declaration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          string-parameter-declaration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          string-parameter-declaration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-value-type))
      (common-lisp:list
       (common-lisp:cons "ParameterValueType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-values))
      (common-lisp:list
       (common-lisp:cons "DefaultValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-when-unset))
      (common-lisp:list
       (common-lisp:cons "ValueWhenUnset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          string-parameter-declaration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype string-parameter-list ()
   '(trivial-types:proper-list string-parameter))
 (common-lisp:defun |make-string-parameter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass string-value-when-unset-configuration common-lisp:nil
                       ((custom-value :initarg :custom-value :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor
                         %string-value-when-unset-configuration-custom-value
                         :initform common-lisp:nil)
                        (value-when-unset-option :initarg
                         :value-when-unset-option :type
                         (common-lisp:or value-when-unset-option
                                         common-lisp:null)
                         :accessor
                         %string-value-when-unset-configuration-value-when-unset-option
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'string-value-when-unset-configuration
                    'make-string-value-when-unset-configuration))
 (common-lisp:defun make-string-value-when-unset-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-value value-when-unset-option)
   (common-lisp:apply #'common-lisp:make-instance
                      'string-value-when-unset-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          string-value-when-unset-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          string-value-when-unset-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-when-unset-option))
      (common-lisp:list
       (common-lisp:cons "ValueWhenUnsetOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-value))
      (common-lisp:list
       (common-lisp:cons "CustomValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          string-value-when-unset-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass subtotal-options common-lisp:nil
                       ((metric-header-cell-style :initarg
                         :metric-header-cell-style :type
                         (common-lisp:or table-cell-style common-lisp:null)
                         :accessor %subtotal-options-metric-header-cell-style
                         :initform common-lisp:nil)
                        (value-cell-style :initarg :value-cell-style :type
                         (common-lisp:or table-cell-style common-lisp:null)
                         :accessor %subtotal-options-value-cell-style :initform
                         common-lisp:nil)
                        (total-cell-style :initarg :total-cell-style :type
                         (common-lisp:or table-cell-style common-lisp:null)
                         :accessor %subtotal-options-total-cell-style :initform
                         common-lisp:nil)
                        (field-level-options :initarg :field-level-options
                         :type
                         (common-lisp:or
                          pivot-table-field-subtotal-options-list
                          common-lisp:null)
                         :accessor %subtotal-options-field-level-options
                         :initform common-lisp:nil)
                        (field-level :initarg :field-level :type
                         (common-lisp:or pivot-table-subtotal-level
                                         common-lisp:null)
                         :accessor %subtotal-options-field-level :initform
                         common-lisp:nil)
                        (custom-label :initarg :custom-label :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %subtotal-options-custom-label :initform
                         common-lisp:nil)
                        (totals-visibility :initarg :totals-visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %subtotal-options-totals-visibility :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'subtotal-options 'make-subtotal-options))
 (common-lisp:defun make-subtotal-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metric-header-cell-style value-cell-style
                     total-cell-style field-level-options field-level
                     custom-label totals-visibility)
   (common-lisp:apply #'common-lisp:make-instance 'subtotal-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subtotal-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subtotal-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'totals-visibility))
      (common-lisp:list
       (common-lisp:cons "TotalsVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-label))
      (common-lisp:list
       (common-lisp:cons "CustomLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-level))
      (common-lisp:list
       (common-lisp:cons "FieldLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-level-options))
      (common-lisp:list
       (common-lisp:cons "FieldLevelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-cell-style))
      (common-lisp:list
       (common-lisp:cons "TotalCellStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-cell-style))
      (common-lisp:list
       (common-lisp:cons "ValueCellStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-header-cell-style))
      (common-lisp:list
       (common-lisp:cons "MetricHeaderCellStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subtotal-options))
   common-lisp:nil))
(common-lisp:deftype suffix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass table-aggregated-field-wells common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or measure-field-list common-lisp:null)
                         :accessor %table-aggregated-field-wells-values
                         :initform common-lisp:nil)
                        (group-by :initarg :group-by :type
                         (common-lisp:or dimension-field-list common-lisp:null)
                         :accessor %table-aggregated-field-wells-group-by
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'table-aggregated-field-wells
                    'make-table-aggregated-field-wells))
 (common-lisp:defun make-table-aggregated-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values group-by)
   (common-lisp:apply #'common-lisp:make-instance 'table-aggregated-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "GroupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass table-border-options common-lisp:nil
                       ((style :initarg :style :type
                         (common-lisp:or table-border-style common-lisp:null)
                         :accessor %table-border-options-style :initform
                         common-lisp:nil)
                        (thickness :initarg :thickness :type
                         (common-lisp:or table-border-thickness
                                         common-lisp:null)
                         :accessor %table-border-options-thickness :initform
                         common-lisp:nil)
                        (color :initarg :color :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %table-border-options-color :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'table-border-options 'make-table-border-options))
 (common-lisp:defun make-table-border-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key style thickness color)
   (common-lisp:apply #'common-lisp:make-instance 'table-border-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-border-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-border-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color))
      (common-lisp:list
       (common-lisp:cons "Color"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thickness))
      (common-lisp:list
       (common-lisp:cons "Thickness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style))
      (common-lisp:list
       (common-lisp:cons "Style"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-border-options))
   common-lisp:nil))
(common-lisp:deftype table-border-style () 'common-lisp:string)
(common-lisp:deftype table-border-thickness () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass table-cell-conditional-formatting common-lisp:nil
                       ((text-format :initarg :text-format :type
                         (common-lisp:or text-conditional-format
                                         common-lisp:null)
                         :accessor
                         %table-cell-conditional-formatting-text-format
                         :initform common-lisp:nil)
                        (field-id :initarg :field-id :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         %table-cell-conditional-formatting-field-id :initform
                         (common-lisp:error ":field-id is required"))))
 (common-lisp:export
  (common-lisp:list 'table-cell-conditional-formatting
                    'make-table-cell-conditional-formatting))
 (common-lisp:defun make-table-cell-conditional-formatting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key text-format field-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'table-cell-conditional-formatting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-cell-conditional-formatting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-cell-conditional-formatting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-format))
      (common-lisp:list
       (common-lisp:cons "TextFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-cell-conditional-formatting))
   common-lisp:nil))
(common-lisp:deftype table-cell-image-scaling-configuration ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass table-cell-image-sizing-configuration common-lisp:nil
                       ((table-cell-image-scaling-configuration :initarg
                         :table-cell-image-scaling-configuration :type
                         (common-lisp:or table-cell-image-scaling-configuration
                                         common-lisp:null)
                         :accessor
                         %table-cell-image-sizing-configuration-table-cell-image-scaling-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'table-cell-image-sizing-configuration
                    'make-table-cell-image-sizing-configuration))
 (common-lisp:defun make-table-cell-image-sizing-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key table-cell-image-scaling-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'table-cell-image-sizing-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-cell-image-sizing-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-cell-image-sizing-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'table-cell-image-scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "TableCellImageScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-cell-image-sizing-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass table-cell-style common-lisp:nil
                       ((border :initarg :border :type
                         (common-lisp:or global-table-border-options
                                         common-lisp:null)
                         :accessor %table-cell-style-border :initform
                         common-lisp:nil)
                        (height :initarg :height :type
                         (common-lisp:or table-field-height common-lisp:null)
                         :accessor %table-cell-style-height :initform
                         common-lisp:nil)
                        (background-color :initarg :background-color :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %table-cell-style-background-color :initform
                         common-lisp:nil)
                        (vertical-text-alignment :initarg
                         :vertical-text-alignment :type
                         (common-lisp:or vertical-text-alignment
                                         common-lisp:null)
                         :accessor %table-cell-style-vertical-text-alignment
                         :initform common-lisp:nil)
                        (horizontal-text-alignment :initarg
                         :horizontal-text-alignment :type
                         (common-lisp:or horizontal-text-alignment
                                         common-lisp:null)
                         :accessor %table-cell-style-horizontal-text-alignment
                         :initform common-lisp:nil)
                        (text-wrap :initarg :text-wrap :type
                         (common-lisp:or text-wrap common-lisp:null) :accessor
                         %table-cell-style-text-wrap :initform common-lisp:nil)
                        (font-configuration :initarg :font-configuration :type
                         (common-lisp:or font-configuration common-lisp:null)
                         :accessor %table-cell-style-font-configuration
                         :initform common-lisp:nil)
                        (visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %table-cell-style-visibility :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'table-cell-style 'make-table-cell-style))
 (common-lisp:defun make-table-cell-style
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key border height background-color
                     vertical-text-alignment horizontal-text-alignment
                     text-wrap font-configuration visibility)
   (common-lisp:apply #'common-lisp:make-instance 'table-cell-style
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-cell-style))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-cell-style))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-configuration))
      (common-lisp:list
       (common-lisp:cons "FontConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-wrap))
      (common-lisp:list
       (common-lisp:cons "TextWrap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'horizontal-text-alignment))
      (common-lisp:list
       (common-lisp:cons "HorizontalTextAlignment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vertical-text-alignment))
      (common-lisp:list
       (common-lisp:cons "VerticalTextAlignment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background-color))
      (common-lisp:list
       (common-lisp:cons "BackgroundColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'border))
      (common-lisp:list
       (common-lisp:cons "Border"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-cell-style))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass table-conditional-formatting common-lisp:nil
                       ((conditional-formatting-options :initarg
                         :conditional-formatting-options :type
                         (common-lisp:or
                          table-conditional-formatting-option-list
                          common-lisp:null)
                         :accessor
                         %table-conditional-formatting-conditional-formatting-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'table-conditional-formatting
                    'make-table-conditional-formatting))
 (common-lisp:defun make-table-conditional-formatting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key conditional-formatting-options)
   (common-lisp:apply #'common-lisp:make-instance 'table-conditional-formatting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-conditional-formatting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-conditional-formatting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-formatting-options))
      (common-lisp:list
       (common-lisp:cons "ConditionalFormattingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-conditional-formatting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass table-conditional-formatting-option common-lisp:nil
                       ((row :initarg :row :type
                         (common-lisp:or table-row-conditional-formatting
                                         common-lisp:null)
                         :accessor %table-conditional-formatting-option-row
                         :initform common-lisp:nil)
                        (cell :initarg :cell :type
                         (common-lisp:or table-cell-conditional-formatting
                                         common-lisp:null)
                         :accessor %table-conditional-formatting-option-cell
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'table-conditional-formatting-option
                    'make-table-conditional-formatting-option))
 (common-lisp:defun make-table-conditional-formatting-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key row cell)
   (common-lisp:apply #'common-lisp:make-instance
                      'table-conditional-formatting-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-conditional-formatting-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-conditional-formatting-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cell))
      (common-lisp:list
       (common-lisp:cons "Cell"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row))
      (common-lisp:list
       (common-lisp:cons "Row"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-conditional-formatting-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype table-conditional-formatting-option-list ()
   '(trivial-types:proper-list table-conditional-formatting-option))
 (common-lisp:defun |make-table-conditional-formatting-option-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            table-conditional-formatting-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass table-configuration common-lisp:nil
                       ((table-inline-visualizations :initarg
                         :table-inline-visualizations :type
                         (common-lisp:or table-inline-visualization-list
                                         common-lisp:null)
                         :accessor
                         %table-configuration-table-inline-visualizations
                         :initform common-lisp:nil)
                        (paginated-report-options :initarg
                         :paginated-report-options :type
                         (common-lisp:or table-paginated-report-options
                                         common-lisp:null)
                         :accessor
                         %table-configuration-paginated-report-options
                         :initform common-lisp:nil)
                        (field-options :initarg :field-options :type
                         (common-lisp:or table-field-options common-lisp:null)
                         :accessor %table-configuration-field-options :initform
                         common-lisp:nil)
                        (total-options :initarg :total-options :type
                         (common-lisp:or total-options common-lisp:null)
                         :accessor %table-configuration-total-options :initform
                         common-lisp:nil)
                        (table-options :initarg :table-options :type
                         (common-lisp:or table-options common-lisp:null)
                         :accessor %table-configuration-table-options :initform
                         common-lisp:nil)
                        (sort-configuration :initarg :sort-configuration :type
                         (common-lisp:or table-sort-configuration
                                         common-lisp:null)
                         :accessor %table-configuration-sort-configuration
                         :initform common-lisp:nil)
                        (field-wells :initarg :field-wells :type
                         (common-lisp:or table-field-wells common-lisp:null)
                         :accessor %table-configuration-field-wells :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'table-configuration 'make-table-configuration))
 (common-lisp:defun make-table-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key table-inline-visualizations
                     paginated-report-options field-options total-options
                     table-options sort-configuration field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'table-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-options))
      (common-lisp:list
       (common-lisp:cons "TableOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-options))
      (common-lisp:list
       (common-lisp:cons "TotalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-options))
      (common-lisp:list
       (common-lisp:cons "FieldOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'paginated-report-options))
      (common-lisp:list
       (common-lisp:cons "PaginatedReportOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'table-inline-visualizations))
      (common-lisp:list
       (common-lisp:cons "TableInlineVisualizations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass table-field-custom-icon-content common-lisp:nil
                       ((icon :initarg :icon :type
                         (common-lisp:or table-field-icon-set-type
                                         common-lisp:null)
                         :accessor %table-field-custom-icon-content-icon
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'table-field-custom-icon-content
                    'make-table-field-custom-icon-content))
 (common-lisp:defun make-table-field-custom-icon-content
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key icon)
   (common-lisp:apply #'common-lisp:make-instance
                      'table-field-custom-icon-content
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-field-custom-icon-content))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-field-custom-icon-content))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icon))
      (common-lisp:list
       (common-lisp:cons "Icon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-field-custom-icon-content))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass table-field-custom-text-content common-lisp:nil
                       ((font-configuration :initarg :font-configuration :type
                         (common-lisp:or font-configuration common-lisp:null)
                         :accessor
                         %table-field-custom-text-content-font-configuration
                         :initform
                         (common-lisp:error ":font-configuration is required"))
                        (value :initarg :value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %table-field-custom-text-content-value :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'table-field-custom-text-content
                    'make-table-field-custom-text-content))
 (common-lisp:defun make-table-field-custom-text-content
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key font-configuration value)
   (common-lisp:apply #'common-lisp:make-instance
                      'table-field-custom-text-content
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-field-custom-text-content))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-field-custom-text-content))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-configuration))
      (common-lisp:list
       (common-lisp:cons "FontConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-field-custom-text-content))
   common-lisp:nil))
(common-lisp:deftype table-field-height () 'common-lisp:integer)
(common-lisp:deftype table-field-icon-set-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass table-field-image-configuration common-lisp:nil
                       ((sizing-options :initarg :sizing-options :type
                         (common-lisp:or table-cell-image-sizing-configuration
                                         common-lisp:null)
                         :accessor
                         %table-field-image-configuration-sizing-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'table-field-image-configuration
                    'make-table-field-image-configuration))
 (common-lisp:defun make-table-field-image-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sizing-options)
   (common-lisp:apply #'common-lisp:make-instance
                      'table-field-image-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-field-image-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-field-image-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sizing-options))
      (common-lisp:list
       (common-lisp:cons "SizingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-field-image-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass table-field-link-configuration common-lisp:nil
                       ((content :initarg :content :type
                         (common-lisp:or table-field-link-content-configuration
                                         common-lisp:null)
                         :accessor %table-field-link-configuration-content
                         :initform (common-lisp:error ":content is required"))
                        (target :initarg :target :type
                         (common-lisp:or urltarget-configuration
                                         common-lisp:null)
                         :accessor %table-field-link-configuration-target
                         :initform (common-lisp:error ":target is required"))))
 (common-lisp:export
  (common-lisp:list 'table-field-link-configuration
                    'make-table-field-link-configuration))
 (common-lisp:defun make-table-field-link-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key content target)
   (common-lisp:apply #'common-lisp:make-instance
                      'table-field-link-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-field-link-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-field-link-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-field-link-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass table-field-link-content-configuration common-lisp:nil
                       ((custom-icon-content :initarg :custom-icon-content
                         :type
                         (common-lisp:or table-field-custom-icon-content
                                         common-lisp:null)
                         :accessor
                         %table-field-link-content-configuration-custom-icon-content
                         :initform common-lisp:nil)
                        (custom-text-content :initarg :custom-text-content
                         :type
                         (common-lisp:or table-field-custom-text-content
                                         common-lisp:null)
                         :accessor
                         %table-field-link-content-configuration-custom-text-content
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'table-field-link-content-configuration
                    'make-table-field-link-content-configuration))
 (common-lisp:defun make-table-field-link-content-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-icon-content custom-text-content)
   (common-lisp:apply #'common-lisp:make-instance
                      'table-field-link-content-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-field-link-content-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-field-link-content-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-text-content))
      (common-lisp:list
       (common-lisp:cons "CustomTextContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-icon-content))
      (common-lisp:list
       (common-lisp:cons "CustomIconContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-field-link-content-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass table-field-option common-lisp:nil
                       ((urlstyling :initarg :urlstyling :type
                         (common-lisp:or table-field-urlconfiguration
                                         common-lisp:null)
                         :accessor %table-field-option-urlstyling :initform
                         common-lisp:nil)
                        (visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %table-field-option-visibility :initform
                         common-lisp:nil)
                        (custom-label :initarg :custom-label :type
                         (common-lisp:or custom-label common-lisp:null)
                         :accessor %table-field-option-custom-label :initform
                         common-lisp:nil)
                        (width :initarg :width :type
                         (common-lisp:or pixel-length common-lisp:null)
                         :accessor %table-field-option-width :initform
                         common-lisp:nil)
                        (field-id :initarg :field-id :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         %table-field-option-field-id :initform
                         (common-lisp:error ":field-id is required"))))
 (common-lisp:export
  (common-lisp:list 'table-field-option 'make-table-field-option))
 (common-lisp:defun make-table-field-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key urlstyling visibility custom-label width
                     field-id)
   (common-lisp:apply #'common-lisp:make-instance 'table-field-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-field-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-field-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-label))
      (common-lisp:list
       (common-lisp:cons "CustomLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'urlstyling))
      (common-lisp:list
       (common-lisp:cons "URLStyling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-field-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype table-field-option-list ()
   '(trivial-types:proper-list table-field-option))
 (common-lisp:defun |make-table-field-option-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-field-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass table-field-options common-lisp:nil
                       ((order :initarg :order :type
                         (common-lisp:or field-order-list common-lisp:null)
                         :accessor %table-field-options-order :initform
                         common-lisp:nil)
                        (selected-field-options :initarg
                         :selected-field-options :type
                         (common-lisp:or table-field-option-list
                                         common-lisp:null)
                         :accessor %table-field-options-selected-field-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'table-field-options 'make-table-field-options))
 (common-lisp:defun make-table-field-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key order selected-field-options)
   (common-lisp:apply #'common-lisp:make-instance 'table-field-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-field-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-field-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'selected-field-options))
      (common-lisp:list
       (common-lisp:cons "SelectedFieldOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "Order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-field-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass table-field-urlconfiguration common-lisp:nil
                       ((image-configuration :initarg :image-configuration
                         :type
                         (common-lisp:or table-field-image-configuration
                                         common-lisp:null)
                         :accessor
                         %table-field-urlconfiguration-image-configuration
                         :initform common-lisp:nil)
                        (link-configuration :initarg :link-configuration :type
                         (common-lisp:or table-field-link-configuration
                                         common-lisp:null)
                         :accessor
                         %table-field-urlconfiguration-link-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'table-field-urlconfiguration
                    'make-table-field-urlconfiguration))
 (common-lisp:defun make-table-field-urlconfiguration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-configuration link-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'table-field-urlconfiguration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-field-urlconfiguration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-field-urlconfiguration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-configuration))
      (common-lisp:list
       (common-lisp:cons "LinkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-configuration))
      (common-lisp:list
       (common-lisp:cons "ImageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-field-urlconfiguration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass table-field-wells common-lisp:nil
                       ((table-unaggregated-field-wells :initarg
                         :table-unaggregated-field-wells :type
                         (common-lisp:or table-unaggregated-field-wells
                                         common-lisp:null)
                         :accessor
                         %table-field-wells-table-unaggregated-field-wells
                         :initform common-lisp:nil)
                        (table-aggregated-field-wells :initarg
                         :table-aggregated-field-wells :type
                         (common-lisp:or table-aggregated-field-wells
                                         common-lisp:null)
                         :accessor
                         %table-field-wells-table-aggregated-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'table-field-wells 'make-table-field-wells))
 (common-lisp:defun make-table-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key table-unaggregated-field-wells
                     table-aggregated-field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'table-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'table-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "TableAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'table-unaggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "TableUnaggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass table-inline-visualization common-lisp:nil
                       ((data-bars :initarg :data-bars :type
                         (common-lisp:or data-bars-options common-lisp:null)
                         :accessor %table-inline-visualization-data-bars
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'table-inline-visualization
                    'make-table-inline-visualization))
 (common-lisp:defun make-table-inline-visualization
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-bars)
   (common-lisp:apply #'common-lisp:make-instance 'table-inline-visualization
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-inline-visualization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-inline-visualization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-bars))
      (common-lisp:list
       (common-lisp:cons "DataBars"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-inline-visualization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype table-inline-visualization-list ()
   '(trivial-types:proper-list table-inline-visualization))
 (common-lisp:defun |make-table-inline-visualization-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            table-inline-visualization))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass table-options common-lisp:nil
                       ((row-alternate-color-options :initarg
                         :row-alternate-color-options :type
                         (common-lisp:or row-alternate-color-options
                                         common-lisp:null)
                         :accessor %table-options-row-alternate-color-options
                         :initform common-lisp:nil)
                        (cell-style :initarg :cell-style :type
                         (common-lisp:or table-cell-style common-lisp:null)
                         :accessor %table-options-cell-style :initform
                         common-lisp:nil)
                        (header-style :initarg :header-style :type
                         (common-lisp:or table-cell-style common-lisp:null)
                         :accessor %table-options-header-style :initform
                         common-lisp:nil)
                        (orientation :initarg :orientation :type
                         (common-lisp:or table-orientation common-lisp:null)
                         :accessor %table-options-orientation :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'table-options 'make-table-options))
 (common-lisp:defun make-table-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key row-alternate-color-options cell-style
                     header-style orientation)
   (common-lisp:apply #'common-lisp:make-instance 'table-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'orientation))
      (common-lisp:list
       (common-lisp:cons "Orientation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header-style))
      (common-lisp:list
       (common-lisp:cons "HeaderStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cell-style))
      (common-lisp:list
       (common-lisp:cons "CellStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'row-alternate-color-options))
      (common-lisp:list
       (common-lisp:cons "RowAlternateColorOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-options))
   common-lisp:nil))
(common-lisp:deftype table-orientation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass table-paginated-report-options common-lisp:nil
                       ((overflow-column-header-visibility :initarg
                         :overflow-column-header-visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %table-paginated-report-options-overflow-column-header-visibility
                         :initform common-lisp:nil)
                        (vertical-overflow-visibility :initarg
                         :vertical-overflow-visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %table-paginated-report-options-vertical-overflow-visibility
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'table-paginated-report-options
                    'make-table-paginated-report-options))
 (common-lisp:defun make-table-paginated-report-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key overflow-column-header-visibility
                     vertical-overflow-visibility)
   (common-lisp:apply #'common-lisp:make-instance
                      'table-paginated-report-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-paginated-report-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-paginated-report-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vertical-overflow-visibility))
      (common-lisp:list
       (common-lisp:cons "VerticalOverflowVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'overflow-column-header-visibility))
      (common-lisp:list
       (common-lisp:cons "OverflowColumnHeaderVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-paginated-report-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass table-row-conditional-formatting common-lisp:nil
                       ((text-color :initarg :text-color :type
                         (common-lisp:or conditional-formatting-color
                                         common-lisp:null)
                         :accessor %table-row-conditional-formatting-text-color
                         :initform common-lisp:nil)
                        (background-color :initarg :background-color :type
                         (common-lisp:or conditional-formatting-color
                                         common-lisp:null)
                         :accessor
                         %table-row-conditional-formatting-background-color
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'table-row-conditional-formatting
                    'make-table-row-conditional-formatting))
 (common-lisp:defun make-table-row-conditional-formatting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key text-color background-color)
   (common-lisp:apply #'common-lisp:make-instance
                      'table-row-conditional-formatting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-row-conditional-formatting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-row-conditional-formatting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background-color))
      (common-lisp:list
       (common-lisp:cons "BackgroundColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-color))
      (common-lisp:list
       (common-lisp:cons "TextColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-row-conditional-formatting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass table-side-border-options common-lisp:nil
                       ((bottom :initarg :bottom :type
                         (common-lisp:or table-border-options common-lisp:null)
                         :accessor %table-side-border-options-bottom :initform
                         common-lisp:nil)
                        (top :initarg :top :type
                         (common-lisp:or table-border-options common-lisp:null)
                         :accessor %table-side-border-options-top :initform
                         common-lisp:nil)
                        (right :initarg :right :type
                         (common-lisp:or table-border-options common-lisp:null)
                         :accessor %table-side-border-options-right :initform
                         common-lisp:nil)
                        (left :initarg :left :type
                         (common-lisp:or table-border-options common-lisp:null)
                         :accessor %table-side-border-options-left :initform
                         common-lisp:nil)
                        (inner-horizontal :initarg :inner-horizontal :type
                         (common-lisp:or table-border-options common-lisp:null)
                         :accessor %table-side-border-options-inner-horizontal
                         :initform common-lisp:nil)
                        (inner-vertical :initarg :inner-vertical :type
                         (common-lisp:or table-border-options common-lisp:null)
                         :accessor %table-side-border-options-inner-vertical
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'table-side-border-options
                    'make-table-side-border-options))
 (common-lisp:defun make-table-side-border-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bottom top right left inner-horizontal
                     inner-vertical)
   (common-lisp:apply #'common-lisp:make-instance 'table-side-border-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-side-border-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-side-border-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inner-vertical))
      (common-lisp:list
       (common-lisp:cons "InnerVertical"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inner-horizontal))
      (common-lisp:list
       (common-lisp:cons "InnerHorizontal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'left))
      (common-lisp:list
       (common-lisp:cons "Left"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'right))
      (common-lisp:list
       (common-lisp:cons "Right"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'top))
      (common-lisp:list
       (common-lisp:cons "Top"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bottom))
      (common-lisp:list
       (common-lisp:cons "Bottom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-side-border-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass table-sort-configuration common-lisp:nil
                       ((pagination-configuration :initarg
                         :pagination-configuration :type
                         (common-lisp:or pagination-configuration
                                         common-lisp:null)
                         :accessor
                         %table-sort-configuration-pagination-configuration
                         :initform common-lisp:nil)
                        (row-sort :initarg :row-sort :type
                         (common-lisp:or row-sort-list common-lisp:null)
                         :accessor %table-sort-configuration-row-sort :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'table-sort-configuration 'make-table-sort-configuration))
 (common-lisp:defun make-table-sort-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pagination-configuration row-sort)
   (common-lisp:apply #'common-lisp:make-instance 'table-sort-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-sort))
      (common-lisp:list
       (common-lisp:cons "RowSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pagination-configuration))
      (common-lisp:list
       (common-lisp:cons "PaginationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-sort-configuration))
   common-lisp:nil))
(common-lisp:deftype table-totals-placement () 'common-lisp:string)
(common-lisp:deftype table-totals-scroll-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass table-unaggregated-field-wells common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or unaggregated-field-list
                                         common-lisp:null)
                         :accessor %table-unaggregated-field-wells-values
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'table-unaggregated-field-wells
                    'make-table-unaggregated-field-wells))
 (common-lisp:defun make-table-unaggregated-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values)
   (common-lisp:apply #'common-lisp:make-instance
                      'table-unaggregated-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-unaggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-unaggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-unaggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass table-visual common-lisp:nil
                       ((actions :initarg :actions :type
                         (common-lisp:or visual-custom-action-list
                                         common-lisp:null)
                         :accessor %table-visual-actions :initform
                         common-lisp:nil)
                        (conditional-formatting :initarg
                         :conditional-formatting :type
                         (common-lisp:or table-conditional-formatting
                                         common-lisp:null)
                         :accessor %table-visual-conditional-formatting
                         :initform common-lisp:nil)
                        (chart-configuration :initarg :chart-configuration
                         :type
                         (common-lisp:or table-configuration common-lisp:null)
                         :accessor %table-visual-chart-configuration :initform
                         common-lisp:nil)
                        (subtitle :initarg :subtitle :type
                         (common-lisp:or visual-subtitle-label-options
                                         common-lisp:null)
                         :accessor %table-visual-subtitle :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or visual-title-label-options
                                         common-lisp:null)
                         :accessor %table-visual-title :initform
                         common-lisp:nil)
                        (visual-id :initarg :visual-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %table-visual-visual-id :initform
                         (common-lisp:error ":visual-id is required"))))
 (common-lisp:export (common-lisp:list 'table-visual 'make-table-visual))
 (common-lisp:defun make-table-visual
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key actions conditional-formatting
                     chart-configuration subtitle title visual-id)
   (common-lisp:apply #'common-lisp:make-instance 'table-visual
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-formatting))
      (common-lisp:list
       (common-lisp:cons "ConditionalFormatting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-column-operation common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or column-tag-list common-lisp:null)
                         :accessor %tag-column-operation-tags :initform
                         (common-lisp:error ":tags is required"))
                        (column-name :initarg :column-name :type
                         (common-lisp:or column-name common-lisp:null)
                         :accessor %tag-column-operation-column-name :initform
                         (common-lisp:error ":column-name is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-column-operation 'make-tag-column-operation))
 (common-lisp:defun make-tag-column-operation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags column-name)
   (common-lisp:apply #'common-lisp:make-instance 'tag-column-operation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-column-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-column-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "ColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-column-operation))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %tag-resource-response-status :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %tag-resource-response-request-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-visual-list ()
   '(trivial-types:proper-list short-restrictive-resource-id))
 (common-lisp:defun |make-target-visual-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            short-restrictive-resource-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target-visual-options () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass template common-lisp:nil
                       ((created-time :initarg :created-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %template-created-time :initform common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %template-last-updated-time :initform common-lisp:nil)
                        (template-id :initarg :template-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %template-template-id :initform
                         common-lisp:nil)
                        (version :initarg :version :type
                         (common-lisp:or template-version common-lisp:null)
                         :accessor %template-version :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor %template-name :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %template-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'template 'make-template))
 (common-lisp:defun make-template
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-time last-updated-time
                     template-id version name arn)
   (common-lisp:apply #'common-lisp:make-instance 'template
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass template-alias common-lisp:nil
                       ((template-version-number :initarg
                         :template-version-number :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor %template-alias-template-version-number
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %template-alias-arn :initform common-lisp:nil)
                        (alias-name :initarg :alias-name :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %template-alias-alias-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'template-alias 'make-template-alias))
 (common-lisp:defun make-template-alias
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key template-version-number arn alias-name)
   (common-lisp:apply #'common-lisp:make-instance 'template-alias
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-alias))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-alias))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-name))
      (common-lisp:list
       (common-lisp:cons "AliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-version-number))
      (common-lisp:list
       (common-lisp:cons "TemplateVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-alias))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype template-alias-list ()
   '(trivial-types:proper-list template-alias))
 (common-lisp:defun |make-template-alias-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list template-alias))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass template-error common-lisp:nil
                       ((violated-entities :initarg :violated-entities :type
                         (common-lisp:or entity-list common-lisp:null)
                         :accessor %template-error-violated-entities :initform
                         common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %template-error-message :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or template-error-type common-lisp:null)
                         :accessor %template-error-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'template-error 'make-template-error))
 (common-lisp:defun make-template-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key violated-entities message type)
   (common-lisp:apply #'common-lisp:make-instance 'template-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violated-entities))
      (common-lisp:list
       (common-lisp:cons "ViolatedEntities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype template-error-list ()
   '(trivial-types:proper-list template-error))
 (common-lisp:defun |make-template-error-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list template-error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype template-error-type () 'common-lisp:string)
(common-lisp:deftype template-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass template-source-analysis common-lisp:nil
                       ((data-set-references :initarg :data-set-references
                         :type
                         (common-lisp:or data-set-reference-list
                                         common-lisp:null)
                         :accessor
                         %template-source-analysis-data-set-references
                         :initform
                         (common-lisp:error
                          ":data-set-references is required"))
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %template-source-analysis-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'template-source-analysis 'make-template-source-analysis))
 (common-lisp:defun make-template-source-analysis
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-set-references arn)
   (common-lisp:apply #'common-lisp:make-instance 'template-source-analysis
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          template-source-analysis))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          template-source-analysis))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-references))
      (common-lisp:list
       (common-lisp:cons "DataSetReferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          template-source-analysis))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass template-source-entity common-lisp:nil
                       ((source-template :initarg :source-template :type
                         (common-lisp:or template-source-template
                                         common-lisp:null)
                         :accessor %template-source-entity-source-template
                         :initform common-lisp:nil)
                        (source-analysis :initarg :source-analysis :type
                         (common-lisp:or template-source-analysis
                                         common-lisp:null)
                         :accessor %template-source-entity-source-analysis
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'template-source-entity 'make-template-source-entity))
 (common-lisp:defun make-template-source-entity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-template source-analysis)
   (common-lisp:apply #'common-lisp:make-instance 'template-source-entity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          template-source-entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          template-source-entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-analysis))
      (common-lisp:list
       (common-lisp:cons "SourceAnalysis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-template))
      (common-lisp:list
       (common-lisp:cons "SourceTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          template-source-entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass template-source-template common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %template-source-template-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'template-source-template 'make-template-source-template))
 (common-lisp:defun make-template-source-template
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn)
   (common-lisp:apply #'common-lisp:make-instance 'template-source-template
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          template-source-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          template-source-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          template-source-template))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass template-summary common-lisp:nil
                       ((last-updated-time :initarg :last-updated-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %template-summary-last-updated-time :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %template-summary-created-time :initform
                         common-lisp:nil)
                        (latest-version-number :initarg :latest-version-number
                         :type (common-lisp:or version-number common-lisp:null)
                         :accessor %template-summary-latest-version-number
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor %template-summary-name :initform
                         common-lisp:nil)
                        (template-id :initarg :template-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %template-summary-template-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %template-summary-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'template-summary 'make-template-summary))
 (common-lisp:defun make-template-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-time created-time
                     latest-version-number name template-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'template-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-version-number))
      (common-lisp:list
       (common-lisp:cons "LatestVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype template-summary-list ()
   '(trivial-types:proper-list template-summary))
 (common-lisp:defun |make-template-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list template-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass template-version common-lisp:nil
                       ((sheets :initarg :sheets :type
                         (common-lisp:or sheet-list common-lisp:null) :accessor
                         %template-version-sheets :initform common-lisp:nil)
                        (theme-arn :initarg :theme-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %template-version-theme-arn :initform common-lisp:nil)
                        (source-entity-arn :initarg :source-entity-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %template-version-source-entity-arn :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or version-description common-lisp:null)
                         :accessor %template-version-description :initform
                         common-lisp:nil)
                        (data-set-configurations :initarg
                         :data-set-configurations :type
                         (common-lisp:or data-set-configuration-list
                                         common-lisp:null)
                         :accessor %template-version-data-set-configurations
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or resource-status common-lisp:null)
                         :accessor %template-version-status :initform
                         common-lisp:nil)
                        (version-number :initarg :version-number :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor %template-version-version-number :initform
                         common-lisp:nil)
                        (errors :initarg :errors :type
                         (common-lisp:or template-error-list common-lisp:null)
                         :accessor %template-version-errors :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %template-version-created-time :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'template-version 'make-template-version))
 (common-lisp:defun make-template-version
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sheets theme-arn source-entity-arn
                     description data-set-configurations status version-number
                     errors created-time)
   (common-lisp:apply #'common-lisp:make-instance 'template-version
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-set-configurations))
      (common-lisp:list
       (common-lisp:cons "DataSetConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-entity-arn))
      (common-lisp:list
       (common-lisp:cons "SourceEntityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-arn))
      (common-lisp:list
       (common-lisp:cons "ThemeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sheets))
      (common-lisp:list
       (common-lisp:cons "Sheets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass template-version-definition common-lisp:nil
                       ((analysis-defaults :initarg :analysis-defaults :type
                         (common-lisp:or analysis-defaults common-lisp:null)
                         :accessor
                         %template-version-definition-analysis-defaults
                         :initform common-lisp:nil)
                        (column-configurations :initarg :column-configurations
                         :type
                         (common-lisp:or column-configuration-list
                                         common-lisp:null)
                         :accessor
                         %template-version-definition-column-configurations
                         :initform common-lisp:nil)
                        (filter-groups :initarg :filter-groups :type
                         (common-lisp:or filter-group-list common-lisp:null)
                         :accessor %template-version-definition-filter-groups
                         :initform common-lisp:nil)
                        (parameter-declarations :initarg
                         :parameter-declarations :type
                         (common-lisp:or parameter-declaration-list
                                         common-lisp:null)
                         :accessor
                         %template-version-definition-parameter-declarations
                         :initform common-lisp:nil)
                        (calculated-fields :initarg :calculated-fields :type
                         (common-lisp:or calculated-fields common-lisp:null)
                         :accessor
                         %template-version-definition-calculated-fields
                         :initform common-lisp:nil)
                        (sheets :initarg :sheets :type
                         (common-lisp:or sheet-definition-list
                                         common-lisp:null)
                         :accessor %template-version-definition-sheets
                         :initform common-lisp:nil)
                        (data-set-configurations :initarg
                         :data-set-configurations :type
                         (common-lisp:or data-set-configuration-list
                                         common-lisp:null)
                         :accessor
                         %template-version-definition-data-set-configurations
                         :initform
                         (common-lisp:error
                          ":data-set-configurations is required"))))
 (common-lisp:export
  (common-lisp:list 'template-version-definition
                    'make-template-version-definition))
 (common-lisp:defun make-template-version-definition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key analysis-defaults column-configurations
                     filter-groups parameter-declarations calculated-fields
                     sheets data-set-configurations)
   (common-lisp:apply #'common-lisp:make-instance 'template-version-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          template-version-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          template-version-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-set-configurations))
      (common-lisp:list
       (common-lisp:cons "DataSetConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sheets))
      (common-lisp:list
       (common-lisp:cons "Sheets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'calculated-fields))
      (common-lisp:list
       (common-lisp:cons "CalculatedFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-declarations))
      (common-lisp:list
       (common-lisp:cons "ParameterDeclarations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-groups))
      (common-lisp:list
       (common-lisp:cons "FilterGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-configurations))
      (common-lisp:list
       (common-lisp:cons "ColumnConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-defaults))
      (common-lisp:list
       (common-lisp:cons "AnalysisDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          template-version-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass template-version-summary common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or version-description common-lisp:null)
                         :accessor %template-version-summary-description
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or resource-status common-lisp:null)
                         :accessor %template-version-summary-status :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %template-version-summary-created-time :initform
                         common-lisp:nil)
                        (version-number :initarg :version-number :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor %template-version-summary-version-number
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %template-version-summary-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'template-version-summary 'make-template-version-summary))
 (common-lisp:defun make-template-version-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description status created-time
                     version-number arn)
   (common-lisp:apply #'common-lisp:make-instance 'template-version-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          template-version-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          template-version-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          template-version-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype template-version-summary-list ()
   '(trivial-types:proper-list template-version-summary))
 (common-lisp:defun |make-template-version-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            template-version-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass teradata-parameters common-lisp:nil
                       ((database :initarg :database :type
                         (common-lisp:or database common-lisp:null) :accessor
                         %teradata-parameters-database :initform
                         (common-lisp:error ":database is required"))
                        (port :initarg :port :type
                         (common-lisp:or port common-lisp:null) :accessor
                         %teradata-parameters-port :initform
                         (common-lisp:error ":port is required"))
                        (host :initarg :host :type
                         (common-lisp:or host common-lisp:null) :accessor
                         %teradata-parameters-host :initform
                         (common-lisp:error ":host is required"))))
 (common-lisp:export
  (common-lisp:list 'teradata-parameters 'make-teradata-parameters))
 (common-lisp:defun make-teradata-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key database port host)
   (common-lisp:apply #'common-lisp:make-instance 'teradata-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input teradata-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input teradata-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input teradata-parameters))
   common-lisp:nil))
(common-lisp:deftype text-area-control-delimiter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass text-area-control-display-options common-lisp:nil
                       ((placeholder-options :initarg :placeholder-options
                         :type
                         (common-lisp:or text-control-placeholder-options
                                         common-lisp:null)
                         :accessor
                         %text-area-control-display-options-placeholder-options
                         :initform common-lisp:nil)
                        (title-options :initarg :title-options :type
                         (common-lisp:or label-options common-lisp:null)
                         :accessor
                         %text-area-control-display-options-title-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'text-area-control-display-options
                    'make-text-area-control-display-options))
 (common-lisp:defun make-text-area-control-display-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key placeholder-options title-options)
   (common-lisp:apply #'common-lisp:make-instance
                      'text-area-control-display-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          text-area-control-display-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          text-area-control-display-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title-options))
      (common-lisp:list
       (common-lisp:cons "TitleOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placeholder-options))
      (common-lisp:list
       (common-lisp:cons "PlaceholderOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          text-area-control-display-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass text-conditional-format common-lisp:nil
                       ((icon :initarg :icon :type
                         (common-lisp:or conditional-formatting-icon
                                         common-lisp:null)
                         :accessor %text-conditional-format-icon :initform
                         common-lisp:nil)
                        (text-color :initarg :text-color :type
                         (common-lisp:or conditional-formatting-color
                                         common-lisp:null)
                         :accessor %text-conditional-format-text-color
                         :initform common-lisp:nil)
                        (background-color :initarg :background-color :type
                         (common-lisp:or conditional-formatting-color
                                         common-lisp:null)
                         :accessor %text-conditional-format-background-color
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'text-conditional-format 'make-text-conditional-format))
 (common-lisp:defun make-text-conditional-format
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key icon text-color background-color)
   (common-lisp:apply #'common-lisp:make-instance 'text-conditional-format
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          text-conditional-format))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          text-conditional-format))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background-color))
      (common-lisp:list
       (common-lisp:cons "BackgroundColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-color))
      (common-lisp:list
       (common-lisp:cons "TextColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icon))
      (common-lisp:list
       (common-lisp:cons "Icon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          text-conditional-format))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass text-control-placeholder-options common-lisp:nil
                       ((visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %text-control-placeholder-options-visibility :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'text-control-placeholder-options
                    'make-text-control-placeholder-options))
 (common-lisp:defun make-text-control-placeholder-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visibility)
   (common-lisp:apply #'common-lisp:make-instance
                      'text-control-placeholder-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          text-control-placeholder-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          text-control-placeholder-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          text-control-placeholder-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass text-field-control-display-options common-lisp:nil
                       ((placeholder-options :initarg :placeholder-options
                         :type
                         (common-lisp:or text-control-placeholder-options
                                         common-lisp:null)
                         :accessor
                         %text-field-control-display-options-placeholder-options
                         :initform common-lisp:nil)
                        (title-options :initarg :title-options :type
                         (common-lisp:or label-options common-lisp:null)
                         :accessor
                         %text-field-control-display-options-title-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'text-field-control-display-options
                    'make-text-field-control-display-options))
 (common-lisp:defun make-text-field-control-display-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key placeholder-options title-options)
   (common-lisp:apply #'common-lisp:make-instance
                      'text-field-control-display-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          text-field-control-display-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          text-field-control-display-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title-options))
      (common-lisp:list
       (common-lisp:cons "TitleOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placeholder-options))
      (common-lisp:list
       (common-lisp:cons "PlaceholderOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          text-field-control-display-options))
   common-lisp:nil))
(common-lisp:deftype text-qualifier () 'common-lisp:string)
(common-lisp:deftype text-wrap () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass theme common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or theme-type common-lisp:null) :accessor
                         %theme-type :initform common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %theme-last-updated-time :initform common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %theme-created-time :initform common-lisp:nil)
                        (version :initarg :version :type
                         (common-lisp:or theme-version common-lisp:null)
                         :accessor %theme-version :initform common-lisp:nil)
                        (theme-id :initarg :theme-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %theme-theme-id :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or theme-name common-lisp:null) :accessor
                         %theme-name :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %theme-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'theme 'make-theme))
 (common-lisp:defun make-theme
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type last-updated-time created-time
                     version theme-id name arn)
   (common-lisp:apply #'common-lisp:make-instance 'theme
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input theme))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input theme))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-id))
      (common-lisp:list
       (common-lisp:cons "ThemeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input theme))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass theme-alias common-lisp:nil
                       ((theme-version-number :initarg :theme-version-number
                         :type (common-lisp:or version-number common-lisp:null)
                         :accessor %theme-alias-theme-version-number :initform
                         common-lisp:nil)
                        (alias-name :initarg :alias-name :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %theme-alias-alias-name :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %theme-alias-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'theme-alias 'make-theme-alias))
 (common-lisp:defun make-theme-alias
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key theme-version-number alias-name arn)
   (common-lisp:apply #'common-lisp:make-instance 'theme-alias
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input theme-alias))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input theme-alias))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-name))
      (common-lisp:list
       (common-lisp:cons "AliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'theme-version-number))
      (common-lisp:list
       (common-lisp:cons "ThemeVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input theme-alias))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype theme-alias-list ()
   '(trivial-types:proper-list theme-alias))
 (common-lisp:defun |make-theme-alias-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list theme-alias))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass theme-configuration common-lisp:nil
                       ((typography :initarg :typography :type
                         (common-lisp:or typography common-lisp:null) :accessor
                         %theme-configuration-typography :initform
                         common-lisp:nil)
                        (sheet :initarg :sheet :type
                         (common-lisp:or sheet-style common-lisp:null)
                         :accessor %theme-configuration-sheet :initform
                         common-lisp:nil)
                        (uicolor-palette :initarg :uicolor-palette :type
                         (common-lisp:or uicolor-palette common-lisp:null)
                         :accessor %theme-configuration-uicolor-palette
                         :initform common-lisp:nil)
                        (data-color-palette :initarg :data-color-palette :type
                         (common-lisp:or data-color-palette common-lisp:null)
                         :accessor %theme-configuration-data-color-palette
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'theme-configuration 'make-theme-configuration))
 (common-lisp:defun make-theme-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key typography sheet uicolor-palette
                     data-color-palette)
   (common-lisp:apply #'common-lisp:make-instance 'theme-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input theme-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input theme-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-color-palette))
      (common-lisp:list
       (common-lisp:cons "DataColorPalette"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uicolor-palette))
      (common-lisp:list
       (common-lisp:cons "UIColorPalette"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sheet))
      (common-lisp:list
       (common-lisp:cons "Sheet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'typography))
      (common-lisp:list
       (common-lisp:cons "Typography"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input theme-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass theme-error common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %theme-error-message :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or theme-error-type common-lisp:null)
                         :accessor %theme-error-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'theme-error 'make-theme-error))
 (common-lisp:defun make-theme-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message type)
   (common-lisp:apply #'common-lisp:make-instance 'theme-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input theme-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input theme-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input theme-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype theme-error-list ()
   '(trivial-types:proper-list theme-error))
 (common-lisp:defun |make-theme-error-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list theme-error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype theme-error-type () 'common-lisp:string)
(common-lisp:deftype theme-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass theme-summary common-lisp:nil
                       ((last-updated-time :initarg :last-updated-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %theme-summary-last-updated-time :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %theme-summary-created-time :initform common-lisp:nil)
                        (latest-version-number :initarg :latest-version-number
                         :type (common-lisp:or version-number common-lisp:null)
                         :accessor %theme-summary-latest-version-number
                         :initform common-lisp:nil)
                        (theme-id :initarg :theme-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %theme-summary-theme-id :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or theme-name common-lisp:null) :accessor
                         %theme-summary-name :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %theme-summary-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'theme-summary 'make-theme-summary))
 (common-lisp:defun make-theme-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-time created-time
                     latest-version-number theme-id name arn)
   (common-lisp:apply #'common-lisp:make-instance 'theme-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input theme-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input theme-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-id))
      (common-lisp:list
       (common-lisp:cons "ThemeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-version-number))
      (common-lisp:list
       (common-lisp:cons "LatestVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input theme-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype theme-summary-list ()
   '(trivial-types:proper-list theme-summary))
 (common-lisp:defun |make-theme-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list theme-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype theme-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass theme-version common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or resource-status common-lisp:null)
                         :accessor %theme-version-status :initform
                         common-lisp:nil)
                        (errors :initarg :errors :type
                         (common-lisp:or theme-error-list common-lisp:null)
                         :accessor %theme-version-errors :initform
                         common-lisp:nil)
                        (configuration :initarg :configuration :type
                         (common-lisp:or theme-configuration common-lisp:null)
                         :accessor %theme-version-configuration :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %theme-version-created-time :initform common-lisp:nil)
                        (base-theme-id :initarg :base-theme-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %theme-version-base-theme-id :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or version-description common-lisp:null)
                         :accessor %theme-version-description :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %theme-version-arn :initform common-lisp:nil)
                        (version-number :initarg :version-number :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor %theme-version-version-number :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'theme-version 'make-theme-version))
 (common-lisp:defun make-theme-version
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status errors configuration created-time
                     base-theme-id description arn version-number)
   (common-lisp:apply #'common-lisp:make-instance 'theme-version
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input theme-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input theme-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-theme-id))
      (common-lisp:list
       (common-lisp:cons "BaseThemeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input theme-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass theme-version-summary common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or resource-status common-lisp:null)
                         :accessor %theme-version-summary-status :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %theme-version-summary-created-time :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or version-description common-lisp:null)
                         :accessor %theme-version-summary-description :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %theme-version-summary-arn :initform common-lisp:nil)
                        (version-number :initarg :version-number :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor %theme-version-summary-version-number
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'theme-version-summary 'make-theme-version-summary))
 (common-lisp:defun make-theme-version-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status created-time description arn
                     version-number)
   (common-lisp:apply #'common-lisp:make-instance 'theme-version-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          theme-version-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          theme-version-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          theme-version-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype theme-version-summary-list ()
   '(trivial-types:proper-list theme-version-summary))
 (common-lisp:defun |make-theme-version-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list theme-version-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass thousand-separator-options common-lisp:nil
                       ((visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %thousand-separator-options-visibility :initform
                         common-lisp:nil)
                        (symbol :initarg :symbol :type
                         (common-lisp:or numeric-separator-symbol
                                         common-lisp:null)
                         :accessor %thousand-separator-options-symbol :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'thousand-separator-options
                    'make-thousand-separator-options))
 (common-lisp:defun make-thousand-separator-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visibility symbol)
   (common-lisp:apply #'common-lisp:make-instance 'thousand-separator-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          thousand-separator-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          thousand-separator-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'symbol))
      (common-lisp:list
       (common-lisp:cons "Symbol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          thousand-separator-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       throttling-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass tile-layout-style common-lisp:nil
                       ((margin :initarg :margin :type
                         (common-lisp:or margin-style common-lisp:null)
                         :accessor %tile-layout-style-margin :initform
                         common-lisp:nil)
                        (gutter :initarg :gutter :type
                         (common-lisp:or gutter-style common-lisp:null)
                         :accessor %tile-layout-style-gutter :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'tile-layout-style 'make-tile-layout-style))
 (common-lisp:defun make-tile-layout-style
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key margin gutter)
   (common-lisp:apply #'common-lisp:make-instance 'tile-layout-style
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tile-layout-style))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tile-layout-style))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gutter))
      (common-lisp:list
       (common-lisp:cons "Gutter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'margin))
      (common-lisp:list
       (common-lisp:cons "Margin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tile-layout-style))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tile-style common-lisp:nil
                       ((border :initarg :border :type
                         (common-lisp:or border-style common-lisp:null)
                         :accessor %tile-style-border :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tile-style 'make-tile-style))
 (common-lisp:defun make-tile-style
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key border)
   (common-lisp:apply #'common-lisp:make-instance 'tile-style
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tile-style))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tile-style))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'border))
      (common-lisp:list
       (common-lisp:cons "Border"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tile-style))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass time-based-forecast-properties common-lisp:nil
                       ((seasonality :initarg :seasonality :type
                         (common-lisp:or seasonality common-lisp:null)
                         :accessor %time-based-forecast-properties-seasonality
                         :initform common-lisp:nil)
                        (prediction-interval :initarg :prediction-interval
                         :type
                         (common-lisp:or prediction-interval common-lisp:null)
                         :accessor
                         %time-based-forecast-properties-prediction-interval
                         :initform common-lisp:nil)
                        (lower-boundary :initarg :lower-boundary :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %time-based-forecast-properties-lower-boundary
                         :initform common-lisp:nil)
                        (upper-boundary :initarg :upper-boundary :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %time-based-forecast-properties-upper-boundary
                         :initform common-lisp:nil)
                        (periods-backward :initarg :periods-backward :type
                         (common-lisp:or periods-backward common-lisp:null)
                         :accessor
                         %time-based-forecast-properties-periods-backward
                         :initform common-lisp:nil)
                        (periods-forward :initarg :periods-forward :type
                         (common-lisp:or periods-forward common-lisp:null)
                         :accessor
                         %time-based-forecast-properties-periods-forward
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'time-based-forecast-properties
                    'make-time-based-forecast-properties))
 (common-lisp:defun make-time-based-forecast-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key seasonality prediction-interval
                     lower-boundary upper-boundary periods-backward
                     periods-forward)
   (common-lisp:apply #'common-lisp:make-instance
                      'time-based-forecast-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          time-based-forecast-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          time-based-forecast-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'periods-forward))
      (common-lisp:list
       (common-lisp:cons "PeriodsForward"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'periods-backward))
      (common-lisp:list
       (common-lisp:cons "PeriodsBackward"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upper-boundary))
      (common-lisp:list
       (common-lisp:cons "UpperBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lower-boundary))
      (common-lisp:list
       (common-lisp:cons "LowerBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prediction-interval))
      (common-lisp:list
       (common-lisp:cons "PredictionInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'seasonality))
      (common-lisp:list
       (common-lisp:cons "Seasonality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          time-based-forecast-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass time-equality-filter common-lisp:nil
                       ((time-granularity :initarg :time-granularity :type
                         (common-lisp:or time-granularity common-lisp:null)
                         :accessor %time-equality-filter-time-granularity
                         :initform common-lisp:nil)
                        (parameter-name :initarg :parameter-name :type
                         (common-lisp:or parameter-name common-lisp:null)
                         :accessor %time-equality-filter-parameter-name
                         :initform common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %time-equality-filter-value :initform common-lisp:nil)
                        (column :initarg :column :type
                         (common-lisp:or column-identifier common-lisp:null)
                         :accessor %time-equality-filter-column :initform
                         (common-lisp:error ":column is required"))
                        (filter-id :initarg :filter-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %time-equality-filter-filter-id :initform
                         (common-lisp:error ":filter-id is required"))))
 (common-lisp:export
  (common-lisp:list 'time-equality-filter 'make-time-equality-filter))
 (common-lisp:defun make-time-equality-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key time-granularity parameter-name value
                     column filter-id)
   (common-lisp:apply #'common-lisp:make-instance 'time-equality-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-equality-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-equality-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-id))
      (common-lisp:list
       (common-lisp:cons "FilterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-granularity))
      (common-lisp:list
       (common-lisp:cons "TimeGranularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-equality-filter))
   common-lisp:nil))
(common-lisp:deftype time-granularity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass time-range-drill-down-filter common-lisp:nil
                       ((time-granularity :initarg :time-granularity :type
                         (common-lisp:or time-granularity common-lisp:null)
                         :accessor
                         %time-range-drill-down-filter-time-granularity
                         :initform
                         (common-lisp:error ":time-granularity is required"))
                        (range-maximum :initarg :range-maximum :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %time-range-drill-down-filter-range-maximum :initform
                         (common-lisp:error ":range-maximum is required"))
                        (range-minimum :initarg :range-minimum :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %time-range-drill-down-filter-range-minimum :initform
                         (common-lisp:error ":range-minimum is required"))
                        (column :initarg :column :type
                         (common-lisp:or column-identifier common-lisp:null)
                         :accessor %time-range-drill-down-filter-column
                         :initform (common-lisp:error ":column is required"))))
 (common-lisp:export
  (common-lisp:list 'time-range-drill-down-filter
                    'make-time-range-drill-down-filter))
 (common-lisp:defun make-time-range-drill-down-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key time-granularity range-maximum
                     range-minimum column)
   (common-lisp:apply #'common-lisp:make-instance 'time-range-drill-down-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          time-range-drill-down-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          time-range-drill-down-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range-minimum))
      (common-lisp:list
       (common-lisp:cons "RangeMinimum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range-maximum))
      (common-lisp:list
       (common-lisp:cons "RangeMaximum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-granularity))
      (common-lisp:list
       (common-lisp:cons "TimeGranularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          time-range-drill-down-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass time-range-filter common-lisp:nil
                       ((time-granularity :initarg :time-granularity :type
                         (common-lisp:or time-granularity common-lisp:null)
                         :accessor %time-range-filter-time-granularity
                         :initform common-lisp:nil)
                        (exclude-period-configuration :initarg
                         :exclude-period-configuration :type
                         (common-lisp:or exclude-period-configuration
                                         common-lisp:null)
                         :accessor
                         %time-range-filter-exclude-period-configuration
                         :initform common-lisp:nil)
                        (null-option :initarg :null-option :type
                         (common-lisp:or filter-null-option common-lisp:null)
                         :accessor %time-range-filter-null-option :initform
                         (common-lisp:error ":null-option is required"))
                        (range-maximum-value :initarg :range-maximum-value
                         :type
                         (common-lisp:or time-range-filter-value
                                         common-lisp:null)
                         :accessor %time-range-filter-range-maximum-value
                         :initform common-lisp:nil)
                        (range-minimum-value :initarg :range-minimum-value
                         :type
                         (common-lisp:or time-range-filter-value
                                         common-lisp:null)
                         :accessor %time-range-filter-range-minimum-value
                         :initform common-lisp:nil)
                        (include-maximum :initarg :include-maximum :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %time-range-filter-include-maximum :initform
                         common-lisp:nil)
                        (include-minimum :initarg :include-minimum :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %time-range-filter-include-minimum :initform
                         common-lisp:nil)
                        (column :initarg :column :type
                         (common-lisp:or column-identifier common-lisp:null)
                         :accessor %time-range-filter-column :initform
                         (common-lisp:error ":column is required"))
                        (filter-id :initarg :filter-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %time-range-filter-filter-id :initform
                         (common-lisp:error ":filter-id is required"))))
 (common-lisp:export
  (common-lisp:list 'time-range-filter 'make-time-range-filter))
 (common-lisp:defun make-time-range-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key time-granularity
                     exclude-period-configuration null-option
                     range-maximum-value range-minimum-value include-maximum
                     include-minimum column filter-id)
   (common-lisp:apply #'common-lisp:make-instance 'time-range-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-range-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-range-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-id))
      (common-lisp:list
       (common-lisp:cons "FilterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-minimum))
      (common-lisp:list
       (common-lisp:cons "IncludeMinimum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-maximum))
      (common-lisp:list
       (common-lisp:cons "IncludeMaximum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range-minimum-value))
      (common-lisp:list
       (common-lisp:cons "RangeMinimumValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range-maximum-value))
      (common-lisp:list
       (common-lisp:cons "RangeMaximumValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'null-option))
      (common-lisp:list
       (common-lisp:cons "NullOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclude-period-configuration))
      (common-lisp:list
       (common-lisp:cons "ExcludePeriodConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-granularity))
      (common-lisp:list
       (common-lisp:cons "TimeGranularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-range-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass time-range-filter-value common-lisp:nil
                       ((parameter :initarg :parameter :type
                         (common-lisp:or parameter-name common-lisp:null)
                         :accessor %time-range-filter-value-parameter :initform
                         common-lisp:nil)
                        (rolling-date :initarg :rolling-date :type
                         (common-lisp:or rolling-date-configuration
                                         common-lisp:null)
                         :accessor %time-range-filter-value-rolling-date
                         :initform common-lisp:nil)
                        (static-value :initarg :static-value :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %time-range-filter-value-static-value :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'time-range-filter-value 'make-time-range-filter-value))
 (common-lisp:defun make-time-range-filter-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter rolling-date static-value)
   (common-lisp:apply #'common-lisp:make-instance 'time-range-filter-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          time-range-filter-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          time-range-filter-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-value))
      (common-lisp:list
       (common-lisp:cons "StaticValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rolling-date))
      (common-lisp:list
       (common-lisp:cons "RollingDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter))
      (common-lisp:list
       (common-lisp:cons "Parameter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          time-range-filter-value))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tooltip-item common-lisp:nil
                       ((column-tooltip-item :initarg :column-tooltip-item
                         :type
                         (common-lisp:or column-tooltip-item common-lisp:null)
                         :accessor %tooltip-item-column-tooltip-item :initform
                         common-lisp:nil)
                        (field-tooltip-item :initarg :field-tooltip-item :type
                         (common-lisp:or field-tooltip-item common-lisp:null)
                         :accessor %tooltip-item-field-tooltip-item :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tooltip-item 'make-tooltip-item))
 (common-lisp:defun make-tooltip-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key column-tooltip-item field-tooltip-item)
   (common-lisp:apply #'common-lisp:make-instance 'tooltip-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tooltip-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tooltip-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-tooltip-item))
      (common-lisp:list
       (common-lisp:cons "FieldTooltipItem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-tooltip-item))
      (common-lisp:list
       (common-lisp:cons "ColumnTooltipItem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tooltip-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tooltip-item-list ()
   '(trivial-types:proper-list tooltip-item))
 (common-lisp:defun |make-tooltip-item-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tooltip-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tooltip-options common-lisp:nil
                       ((field-based-tooltip :initarg :field-based-tooltip
                         :type
                         (common-lisp:or field-based-tooltip common-lisp:null)
                         :accessor %tooltip-options-field-based-tooltip
                         :initform common-lisp:nil)
                        (selected-tooltip-type :initarg :selected-tooltip-type
                         :type
                         (common-lisp:or selected-tooltip-type
                                         common-lisp:null)
                         :accessor %tooltip-options-selected-tooltip-type
                         :initform common-lisp:nil)
                        (tooltip-visibility :initarg :tooltip-visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %tooltip-options-tooltip-visibility :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tooltip-options 'make-tooltip-options))
 (common-lisp:defun make-tooltip-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key field-based-tooltip selected-tooltip-type
                     tooltip-visibility)
   (common-lisp:apply #'common-lisp:make-instance 'tooltip-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tooltip-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tooltip-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip-visibility))
      (common-lisp:list
       (common-lisp:cons "TooltipVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'selected-tooltip-type))
      (common-lisp:list
       (common-lisp:cons "SelectedTooltipType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-based-tooltip))
      (common-lisp:list
       (common-lisp:cons "FieldBasedTooltip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tooltip-options))
   common-lisp:nil))
(common-lisp:deftype tooltip-title-type () 'common-lisp:string)
(common-lisp:deftype top-bottom-computation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass top-bottom-filter common-lisp:nil
                       ((parameter-name :initarg :parameter-name :type
                         (common-lisp:or parameter-name common-lisp:null)
                         :accessor %top-bottom-filter-parameter-name :initform
                         common-lisp:nil)
                        (time-granularity :initarg :time-granularity :type
                         (common-lisp:or time-granularity common-lisp:null)
                         :accessor %top-bottom-filter-time-granularity
                         :initform common-lisp:nil)
                        (aggregation-sort-configurations :initarg
                         :aggregation-sort-configurations :type
                         (common-lisp:or aggregation-sort-configuration-list
                                         common-lisp:null)
                         :accessor
                         %top-bottom-filter-aggregation-sort-configurations
                         :initform
                         (common-lisp:error
                          ":aggregation-sort-configurations is required"))
                        (limit :initarg :limit :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %top-bottom-filter-limit :initform common-lisp:nil)
                        (column :initarg :column :type
                         (common-lisp:or column-identifier common-lisp:null)
                         :accessor %top-bottom-filter-column :initform
                         (common-lisp:error ":column is required"))
                        (filter-id :initarg :filter-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %top-bottom-filter-filter-id :initform
                         (common-lisp:error ":filter-id is required"))))
 (common-lisp:export
  (common-lisp:list 'top-bottom-filter 'make-top-bottom-filter))
 (common-lisp:defun make-top-bottom-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter-name time-granularity
                     aggregation-sort-configurations limit column filter-id)
   (common-lisp:apply #'common-lisp:make-instance 'top-bottom-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input top-bottom-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input top-bottom-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-id))
      (common-lisp:list
       (common-lisp:cons "FilterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-sort-configurations))
      (common-lisp:list
       (common-lisp:cons "AggregationSortConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-granularity))
      (common-lisp:list
       (common-lisp:cons "TimeGranularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input top-bottom-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass top-bottom-movers-computation common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or top-bottom-computation-type
                                         common-lisp:null)
                         :accessor %top-bottom-movers-computation-type
                         :initform (common-lisp:error ":type is required"))
                        (sort-order :initarg :sort-order :type
                         (common-lisp:or top-bottom-sort-order
                                         common-lisp:null)
                         :accessor %top-bottom-movers-computation-sort-order
                         :initform common-lisp:nil)
                        (mover-size :initarg :mover-size :type
                         (common-lisp:or
                          top-bottom-movers-computation-mover-size
                          common-lisp:null)
                         :accessor %top-bottom-movers-computation-mover-size
                         :initform common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or measure-field common-lisp:null)
                         :accessor %top-bottom-movers-computation-value
                         :initform common-lisp:nil)
                        (category :initarg :category :type
                         (common-lisp:or dimension-field common-lisp:null)
                         :accessor %top-bottom-movers-computation-category
                         :initform (common-lisp:error ":category is required"))
                        (time :initarg :time :type
                         (common-lisp:or dimension-field common-lisp:null)
                         :accessor %top-bottom-movers-computation-time
                         :initform (common-lisp:error ":time is required"))
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %top-bottom-movers-computation-name :initform
                         common-lisp:nil)
                        (computation-id :initarg :computation-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %top-bottom-movers-computation-computation-id
                         :initform
                         (common-lisp:error ":computation-id is required"))))
 (common-lisp:export
  (common-lisp:list 'top-bottom-movers-computation
                    'make-top-bottom-movers-computation))
 (common-lisp:defun make-top-bottom-movers-computation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type sort-order mover-size value category
                     time name computation-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'top-bottom-movers-computation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          top-bottom-movers-computation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          top-bottom-movers-computation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computation-id))
      (common-lisp:list
       (common-lisp:cons "ComputationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mover-size))
      (common-lisp:list
       (common-lisp:cons "MoverSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          top-bottom-movers-computation))
   common-lisp:nil))
(common-lisp:deftype top-bottom-movers-computation-mover-size ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass top-bottom-ranked-computation common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or top-bottom-computation-type
                                         common-lisp:null)
                         :accessor %top-bottom-ranked-computation-type
                         :initform (common-lisp:error ":type is required"))
                        (result-size :initarg :result-size :type
                         (common-lisp:or
                          top-bottom-ranked-computation-result-size
                          common-lisp:null)
                         :accessor %top-bottom-ranked-computation-result-size
                         :initform common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or measure-field common-lisp:null)
                         :accessor %top-bottom-ranked-computation-value
                         :initform common-lisp:nil)
                        (category :initarg :category :type
                         (common-lisp:or dimension-field common-lisp:null)
                         :accessor %top-bottom-ranked-computation-category
                         :initform (common-lisp:error ":category is required"))
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %top-bottom-ranked-computation-name :initform
                         common-lisp:nil)
                        (computation-id :initarg :computation-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %top-bottom-ranked-computation-computation-id
                         :initform
                         (common-lisp:error ":computation-id is required"))))
 (common-lisp:export
  (common-lisp:list 'top-bottom-ranked-computation
                    'make-top-bottom-ranked-computation))
 (common-lisp:defun make-top-bottom-ranked-computation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type result-size value category name
                     computation-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'top-bottom-ranked-computation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          top-bottom-ranked-computation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          top-bottom-ranked-computation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computation-id))
      (common-lisp:list
       (common-lisp:cons "ComputationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-size))
      (common-lisp:list
       (common-lisp:cons "ResultSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          top-bottom-ranked-computation))
   common-lisp:nil))
(common-lisp:deftype top-bottom-ranked-computation-result-size ()
  'common-lisp:integer)
(common-lisp:deftype top-bottom-sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass total-aggregation-computation common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or measure-field common-lisp:null)
                         :accessor %total-aggregation-computation-value
                         :initform (common-lisp:error ":value is required"))
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %total-aggregation-computation-name :initform
                         common-lisp:nil)
                        (computation-id :initarg :computation-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %total-aggregation-computation-computation-id
                         :initform
                         (common-lisp:error ":computation-id is required"))))
 (common-lisp:export
  (common-lisp:list 'total-aggregation-computation
                    'make-total-aggregation-computation))
 (common-lisp:defun make-total-aggregation-computation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name computation-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'total-aggregation-computation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          total-aggregation-computation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          total-aggregation-computation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computation-id))
      (common-lisp:list
       (common-lisp:cons "ComputationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          total-aggregation-computation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass total-options common-lisp:nil
                       ((total-cell-style :initarg :total-cell-style :type
                         (common-lisp:or table-cell-style common-lisp:null)
                         :accessor %total-options-total-cell-style :initform
                         common-lisp:nil)
                        (custom-label :initarg :custom-label :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %total-options-custom-label :initform common-lisp:nil)
                        (scroll-status :initarg :scroll-status :type
                         (common-lisp:or table-totals-scroll-status
                                         common-lisp:null)
                         :accessor %total-options-scroll-status :initform
                         common-lisp:nil)
                        (placement :initarg :placement :type
                         (common-lisp:or table-totals-placement
                                         common-lisp:null)
                         :accessor %total-options-placement :initform
                         common-lisp:nil)
                        (totals-visibility :initarg :totals-visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %total-options-totals-visibility :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'total-options 'make-total-options))
 (common-lisp:defun make-total-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key total-cell-style custom-label
                     scroll-status placement totals-visibility)
   (common-lisp:apply #'common-lisp:make-instance 'total-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input total-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input total-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'totals-visibility))
      (common-lisp:list
       (common-lisp:cons "TotalsVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement))
      (common-lisp:list
       (common-lisp:cons "Placement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scroll-status))
      (common-lisp:list
       (common-lisp:cons "ScrollStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-label))
      (common-lisp:list
       (common-lisp:cons "CustomLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-cell-style))
      (common-lisp:list
       (common-lisp:cons "TotalCellStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input total-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass transform-operation common-lisp:nil
                       ((untag-column-operation :initarg
                         :untag-column-operation :type
                         (common-lisp:or untag-column-operation
                                         common-lisp:null)
                         :accessor %transform-operation-untag-column-operation
                         :initform common-lisp:nil)
                        (tag-column-operation :initarg :tag-column-operation
                         :type
                         (common-lisp:or tag-column-operation common-lisp:null)
                         :accessor %transform-operation-tag-column-operation
                         :initform common-lisp:nil)
                        (cast-column-type-operation :initarg
                         :cast-column-type-operation :type
                         (common-lisp:or cast-column-type-operation
                                         common-lisp:null)
                         :accessor
                         %transform-operation-cast-column-type-operation
                         :initform common-lisp:nil)
                        (rename-column-operation :initarg
                         :rename-column-operation :type
                         (common-lisp:or rename-column-operation
                                         common-lisp:null)
                         :accessor %transform-operation-rename-column-operation
                         :initform common-lisp:nil)
                        (create-columns-operation :initarg
                         :create-columns-operation :type
                         (common-lisp:or create-columns-operation
                                         common-lisp:null)
                         :accessor
                         %transform-operation-create-columns-operation
                         :initform common-lisp:nil)
                        (filter-operation :initarg :filter-operation :type
                         (common-lisp:or filter-operation common-lisp:null)
                         :accessor %transform-operation-filter-operation
                         :initform common-lisp:nil)
                        (project-operation :initarg :project-operation :type
                         (common-lisp:or project-operation common-lisp:null)
                         :accessor %transform-operation-project-operation
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'transform-operation 'make-transform-operation))
 (common-lisp:defun make-transform-operation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key untag-column-operation
                     tag-column-operation cast-column-type-operation
                     rename-column-operation create-columns-operation
                     filter-operation project-operation)
   (common-lisp:apply #'common-lisp:make-instance 'transform-operation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transform-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transform-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-operation))
      (common-lisp:list
       (common-lisp:cons "ProjectOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-operation))
      (common-lisp:list
       (common-lisp:cons "FilterOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-columns-operation))
      (common-lisp:list
       (common-lisp:cons "CreateColumnsOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rename-column-operation))
      (common-lisp:list
       (common-lisp:cons "RenameColumnOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cast-column-type-operation))
      (common-lisp:list
       (common-lisp:cons "CastColumnTypeOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tag-column-operation))
      (common-lisp:list
       (common-lisp:cons "TagColumnOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'untag-column-operation))
      (common-lisp:list
       (common-lisp:cons "UntagColumnOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transform-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype transform-operation-list ()
   '(trivial-types:proper-list transform-operation))
 (common-lisp:defun |make-transform-operation-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list transform-operation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tree-map-aggregated-field-wells common-lisp:nil
                       ((colors :initarg :colors :type
                         (common-lisp:or tree-map-measure-field-list
                                         common-lisp:null)
                         :accessor %tree-map-aggregated-field-wells-colors
                         :initform common-lisp:nil)
                        (sizes :initarg :sizes :type
                         (common-lisp:or tree-map-measure-field-list
                                         common-lisp:null)
                         :accessor %tree-map-aggregated-field-wells-sizes
                         :initform common-lisp:nil)
                        (groups :initarg :groups :type
                         (common-lisp:or tree-map-dimension-field-list
                                         common-lisp:null)
                         :accessor %tree-map-aggregated-field-wells-groups
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'tree-map-aggregated-field-wells
                    'make-tree-map-aggregated-field-wells))
 (common-lisp:defun make-tree-map-aggregated-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key colors sizes groups)
   (common-lisp:apply #'common-lisp:make-instance
                      'tree-map-aggregated-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tree-map-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tree-map-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sizes))
      (common-lisp:list
       (common-lisp:cons "Sizes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'colors))
      (common-lisp:list
       (common-lisp:cons "Colors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tree-map-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tree-map-configuration common-lisp:nil
                       ((tooltip :initarg :tooltip :type
                         (common-lisp:or tooltip-options common-lisp:null)
                         :accessor %tree-map-configuration-tooltip :initform
                         common-lisp:nil)
                        (data-labels :initarg :data-labels :type
                         (common-lisp:or data-label-options common-lisp:null)
                         :accessor %tree-map-configuration-data-labels
                         :initform common-lisp:nil)
                        (legend :initarg :legend :type
                         (common-lisp:or legend-options common-lisp:null)
                         :accessor %tree-map-configuration-legend :initform
                         common-lisp:nil)
                        (color-scale :initarg :color-scale :type
                         (common-lisp:or color-scale common-lisp:null)
                         :accessor %tree-map-configuration-color-scale
                         :initform common-lisp:nil)
                        (color-label-options :initarg :color-label-options
                         :type
                         (common-lisp:or chart-axis-label-options
                                         common-lisp:null)
                         :accessor %tree-map-configuration-color-label-options
                         :initform common-lisp:nil)
                        (size-label-options :initarg :size-label-options :type
                         (common-lisp:or chart-axis-label-options
                                         common-lisp:null)
                         :accessor %tree-map-configuration-size-label-options
                         :initform common-lisp:nil)
                        (group-label-options :initarg :group-label-options
                         :type
                         (common-lisp:or chart-axis-label-options
                                         common-lisp:null)
                         :accessor %tree-map-configuration-group-label-options
                         :initform common-lisp:nil)
                        (sort-configuration :initarg :sort-configuration :type
                         (common-lisp:or tree-map-sort-configuration
                                         common-lisp:null)
                         :accessor %tree-map-configuration-sort-configuration
                         :initform common-lisp:nil)
                        (field-wells :initarg :field-wells :type
                         (common-lisp:or tree-map-field-wells common-lisp:null)
                         :accessor %tree-map-configuration-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'tree-map-configuration 'make-tree-map-configuration))
 (common-lisp:defun make-tree-map-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tooltip data-labels legend color-scale
                     color-label-options size-label-options group-label-options
                     sort-configuration field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'tree-map-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tree-map-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tree-map-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-label-options))
      (common-lisp:list
       (common-lisp:cons "GroupLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-label-options))
      (common-lisp:list
       (common-lisp:cons "SizeLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-label-options))
      (common-lisp:list
       (common-lisp:cons "ColorLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-scale))
      (common-lisp:list
       (common-lisp:cons "ColorScale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legend))
      (common-lisp:list
       (common-lisp:cons "Legend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-labels))
      (common-lisp:list
       (common-lisp:cons "DataLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip))
      (common-lisp:list
       (common-lisp:cons "Tooltip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tree-map-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tree-map-dimension-field-list ()
   '(trivial-types:proper-list dimension-field))
 (common-lisp:defun |make-tree-map-dimension-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tree-map-field-wells common-lisp:nil
                       ((tree-map-aggregated-field-wells :initarg
                         :tree-map-aggregated-field-wells :type
                         (common-lisp:or tree-map-aggregated-field-wells
                                         common-lisp:null)
                         :accessor
                         %tree-map-field-wells-tree-map-aggregated-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'tree-map-field-wells 'make-tree-map-field-wells))
 (common-lisp:defun make-tree-map-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tree-map-aggregated-field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'tree-map-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tree-map-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tree-map-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tree-map-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "TreeMapAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tree-map-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tree-map-measure-field-list ()
   '(trivial-types:proper-list measure-field))
 (common-lisp:defun |make-tree-map-measure-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list measure-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tree-map-sort-configuration common-lisp:nil
                       ((tree-map-group-items-limit-configuration :initarg
                         :tree-map-group-items-limit-configuration :type
                         (common-lisp:or items-limit-configuration
                                         common-lisp:null)
                         :accessor
                         %tree-map-sort-configuration-tree-map-group-items-limit-configuration
                         :initform common-lisp:nil)
                        (tree-map-sort :initarg :tree-map-sort :type
                         (common-lisp:or field-sort-options-list
                                         common-lisp:null)
                         :accessor %tree-map-sort-configuration-tree-map-sort
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'tree-map-sort-configuration
                    'make-tree-map-sort-configuration))
 (common-lisp:defun make-tree-map-sort-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tree-map-group-items-limit-configuration
                     tree-map-sort)
   (common-lisp:apply #'common-lisp:make-instance 'tree-map-sort-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tree-map-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tree-map-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tree-map-sort))
      (common-lisp:list
       (common-lisp:cons "TreeMapSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tree-map-group-items-limit-configuration))
      (common-lisp:list
       (common-lisp:cons "TreeMapGroupItemsLimitConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tree-map-sort-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tree-map-visual common-lisp:nil
                       ((column-hierarchies :initarg :column-hierarchies :type
                         (common-lisp:or column-hierarchy-list
                                         common-lisp:null)
                         :accessor %tree-map-visual-column-hierarchies
                         :initform common-lisp:nil)
                        (actions :initarg :actions :type
                         (common-lisp:or visual-custom-action-list
                                         common-lisp:null)
                         :accessor %tree-map-visual-actions :initform
                         common-lisp:nil)
                        (chart-configuration :initarg :chart-configuration
                         :type
                         (common-lisp:or tree-map-configuration
                                         common-lisp:null)
                         :accessor %tree-map-visual-chart-configuration
                         :initform common-lisp:nil)
                        (subtitle :initarg :subtitle :type
                         (common-lisp:or visual-subtitle-label-options
                                         common-lisp:null)
                         :accessor %tree-map-visual-subtitle :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or visual-title-label-options
                                         common-lisp:null)
                         :accessor %tree-map-visual-title :initform
                         common-lisp:nil)
                        (visual-id :initarg :visual-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %tree-map-visual-visual-id :initform
                         (common-lisp:error ":visual-id is required"))))
 (common-lisp:export (common-lisp:list 'tree-map-visual 'make-tree-map-visual))
 (common-lisp:defun make-tree-map-visual
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key column-hierarchies actions
                     chart-configuration subtitle title visual-id)
   (common-lisp:apply #'common-lisp:make-instance 'tree-map-visual
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tree-map-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tree-map-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-hierarchies))
      (common-lisp:list
       (common-lisp:cons "ColumnHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tree-map-visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass trend-arrow-options common-lisp:nil
                       ((visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %trend-arrow-options-visibility :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'trend-arrow-options 'make-trend-arrow-options))
 (common-lisp:defun make-trend-arrow-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visibility)
   (common-lisp:apply #'common-lisp:make-instance 'trend-arrow-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trend-arrow-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trend-arrow-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trend-arrow-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass twitter-parameters common-lisp:nil
                       ((max-rows :initarg :max-rows :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor %twitter-parameters-max-rows :initform
                         (common-lisp:error ":max-rows is required"))
                        (query :initarg :query :type
                         (common-lisp:or query common-lisp:null) :accessor
                         %twitter-parameters-query :initform
                         (common-lisp:error ":query is required"))))
 (common-lisp:export
  (common-lisp:list 'twitter-parameters 'make-twitter-parameters))
 (common-lisp:defun make-twitter-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-rows query)
   (common-lisp:apply #'common-lisp:make-instance 'twitter-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input twitter-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input twitter-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query))
      (common-lisp:list
       (common-lisp:cons "Query"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-rows))
      (common-lisp:list
       (common-lisp:cons "MaxRows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input twitter-parameters))
   common-lisp:nil))
(common-lisp:deftype type-cast-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass typography common-lisp:nil
                       ((font-families :initarg :font-families :type
                         (common-lisp:or font-list common-lisp:null) :accessor
                         %typography-font-families :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'typography 'make-typography))
 (common-lisp:defun make-typography
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key font-families)
   (common-lisp:apply #'common-lisp:make-instance 'typography
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input typography))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input typography))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-families))
      (common-lisp:list
       (common-lisp:cons "FontFamilies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input typography))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass uicolor-palette common-lisp:nil
                       ((measure-foreground :initarg :measure-foreground :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %uicolor-palette-measure-foreground :initform
                         common-lisp:nil)
                        (measure :initarg :measure :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %uicolor-palette-measure :initform common-lisp:nil)
                        (dimension-foreground :initarg :dimension-foreground
                         :type (common-lisp:or hex-color common-lisp:null)
                         :accessor %uicolor-palette-dimension-foreground
                         :initform common-lisp:nil)
                        (dimension :initarg :dimension :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %uicolor-palette-dimension :initform common-lisp:nil)
                        (success-foreground :initarg :success-foreground :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %uicolor-palette-success-foreground :initform
                         common-lisp:nil)
                        (success :initarg :success :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %uicolor-palette-success :initform common-lisp:nil)
                        (warning-foreground :initarg :warning-foreground :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %uicolor-palette-warning-foreground :initform
                         common-lisp:nil)
                        (warning :initarg :warning :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %uicolor-palette-warning :initform common-lisp:nil)
                        (danger-foreground :initarg :danger-foreground :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %uicolor-palette-danger-foreground :initform
                         common-lisp:nil)
                        (danger :initarg :danger :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %uicolor-palette-danger :initform common-lisp:nil)
                        (accent-foreground :initarg :accent-foreground :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %uicolor-palette-accent-foreground :initform
                         common-lisp:nil)
                        (accent :initarg :accent :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %uicolor-palette-accent :initform common-lisp:nil)
                        (secondary-background :initarg :secondary-background
                         :type (common-lisp:or hex-color common-lisp:null)
                         :accessor %uicolor-palette-secondary-background
                         :initform common-lisp:nil)
                        (secondary-foreground :initarg :secondary-foreground
                         :type (common-lisp:or hex-color common-lisp:null)
                         :accessor %uicolor-palette-secondary-foreground
                         :initform common-lisp:nil)
                        (primary-background :initarg :primary-background :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %uicolor-palette-primary-background :initform
                         common-lisp:nil)
                        (primary-foreground :initarg :primary-foreground :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %uicolor-palette-primary-foreground :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'uicolor-palette 'make-uicolor-palette))
 (common-lisp:defun make-uicolor-palette
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key measure-foreground measure
                     dimension-foreground dimension success-foreground success
                     warning-foreground warning danger-foreground danger
                     accent-foreground accent secondary-background
                     secondary-foreground primary-background
                     primary-foreground)
   (common-lisp:apply #'common-lisp:make-instance 'uicolor-palette
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input uicolor-palette))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input uicolor-palette))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-foreground))
      (common-lisp:list
       (common-lisp:cons "PrimaryForeground"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-background))
      (common-lisp:list
       (common-lisp:cons "PrimaryBackground"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secondary-foreground))
      (common-lisp:list
       (common-lisp:cons "SecondaryForeground"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secondary-background))
      (common-lisp:list
       (common-lisp:cons "SecondaryBackground"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accent))
      (common-lisp:list
       (common-lisp:cons "Accent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accent-foreground))
      (common-lisp:list
       (common-lisp:cons "AccentForeground"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'danger))
      (common-lisp:list
       (common-lisp:cons "Danger"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'danger-foreground))
      (common-lisp:list
       (common-lisp:cons "DangerForeground"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warning))
      (common-lisp:list
       (common-lisp:cons "Warning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warning-foreground))
      (common-lisp:list
       (common-lisp:cons "WarningForeground"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success))
      (common-lisp:list
       (common-lisp:cons "Success"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-foreground))
      (common-lisp:list
       (common-lisp:cons "SuccessForeground"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension))
      (common-lisp:list
       (common-lisp:cons "Dimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dimension-foreground))
      (common-lisp:list
       (common-lisp:cons "DimensionForeground"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'measure))
      (common-lisp:list
       (common-lisp:cons "Measure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'measure-foreground))
      (common-lisp:list
       (common-lisp:cons "MeasureForeground"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input uicolor-palette))
   common-lisp:nil))
(common-lisp:deftype urloperation-template () 'common-lisp:string)
(common-lisp:deftype urltarget-configuration () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass unaggregated-field common-lisp:nil
                       ((format-configuration :initarg :format-configuration
                         :type
                         (common-lisp:or format-configuration common-lisp:null)
                         :accessor %unaggregated-field-format-configuration
                         :initform common-lisp:nil)
                        (column :initarg :column :type
                         (common-lisp:or column-identifier common-lisp:null)
                         :accessor %unaggregated-field-column :initform
                         (common-lisp:error ":column is required"))
                        (field-id :initarg :field-id :type
                         (common-lisp:or field-id common-lisp:null) :accessor
                         %unaggregated-field-field-id :initform
                         (common-lisp:error ":field-id is required"))))
 (common-lisp:export
  (common-lisp:list 'unaggregated-field 'make-unaggregated-field))
 (common-lisp:defun make-unaggregated-field
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key format-configuration column field-id)
   (common-lisp:apply #'common-lisp:make-instance 'unaggregated-field
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input unaggregated-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input unaggregated-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-id))
      (common-lisp:list
       (common-lisp:cons "FieldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'format-configuration))
      (common-lisp:list
       (common-lisp:cons "FormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input unaggregated-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unaggregated-field-list ()
   '(trivial-types:proper-list unaggregated-field))
 (common-lisp:defun |make-unaggregated-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list unaggregated-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype unicode-icon () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass unique-values-computation common-lisp:nil
                       ((category :initarg :category :type
                         (common-lisp:or dimension-field common-lisp:null)
                         :accessor %unique-values-computation-category
                         :initform (common-lisp:error ":category is required"))
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %unique-values-computation-name :initform
                         common-lisp:nil)
                        (computation-id :initarg :computation-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %unique-values-computation-computation-id
                         :initform
                         (common-lisp:error ":computation-id is required"))))
 (common-lisp:export
  (common-lisp:list 'unique-values-computation
                    'make-unique-values-computation))
 (common-lisp:defun make-unique-values-computation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key category name computation-id)
   (common-lisp:apply #'common-lisp:make-instance 'unique-values-computation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unique-values-computation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unique-values-computation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computation-id))
      (common-lisp:list
       (common-lisp:cons "ComputationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unique-values-computation))
   common-lisp:nil))
(common-lisp:deftype unlimited-pixel-length () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unsupported-pricing-plan-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-pricing-plan-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       unsupported-pricing-plan-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'unsupported-pricing-plan-exception
                    'unsupported-pricing-plan-exception-message
                    'unsupported-pricing-plan-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-user-edition-exception
     (quicksight-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-user-edition-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       unsupported-user-edition-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'unsupported-user-edition-exception
                    'unsupported-user-edition-exception-message
                    'unsupported-user-edition-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass untag-column-operation common-lisp:nil
                       ((tag-names :initarg :tag-names :type
                         (common-lisp:or column-tag-names common-lisp:null)
                         :accessor %untag-column-operation-tag-names :initform
                         (common-lisp:error ":tag-names is required"))
                        (column-name :initarg :column-name :type
                         (common-lisp:or column-name common-lisp:null)
                         :accessor %untag-column-operation-column-name
                         :initform
                         (common-lisp:error ":column-name is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-column-operation 'make-untag-column-operation))
 (common-lisp:defun make-untag-column-operation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-names column-name)
   (common-lisp:apply #'common-lisp:make-instance 'untag-column-operation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-column-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-column-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "ColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-names))
      (common-lisp:list
       (common-lisp:cons "TagNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-column-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %untag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %untag-resource-response-status :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %untag-resource-response-request-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-account-customization-request common-lisp:nil
                       ((account-customization :initarg :account-customization
                         :type
                         (common-lisp:or account-customization
                                         common-lisp:null)
                         :accessor
                         %update-account-customization-request-account-customization
                         :initform
                         (common-lisp:error
                          ":account-customization is required"))
                        (namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %update-account-customization-request-namespace
                         :initform common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %update-account-customization-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-account-customization-request
                    'make-update-account-customization-request))
 (common-lisp:defun make-update-account-customization-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-customization namespace
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-account-customization-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-account-customization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-account-customization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-customization))
      (common-lisp:list
       (common-lisp:cons "AccountCustomization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-account-customization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-account-customization-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor
                         %update-account-customization-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-account-customization-response-request-id
                         :initform common-lisp:nil)
                        (account-customization :initarg :account-customization
                         :type
                         (common-lisp:or account-customization
                                         common-lisp:null)
                         :accessor
                         %update-account-customization-response-account-customization
                         :initform common-lisp:nil)
                        (namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %update-account-customization-response-namespace
                         :initform common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %update-account-customization-response-aws-account-id
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-account-customization-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-account-customization-response
                    'make-update-account-customization-response))
 (common-lisp:defun make-update-account-customization-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id account-customization
                     namespace aws-account-id arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-account-customization-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-account-customization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-account-customization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "AwsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-customization))
      (common-lisp:list
       (common-lisp:cons "AccountCustomization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-account-customization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-account-settings-request common-lisp:nil
                       ((termination-protection-enabled :initarg
                         :termination-protection-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %update-account-settings-request-termination-protection-enabled
                         :initform common-lisp:nil)
                        (notification-email :initarg :notification-email :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-account-settings-request-notification-email
                         :initform common-lisp:nil)
                        (default-namespace :initarg :default-namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %update-account-settings-request-default-namespace
                         :initform
                         (common-lisp:error ":default-namespace is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %update-account-settings-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-account-settings-request
                    'make-update-account-settings-request))
 (common-lisp:defun make-update-account-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key termination-protection-enabled
                     notification-email default-namespace aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-account-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-account-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-account-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-namespace))
      (common-lisp:list
       (common-lisp:cons "DefaultNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-email))
      (common-lisp:list
       (common-lisp:cons "NotificationEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'termination-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "TerminationProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-account-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-account-settings-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %update-account-settings-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-account-settings-response-request-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-account-settings-response
                    'make-update-account-settings-response))
 (common-lisp:defun make-update-account-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-account-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-account-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-account-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-account-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-analysis-permissions-request common-lisp:nil
                       ((revoke-permissions :initarg :revoke-permissions :type
                         (common-lisp:or update-resource-permission-list
                                         common-lisp:null)
                         :accessor
                         %update-analysis-permissions-request-revoke-permissions
                         :initform common-lisp:nil)
                        (grant-permissions :initarg :grant-permissions :type
                         (common-lisp:or update-resource-permission-list
                                         common-lisp:null)
                         :accessor
                         %update-analysis-permissions-request-grant-permissions
                         :initform common-lisp:nil)
                        (analysis-id :initarg :analysis-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %update-analysis-permissions-request-analysis-id
                         :initform
                         (common-lisp:error ":analysis-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %update-analysis-permissions-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-analysis-permissions-request
                    'make-update-analysis-permissions-request))
 (common-lisp:defun make-update-analysis-permissions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revoke-permissions grant-permissions
                     analysis-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-analysis-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-analysis-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-analysis-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-permissions))
      (common-lisp:list
       (common-lisp:cons "GrantPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoke-permissions))
      (common-lisp:list
       (common-lisp:cons "RevokePermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-analysis-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-analysis-permissions-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %update-analysis-permissions-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-analysis-permissions-response-request-id
                         :initform common-lisp:nil)
                        (permissions :initarg :permissions :type
                         (common-lisp:or resource-permission-list
                                         common-lisp:null)
                         :accessor
                         %update-analysis-permissions-response-permissions
                         :initform common-lisp:nil)
                        (analysis-id :initarg :analysis-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %update-analysis-permissions-response-analysis-id
                         :initform common-lisp:nil)
                        (analysis-arn :initarg :analysis-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-analysis-permissions-response-analysis-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-analysis-permissions-response
                    'make-update-analysis-permissions-response))
 (common-lisp:defun make-update-analysis-permissions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id permissions analysis-id
                     analysis-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-analysis-permissions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-analysis-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-analysis-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-arn))
      (common-lisp:list
       (common-lisp:cons "AnalysisArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-id))
      (common-lisp:list
       (common-lisp:cons "AnalysisId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-analysis-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-analysis-request common-lisp:nil
                       ((definition :initarg :definition :type
                         (common-lisp:or analysis-definition common-lisp:null)
                         :accessor %update-analysis-request-definition
                         :initform common-lisp:nil)
                        (theme-arn :initarg :theme-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-analysis-request-theme-arn :initform
                         common-lisp:nil)
                        (source-entity :initarg :source-entity :type
                         (common-lisp:or analysis-source-entity
                                         common-lisp:null)
                         :accessor %update-analysis-request-source-entity
                         :initform common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or parameters common-lisp:null) :accessor
                         %update-analysis-request-parameters :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or analysis-name common-lisp:null)
                         :accessor %update-analysis-request-name :initform
                         (common-lisp:error ":name is required"))
                        (analysis-id :initarg :analysis-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %update-analysis-request-analysis-id
                         :initform
                         (common-lisp:error ":analysis-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %update-analysis-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-analysis-request 'make-update-analysis-request))
 (common-lisp:defun make-update-analysis-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key definition theme-arn source-entity
                     parameters name analysis-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-analysis-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-analysis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-analysis-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-entity))
      (common-lisp:list
       (common-lisp:cons "SourceEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-arn))
      (common-lisp:list
       (common-lisp:cons "ThemeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-analysis-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-analysis-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-analysis-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %update-analysis-response-status :initform
                         common-lisp:nil)
                        (update-status :initarg :update-status :type
                         (common-lisp:or resource-status common-lisp:null)
                         :accessor %update-analysis-response-update-status
                         :initform common-lisp:nil)
                        (analysis-id :initarg :analysis-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %update-analysis-response-analysis-id
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-analysis-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-analysis-response 'make-update-analysis-response))
 (common-lisp:defun make-update-analysis-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status update-status
                     analysis-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-analysis-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-analysis-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-analysis-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-id))
      (common-lisp:list
       (common-lisp:cons "AnalysisId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-status))
      (common-lisp:list
       (common-lisp:cons "UpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-analysis-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-dashboard-permissions-request common-lisp:nil
                       ((revoke-link-permissions :initarg
                         :revoke-link-permissions :type
                         (common-lisp:or update-link-permission-list
                                         common-lisp:null)
                         :accessor
                         %update-dashboard-permissions-request-revoke-link-permissions
                         :initform common-lisp:nil)
                        (grant-link-permissions :initarg
                         :grant-link-permissions :type
                         (common-lisp:or update-link-permission-list
                                         common-lisp:null)
                         :accessor
                         %update-dashboard-permissions-request-grant-link-permissions
                         :initform common-lisp:nil)
                        (revoke-permissions :initarg :revoke-permissions :type
                         (common-lisp:or update-resource-permission-list
                                         common-lisp:null)
                         :accessor
                         %update-dashboard-permissions-request-revoke-permissions
                         :initform common-lisp:nil)
                        (grant-permissions :initarg :grant-permissions :type
                         (common-lisp:or update-resource-permission-list
                                         common-lisp:null)
                         :accessor
                         %update-dashboard-permissions-request-grant-permissions
                         :initform common-lisp:nil)
                        (dashboard-id :initarg :dashboard-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %update-dashboard-permissions-request-dashboard-id
                         :initform
                         (common-lisp:error ":dashboard-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %update-dashboard-permissions-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-dashboard-permissions-request
                    'make-update-dashboard-permissions-request))
 (common-lisp:defun make-update-dashboard-permissions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revoke-link-permissions
                     grant-link-permissions revoke-permissions
                     grant-permissions dashboard-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-dashboard-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-permissions))
      (common-lisp:list
       (common-lisp:cons "GrantPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoke-permissions))
      (common-lisp:list
       (common-lisp:cons "RevokePermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'grant-link-permissions))
      (common-lisp:list
       (common-lisp:cons "GrantLinkPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'revoke-link-permissions))
      (common-lisp:list
       (common-lisp:cons "RevokeLinkPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-dashboard-permissions-response common-lisp:nil
                       ((link-sharing-configuration :initarg
                         :link-sharing-configuration :type
                         (common-lisp:or link-sharing-configuration
                                         common-lisp:null)
                         :accessor
                         %update-dashboard-permissions-response-link-sharing-configuration
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor
                         %update-dashboard-permissions-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-dashboard-permissions-response-request-id
                         :initform common-lisp:nil)
                        (permissions :initarg :permissions :type
                         (common-lisp:or resource-permission-list
                                         common-lisp:null)
                         :accessor
                         %update-dashboard-permissions-response-permissions
                         :initform common-lisp:nil)
                        (dashboard-id :initarg :dashboard-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %update-dashboard-permissions-response-dashboard-id
                         :initform common-lisp:nil)
                        (dashboard-arn :initarg :dashboard-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-dashboard-permissions-response-dashboard-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-dashboard-permissions-response
                    'make-update-dashboard-permissions-response))
 (common-lisp:defun make-update-dashboard-permissions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key link-sharing-configuration status
                     request-id permissions dashboard-id dashboard-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-dashboard-permissions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-arn))
      (common-lisp:list
       (common-lisp:cons "DashboardArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-id))
      (common-lisp:list
       (common-lisp:cons "DashboardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'link-sharing-configuration))
      (common-lisp:list
       (common-lisp:cons "LinkSharingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-dashboard-published-version-request
                       common-lisp:nil
                       ((version-number :initarg :version-number :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor
                         %update-dashboard-published-version-request-version-number
                         :initform
                         (common-lisp:error ":version-number is required"))
                        (dashboard-id :initarg :dashboard-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %update-dashboard-published-version-request-dashboard-id
                         :initform
                         (common-lisp:error ":dashboard-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %update-dashboard-published-version-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-dashboard-published-version-request
                    'make-update-dashboard-published-version-request))
 (common-lisp:defun make-update-dashboard-published-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-number dashboard-id
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-dashboard-published-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-published-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-published-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-published-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-dashboard-published-version-response
                       common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-dashboard-published-version-response-request-id
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor
                         %update-dashboard-published-version-response-status
                         :initform common-lisp:nil)
                        (dashboard-arn :initarg :dashboard-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-dashboard-published-version-response-dashboard-arn
                         :initform common-lisp:nil)
                        (dashboard-id :initarg :dashboard-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %update-dashboard-published-version-response-dashboard-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-dashboard-published-version-response
                    'make-update-dashboard-published-version-response))
 (common-lisp:defun make-update-dashboard-published-version-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status dashboard-arn
                     dashboard-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-dashboard-published-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-published-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-published-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-id))
      (common-lisp:list
       (common-lisp:cons "DashboardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-arn))
      (common-lisp:list
       (common-lisp:cons "DashboardArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-published-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-dashboard-request common-lisp:nil
                       ((definition :initarg :definition :type
                         (common-lisp:or dashboard-version-definition
                                         common-lisp:null)
                         :accessor %update-dashboard-request-definition
                         :initform common-lisp:nil)
                        (theme-arn :initarg :theme-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-dashboard-request-theme-arn :initform
                         common-lisp:nil)
                        (dashboard-publish-options :initarg
                         :dashboard-publish-options :type
                         (common-lisp:or dashboard-publish-options
                                         common-lisp:null)
                         :accessor
                         %update-dashboard-request-dashboard-publish-options
                         :initform common-lisp:nil)
                        (version-description :initarg :version-description
                         :type
                         (common-lisp:or version-description common-lisp:null)
                         :accessor
                         %update-dashboard-request-version-description
                         :initform common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or parameters common-lisp:null) :accessor
                         %update-dashboard-request-parameters :initform
                         common-lisp:nil)
                        (source-entity :initarg :source-entity :type
                         (common-lisp:or dashboard-source-entity
                                         common-lisp:null)
                         :accessor %update-dashboard-request-source-entity
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or dashboard-name common-lisp:null)
                         :accessor %update-dashboard-request-name :initform
                         (common-lisp:error ":name is required"))
                        (dashboard-id :initarg :dashboard-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %update-dashboard-request-dashboard-id
                         :initform
                         (common-lisp:error ":dashboard-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %update-dashboard-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-dashboard-request 'make-update-dashboard-request))
 (common-lisp:defun make-update-dashboard-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key definition theme-arn
                     dashboard-publish-options version-description parameters
                     source-entity name dashboard-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-dashboard-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-entity))
      (common-lisp:list
       (common-lisp:cons "SourceEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-description))
      (common-lisp:list
       (common-lisp:cons "VersionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dashboard-publish-options))
      (common-lisp:list
       (common-lisp:cons "DashboardPublishOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-arn))
      (common-lisp:list
       (common-lisp:cons "ThemeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-dashboard-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-dashboard-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %update-dashboard-response-status :initform
                         common-lisp:nil)
                        (creation-status :initarg :creation-status :type
                         (common-lisp:or resource-status common-lisp:null)
                         :accessor %update-dashboard-response-creation-status
                         :initform common-lisp:nil)
                        (dashboard-id :initarg :dashboard-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %update-dashboard-response-dashboard-id
                         :initform common-lisp:nil)
                        (version-arn :initarg :version-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-dashboard-response-version-arn :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-dashboard-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-dashboard-response
                    'make-update-dashboard-response))
 (common-lisp:defun make-update-dashboard-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status creation-status
                     dashboard-id version-arn arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-dashboard-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-arn))
      (common-lisp:list
       (common-lisp:cons "VersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-id))
      (common-lisp:list
       (common-lisp:cons "DashboardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-status))
      (common-lisp:list
       (common-lisp:cons "CreationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-set-permissions-request common-lisp:nil
                       ((revoke-permissions :initarg :revoke-permissions :type
                         (common-lisp:or resource-permission-list
                                         common-lisp:null)
                         :accessor
                         %update-data-set-permissions-request-revoke-permissions
                         :initform common-lisp:nil)
                        (grant-permissions :initarg :grant-permissions :type
                         (common-lisp:or resource-permission-list
                                         common-lisp:null)
                         :accessor
                         %update-data-set-permissions-request-grant-permissions
                         :initform common-lisp:nil)
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %update-data-set-permissions-request-data-set-id
                         :initform
                         (common-lisp:error ":data-set-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %update-data-set-permissions-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-data-set-permissions-request
                    'make-update-data-set-permissions-request))
 (common-lisp:defun make-update-data-set-permissions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revoke-permissions grant-permissions
                     data-set-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-data-set-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-set-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-set-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-permissions))
      (common-lisp:list
       (common-lisp:cons "GrantPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoke-permissions))
      (common-lisp:list
       (common-lisp:cons "RevokePermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-set-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-set-permissions-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %update-data-set-permissions-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-data-set-permissions-response-request-id
                         :initform common-lisp:nil)
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %update-data-set-permissions-response-data-set-id
                         :initform common-lisp:nil)
                        (data-set-arn :initarg :data-set-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-data-set-permissions-response-data-set-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-data-set-permissions-response
                    'make-update-data-set-permissions-response))
 (common-lisp:defun make-update-data-set-permissions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id data-set-id
                     data-set-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-data-set-permissions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-set-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-set-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-arn))
      (common-lisp:list
       (common-lisp:cons "DataSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-set-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-set-request common-lisp:nil
                       ((data-set-usage-configuration :initarg
                         :data-set-usage-configuration :type
                         (common-lisp:or data-set-usage-configuration
                                         common-lisp:null)
                         :accessor
                         %update-data-set-request-data-set-usage-configuration
                         :initform common-lisp:nil)
                        (column-level-permission-rules :initarg
                         :column-level-permission-rules :type
                         (common-lisp:or column-level-permission-rule-list
                                         common-lisp:null)
                         :accessor
                         %update-data-set-request-column-level-permission-rules
                         :initform common-lisp:nil)
                        (row-level-permission-tag-configuration :initarg
                         :row-level-permission-tag-configuration :type
                         (common-lisp:or row-level-permission-tag-configuration
                                         common-lisp:null)
                         :accessor
                         %update-data-set-request-row-level-permission-tag-configuration
                         :initform common-lisp:nil)
                        (row-level-permission-data-set :initarg
                         :row-level-permission-data-set :type
                         (common-lisp:or row-level-permission-data-set
                                         common-lisp:null)
                         :accessor
                         %update-data-set-request-row-level-permission-data-set
                         :initform common-lisp:nil)
                        (field-folders :initarg :field-folders :type
                         (common-lisp:or field-folder-map common-lisp:null)
                         :accessor %update-data-set-request-field-folders
                         :initform common-lisp:nil)
                        (column-groups :initarg :column-groups :type
                         (common-lisp:or column-group-list common-lisp:null)
                         :accessor %update-data-set-request-column-groups
                         :initform common-lisp:nil)
                        (import-mode :initarg :import-mode :type
                         (common-lisp:or data-set-import-mode common-lisp:null)
                         :accessor %update-data-set-request-import-mode
                         :initform
                         (common-lisp:error ":import-mode is required"))
                        (logical-table-map :initarg :logical-table-map :type
                         (common-lisp:or logical-table-map common-lisp:null)
                         :accessor %update-data-set-request-logical-table-map
                         :initform common-lisp:nil)
                        (physical-table-map :initarg :physical-table-map :type
                         (common-lisp:or physical-table-map common-lisp:null)
                         :accessor %update-data-set-request-physical-table-map
                         :initform
                         (common-lisp:error ":physical-table-map is required"))
                        (name :initarg :name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %update-data-set-request-name :initform
                         (common-lisp:error ":name is required"))
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %update-data-set-request-data-set-id
                         :initform
                         (common-lisp:error ":data-set-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %update-data-set-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-data-set-request 'make-update-data-set-request))
 (common-lisp:defun make-update-data-set-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-set-usage-configuration
                     column-level-permission-rules
                     row-level-permission-tag-configuration
                     row-level-permission-data-set field-folders column-groups
                     import-mode logical-table-map physical-table-map name
                     data-set-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-data-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'physical-table-map))
      (common-lisp:list
       (common-lisp:cons "PhysicalTableMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-table-map))
      (common-lisp:list
       (common-lisp:cons "LogicalTableMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-mode))
      (common-lisp:list
       (common-lisp:cons "ImportMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-groups))
      (common-lisp:list
       (common-lisp:cons "ColumnGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-folders))
      (common-lisp:list
       (common-lisp:cons "FieldFolders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'row-level-permission-data-set))
      (common-lisp:list
       (common-lisp:cons "RowLevelPermissionDataSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'row-level-permission-tag-configuration))
      (common-lisp:list
       (common-lisp:cons "RowLevelPermissionTagConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-level-permission-rules))
      (common-lisp:list
       (common-lisp:cons "ColumnLevelPermissionRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-set-usage-configuration))
      (common-lisp:list
       (common-lisp:cons "DataSetUsageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-set-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %update-data-set-response-status :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-data-set-response-request-id :initform
                         common-lisp:nil)
                        (ingestion-id :initarg :ingestion-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %update-data-set-response-ingestion-id
                         :initform common-lisp:nil)
                        (ingestion-arn :initarg :ingestion-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-data-set-response-ingestion-arn :initform
                         common-lisp:nil)
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %update-data-set-response-data-set-id
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-data-set-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-data-set-response 'make-update-data-set-response))
 (common-lisp:defun make-update-data-set-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id ingestion-id
                     ingestion-arn data-set-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-data-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "DataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-arn))
      (common-lisp:list
       (common-lisp:cons "IngestionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-id))
      (common-lisp:list
       (common-lisp:cons "IngestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-source-permissions-request common-lisp:nil
                       ((revoke-permissions :initarg :revoke-permissions :type
                         (common-lisp:or resource-permission-list
                                         common-lisp:null)
                         :accessor
                         %update-data-source-permissions-request-revoke-permissions
                         :initform common-lisp:nil)
                        (grant-permissions :initarg :grant-permissions :type
                         (common-lisp:or resource-permission-list
                                         common-lisp:null)
                         :accessor
                         %update-data-source-permissions-request-grant-permissions
                         :initform common-lisp:nil)
                        (data-source-id :initarg :data-source-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %update-data-source-permissions-request-data-source-id
                         :initform
                         (common-lisp:error ":data-source-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %update-data-source-permissions-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-data-source-permissions-request
                    'make-update-data-source-permissions-request))
 (common-lisp:defun make-update-data-source-permissions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revoke-permissions grant-permissions
                     data-source-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-data-source-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-permissions))
      (common-lisp:list
       (common-lisp:cons "GrantPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoke-permissions))
      (common-lisp:list
       (common-lisp:cons "RevokePermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-source-permissions-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor
                         %update-data-source-permissions-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-data-source-permissions-response-request-id
                         :initform common-lisp:nil)
                        (data-source-id :initarg :data-source-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %update-data-source-permissions-response-data-source-id
                         :initform common-lisp:nil)
                        (data-source-arn :initarg :data-source-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-data-source-permissions-response-data-source-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-data-source-permissions-response
                    'make-update-data-source-permissions-response))
 (common-lisp:defun make-update-data-source-permissions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id data-source-id
                     data-source-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-data-source-permissions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-arn))
      (common-lisp:list
       (common-lisp:cons "DataSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-source-request common-lisp:nil
                       ((ssl-properties :initarg :ssl-properties :type
                         (common-lisp:or ssl-properties common-lisp:null)
                         :accessor %update-data-source-request-ssl-properties
                         :initform common-lisp:nil)
                        (vpc-connection-properties :initarg
                         :vpc-connection-properties :type
                         (common-lisp:or vpc-connection-properties
                                         common-lisp:null)
                         :accessor
                         %update-data-source-request-vpc-connection-properties
                         :initform common-lisp:nil)
                        (credentials :initarg :credentials :type
                         (common-lisp:or data-source-credentials
                                         common-lisp:null)
                         :accessor %update-data-source-request-credentials
                         :initform common-lisp:nil)
                        (data-source-parameters :initarg
                         :data-source-parameters :type
                         (common-lisp:or data-source-parameters
                                         common-lisp:null)
                         :accessor
                         %update-data-source-request-data-source-parameters
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %update-data-source-request-name :initform
                         (common-lisp:error ":name is required"))
                        (data-source-id :initarg :data-source-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %update-data-source-request-data-source-id
                         :initform
                         (common-lisp:error ":data-source-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %update-data-source-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-data-source-request
                    'make-update-data-source-request))
 (common-lisp:defun make-update-data-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ssl-properties vpc-connection-properties
                     credentials data-source-parameters name data-source-id
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-data-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-parameters))
      (common-lisp:list
       (common-lisp:cons "DataSourceParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-connection-properties))
      (common-lisp:list
       (common-lisp:cons "VpcConnectionProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-properties))
      (common-lisp:list
       (common-lisp:cons "SslProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-source-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %update-data-source-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-data-source-response-request-id :initform
                         common-lisp:nil)
                        (update-status :initarg :update-status :type
                         (common-lisp:or resource-status common-lisp:null)
                         :accessor %update-data-source-response-update-status
                         :initform common-lisp:nil)
                        (data-source-id :initarg :data-source-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %update-data-source-response-data-source-id
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-data-source-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-data-source-response
                    'make-update-data-source-response))
 (common-lisp:defun make-update-data-source-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id update-status
                     data-source-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-data-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-status))
      (common-lisp:list
       (common-lisp:cons "UpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-folder-permissions-request common-lisp:nil
                       ((revoke-permissions :initarg :revoke-permissions :type
                         (common-lisp:or resource-permission-list
                                         common-lisp:null)
                         :accessor
                         %update-folder-permissions-request-revoke-permissions
                         :initform common-lisp:nil)
                        (grant-permissions :initarg :grant-permissions :type
                         (common-lisp:or resource-permission-list
                                         common-lisp:null)
                         :accessor
                         %update-folder-permissions-request-grant-permissions
                         :initform common-lisp:nil)
                        (folder-id :initarg :folder-id :type
                         (common-lisp:or restrictive-resource-id
                                         common-lisp:null)
                         :accessor %update-folder-permissions-request-folder-id
                         :initform
                         (common-lisp:error ":folder-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %update-folder-permissions-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-folder-permissions-request
                    'make-update-folder-permissions-request))
 (common-lisp:defun make-update-folder-permissions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revoke-permissions grant-permissions
                     folder-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-folder-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-folder-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-folder-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-permissions))
      (common-lisp:list
       (common-lisp:cons "GrantPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoke-permissions))
      (common-lisp:list
       (common-lisp:cons "RevokePermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-folder-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-folder-permissions-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-folder-permissions-response-request-id
                         :initform common-lisp:nil)
                        (permissions :initarg :permissions :type
                         (common-lisp:or resource-permission-list
                                         common-lisp:null)
                         :accessor
                         %update-folder-permissions-response-permissions
                         :initform common-lisp:nil)
                        (folder-id :initarg :folder-id :type
                         (common-lisp:or restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %update-folder-permissions-response-folder-id
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-folder-permissions-response-arn :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %update-folder-permissions-response-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-folder-permissions-response
                    'make-update-folder-permissions-response))
 (common-lisp:defun make-update-folder-permissions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id permissions folder-id arn
                     status)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-folder-permissions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-folder-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-folder-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-id))
      (common-lisp:list
       (common-lisp:cons "FolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-folder-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-folder-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or folder-name common-lisp:null)
                         :accessor %update-folder-request-name :initform
                         (common-lisp:error ":name is required"))
                        (folder-id :initarg :folder-id :type
                         (common-lisp:or restrictive-resource-id
                                         common-lisp:null)
                         :accessor %update-folder-request-folder-id :initform
                         (common-lisp:error ":folder-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %update-folder-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-folder-request 'make-update-folder-request))
 (common-lisp:defun make-update-folder-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name folder-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-folder-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-folder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-folder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-folder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-folder-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-folder-response-request-id :initform
                         common-lisp:nil)
                        (folder-id :initarg :folder-id :type
                         (common-lisp:or restrictive-resource-id
                                         common-lisp:null)
                         :accessor %update-folder-response-folder-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-folder-response-arn :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %update-folder-response-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-folder-response 'make-update-folder-response))
 (common-lisp:defun make-update-folder-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id folder-id arn status)
   (common-lisp:apply #'common-lisp:make-instance 'update-folder-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-folder-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-folder-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-id))
      (common-lisp:list
       (common-lisp:cons "FolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-folder-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-group-request common-lisp:nil
                       ((namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %update-group-request-namespace :initform
                         (common-lisp:error ":namespace is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %update-group-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))
                        (description :initarg :description :type
                         (common-lisp:or group-description common-lisp:null)
                         :accessor %update-group-request-description :initform
                         common-lisp:nil)
                        (group-name :initarg :group-name :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         %update-group-request-group-name :initform
                         (common-lisp:error ":group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-group-request 'make-update-group-request))
 (common-lisp:defun make-update-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key namespace aws-account-id description
                     group-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-group-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %update-group-response-status :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-group-response-request-id :initform
                         common-lisp:nil)
                        (group :initarg :group :type
                         (common-lisp:or group common-lisp:null) :accessor
                         %update-group-response-group :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-group-response 'make-update-group-response))
 (common-lisp:defun make-update-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id group)
   (common-lisp:apply #'common-lisp:make-instance 'update-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "Group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-iampolicy-assignment-request common-lisp:nil
                       ((identities :initarg :identities :type
                         (common-lisp:or identity-map common-lisp:null)
                         :accessor
                         %update-iampolicy-assignment-request-identities
                         :initform common-lisp:nil)
                        (policy-arn :initarg :policy-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-iampolicy-assignment-request-policy-arn
                         :initform common-lisp:nil)
                        (assignment-status :initarg :assignment-status :type
                         (common-lisp:or assignment-status common-lisp:null)
                         :accessor
                         %update-iampolicy-assignment-request-assignment-status
                         :initform common-lisp:nil)
                        (namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %update-iampolicy-assignment-request-namespace
                         :initform
                         (common-lisp:error ":namespace is required"))
                        (assignment-name :initarg :assignment-name :type
                         (common-lisp:or iampolicy-assignment-name
                                         common-lisp:null)
                         :accessor
                         %update-iampolicy-assignment-request-assignment-name
                         :initform
                         (common-lisp:error ":assignment-name is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %update-iampolicy-assignment-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-iampolicy-assignment-request
                    'make-update-iampolicy-assignment-request))
 (common-lisp:defun make-update-iampolicy-assignment-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key identities policy-arn assignment-status
                     namespace assignment-name aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-iampolicy-assignment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-iampolicy-assignment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-iampolicy-assignment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-status))
      (common-lisp:list
       (common-lisp:cons "AssignmentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identities))
      (common-lisp:list
       (common-lisp:cons "Identities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-iampolicy-assignment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-iampolicy-assignment-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %update-iampolicy-assignment-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-iampolicy-assignment-response-request-id
                         :initform common-lisp:nil)
                        (assignment-status :initarg :assignment-status :type
                         (common-lisp:or assignment-status common-lisp:null)
                         :accessor
                         %update-iampolicy-assignment-response-assignment-status
                         :initform common-lisp:nil)
                        (identities :initarg :identities :type
                         (common-lisp:or identity-map common-lisp:null)
                         :accessor
                         %update-iampolicy-assignment-response-identities
                         :initform common-lisp:nil)
                        (policy-arn :initarg :policy-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-iampolicy-assignment-response-policy-arn
                         :initform common-lisp:nil)
                        (assignment-id :initarg :assignment-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-iampolicy-assignment-response-assignment-id
                         :initform common-lisp:nil)
                        (assignment-name :initarg :assignment-name :type
                         (common-lisp:or iampolicy-assignment-name
                                         common-lisp:null)
                         :accessor
                         %update-iampolicy-assignment-response-assignment-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-iampolicy-assignment-response
                    'make-update-iampolicy-assignment-response))
 (common-lisp:defun make-update-iampolicy-assignment-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id assignment-status
                     identities policy-arn assignment-id assignment-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-iampolicy-assignment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-iampolicy-assignment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-iampolicy-assignment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-name))
      (common-lisp:list
       (common-lisp:cons "AssignmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-id))
      (common-lisp:list
       (common-lisp:cons "AssignmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identities))
      (common-lisp:list
       (common-lisp:cons "Identities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-status))
      (common-lisp:list
       (common-lisp:cons "AssignmentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-iampolicy-assignment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-ip-restriction-request common-lisp:nil
                       ((enabled :initarg :enabled :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor %update-ip-restriction-request-enabled
                         :initform common-lisp:nil)
                        (ip-restriction-rule-map :initarg
                         :ip-restriction-rule-map :type
                         (common-lisp:or ip-restriction-rule-map
                                         common-lisp:null)
                         :accessor
                         %update-ip-restriction-request-ip-restriction-rule-map
                         :initform common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %update-ip-restriction-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-ip-restriction-request
                    'make-update-ip-restriction-request))
 (common-lisp:defun make-update-ip-restriction-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled ip-restriction-rule-map
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-ip-restriction-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-ip-restriction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-ip-restriction-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ip-restriction-rule-map))
      (common-lisp:list
       (common-lisp:cons "IpRestrictionRuleMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-ip-restriction-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-ip-restriction-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %update-ip-restriction-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-ip-restriction-response-request-id :initform
                         common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %update-ip-restriction-response-aws-account-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-ip-restriction-response
                    'make-update-ip-restriction-response))
 (common-lisp:defun make-update-ip-restriction-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-ip-restriction-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-ip-restriction-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-ip-restriction-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "AwsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-ip-restriction-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-link-permission-list ()
   '(trivial-types:proper-list resource-permission))
 (common-lisp:defun |make-update-link-permission-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-permission))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass update-public-sharing-settings-request common-lisp:nil
                       ((public-sharing-enabled :initarg
                         :public-sharing-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %update-public-sharing-settings-request-public-sharing-enabled
                         :initform common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %update-public-sharing-settings-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-public-sharing-settings-request
                    'make-update-public-sharing-settings-request))
 (common-lisp:defun make-update-public-sharing-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key public-sharing-enabled aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-public-sharing-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-public-sharing-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-public-sharing-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-sharing-enabled))
      (common-lisp:list
       (common-lisp:cons "PublicSharingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-public-sharing-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-public-sharing-settings-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor
                         %update-public-sharing-settings-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-public-sharing-settings-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-public-sharing-settings-response
                    'make-update-public-sharing-settings-response))
 (common-lisp:defun make-update-public-sharing-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-public-sharing-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-public-sharing-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-public-sharing-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-public-sharing-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-refresh-schedule-request common-lisp:nil
                       ((schedule :initarg :schedule :type
                         (common-lisp:or refresh-schedule common-lisp:null)
                         :accessor %update-refresh-schedule-request-schedule
                         :initform (common-lisp:error ":schedule is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %update-refresh-schedule-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))
                        (data-set-id :initarg :data-set-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %update-refresh-schedule-request-data-set-id
                         :initform
                         (common-lisp:error ":data-set-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-refresh-schedule-request
                    'make-update-refresh-schedule-request))
 (common-lisp:defun make-update-refresh-schedule-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key schedule aws-account-id data-set-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-refresh-schedule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-refresh-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-refresh-schedule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-refresh-schedule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-refresh-schedule-response common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-refresh-schedule-response-arn :initform
                         common-lisp:nil)
                        (schedule-id :initarg :schedule-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-refresh-schedule-response-schedule-id
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-refresh-schedule-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %update-refresh-schedule-response-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-refresh-schedule-response
                    'make-update-refresh-schedule-response))
 (common-lisp:defun make-update-refresh-schedule-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn schedule-id request-id status)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-refresh-schedule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-refresh-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-refresh-schedule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-id))
      (common-lisp:list
       (common-lisp:cons "ScheduleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-refresh-schedule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-resource-permission-list ()
   '(trivial-types:proper-list resource-permission))
 (common-lisp:defun |make-update-resource-permission-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-permission))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass update-template-alias-request common-lisp:nil
                       ((template-version-number :initarg
                         :template-version-number :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor
                         %update-template-alias-request-template-version-number
                         :initform
                         (common-lisp:error
                          ":template-version-number is required"))
                        (alias-name :initarg :alias-name :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %update-template-alias-request-alias-name :initform
                         (common-lisp:error ":alias-name is required"))
                        (template-id :initarg :template-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %update-template-alias-request-template-id
                         :initform
                         (common-lisp:error ":template-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %update-template-alias-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-template-alias-request
                    'make-update-template-alias-request))
 (common-lisp:defun make-update-template-alias-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key template-version-number alias-name
                     template-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-template-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-template-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-template-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-version-number))
      (common-lisp:list
       (common-lisp:cons "TemplateVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-template-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-template-alias-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-template-alias-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %update-template-alias-response-status
                         :initform common-lisp:nil)
                        (template-alias :initarg :template-alias :type
                         (common-lisp:or template-alias common-lisp:null)
                         :accessor
                         %update-template-alias-response-template-alias
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-template-alias-response
                    'make-update-template-alias-response))
 (common-lisp:defun make-update-template-alias-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status template-alias)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-template-alias-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-template-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-template-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-alias))
      (common-lisp:list
       (common-lisp:cons "TemplateAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-template-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-template-permissions-request common-lisp:nil
                       ((revoke-permissions :initarg :revoke-permissions :type
                         (common-lisp:or update-resource-permission-list
                                         common-lisp:null)
                         :accessor
                         %update-template-permissions-request-revoke-permissions
                         :initform common-lisp:nil)
                        (grant-permissions :initarg :grant-permissions :type
                         (common-lisp:or update-resource-permission-list
                                         common-lisp:null)
                         :accessor
                         %update-template-permissions-request-grant-permissions
                         :initform common-lisp:nil)
                        (template-id :initarg :template-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %update-template-permissions-request-template-id
                         :initform
                         (common-lisp:error ":template-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %update-template-permissions-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-template-permissions-request
                    'make-update-template-permissions-request))
 (common-lisp:defun make-update-template-permissions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revoke-permissions grant-permissions
                     template-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-template-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-template-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-template-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-permissions))
      (common-lisp:list
       (common-lisp:cons "GrantPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoke-permissions))
      (common-lisp:list
       (common-lisp:cons "RevokePermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-template-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-template-permissions-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %update-template-permissions-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-template-permissions-response-request-id
                         :initform common-lisp:nil)
                        (permissions :initarg :permissions :type
                         (common-lisp:or resource-permission-list
                                         common-lisp:null)
                         :accessor
                         %update-template-permissions-response-permissions
                         :initform common-lisp:nil)
                        (template-arn :initarg :template-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-template-permissions-response-template-arn
                         :initform common-lisp:nil)
                        (template-id :initarg :template-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor
                         %update-template-permissions-response-template-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-template-permissions-response
                    'make-update-template-permissions-response))
 (common-lisp:defun make-update-template-permissions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id permissions
                     template-arn template-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-template-permissions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-template-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-template-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-template-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-template-request common-lisp:nil
                       ((definition :initarg :definition :type
                         (common-lisp:or template-version-definition
                                         common-lisp:null)
                         :accessor %update-template-request-definition
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor %update-template-request-name :initform
                         common-lisp:nil)
                        (version-description :initarg :version-description
                         :type
                         (common-lisp:or version-description common-lisp:null)
                         :accessor %update-template-request-version-description
                         :initform common-lisp:nil)
                        (source-entity :initarg :source-entity :type
                         (common-lisp:or template-source-entity
                                         common-lisp:null)
                         :accessor %update-template-request-source-entity
                         :initform common-lisp:nil)
                        (template-id :initarg :template-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %update-template-request-template-id
                         :initform
                         (common-lisp:error ":template-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %update-template-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-template-request 'make-update-template-request))
 (common-lisp:defun make-update-template-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key definition name version-description
                     source-entity template-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-entity))
      (common-lisp:list
       (common-lisp:cons "SourceEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-description))
      (common-lisp:list
       (common-lisp:cons "VersionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-template-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-template-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %update-template-response-status :initform
                         common-lisp:nil)
                        (creation-status :initarg :creation-status :type
                         (common-lisp:or resource-status common-lisp:null)
                         :accessor %update-template-response-creation-status
                         :initform common-lisp:nil)
                        (version-arn :initarg :version-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-template-response-version-arn :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-template-response-arn :initform
                         common-lisp:nil)
                        (template-id :initarg :template-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %update-template-response-template-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-template-response 'make-update-template-response))
 (common-lisp:defun make-update-template-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status creation-status
                     version-arn arn template-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-arn))
      (common-lisp:list
       (common-lisp:cons "VersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-status))
      (common-lisp:list
       (common-lisp:cons "CreationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-theme-alias-request common-lisp:nil
                       ((theme-version-number :initarg :theme-version-number
                         :type (common-lisp:or version-number common-lisp:null)
                         :accessor
                         %update-theme-alias-request-theme-version-number
                         :initform
                         (common-lisp:error
                          ":theme-version-number is required"))
                        (alias-name :initarg :alias-name :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %update-theme-alias-request-alias-name :initform
                         (common-lisp:error ":alias-name is required"))
                        (theme-id :initarg :theme-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %update-theme-alias-request-theme-id
                         :initform (common-lisp:error ":theme-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %update-theme-alias-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-theme-alias-request
                    'make-update-theme-alias-request))
 (common-lisp:defun make-update-theme-alias-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key theme-version-number alias-name theme-id
                     aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-theme-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'theme-version-number))
      (common-lisp:list
       (common-lisp:cons "ThemeVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-theme-alias-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-theme-alias-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %update-theme-alias-response-status
                         :initform common-lisp:nil)
                        (theme-alias :initarg :theme-alias :type
                         (common-lisp:or theme-alias common-lisp:null)
                         :accessor %update-theme-alias-response-theme-alias
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-theme-alias-response
                    'make-update-theme-alias-response))
 (common-lisp:defun make-update-theme-alias-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status theme-alias)
   (common-lisp:apply #'common-lisp:make-instance 'update-theme-alias-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-alias))
      (common-lisp:list
       (common-lisp:cons "ThemeAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-theme-permissions-request common-lisp:nil
                       ((revoke-permissions :initarg :revoke-permissions :type
                         (common-lisp:or update-resource-permission-list
                                         common-lisp:null)
                         :accessor
                         %update-theme-permissions-request-revoke-permissions
                         :initform common-lisp:nil)
                        (grant-permissions :initarg :grant-permissions :type
                         (common-lisp:or update-resource-permission-list
                                         common-lisp:null)
                         :accessor
                         %update-theme-permissions-request-grant-permissions
                         :initform common-lisp:nil)
                        (theme-id :initarg :theme-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %update-theme-permissions-request-theme-id
                         :initform (common-lisp:error ":theme-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %update-theme-permissions-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-theme-permissions-request
                    'make-update-theme-permissions-request))
 (common-lisp:defun make-update-theme-permissions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revoke-permissions grant-permissions
                     theme-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-theme-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-permissions))
      (common-lisp:list
       (common-lisp:cons "GrantPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoke-permissions))
      (common-lisp:list
       (common-lisp:cons "RevokePermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-theme-permissions-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %update-theme-permissions-response-status
                         :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-theme-permissions-response-request-id
                         :initform common-lisp:nil)
                        (permissions :initarg :permissions :type
                         (common-lisp:or resource-permission-list
                                         common-lisp:null)
                         :accessor
                         %update-theme-permissions-response-permissions
                         :initform common-lisp:nil)
                        (theme-arn :initarg :theme-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-theme-permissions-response-theme-arn :initform
                         common-lisp:nil)
                        (theme-id :initarg :theme-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %update-theme-permissions-response-theme-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-theme-permissions-response
                    'make-update-theme-permissions-response))
 (common-lisp:defun make-update-theme-permissions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id permissions theme-arn
                     theme-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-theme-permissions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-id))
      (common-lisp:list
       (common-lisp:cons "ThemeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-arn))
      (common-lisp:list
       (common-lisp:cons "ThemeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-theme-request common-lisp:nil
                       ((configuration :initarg :configuration :type
                         (common-lisp:or theme-configuration common-lisp:null)
                         :accessor %update-theme-request-configuration
                         :initform common-lisp:nil)
                        (version-description :initarg :version-description
                         :type
                         (common-lisp:or version-description common-lisp:null)
                         :accessor %update-theme-request-version-description
                         :initform common-lisp:nil)
                        (base-theme-id :initarg :base-theme-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %update-theme-request-base-theme-id
                         :initform
                         (common-lisp:error ":base-theme-id is required"))
                        (name :initarg :name :type
                         (common-lisp:or theme-name common-lisp:null) :accessor
                         %update-theme-request-name :initform common-lisp:nil)
                        (theme-id :initarg :theme-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %update-theme-request-theme-id :initform
                         (common-lisp:error ":theme-id is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %update-theme-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-theme-request 'make-update-theme-request))
 (common-lisp:defun make-update-theme-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configuration version-description
                     base-theme-id name theme-id aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-theme-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-theme-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-theme-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-theme-id))
      (common-lisp:list
       (common-lisp:cons "BaseThemeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-description))
      (common-lisp:list
       (common-lisp:cons "VersionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-theme-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-theme-response common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-theme-response-request-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %update-theme-response-status :initform
                         common-lisp:nil)
                        (creation-status :initarg :creation-status :type
                         (common-lisp:or resource-status common-lisp:null)
                         :accessor %update-theme-response-creation-status
                         :initform common-lisp:nil)
                        (version-arn :initarg :version-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-theme-response-version-arn :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-theme-response-arn :initform common-lisp:nil)
                        (theme-id :initarg :theme-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %update-theme-response-theme-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-theme-response 'make-update-theme-response))
 (common-lisp:defun make-update-theme-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id status creation-status
                     version-arn arn theme-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-theme-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-id))
      (common-lisp:list
       (common-lisp:cons "ThemeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-arn))
      (common-lisp:list
       (common-lisp:cons "VersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-status))
      (common-lisp:list
       (common-lisp:cons "CreationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-request common-lisp:nil
                       ((external-login-id :initarg :external-login-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-user-request-external-login-id :initform
                         common-lisp:nil)
                        (custom-federation-provider-url :initarg
                         :custom-federation-provider-url :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-user-request-custom-federation-provider-url
                         :initform common-lisp:nil)
                        (external-login-federation-provider-type :initarg
                         :external-login-federation-provider-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-user-request-external-login-federation-provider-type
                         :initform common-lisp:nil)
                        (unapply-custom-permissions :initarg
                         :unapply-custom-permissions :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %update-user-request-unapply-custom-permissions
                         :initform common-lisp:nil)
                        (custom-permissions-name :initarg
                         :custom-permissions-name :type
                         (common-lisp:or role-name common-lisp:null) :accessor
                         %update-user-request-custom-permissions-name :initform
                         common-lisp:nil)
                        (role :initarg :role :type
                         (common-lisp:or user-role common-lisp:null) :accessor
                         %update-user-request-role :initform
                         (common-lisp:error ":role is required"))
                        (email :initarg :email :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-user-request-email :initform
                         (common-lisp:error ":email is required"))
                        (namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %update-user-request-namespace :initform
                         (common-lisp:error ":namespace is required"))
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %update-user-request-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))
                        (user-name :initarg :user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %update-user-request-user-name :initform
                         (common-lisp:error ":user-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-user-request 'make-update-user-request))
 (common-lisp:defun make-update-user-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key external-login-id
                     custom-federation-provider-url
                     external-login-federation-provider-type
                     unapply-custom-permissions custom-permissions-name role
                     email namespace aws-account-id user-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-permissions-name))
      (common-lisp:list
       (common-lisp:cons "CustomPermissionsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unapply-custom-permissions))
      (common-lisp:list
       (common-lisp:cons "UnapplyCustomPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-login-federation-provider-type))
      (common-lisp:list
       (common-lisp:cons "ExternalLoginFederationProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-federation-provider-url))
      (common-lisp:list
       (common-lisp:cons "CustomFederationProviderUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-login-id))
      (common-lisp:list
       (common-lisp:cons "ExternalLoginId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %update-user-response-status :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-user-response-request-id :initform
                         common-lisp:nil)
                        (user :initarg :user :type
                         (common-lisp:or user common-lisp:null) :accessor
                         %update-user-response-user :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-user-response 'make-update-user-response))
 (common-lisp:defun make-update-user-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status request-id user)
   (common-lisp:apply #'common-lisp:make-instance 'update-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass upload-settings common-lisp:nil
                       ((delimiter :initarg :delimiter :type
                         (common-lisp:or delimiter common-lisp:null) :accessor
                         %upload-settings-delimiter :initform common-lisp:nil)
                        (text-qualifier :initarg :text-qualifier :type
                         (common-lisp:or text-qualifier common-lisp:null)
                         :accessor %upload-settings-text-qualifier :initform
                         common-lisp:nil)
                        (contains-header :initarg :contains-header :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %upload-settings-contains-header :initform
                         common-lisp:nil)
                        (start-from-row :initarg :start-from-row :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor %upload-settings-start-from-row :initform
                         common-lisp:nil)
                        (format :initarg :format :type
                         (common-lisp:or file-format common-lisp:null)
                         :accessor %upload-settings-format :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'upload-settings 'make-upload-settings))
 (common-lisp:defun make-upload-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key delimiter text-qualifier contains-header
                     start-from-row format)
   (common-lisp:apply #'common-lisp:make-instance 'upload-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input upload-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input upload-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-from-row))
      (common-lisp:list
       (common-lisp:cons "StartFromRow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contains-header))
      (common-lisp:list
       (common-lisp:cons "ContainsHeader"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-qualifier))
      (common-lisp:list
       (common-lisp:cons "TextQualifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input upload-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user common-lisp:nil
                       ((external-login-id :initarg :external-login-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %user-external-login-id :initform common-lisp:nil)
                        (external-login-federation-provider-url :initarg
                         :external-login-federation-provider-url :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %user-external-login-federation-provider-url :initform
                         common-lisp:nil)
                        (external-login-federation-provider-type :initarg
                         :external-login-federation-provider-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %user-external-login-federation-provider-type
                         :initform common-lisp:nil)
                        (custom-permissions-name :initarg
                         :custom-permissions-name :type
                         (common-lisp:or role-name common-lisp:null) :accessor
                         %user-custom-permissions-name :initform
                         common-lisp:nil)
                        (principal-id :initarg :principal-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %user-principal-id :initform common-lisp:nil)
                        (active :initarg :active :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %user-active :initform common-lisp:nil)
                        (identity-type :initarg :identity-type :type
                         (common-lisp:or identity-type common-lisp:null)
                         :accessor %user-identity-type :initform
                         common-lisp:nil)
                        (role :initarg :role :type
                         (common-lisp:or user-role common-lisp:null) :accessor
                         %user-role :initform common-lisp:nil)
                        (email :initarg :email :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %user-email :initform common-lisp:nil)
                        (user-name :initarg :user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %user-user-name :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %user-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'user 'make-user))
 (common-lisp:defun make-user
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key external-login-id
                     external-login-federation-provider-url
                     external-login-federation-provider-type
                     custom-permissions-name principal-id active identity-type
                     role email user-name arn)
   (common-lisp:apply #'common-lisp:make-instance 'user
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-type))
      (common-lisp:list
       (common-lisp:cons "IdentityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "Active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "PrincipalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-permissions-name))
      (common-lisp:list
       (common-lisp:cons "CustomPermissionsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-login-federation-provider-type))
      (common-lisp:list
       (common-lisp:cons "ExternalLoginFederationProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-login-federation-provider-url))
      (common-lisp:list
       (common-lisp:cons "ExternalLoginFederationProviderUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-login-id))
      (common-lisp:list
       (common-lisp:cons "ExternalLoginId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-list () '(trivial-types:proper-list user))
 (common-lisp:defun |make-user-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user))
   aws-sdk/generator/shape::members))
(common-lisp:deftype user-name () 'common-lisp:string)
(common-lisp:deftype user-role () 'common-lisp:string)
(common-lisp:deftype username () 'common-lisp:string)
(common-lisp:deftype value-when-unset-option () 'common-lisp:string)
(common-lisp:deftype version-description () 'common-lisp:string)
(common-lisp:deftype version-number () 'common-lisp:integer)
(common-lisp:deftype vertical-text-alignment () 'common-lisp:string)
(common-lisp:deftype visibility () 'common-lisp:string)
(common-lisp:deftype visible-panel-columns () 'common-lisp:integer)
(common-lisp:deftype visible-panel-rows () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass visible-range-options common-lisp:nil
                       ((percent-range :initarg :percent-range :type
                         (common-lisp:or percent-visible-range
                                         common-lisp:null)
                         :accessor %visible-range-options-percent-range
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'visible-range-options 'make-visible-range-options))
 (common-lisp:defun make-visible-range-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key percent-range)
   (common-lisp:apply #'common-lisp:make-instance 'visible-range-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          visible-range-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          visible-range-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-range))
      (common-lisp:list
       (common-lisp:cons "PercentRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          visible-range-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass visual common-lisp:nil
                       ((radar-chart-visual :initarg :radar-chart-visual :type
                         (common-lisp:or radar-chart-visual common-lisp:null)
                         :accessor %visual-radar-chart-visual :initform
                         common-lisp:nil)
                        (empty-visual :initarg :empty-visual :type
                         (common-lisp:or empty-visual common-lisp:null)
                         :accessor %visual-empty-visual :initform
                         common-lisp:nil)
                        (custom-content-visual :initarg :custom-content-visual
                         :type
                         (common-lisp:or custom-content-visual
                                         common-lisp:null)
                         :accessor %visual-custom-content-visual :initform
                         common-lisp:nil)
                        (sankey-diagram-visual :initarg :sankey-diagram-visual
                         :type
                         (common-lisp:or sankey-diagram-visual
                                         common-lisp:null)
                         :accessor %visual-sankey-diagram-visual :initform
                         common-lisp:nil)
                        (insight-visual :initarg :insight-visual :type
                         (common-lisp:or insight-visual common-lisp:null)
                         :accessor %visual-insight-visual :initform
                         common-lisp:nil)
                        (word-cloud-visual :initarg :word-cloud-visual :type
                         (common-lisp:or word-cloud-visual common-lisp:null)
                         :accessor %visual-word-cloud-visual :initform
                         common-lisp:nil)
                        (histogram-visual :initarg :histogram-visual :type
                         (common-lisp:or histogram-visual common-lisp:null)
                         :accessor %visual-histogram-visual :initform
                         common-lisp:nil)
                        (waterfall-visual :initarg :waterfall-visual :type
                         (common-lisp:or waterfall-visual common-lisp:null)
                         :accessor %visual-waterfall-visual :initform
                         common-lisp:nil)
                        (box-plot-visual :initarg :box-plot-visual :type
                         (common-lisp:or box-plot-visual common-lisp:null)
                         :accessor %visual-box-plot-visual :initform
                         common-lisp:nil)
                        (combo-chart-visual :initarg :combo-chart-visual :type
                         (common-lisp:or combo-chart-visual common-lisp:null)
                         :accessor %visual-combo-chart-visual :initform
                         common-lisp:nil)
                        (scatter-plot-visual :initarg :scatter-plot-visual
                         :type
                         (common-lisp:or scatter-plot-visual common-lisp:null)
                         :accessor %visual-scatter-plot-visual :initform
                         common-lisp:nil)
                        (funnel-chart-visual :initarg :funnel-chart-visual
                         :type
                         (common-lisp:or funnel-chart-visual common-lisp:null)
                         :accessor %visual-funnel-chart-visual :initform
                         common-lisp:nil)
                        (filled-map-visual :initarg :filled-map-visual :type
                         (common-lisp:or filled-map-visual common-lisp:null)
                         :accessor %visual-filled-map-visual :initform
                         common-lisp:nil)
                        (geospatial-map-visual :initarg :geospatial-map-visual
                         :type
                         (common-lisp:or geospatial-map-visual
                                         common-lisp:null)
                         :accessor %visual-geospatial-map-visual :initform
                         common-lisp:nil)
                        (tree-map-visual :initarg :tree-map-visual :type
                         (common-lisp:or tree-map-visual common-lisp:null)
                         :accessor %visual-tree-map-visual :initform
                         common-lisp:nil)
                        (heat-map-visual :initarg :heat-map-visual :type
                         (common-lisp:or heat-map-visual common-lisp:null)
                         :accessor %visual-heat-map-visual :initform
                         common-lisp:nil)
                        (line-chart-visual :initarg :line-chart-visual :type
                         (common-lisp:or line-chart-visual common-lisp:null)
                         :accessor %visual-line-chart-visual :initform
                         common-lisp:nil)
                        (gauge-chart-visual :initarg :gauge-chart-visual :type
                         (common-lisp:or gauge-chart-visual common-lisp:null)
                         :accessor %visual-gauge-chart-visual :initform
                         common-lisp:nil)
                        (pie-chart-visual :initarg :pie-chart-visual :type
                         (common-lisp:or pie-chart-visual common-lisp:null)
                         :accessor %visual-pie-chart-visual :initform
                         common-lisp:nil)
                        (kpivisual :initarg :kpivisual :type
                         (common-lisp:or kpivisual common-lisp:null) :accessor
                         %visual-kpivisual :initform common-lisp:nil)
                        (bar-chart-visual :initarg :bar-chart-visual :type
                         (common-lisp:or bar-chart-visual common-lisp:null)
                         :accessor %visual-bar-chart-visual :initform
                         common-lisp:nil)
                        (pivot-table-visual :initarg :pivot-table-visual :type
                         (common-lisp:or pivot-table-visual common-lisp:null)
                         :accessor %visual-pivot-table-visual :initform
                         common-lisp:nil)
                        (table-visual :initarg :table-visual :type
                         (common-lisp:or table-visual common-lisp:null)
                         :accessor %visual-table-visual :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'visual 'make-visual))
 (common-lisp:defun make-visual
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key radar-chart-visual empty-visual
                     custom-content-visual sankey-diagram-visual insight-visual
                     word-cloud-visual histogram-visual waterfall-visual
                     box-plot-visual combo-chart-visual scatter-plot-visual
                     funnel-chart-visual filled-map-visual
                     geospatial-map-visual tree-map-visual heat-map-visual
                     line-chart-visual gauge-chart-visual pie-chart-visual
                     kpivisual bar-chart-visual pivot-table-visual
                     table-visual)
   (common-lisp:apply #'common-lisp:make-instance 'visual
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-visual))
      (common-lisp:list
       (common-lisp:cons "TableVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pivot-table-visual))
      (common-lisp:list
       (common-lisp:cons "PivotTableVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bar-chart-visual))
      (common-lisp:list
       (common-lisp:cons "BarChartVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kpivisual))
      (common-lisp:list
       (common-lisp:cons "KPIVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pie-chart-visual))
      (common-lisp:list
       (common-lisp:cons "PieChartVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gauge-chart-visual))
      (common-lisp:list
       (common-lisp:cons "GaugeChartVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-chart-visual))
      (common-lisp:list
       (common-lisp:cons "LineChartVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'heat-map-visual))
      (common-lisp:list
       (common-lisp:cons "HeatMapVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tree-map-visual))
      (common-lisp:list
       (common-lisp:cons "TreeMapVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'geospatial-map-visual))
      (common-lisp:list
       (common-lisp:cons "GeospatialMapVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filled-map-visual))
      (common-lisp:list
       (common-lisp:cons "FilledMapVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'funnel-chart-visual))
      (common-lisp:list
       (common-lisp:cons "FunnelChartVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scatter-plot-visual))
      (common-lisp:list
       (common-lisp:cons "ScatterPlotVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'combo-chart-visual))
      (common-lisp:list
       (common-lisp:cons "ComboChartVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'box-plot-visual))
      (common-lisp:list
       (common-lisp:cons "BoxPlotVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'waterfall-visual))
      (common-lisp:list
       (common-lisp:cons "WaterfallVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'histogram-visual))
      (common-lisp:list
       (common-lisp:cons "HistogramVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'word-cloud-visual))
      (common-lisp:list
       (common-lisp:cons "WordCloudVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-visual))
      (common-lisp:list
       (common-lisp:cons "InsightVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sankey-diagram-visual))
      (common-lisp:list
       (common-lisp:cons "SankeyDiagramVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-content-visual))
      (common-lisp:list
       (common-lisp:cons "CustomContentVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'empty-visual))
      (common-lisp:list
       (common-lisp:cons "EmptyVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'radar-chart-visual))
      (common-lisp:list
       (common-lisp:cons "RadarChartVisual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass visual-axis-sort-option common-lisp:nil
                       ((availability-status :initarg :availability-status
                         :type
                         (common-lisp:or dashboard-behavior common-lisp:null)
                         :accessor %visual-axis-sort-option-availability-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'visual-axis-sort-option 'make-visual-axis-sort-option))
 (common-lisp:defun make-visual-axis-sort-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key availability-status)
   (common-lisp:apply #'common-lisp:make-instance 'visual-axis-sort-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          visual-axis-sort-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          visual-axis-sort-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-status))
      (common-lisp:list
       (common-lisp:cons "AvailabilityStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          visual-axis-sort-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass visual-custom-action common-lisp:nil
                       ((action-operations :initarg :action-operations :type
                         (common-lisp:or visual-custom-action-operation-list
                                         common-lisp:null)
                         :accessor %visual-custom-action-action-operations
                         :initform
                         (common-lisp:error ":action-operations is required"))
                        (trigger :initarg :trigger :type
                         (common-lisp:or visual-custom-action-trigger
                                         common-lisp:null)
                         :accessor %visual-custom-action-trigger :initform
                         (common-lisp:error ":trigger is required"))
                        (status :initarg :status :type
                         (common-lisp:or widget-status common-lisp:null)
                         :accessor %visual-custom-action-status :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or visual-custom-action-name
                                         common-lisp:null)
                         :accessor %visual-custom-action-name :initform
                         (common-lisp:error ":name is required"))
                        (custom-action-id :initarg :custom-action-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %visual-custom-action-custom-action-id
                         :initform
                         (common-lisp:error ":custom-action-id is required"))))
 (common-lisp:export
  (common-lisp:list 'visual-custom-action 'make-visual-custom-action))
 (common-lisp:defun make-visual-custom-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key action-operations trigger status name
                     custom-action-id)
   (common-lisp:apply #'common-lisp:make-instance 'visual-custom-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input visual-custom-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input visual-custom-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-action-id))
      (common-lisp:list
       (common-lisp:cons "CustomActionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger))
      (common-lisp:list
       (common-lisp:cons "Trigger"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-operations))
      (common-lisp:list
       (common-lisp:cons "ActionOperations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input visual-custom-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype visual-custom-action-list ()
   '(trivial-types:proper-list visual-custom-action))
 (common-lisp:defun |make-visual-custom-action-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list visual-custom-action))
   aws-sdk/generator/shape::members))
(common-lisp:deftype visual-custom-action-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass visual-custom-action-operation common-lisp:nil
                       ((set-parameters-operation :initarg
                         :set-parameters-operation :type
                         (common-lisp:or custom-action-set-parameters-operation
                                         common-lisp:null)
                         :accessor
                         %visual-custom-action-operation-set-parameters-operation
                         :initform common-lisp:nil)
                        (urloperation :initarg :urloperation :type
                         (common-lisp:or custom-action-urloperation
                                         common-lisp:null)
                         :accessor %visual-custom-action-operation-urloperation
                         :initform common-lisp:nil)
                        (navigation-operation :initarg :navigation-operation
                         :type
                         (common-lisp:or custom-action-navigation-operation
                                         common-lisp:null)
                         :accessor
                         %visual-custom-action-operation-navigation-operation
                         :initform common-lisp:nil)
                        (filter-operation :initarg :filter-operation :type
                         (common-lisp:or custom-action-filter-operation
                                         common-lisp:null)
                         :accessor
                         %visual-custom-action-operation-filter-operation
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'visual-custom-action-operation
                    'make-visual-custom-action-operation))
 (common-lisp:defun make-visual-custom-action-operation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key set-parameters-operation urloperation
                     navigation-operation filter-operation)
   (common-lisp:apply #'common-lisp:make-instance
                      'visual-custom-action-operation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          visual-custom-action-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          visual-custom-action-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-operation))
      (common-lisp:list
       (common-lisp:cons "FilterOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'navigation-operation))
      (common-lisp:list
       (common-lisp:cons "NavigationOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'urloperation))
      (common-lisp:list
       (common-lisp:cons "URLOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'set-parameters-operation))
      (common-lisp:list
       (common-lisp:cons "SetParametersOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          visual-custom-action-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype visual-custom-action-operation-list ()
   '(trivial-types:proper-list visual-custom-action-operation))
 (common-lisp:defun |make-visual-custom-action-operation-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            visual-custom-action-operation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype visual-custom-action-trigger () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype visual-list () '(trivial-types:proper-list visual))
 (common-lisp:defun |make-visual-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list visual))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass visual-menu-option common-lisp:nil
                       ((availability-status :initarg :availability-status
                         :type
                         (common-lisp:or dashboard-behavior common-lisp:null)
                         :accessor %visual-menu-option-availability-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'visual-menu-option 'make-visual-menu-option))
 (common-lisp:defun make-visual-menu-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key availability-status)
   (common-lisp:apply #'common-lisp:make-instance 'visual-menu-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input visual-menu-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input visual-menu-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-status))
      (common-lisp:list
       (common-lisp:cons "AvailabilityStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input visual-menu-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass visual-palette common-lisp:nil
                       ((color-map :initarg :color-map :type
                         (common-lisp:or data-path-color-list common-lisp:null)
                         :accessor %visual-palette-color-map :initform
                         common-lisp:nil)
                        (chart-color :initarg :chart-color :type
                         (common-lisp:or hex-color common-lisp:null) :accessor
                         %visual-palette-chart-color :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'visual-palette 'make-visual-palette))
 (common-lisp:defun make-visual-palette
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key color-map chart-color)
   (common-lisp:apply #'common-lisp:make-instance 'visual-palette
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input visual-palette))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input visual-palette))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-color))
      (common-lisp:list
       (common-lisp:cons "ChartColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-map))
      (common-lisp:list
       (common-lisp:cons "ColorMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input visual-palette))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass visual-subtitle-label-options common-lisp:nil
                       ((format-text :initarg :format-text :type
                         (common-lisp:or long-format-text common-lisp:null)
                         :accessor %visual-subtitle-label-options-format-text
                         :initform common-lisp:nil)
                        (visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %visual-subtitle-label-options-visibility :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'visual-subtitle-label-options
                    'make-visual-subtitle-label-options))
 (common-lisp:defun make-visual-subtitle-label-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key format-text visibility)
   (common-lisp:apply #'common-lisp:make-instance
                      'visual-subtitle-label-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          visual-subtitle-label-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          visual-subtitle-label-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format-text))
      (common-lisp:list
       (common-lisp:cons "FormatText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          visual-subtitle-label-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass visual-title-label-options common-lisp:nil
                       ((format-text :initarg :format-text :type
                         (common-lisp:or short-format-text common-lisp:null)
                         :accessor %visual-title-label-options-format-text
                         :initform common-lisp:nil)
                        (visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %visual-title-label-options-visibility :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'visual-title-label-options
                    'make-visual-title-label-options))
 (common-lisp:defun make-visual-title-label-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key format-text visibility)
   (common-lisp:apply #'common-lisp:make-instance 'visual-title-label-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          visual-title-label-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          visual-title-label-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format-text))
      (common-lisp:list
       (common-lisp:cons "FormatText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          visual-title-label-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-connection-properties common-lisp:nil
                       ((vpc-connection-arn :initarg :vpc-connection-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %vpc-connection-properties-vpc-connection-arn
                         :initform
                         (common-lisp:error
                          ":vpc-connection-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'vpc-connection-properties
                    'make-vpc-connection-properties))
 (common-lisp:defun make-vpc-connection-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-connection-arn)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-connection-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-connection-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-connection-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpcConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-connection-properties))
   common-lisp:nil))
(common-lisp:deftype warehouse () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass waterfall-chart-aggregated-field-wells common-lisp:nil
                       ((breakdowns :initarg :breakdowns :type
                         (common-lisp:or dimension-field-list common-lisp:null)
                         :accessor
                         %waterfall-chart-aggregated-field-wells-breakdowns
                         :initform common-lisp:nil)
                        (values :initarg :values :type
                         (common-lisp:or measure-field-list common-lisp:null)
                         :accessor
                         %waterfall-chart-aggregated-field-wells-values
                         :initform common-lisp:nil)
                        (categories :initarg :categories :type
                         (common-lisp:or dimension-field-list common-lisp:null)
                         :accessor
                         %waterfall-chart-aggregated-field-wells-categories
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'waterfall-chart-aggregated-field-wells
                    'make-waterfall-chart-aggregated-field-wells))
 (common-lisp:defun make-waterfall-chart-aggregated-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key breakdowns values categories)
   (common-lisp:apply #'common-lisp:make-instance
                      'waterfall-chart-aggregated-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          waterfall-chart-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          waterfall-chart-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'categories))
      (common-lisp:list
       (common-lisp:cons "Categories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'breakdowns))
      (common-lisp:list
       (common-lisp:cons "Breakdowns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          waterfall-chart-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass waterfall-chart-configuration common-lisp:nil
                       ((visual-palette :initarg :visual-palette :type
                         (common-lisp:or visual-palette common-lisp:null)
                         :accessor
                         %waterfall-chart-configuration-visual-palette
                         :initform common-lisp:nil)
                        (data-labels :initarg :data-labels :type
                         (common-lisp:or data-label-options common-lisp:null)
                         :accessor %waterfall-chart-configuration-data-labels
                         :initform common-lisp:nil)
                        (legend :initarg :legend :type
                         (common-lisp:or legend-options common-lisp:null)
                         :accessor %waterfall-chart-configuration-legend
                         :initform common-lisp:nil)
                        (primary-yaxis-display-options :initarg
                         :primary-yaxis-display-options :type
                         (common-lisp:or axis-display-options common-lisp:null)
                         :accessor
                         %waterfall-chart-configuration-primary-yaxis-display-options
                         :initform common-lisp:nil)
                        (primary-yaxis-label-options :initarg
                         :primary-yaxis-label-options :type
                         (common-lisp:or chart-axis-label-options
                                         common-lisp:null)
                         :accessor
                         %waterfall-chart-configuration-primary-yaxis-label-options
                         :initform common-lisp:nil)
                        (category-axis-display-options :initarg
                         :category-axis-display-options :type
                         (common-lisp:or axis-display-options common-lisp:null)
                         :accessor
                         %waterfall-chart-configuration-category-axis-display-options
                         :initform common-lisp:nil)
                        (category-axis-label-options :initarg
                         :category-axis-label-options :type
                         (common-lisp:or chart-axis-label-options
                                         common-lisp:null)
                         :accessor
                         %waterfall-chart-configuration-category-axis-label-options
                         :initform common-lisp:nil)
                        (waterfall-chart-options :initarg
                         :waterfall-chart-options :type
                         (common-lisp:or waterfall-chart-options
                                         common-lisp:null)
                         :accessor
                         %waterfall-chart-configuration-waterfall-chart-options
                         :initform common-lisp:nil)
                        (sort-configuration :initarg :sort-configuration :type
                         (common-lisp:or waterfall-chart-sort-configuration
                                         common-lisp:null)
                         :accessor
                         %waterfall-chart-configuration-sort-configuration
                         :initform common-lisp:nil)
                        (field-wells :initarg :field-wells :type
                         (common-lisp:or waterfall-chart-field-wells
                                         common-lisp:null)
                         :accessor %waterfall-chart-configuration-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'waterfall-chart-configuration
                    'make-waterfall-chart-configuration))
 (common-lisp:defun make-waterfall-chart-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visual-palette data-labels legend
                     primary-yaxis-display-options primary-yaxis-label-options
                     category-axis-display-options category-axis-label-options
                     waterfall-chart-options sort-configuration field-wells)
   (common-lisp:apply #'common-lisp:make-instance
                      'waterfall-chart-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          waterfall-chart-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          waterfall-chart-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'waterfall-chart-options))
      (common-lisp:list
       (common-lisp:cons "WaterfallChartOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-axis-label-options))
      (common-lisp:list
       (common-lisp:cons "CategoryAxisLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-axis-display-options))
      (common-lisp:list
       (common-lisp:cons "CategoryAxisDisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-yaxis-label-options))
      (common-lisp:list
       (common-lisp:cons "PrimaryYAxisLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-yaxis-display-options))
      (common-lisp:list
       (common-lisp:cons "PrimaryYAxisDisplayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legend))
      (common-lisp:list
       (common-lisp:cons "Legend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-labels))
      (common-lisp:list
       (common-lisp:cons "DataLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-palette))
      (common-lisp:list
       (common-lisp:cons "VisualPalette"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          waterfall-chart-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass waterfall-chart-field-wells common-lisp:nil
                       ((waterfall-chart-aggregated-field-wells :initarg
                         :waterfall-chart-aggregated-field-wells :type
                         (common-lisp:or waterfall-chart-aggregated-field-wells
                                         common-lisp:null)
                         :accessor
                         %waterfall-chart-field-wells-waterfall-chart-aggregated-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'waterfall-chart-field-wells
                    'make-waterfall-chart-field-wells))
 (common-lisp:defun make-waterfall-chart-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key waterfall-chart-aggregated-field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'waterfall-chart-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          waterfall-chart-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          waterfall-chart-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'waterfall-chart-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "WaterfallChartAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          waterfall-chart-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass waterfall-chart-options common-lisp:nil
                       ((total-bar-label :initarg :total-bar-label :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %waterfall-chart-options-total-bar-label :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'waterfall-chart-options 'make-waterfall-chart-options))
 (common-lisp:defun make-waterfall-chart-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key total-bar-label)
   (common-lisp:apply #'common-lisp:make-instance 'waterfall-chart-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          waterfall-chart-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          waterfall-chart-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-bar-label))
      (common-lisp:list
       (common-lisp:cons "TotalBarLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          waterfall-chart-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass waterfall-chart-sort-configuration common-lisp:nil
                       ((breakdown-items-limit :initarg :breakdown-items-limit
                         :type
                         (common-lisp:or items-limit-configuration
                                         common-lisp:null)
                         :accessor
                         %waterfall-chart-sort-configuration-breakdown-items-limit
                         :initform common-lisp:nil)
                        (category-sort :initarg :category-sort :type
                         (common-lisp:or field-sort-options-list
                                         common-lisp:null)
                         :accessor
                         %waterfall-chart-sort-configuration-category-sort
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'waterfall-chart-sort-configuration
                    'make-waterfall-chart-sort-configuration))
 (common-lisp:defun make-waterfall-chart-sort-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key breakdown-items-limit category-sort)
   (common-lisp:apply #'common-lisp:make-instance
                      'waterfall-chart-sort-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          waterfall-chart-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          waterfall-chart-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-sort))
      (common-lisp:list
       (common-lisp:cons "CategorySort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'breakdown-items-limit))
      (common-lisp:list
       (common-lisp:cons "BreakdownItemsLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          waterfall-chart-sort-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass waterfall-visual common-lisp:nil
                       ((column-hierarchies :initarg :column-hierarchies :type
                         (common-lisp:or column-hierarchy-list
                                         common-lisp:null)
                         :accessor %waterfall-visual-column-hierarchies
                         :initform common-lisp:nil)
                        (actions :initarg :actions :type
                         (common-lisp:or visual-custom-action-list
                                         common-lisp:null)
                         :accessor %waterfall-visual-actions :initform
                         common-lisp:nil)
                        (chart-configuration :initarg :chart-configuration
                         :type
                         (common-lisp:or waterfall-chart-configuration
                                         common-lisp:null)
                         :accessor %waterfall-visual-chart-configuration
                         :initform common-lisp:nil)
                        (subtitle :initarg :subtitle :type
                         (common-lisp:or visual-subtitle-label-options
                                         common-lisp:null)
                         :accessor %waterfall-visual-subtitle :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or visual-title-label-options
                                         common-lisp:null)
                         :accessor %waterfall-visual-title :initform
                         common-lisp:nil)
                        (visual-id :initarg :visual-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %waterfall-visual-visual-id :initform
                         (common-lisp:error ":visual-id is required"))))
 (common-lisp:export
  (common-lisp:list 'waterfall-visual 'make-waterfall-visual))
 (common-lisp:defun make-waterfall-visual
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key column-hierarchies actions
                     chart-configuration subtitle title visual-id)
   (common-lisp:apply #'common-lisp:make-instance 'waterfall-visual
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input waterfall-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input waterfall-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-hierarchies))
      (common-lisp:list
       (common-lisp:cons "ColumnHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input waterfall-visual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass what-if-point-scenario common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %what-if-point-scenario-value :initform
                         (common-lisp:error ":value is required"))
                        (date :initarg :date :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %what-if-point-scenario-date :initform
                         (common-lisp:error ":date is required"))))
 (common-lisp:export
  (common-lisp:list 'what-if-point-scenario 'make-what-if-point-scenario))
 (common-lisp:defun make-what-if-point-scenario
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value date)
   (common-lisp:apply #'common-lisp:make-instance 'what-if-point-scenario
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          what-if-point-scenario))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          what-if-point-scenario))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          what-if-point-scenario))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass what-if-range-scenario common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %what-if-range-scenario-value :initform
                         (common-lisp:error ":value is required"))
                        (end-date :initarg :end-date :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %what-if-range-scenario-end-date :initform
                         (common-lisp:error ":end-date is required"))
                        (start-date :initarg :start-date :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %what-if-range-scenario-start-date :initform
                         (common-lisp:error ":start-date is required"))))
 (common-lisp:export
  (common-lisp:list 'what-if-range-scenario 'make-what-if-range-scenario))
 (common-lisp:defun make-what-if-range-scenario
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value end-date start-date)
   (common-lisp:apply #'common-lisp:make-instance 'what-if-range-scenario
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          what-if-range-scenario))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          what-if-range-scenario))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "StartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date))
      (common-lisp:list
       (common-lisp:cons "EndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          what-if-range-scenario))
   common-lisp:nil))
(common-lisp:deftype widget-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass word-cloud-aggregated-field-wells common-lisp:nil
                       ((size :initarg :size :type
                         (common-lisp:or word-cloud-measure-field-list
                                         common-lisp:null)
                         :accessor %word-cloud-aggregated-field-wells-size
                         :initform common-lisp:nil)
                        (group-by :initarg :group-by :type
                         (common-lisp:or word-cloud-dimension-field-list
                                         common-lisp:null)
                         :accessor %word-cloud-aggregated-field-wells-group-by
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'word-cloud-aggregated-field-wells
                    'make-word-cloud-aggregated-field-wells))
 (common-lisp:defun make-word-cloud-aggregated-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key size group-by)
   (common-lisp:apply #'common-lisp:make-instance
                      'word-cloud-aggregated-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          word-cloud-aggregated-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          word-cloud-aggregated-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "GroupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          word-cloud-aggregated-field-wells))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass word-cloud-chart-configuration common-lisp:nil
                       ((word-cloud-options :initarg :word-cloud-options :type
                         (common-lisp:or word-cloud-options common-lisp:null)
                         :accessor
                         %word-cloud-chart-configuration-word-cloud-options
                         :initform common-lisp:nil)
                        (category-label-options :initarg
                         :category-label-options :type
                         (common-lisp:or chart-axis-label-options
                                         common-lisp:null)
                         :accessor
                         %word-cloud-chart-configuration-category-label-options
                         :initform common-lisp:nil)
                        (sort-configuration :initarg :sort-configuration :type
                         (common-lisp:or word-cloud-sort-configuration
                                         common-lisp:null)
                         :accessor
                         %word-cloud-chart-configuration-sort-configuration
                         :initform common-lisp:nil)
                        (field-wells :initarg :field-wells :type
                         (common-lisp:or word-cloud-field-wells
                                         common-lisp:null)
                         :accessor %word-cloud-chart-configuration-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'word-cloud-chart-configuration
                    'make-word-cloud-chart-configuration))
 (common-lisp:defun make-word-cloud-chart-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key word-cloud-options category-label-options
                     sort-configuration field-wells)
   (common-lisp:apply #'common-lisp:make-instance
                      'word-cloud-chart-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          word-cloud-chart-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          word-cloud-chart-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-wells))
      (common-lisp:list
       (common-lisp:cons "FieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-configuration))
      (common-lisp:list
       (common-lisp:cons "SortConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-label-options))
      (common-lisp:list
       (common-lisp:cons "CategoryLabelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'word-cloud-options))
      (common-lisp:list
       (common-lisp:cons "WordCloudOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          word-cloud-chart-configuration))
   common-lisp:nil))
(common-lisp:deftype word-cloud-cloud-layout () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype word-cloud-dimension-field-list ()
   '(trivial-types:proper-list dimension-field))
 (common-lisp:defun |make-word-cloud-dimension-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass word-cloud-field-wells common-lisp:nil
                       ((word-cloud-aggregated-field-wells :initarg
                         :word-cloud-aggregated-field-wells :type
                         (common-lisp:or word-cloud-aggregated-field-wells
                                         common-lisp:null)
                         :accessor
                         %word-cloud-field-wells-word-cloud-aggregated-field-wells
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'word-cloud-field-wells 'make-word-cloud-field-wells))
 (common-lisp:defun make-word-cloud-field-wells
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key word-cloud-aggregated-field-wells)
   (common-lisp:apply #'common-lisp:make-instance 'word-cloud-field-wells
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          word-cloud-field-wells))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          word-cloud-field-wells))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'word-cloud-aggregated-field-wells))
      (common-lisp:list
       (common-lisp:cons "WordCloudAggregatedFieldWells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          word-cloud-field-wells))
   common-lisp:nil))
(common-lisp:deftype word-cloud-maximum-string-length () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype word-cloud-measure-field-list ()
   '(trivial-types:proper-list measure-field))
 (common-lisp:defun |make-word-cloud-measure-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list measure-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass word-cloud-options common-lisp:nil
                       ((maximum-string-length :initarg :maximum-string-length
                         :type
                         (common-lisp:or word-cloud-maximum-string-length
                                         common-lisp:null)
                         :accessor %word-cloud-options-maximum-string-length
                         :initform common-lisp:nil)
                        (word-padding :initarg :word-padding :type
                         (common-lisp:or word-cloud-word-padding
                                         common-lisp:null)
                         :accessor %word-cloud-options-word-padding :initform
                         common-lisp:nil)
                        (word-casing :initarg :word-casing :type
                         (common-lisp:or word-cloud-word-casing
                                         common-lisp:null)
                         :accessor %word-cloud-options-word-casing :initform
                         common-lisp:nil)
                        (cloud-layout :initarg :cloud-layout :type
                         (common-lisp:or word-cloud-cloud-layout
                                         common-lisp:null)
                         :accessor %word-cloud-options-cloud-layout :initform
                         common-lisp:nil)
                        (word-scaling :initarg :word-scaling :type
                         (common-lisp:or word-cloud-word-scaling
                                         common-lisp:null)
                         :accessor %word-cloud-options-word-scaling :initform
                         common-lisp:nil)
                        (word-orientation :initarg :word-orientation :type
                         (common-lisp:or word-cloud-word-orientation
                                         common-lisp:null)
                         :accessor %word-cloud-options-word-orientation
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'word-cloud-options 'make-word-cloud-options))
 (common-lisp:defun make-word-cloud-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key maximum-string-length word-padding
                     word-casing cloud-layout word-scaling word-orientation)
   (common-lisp:apply #'common-lisp:make-instance 'word-cloud-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input word-cloud-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input word-cloud-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'word-orientation))
      (common-lisp:list
       (common-lisp:cons "WordOrientation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'word-scaling))
      (common-lisp:list
       (common-lisp:cons "WordScaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-layout))
      (common-lisp:list
       (common-lisp:cons "CloudLayout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'word-casing))
      (common-lisp:list
       (common-lisp:cons "WordCasing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'word-padding))
      (common-lisp:list
       (common-lisp:cons "WordPadding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-string-length))
      (common-lisp:list
       (common-lisp:cons "MaximumStringLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input word-cloud-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass word-cloud-sort-configuration common-lisp:nil
                       ((category-sort :initarg :category-sort :type
                         (common-lisp:or field-sort-options-list
                                         common-lisp:null)
                         :accessor %word-cloud-sort-configuration-category-sort
                         :initform common-lisp:nil)
                        (category-items-limit :initarg :category-items-limit
                         :type
                         (common-lisp:or items-limit-configuration
                                         common-lisp:null)
                         :accessor
                         %word-cloud-sort-configuration-category-items-limit
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'word-cloud-sort-configuration
                    'make-word-cloud-sort-configuration))
 (common-lisp:defun make-word-cloud-sort-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key category-sort category-items-limit)
   (common-lisp:apply #'common-lisp:make-instance
                      'word-cloud-sort-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          word-cloud-sort-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          word-cloud-sort-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-items-limit))
      (common-lisp:list
       (common-lisp:cons "CategoryItemsLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-sort))
      (common-lisp:list
       (common-lisp:cons "CategorySort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          word-cloud-sort-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass word-cloud-visual common-lisp:nil
                       ((column-hierarchies :initarg :column-hierarchies :type
                         (common-lisp:or column-hierarchy-list
                                         common-lisp:null)
                         :accessor %word-cloud-visual-column-hierarchies
                         :initform common-lisp:nil)
                        (actions :initarg :actions :type
                         (common-lisp:or visual-custom-action-list
                                         common-lisp:null)
                         :accessor %word-cloud-visual-actions :initform
                         common-lisp:nil)
                        (chart-configuration :initarg :chart-configuration
                         :type
                         (common-lisp:or word-cloud-chart-configuration
                                         common-lisp:null)
                         :accessor %word-cloud-visual-chart-configuration
                         :initform common-lisp:nil)
                        (subtitle :initarg :subtitle :type
                         (common-lisp:or visual-subtitle-label-options
                                         common-lisp:null)
                         :accessor %word-cloud-visual-subtitle :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or visual-title-label-options
                                         common-lisp:null)
                         :accessor %word-cloud-visual-title :initform
                         common-lisp:nil)
                        (visual-id :initarg :visual-id :type
                         (common-lisp:or short-restrictive-resource-id
                                         common-lisp:null)
                         :accessor %word-cloud-visual-visual-id :initform
                         (common-lisp:error ":visual-id is required"))))
 (common-lisp:export
  (common-lisp:list 'word-cloud-visual 'make-word-cloud-visual))
 (common-lisp:defun make-word-cloud-visual
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key column-hierarchies actions
                     chart-configuration subtitle title visual-id)
   (common-lisp:apply #'common-lisp:make-instance 'word-cloud-visual
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input word-cloud-visual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input word-cloud-visual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visual-id))
      (common-lisp:list
       (common-lisp:cons "VisualId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "Subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chart-configuration))
      (common-lisp:list
       (common-lisp:cons "ChartConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-hierarchies))
      (common-lisp:list
       (common-lisp:cons "ColumnHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input word-cloud-visual))
   common-lisp:nil))
(common-lisp:deftype word-cloud-word-casing () 'common-lisp:string)
(common-lisp:deftype word-cloud-word-orientation () 'common-lisp:string)
(common-lisp:deftype word-cloud-word-padding () 'common-lisp:string)
(common-lisp:deftype word-cloud-word-scaling () 'common-lisp:string)
(common-lisp:deftype work-group () 'common-lisp:string)
common-lisp:nil
(common-lisp:progn
 (common-lisp:defun cancel-ingestion
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-set-id ingestion-id)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id data-set-id ingestion-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-ingestion-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sets/~A/ingestions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ingestion-id))))
                                                        "CancelIngestion"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-ingestion))
(common-lisp:progn
 (common-lisp:defun create-account-customization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id namespace
                     account-customization tags)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id namespace account-customization
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-account-customization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/customizations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "CreateAccountCustomization"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-account-customization))
(common-lisp:progn
 (common-lisp:defun create-account-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key edition authentication-method
                     aws-account-id account-name notification-email
                     active-directory-name realm directory-id admin-group
                     author-group reader-group first-name last-name
                     email-address contact-number)
   (common-lisp:declare
    (common-lisp:ignorable edition authentication-method aws-account-id
     account-name notification-email active-directory-name realm directory-id
     admin-group author-group reader-group first-name last-name email-address
     contact-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-account-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/account/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "CreateAccountSubscription"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-account-subscription))
(common-lisp:progn
 (common-lisp:defun create-analysis
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id analysis-id name
                     parameters permissions source-entity theme-arn tags
                     definition)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id analysis-id name parameters
     permissions source-entity theme-arn tags definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-analysis-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/analyses/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analysis-id))))
                                                        "CreateAnalysis"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-analysis))
(common-lisp:progn
 (common-lisp:defun create-dashboard
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id dashboard-id name
                     parameters permissions source-entity tags
                     version-description dashboard-publish-options theme-arn
                     definition)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id dashboard-id name parameters
     permissions source-entity tags version-description
     dashboard-publish-options theme-arn definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dashboard-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/dashboards/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dashboard-id))))
                                                        "CreateDashboard"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-dashboard))
(common-lisp:progn
 (common-lisp:defun create-data-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-set-id name
                     physical-table-map logical-table-map import-mode
                     column-groups field-folders permissions
                     row-level-permission-data-set
                     row-level-permission-tag-configuration
                     column-level-permission-rules tags
                     data-set-usage-configuration)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id data-set-id name physical-table-map
     logical-table-map import-mode column-groups field-folders permissions
     row-level-permission-data-set row-level-permission-tag-configuration
     column-level-permission-rules tags data-set-usage-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-data-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "CreateDataSet"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-data-set))
(common-lisp:progn
 (common-lisp:defun create-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-source-id name type
                     data-source-parameters credentials permissions
                     vpc-connection-properties ssl-properties tags)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id data-source-id name type
     data-source-parameters credentials permissions vpc-connection-properties
     ssl-properties tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-data-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sources"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "CreateDataSource"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-data-source))
(common-lisp:progn
 (common-lisp:defun create-folder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id folder-id name folder-type
                     parent-folder-arn permissions tags)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id folder-id name folder-type
     parent-folder-arn permissions tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-folder-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/folders/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))))
                                                        "CreateFolder"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-folder))
(common-lisp:progn
 (common-lisp:defun create-folder-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id folder-id member-id
                     member-type)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id folder-id member-id member-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-folder-membership-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/folders/~A/members/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'member-type))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'member-id))))
                                                        "CreateFolderMembership"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-folder-membership))
(common-lisp:progn
 (common-lisp:defun create-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name description aws-account-id
                     namespace)
   (common-lisp:declare
    (common-lisp:ignorable group-name description aws-account-id namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/groups"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))))
                                                        "CreateGroup"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-group))
(common-lisp:progn
 (common-lisp:defun create-group-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key member-name group-name aws-account-id
                     namespace)
   (common-lisp:declare
    (common-lisp:ignorable member-name group-name aws-account-id namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-group-membership-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/groups/~A/members/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'group-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'member-name))))
                                                        "CreateGroupMembership"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-group-membership))
(common-lisp:progn
 (common-lisp:defun create-iampolicy-assignment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id assignment-name
                     assignment-status policy-arn identities namespace)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id assignment-name assignment-status
     policy-arn identities namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-iampolicy-assignment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/iam-policy-assignments/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))))
                                                        "CreateIAMPolicyAssignment"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-iampolicy-assignment))
(common-lisp:progn
 (common-lisp:defun create-ingestion
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-set-id ingestion-id aws-account-id
                     ingestion-type)
   (common-lisp:declare
    (common-lisp:ignorable data-set-id ingestion-id aws-account-id
     ingestion-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-ingestion-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sets/~A/ingestions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ingestion-id))))
                                                        "CreateIngestion"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-ingestion))
(common-lisp:progn
 (common-lisp:defun create-namespace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id namespace identity-store
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id namespace identity-store tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-namespace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "CreateNamespace"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-namespace))
(common-lisp:progn
 (common-lisp:defun create-refresh-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-set-id aws-account-id schedule)
   (common-lisp:declare
    (common-lisp:ignorable data-set-id aws-account-id schedule))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-refresh-schedule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sets/~A/refresh-schedules"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))))
                                                        "CreateRefreshSchedule"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-refresh-schedule))
(common-lisp:progn
 (common-lisp:defun create-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id template-id name
                     permissions source-entity tags version-description
                     definition)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id template-id name permissions
     source-entity tags version-description definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/templates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-id))))
                                                        "CreateTemplate"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-template))
(common-lisp:progn
 (common-lisp:defun create-template-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id template-id alias-name
                     template-version-number)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id template-id alias-name
     template-version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-template-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/templates/~A/aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'alias-name))))
                                                        "CreateTemplateAlias"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-template-alias))
(common-lisp:progn
 (common-lisp:defun create-theme
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id theme-id name
                     base-theme-id version-description configuration
                     permissions tags)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id theme-id name base-theme-id
     version-description configuration permissions tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-theme-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/themes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'theme-id))))
                                                        "CreateTheme"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-theme))
(common-lisp:progn
 (common-lisp:defun create-theme-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id theme-id alias-name
                     theme-version-number)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id theme-id alias-name
     theme-version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-theme-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/themes/~A/aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'theme-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'alias-name))))
                                                        "CreateThemeAlias"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-theme-alias))
(common-lisp:progn
 (common-lisp:defun delete-account-customization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id namespace)
   (common-lisp:declare (common-lisp:ignorable aws-account-id namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-account-customization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/customizations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "DeleteAccountCustomization"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-account-customization))
(common-lisp:progn
 (common-lisp:defun delete-account-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-account-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/account/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "DeleteAccountSubscription"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-account-subscription))
(common-lisp:progn
 (common-lisp:defun delete-analysis
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id analysis-id
                     recovery-window-in-days force-delete-without-recovery)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id analysis-id recovery-window-in-days
     force-delete-without-recovery))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-analysis-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/analyses/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analysis-id))))
                                                        "DeleteAnalysis"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-analysis))
(common-lisp:progn
 (common-lisp:defun delete-dashboard
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id dashboard-id
                     version-number)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id dashboard-id version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dashboard-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/dashboards/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dashboard-id))))
                                                        "DeleteDashboard"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-dashboard))
(common-lisp:progn
 (common-lisp:defun delete-data-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-set-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id data-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-data-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))))
                                                        "DeleteDataSet"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-data-set))
(common-lisp:progn
 (common-lisp:defun delete-data-set-refresh-properties
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-set-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id data-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-data-set-refresh-properties-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sets/~A/refresh-properties"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))))
                                                        "DeleteDataSetRefreshProperties"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-data-set-refresh-properties))
(common-lisp:progn
 (common-lisp:defun delete-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-source-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id data-source-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-data-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-id))))
                                                        "DeleteDataSource"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-data-source))
(common-lisp:progn
 (common-lisp:defun delete-folder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id folder-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id folder-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-folder-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/folders/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))))
                                                        "DeleteFolder"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-folder))
(common-lisp:progn
 (common-lisp:defun delete-folder-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id folder-id member-id
                     member-type)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id folder-id member-id member-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-folder-membership-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/folders/~A/members/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'member-type))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'member-id))))
                                                        "DeleteFolderMembership"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-folder-membership))
(common-lisp:progn
 (common-lisp:defun delete-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name aws-account-id namespace)
   (common-lisp:declare
    (common-lisp:ignorable group-name aws-account-id namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'group-name))))
                                                        "DeleteGroup"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-group))
(common-lisp:progn
 (common-lisp:defun delete-group-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key member-name group-name aws-account-id
                     namespace)
   (common-lisp:declare
    (common-lisp:ignorable member-name group-name aws-account-id namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-group-membership-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/groups/~A/members/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'group-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'member-name))))
                                                        "DeleteGroupMembership"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-group-membership))
(common-lisp:progn
 (common-lisp:defun delete-iampolicy-assignment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id assignment-name namespace)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id assignment-name namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-iampolicy-assignment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespace/~A/iam-policy-assignments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assignment-name))))
                                                        "DeleteIAMPolicyAssignment"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-iampolicy-assignment))
(common-lisp:progn
 (common-lisp:defun delete-namespace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id namespace)
   (common-lisp:declare (common-lisp:ignorable aws-account-id namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-namespace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))))
                                                        "DeleteNamespace"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-namespace))
(common-lisp:progn
 (common-lisp:defun delete-refresh-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-set-id aws-account-id schedule-id)
   (common-lisp:declare
    (common-lisp:ignorable data-set-id aws-account-id schedule-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-refresh-schedule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sets/~A/refresh-schedules/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'schedule-id))))
                                                        "DeleteRefreshSchedule"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-refresh-schedule))
(common-lisp:progn
 (common-lisp:defun delete-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id template-id
                     version-number)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id template-id version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/templates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-id))))
                                                        "DeleteTemplate"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-template))
(common-lisp:progn
 (common-lisp:defun delete-template-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id template-id alias-name)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id template-id alias-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-template-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/templates/~A/aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'alias-name))))
                                                        "DeleteTemplateAlias"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-template-alias))
(common-lisp:progn
 (common-lisp:defun delete-theme
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id theme-id version-number)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id theme-id version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-theme-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/themes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'theme-id))))
                                                        "DeleteTheme"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-theme))
(common-lisp:progn
 (common-lisp:defun delete-theme-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id theme-id alias-name)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id theme-id alias-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-theme-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/themes/~A/aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'theme-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'alias-name))))
                                                        "DeleteThemeAlias"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-theme-alias))
(common-lisp:progn
 (common-lisp:defun delete-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name aws-account-id namespace)
   (common-lisp:declare
    (common-lisp:ignorable user-name aws-account-id namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/users/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-name))))
                                                        "DeleteUser"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-user))
(common-lisp:progn
 (common-lisp:defun delete-user-by-principal-id
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key principal-id aws-account-id namespace)
   (common-lisp:declare
    (common-lisp:ignorable principal-id aws-account-id namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-user-by-principal-id-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/user-principals/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-id))))
                                                        "DeleteUserByPrincipalId"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-user-by-principal-id))
(common-lisp:progn
 (common-lisp:defun describe-account-customization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id namespace resolved)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id namespace resolved))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-account-customization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/customizations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "DescribeAccountCustomization"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-account-customization))
(common-lisp:progn
 (common-lisp:defun describe-account-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-account-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/settings"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "DescribeAccountSettings"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-account-settings))
(common-lisp:progn
 (common-lisp:defun describe-account-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-account-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/account/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "DescribeAccountSubscription"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-account-subscription))
(common-lisp:progn
 (common-lisp:defun describe-analysis
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id analysis-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id analysis-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-analysis-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/analyses/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analysis-id))))
                                                        "DescribeAnalysis"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-analysis))
(common-lisp:progn
 (common-lisp:defun describe-analysis-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id analysis-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id analysis-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-analysis-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/analyses/~A/definition"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analysis-id))))
                                                        "DescribeAnalysisDefinition"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-analysis-definition))
(common-lisp:progn
 (common-lisp:defun describe-analysis-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id analysis-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id analysis-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-analysis-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/analyses/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analysis-id))))
                                                        "DescribeAnalysisPermissions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-analysis-permissions))
(common-lisp:progn
 (common-lisp:defun describe-dashboard
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id dashboard-id
                     version-number alias-name)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id dashboard-id version-number
     alias-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dashboard-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/dashboards/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dashboard-id))))
                                                        "DescribeDashboard"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-dashboard))
(common-lisp:progn
 (common-lisp:defun describe-dashboard-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id dashboard-id
                     version-number alias-name)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id dashboard-id version-number
     alias-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dashboard-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/dashboards/~A/definition"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dashboard-id))))
                                                        "DescribeDashboardDefinition"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-dashboard-definition))
(common-lisp:progn
 (common-lisp:defun describe-dashboard-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id dashboard-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id dashboard-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dashboard-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/dashboards/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dashboard-id))))
                                                        "DescribeDashboardPermissions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-dashboard-permissions))
(common-lisp:progn
 (common-lisp:defun describe-data-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-set-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id data-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-data-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))))
                                                        "DescribeDataSet"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-data-set))
(common-lisp:progn
 (common-lisp:defun describe-data-set-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-set-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id data-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-data-set-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sets/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))))
                                                        "DescribeDataSetPermissions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-data-set-permissions))
(common-lisp:progn
 (common-lisp:defun describe-data-set-refresh-properties
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-set-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id data-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-data-set-refresh-properties-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sets/~A/refresh-properties"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))))
                                                        "DescribeDataSetRefreshProperties"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-data-set-refresh-properties))
(common-lisp:progn
 (common-lisp:defun describe-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-source-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id data-source-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-data-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-id))))
                                                        "DescribeDataSource"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-data-source))
(common-lisp:progn
 (common-lisp:defun describe-data-source-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-source-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id data-source-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-data-source-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sources/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-id))))
                                                        "DescribeDataSourcePermissions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-data-source-permissions))
(common-lisp:progn
 (common-lisp:defun describe-folder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id folder-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id folder-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-folder-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/folders/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))))
                                                        "DescribeFolder"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-folder))
(common-lisp:progn
 (common-lisp:defun describe-folder-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id folder-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id folder-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-folder-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/folders/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))))
                                                        "DescribeFolderPermissions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-folder-permissions))
(common-lisp:progn
 (common-lisp:defun describe-folder-resolved-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id folder-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id folder-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-folder-resolved-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/folders/~A/resolved-permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))))
                                                        "DescribeFolderResolvedPermissions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-folder-resolved-permissions))
(common-lisp:progn
 (common-lisp:defun describe-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name aws-account-id namespace)
   (common-lisp:declare
    (common-lisp:ignorable group-name aws-account-id namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'group-name))))
                                                        "DescribeGroup"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-group))
(common-lisp:progn
 (common-lisp:defun describe-group-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key member-name group-name aws-account-id
                     namespace)
   (common-lisp:declare
    (common-lisp:ignorable member-name group-name aws-account-id namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-group-membership-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/groups/~A/members/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'group-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'member-name))))
                                                        "DescribeGroupMembership"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-group-membership))
(common-lisp:progn
 (common-lisp:defun describe-iampolicy-assignment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id assignment-name namespace)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id assignment-name namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-iampolicy-assignment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/iam-policy-assignments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assignment-name))))
                                                        "DescribeIAMPolicyAssignment"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-iampolicy-assignment))
(common-lisp:progn
 (common-lisp:defun describe-ingestion
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-set-id ingestion-id)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id data-set-id ingestion-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-ingestion-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sets/~A/ingestions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ingestion-id))))
                                                        "DescribeIngestion"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-ingestion))
(common-lisp:progn
 (common-lisp:defun describe-ip-restriction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-ip-restriction-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/ip-restriction"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "DescribeIpRestriction"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-ip-restriction))
(common-lisp:progn
 (common-lisp:defun describe-namespace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id namespace)
   (common-lisp:declare (common-lisp:ignorable aws-account-id namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-namespace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))))
                                                        "DescribeNamespace"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-namespace))
(common-lisp:progn
 (common-lisp:defun describe-refresh-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-set-id schedule-id)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id data-set-id schedule-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-refresh-schedule-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sets/~A/refresh-schedules/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'schedule-id))))
                                                        "DescribeRefreshSchedule"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-refresh-schedule))
(common-lisp:progn
 (common-lisp:defun describe-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id template-id version-number
                     alias-name)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id template-id version-number
     alias-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/templates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-id))))
                                                        "DescribeTemplate"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-template))
(common-lisp:progn
 (common-lisp:defun describe-template-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id template-id alias-name)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id template-id alias-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-template-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/templates/~A/aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'alias-name))))
                                                        "DescribeTemplateAlias"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-template-alias))
(common-lisp:progn
 (common-lisp:defun describe-template-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id template-id version-number
                     alias-name)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id template-id version-number
     alias-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-template-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/templates/~A/definition"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-id))))
                                                        "DescribeTemplateDefinition"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-template-definition))
(common-lisp:progn
 (common-lisp:defun describe-template-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id template-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id template-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-template-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/templates/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-id))))
                                                        "DescribeTemplatePermissions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-template-permissions))
(common-lisp:progn
 (common-lisp:defun describe-theme
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id theme-id version-number
                     alias-name)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id theme-id version-number alias-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-theme-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/themes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'theme-id))))
                                                        "DescribeTheme"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-theme))
(common-lisp:progn
 (common-lisp:defun describe-theme-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id theme-id alias-name)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id theme-id alias-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-theme-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/themes/~A/aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'theme-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'alias-name))))
                                                        "DescribeThemeAlias"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-theme-alias))
(common-lisp:progn
 (common-lisp:defun describe-theme-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id theme-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id theme-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-theme-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/themes/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'theme-id))))
                                                        "DescribeThemePermissions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-theme-permissions))
(common-lisp:progn
 (common-lisp:defun describe-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name aws-account-id namespace)
   (common-lisp:declare
    (common-lisp:ignorable user-name aws-account-id namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/users/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-name))))
                                                        "DescribeUser"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-user))
(common-lisp:progn
 (common-lisp:defun generate-embed-url-for-anonymous-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id
                     session-lifetime-in-minutes namespace session-tags
                     authorized-resource-arns experience-configuration
                     allowed-domains)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id session-lifetime-in-minutes namespace
     session-tags authorized-resource-arns experience-configuration
     allowed-domains))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-generate-embed-url-for-anonymous-user-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/embed-url/anonymous-user"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "GenerateEmbedUrlForAnonymousUser"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'generate-embed-url-for-anonymous-user))
(common-lisp:progn
 (common-lisp:defun generate-embed-url-for-registered-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id
                     session-lifetime-in-minutes user-arn
                     experience-configuration allowed-domains)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id session-lifetime-in-minutes user-arn
     experience-configuration allowed-domains))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-generate-embed-url-for-registered-user-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/embed-url/registered-user"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "GenerateEmbedUrlForRegisteredUser"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'generate-embed-url-for-registered-user))
(common-lisp:progn
 (common-lisp:defun get-dashboard-embed-url
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id dashboard-id identity-type
                     session-lifetime-in-minutes undo-redo-disabled
                     reset-disabled state-persistence-enabled user-arn
                     namespace additional-dashboard-ids)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id dashboard-id identity-type
     session-lifetime-in-minutes undo-redo-disabled reset-disabled
     state-persistence-enabled user-arn namespace additional-dashboard-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-dashboard-embed-url-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/dashboards/~A/embed-url"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dashboard-id))))
                                                        "GetDashboardEmbedUrl"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-dashboard-embed-url))
(common-lisp:progn
 (common-lisp:defun get-session-embed-url
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id entry-point
                     session-lifetime-in-minutes user-arn)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id entry-point
     session-lifetime-in-minutes user-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-session-embed-url-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/session-embed-url"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "GetSessionEmbedUrl"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-session-embed-url))
(common-lisp:progn
 (common-lisp:defun list-analyses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-analyses-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/analyses"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "ListAnalyses"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-analyses))
(common-lisp:progn
 (common-lisp:defun list-dashboard-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id dashboard-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id dashboard-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-dashboard-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/dashboards/~A/versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dashboard-id))))
                                                        "ListDashboardVersions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-dashboard-versions))
(common-lisp:progn
 (common-lisp:defun list-dashboards
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-dashboards-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/dashboards"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "ListDashboards"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-dashboards))
(common-lisp:progn
 (common-lisp:defun list-data-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-data-sets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "ListDataSets"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-data-sets))
(common-lisp:progn
 (common-lisp:defun list-data-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-data-sources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sources"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "ListDataSources"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-data-sources))
(common-lisp:progn
 (common-lisp:defun list-folder-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id folder-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id folder-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-folder-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/folders/~A/members"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))))
                                                        "ListFolderMembers"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-folder-members))
(common-lisp:progn
 (common-lisp:defun list-folders
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-folders-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/folders"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "ListFolders"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-folders))
(common-lisp:progn
 (common-lisp:defun list-group-memberships
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name next-token max-results
                     aws-account-id namespace)
   (common-lisp:declare
    (common-lisp:ignorable group-name next-token max-results aws-account-id
     namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-group-memberships-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/groups/~A/members"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'group-name))))
                                                        "ListGroupMemberships"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-group-memberships))
(common-lisp:progn
 (common-lisp:defun list-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id next-token max-results
                     namespace)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id next-token max-results namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/groups"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))))
                                                        "ListGroups"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-groups))
(common-lisp:progn
 (common-lisp:defun list-iampolicy-assignments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id assignment-status
                     namespace next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id assignment-status namespace
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-iampolicy-assignments-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/iam-policy-assignments"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))))
                                                        "ListIAMPolicyAssignments"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-iampolicy-assignments))
(common-lisp:progn
 (common-lisp:defun list-iampolicy-assignments-for-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id user-name next-token
                     max-results namespace)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id user-name next-token max-results
     namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-iampolicy-assignments-for-user-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/users/~A/iam-policy-assignments"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-name))))
                                                        "ListIAMPolicyAssignmentsForUser"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-iampolicy-assignments-for-user))
(common-lisp:progn
 (common-lisp:defun list-ingestions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-set-id next-token aws-account-id
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable data-set-id next-token aws-account-id max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-ingestions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sets/~A/ingestions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))))
                                                        "ListIngestions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-ingestions))
(common-lisp:progn
 (common-lisp:defun list-namespaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-namespaces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "ListNamespaces"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-namespaces))
(common-lisp:progn
 (common-lisp:defun list-refresh-schedules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-set-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id data-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-refresh-schedules-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sets/~A/refresh-schedules"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))))
                                                        "ListRefreshSchedules"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-refresh-schedules))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/resources/~A/tags"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-template-aliases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id template-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id template-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-template-aliases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/templates/~A/aliases"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-id))))
                                                        "ListTemplateAliases"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-template-aliases))
(common-lisp:progn
 (common-lisp:defun list-template-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id template-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id template-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-template-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/templates/~A/versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-id))))
                                                        "ListTemplateVersions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-template-versions))
(common-lisp:progn
 (common-lisp:defun list-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-templates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/templates"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "ListTemplates"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-templates))
(common-lisp:progn
 (common-lisp:defun list-theme-aliases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id theme-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id theme-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-theme-aliases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/themes/~A/aliases"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'theme-id))))
                                                        "ListThemeAliases"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-theme-aliases))
(common-lisp:progn
 (common-lisp:defun list-theme-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id theme-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id theme-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-theme-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/themes/~A/versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'theme-id))))
                                                        "ListThemeVersions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-theme-versions))
(common-lisp:progn
 (common-lisp:defun list-themes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id next-token max-results
                     type)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id next-token max-results type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-themes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/themes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "ListThemes"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-themes))
(common-lisp:progn
 (common-lisp:defun list-user-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name aws-account-id namespace
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable user-name aws-account-id namespace next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-user-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/users/~A/groups"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-name))))
                                                        "ListUserGroups"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-user-groups))
(common-lisp:progn
 (common-lisp:defun list-users
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id next-token max-results
                     namespace)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id next-token max-results namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-users-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/users"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))))
                                                        "ListUsers"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-users))
(common-lisp:progn
 (common-lisp:defun put-data-set-refresh-properties
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-set-id
                     data-set-refresh-properties)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id data-set-id
     data-set-refresh-properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-data-set-refresh-properties-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sets/~A/refresh-properties"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))))
                                                        "PutDataSetRefreshProperties"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-data-set-refresh-properties))
(common-lisp:progn
 (common-lisp:defun register-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-type email user-role iam-arn
                     session-name aws-account-id namespace user-name
                     custom-permissions-name
                     external-login-federation-provider-type
                     custom-federation-provider-url external-login-id)
   (common-lisp:declare
    (common-lisp:ignorable identity-type email user-role iam-arn session-name
     aws-account-id namespace user-name custom-permissions-name
     external-login-federation-provider-type custom-federation-provider-url
     external-login-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/users"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))))
                                                        "RegisterUser"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-user))
(common-lisp:progn
 (common-lisp:defun restore-analysis
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id analysis-id)
   (common-lisp:declare (common-lisp:ignorable aws-account-id analysis-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-restore-analysis-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/restore/analyses/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analysis-id))))
                                                        "RestoreAnalysis"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'restore-analysis))
(common-lisp:progn
 (common-lisp:defun search-analyses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-analyses-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/search/analyses"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "SearchAnalyses"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-analyses))
(common-lisp:progn
 (common-lisp:defun search-dashboards
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-dashboards-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/search/dashboards"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "SearchDashboards"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-dashboards))
(common-lisp:progn
 (common-lisp:defun search-data-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-data-sets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/search/data-sets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "SearchDataSets"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-data-sets))
(common-lisp:progn
 (common-lisp:defun search-data-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-data-sources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/search/data-sources"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "SearchDataSources"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-data-sources))
(common-lisp:progn
 (common-lisp:defun search-folders
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-folders-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/search/folders"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "SearchFolders"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-folders))
(common-lisp:progn
 (common-lisp:defun search-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id next-token max-results
                     namespace filters)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id next-token max-results namespace
     filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/groups-search"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))))
                                                        "SearchGroups"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-groups))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/resources/~A/tags"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/resources/~A/tags"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-account-customization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id namespace
                     account-customization)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id namespace account-customization))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-account-customization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/customizations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "UpdateAccountCustomization"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-account-customization))
(common-lisp:progn
 (common-lisp:defun update-account-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id default-namespace
                     notification-email termination-protection-enabled)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id default-namespace notification-email
     termination-protection-enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-account-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/settings"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "UpdateAccountSettings"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-account-settings))
(common-lisp:progn
 (common-lisp:defun update-analysis
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id analysis-id name
                     parameters source-entity theme-arn definition)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id analysis-id name parameters
     source-entity theme-arn definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-analysis-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/analyses/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analysis-id))))
                                                        "UpdateAnalysis"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-analysis))
(common-lisp:progn
 (common-lisp:defun update-analysis-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id analysis-id
                     grant-permissions revoke-permissions)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id analysis-id grant-permissions
     revoke-permissions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-analysis-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/analyses/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analysis-id))))
                                                        "UpdateAnalysisPermissions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-analysis-permissions))
(common-lisp:progn
 (common-lisp:defun update-dashboard
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id dashboard-id name
                     source-entity parameters version-description
                     dashboard-publish-options theme-arn definition)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id dashboard-id name source-entity
     parameters version-description dashboard-publish-options theme-arn
     definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-dashboard-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/dashboards/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dashboard-id))))
                                                        "UpdateDashboard"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-dashboard))
(common-lisp:progn
 (common-lisp:defun update-dashboard-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id dashboard-id
                     grant-permissions revoke-permissions
                     grant-link-permissions revoke-link-permissions)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id dashboard-id grant-permissions
     revoke-permissions grant-link-permissions revoke-link-permissions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-dashboard-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/dashboards/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dashboard-id))))
                                                        "UpdateDashboardPermissions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-dashboard-permissions))
(common-lisp:progn
 (common-lisp:defun update-dashboard-published-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id dashboard-id
                     version-number)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id dashboard-id version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-dashboard-published-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/dashboards/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dashboard-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-number))))
                                                        "UpdateDashboardPublishedVersion"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-dashboard-published-version))
(common-lisp:progn
 (common-lisp:defun update-data-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-set-id name
                     physical-table-map logical-table-map import-mode
                     column-groups field-folders row-level-permission-data-set
                     row-level-permission-tag-configuration
                     column-level-permission-rules
                     data-set-usage-configuration)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id data-set-id name physical-table-map
     logical-table-map import-mode column-groups field-folders
     row-level-permission-data-set row-level-permission-tag-configuration
     column-level-permission-rules data-set-usage-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-data-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))))
                                                        "UpdateDataSet"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-data-set))
(common-lisp:progn
 (common-lisp:defun update-data-set-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-set-id
                     grant-permissions revoke-permissions)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id data-set-id grant-permissions
     revoke-permissions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-data-set-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sets/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))))
                                                        "UpdateDataSetPermissions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-data-set-permissions))
(common-lisp:progn
 (common-lisp:defun update-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-source-id name
                     data-source-parameters credentials
                     vpc-connection-properties ssl-properties)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id data-source-id name
     data-source-parameters credentials vpc-connection-properties
     ssl-properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-data-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-id))))
                                                        "UpdateDataSource"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-data-source))
(common-lisp:progn
 (common-lisp:defun update-data-source-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id data-source-id
                     grant-permissions revoke-permissions)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id data-source-id grant-permissions
     revoke-permissions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-data-source-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sources/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-id))))
                                                        "UpdateDataSourcePermissions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-data-source-permissions))
(common-lisp:progn
 (common-lisp:defun update-folder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id folder-id name)
   (common-lisp:declare (common-lisp:ignorable aws-account-id folder-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-folder-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/folders/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))))
                                                        "UpdateFolder"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-folder))
(common-lisp:progn
 (common-lisp:defun update-folder-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id folder-id
                     grant-permissions revoke-permissions)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id folder-id grant-permissions
     revoke-permissions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-folder-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/folders/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))))
                                                        "UpdateFolderPermissions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-folder-permissions))
(common-lisp:progn
 (common-lisp:defun update-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name description aws-account-id
                     namespace)
   (common-lisp:declare
    (common-lisp:ignorable group-name description aws-account-id namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'group-name))))
                                                        "UpdateGroup"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-group))
(common-lisp:progn
 (common-lisp:defun update-iampolicy-assignment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id assignment-name namespace
                     assignment-status policy-arn identities)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id assignment-name namespace
     assignment-status policy-arn identities))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-iampolicy-assignment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/iam-policy-assignments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assignment-name))))
                                                        "UpdateIAMPolicyAssignment"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-iampolicy-assignment))
(common-lisp:progn
 (common-lisp:defun update-ip-restriction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id ip-restriction-rule-map
                     enabled)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id ip-restriction-rule-map enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-ip-restriction-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/ip-restriction"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "UpdateIpRestriction"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-ip-restriction))
(common-lisp:progn
 (common-lisp:defun update-public-sharing-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id public-sharing-enabled)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id public-sharing-enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-public-sharing-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/public-sharing-settings"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))))
                                                        "UpdatePublicSharingSettings"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-public-sharing-settings))
(common-lisp:progn
 (common-lisp:defun update-refresh-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-set-id aws-account-id schedule)
   (common-lisp:declare
    (common-lisp:ignorable data-set-id aws-account-id schedule))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-refresh-schedule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/data-sets/~A/refresh-schedules"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-set-id))))
                                                        "UpdateRefreshSchedule"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-refresh-schedule))
(common-lisp:progn
 (common-lisp:defun update-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id template-id source-entity
                     version-description name definition)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id template-id source-entity
     version-description name definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/templates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-id))))
                                                        "UpdateTemplate"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-template))
(common-lisp:progn
 (common-lisp:defun update-template-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id template-id alias-name
                     template-version-number)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id template-id alias-name
     template-version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-template-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/templates/~A/aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'alias-name))))
                                                        "UpdateTemplateAlias"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-template-alias))
(common-lisp:progn
 (common-lisp:defun update-template-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id template-id
                     grant-permissions revoke-permissions)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id template-id grant-permissions
     revoke-permissions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-template-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/templates/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-id))))
                                                        "UpdateTemplatePermissions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-template-permissions))
(common-lisp:progn
 (common-lisp:defun update-theme
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id theme-id name
                     base-theme-id version-description configuration)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id theme-id name base-theme-id
     version-description configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-theme-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/themes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'theme-id))))
                                                        "UpdateTheme"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-theme))
(common-lisp:progn
 (common-lisp:defun update-theme-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id theme-id alias-name
                     theme-version-number)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id theme-id alias-name
     theme-version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-theme-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/themes/~A/aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'theme-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'alias-name))))
                                                        "UpdateThemeAlias"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-theme-alias))
(common-lisp:progn
 (common-lisp:defun update-theme-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id theme-id grant-permissions
                     revoke-permissions)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id theme-id grant-permissions
     revoke-permissions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-theme-permissions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/themes/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'theme-id))))
                                                        "UpdateThemePermissions"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-theme-permissions))
(common-lisp:progn
 (common-lisp:defun update-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name aws-account-id namespace email
                     role custom-permissions-name unapply-custom-permissions
                     external-login-federation-provider-type
                     custom-federation-provider-url external-login-id)
   (common-lisp:declare
    (common-lisp:ignorable user-name aws-account-id namespace email role
     custom-permissions-name unapply-custom-permissions
     external-login-federation-provider-type custom-federation-provider-url
     external-login-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'quicksight-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/~A/namespaces/~A/users/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'aws-account-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'namespace))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-name))))
                                                        "UpdateUser"
                                                        "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-user))
