;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/kafkaconnect/api
  (:use)
  (:nicknames #:aws/kafkaconnect)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/kafkaconnect/api)
(common-lisp:progn
 (common-lisp:define-condition kafkaconnect-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'kafkaconnect-error))
(common-lisp:progn
 (common-lisp:defclass kafkaconnect-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "kafkaconnect" :api-version
                        "2021-09-14" :host-prefix "kafkaconnect" :signing-name
                        "kafkaconnect" :global-host common-lisp:nil))
 (common-lisp:export 'kafkaconnect-request))
(common-lisp:defvar *error-map*
  '(("BadRequestException" . bad-request-exception)
    ("ConflictException" . conflict-exception)
    ("ForbiddenException" . forbidden-exception)
    ("InternalServerErrorException" . internal-server-error-exception)
    ("NotFoundException" . not-found-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("TooManyRequestsException" . too-many-requests-exception)
    ("UnauthorizedException" . unauthorized-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (apache-kafka-cluster (:copier common-lisp:nil)
      (:conc-name "struct-shape-apache-kafka-cluster-"))
   (bootstrap-servers (common-lisp:error ":bootstrapservers is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (vpc (common-lisp:error ":vpc is required") :type
    (common-lisp:or vpc common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'apache-kafka-cluster 'make-apache-kafka-cluster))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input apache-kafka-cluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input apache-kafka-cluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bootstrap-servers))
      (common-lisp:list
       (common-lisp:cons "bootstrapServers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input apache-kafka-cluster))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (apache-kafka-cluster-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-apache-kafka-cluster-description-"))
   (bootstrap-servers common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (vpc common-lisp:nil :type
    (common-lisp:or vpc-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'apache-kafka-cluster-description
                    'make-apache-kafka-cluster-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apache-kafka-cluster-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apache-kafka-cluster-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bootstrap-servers))
      (common-lisp:list
       (common-lisp:cons "bootstrapServers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apache-kafka-cluster-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (auto-scaling (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-scaling-"))
   (max-worker-count (common-lisp:error ":maxworkercount is required") :type
    (common-lisp:or |__integerMin1Max10| common-lisp:null))
   (mcu-count (common-lisp:error ":mcucount is required") :type
    (common-lisp:or |__integerMin1Max8| common-lisp:null))
   (min-worker-count (common-lisp:error ":minworkercount is required") :type
    (common-lisp:or |__integerMin1Max10| common-lisp:null))
   (scale-in-policy common-lisp:nil :type
    (common-lisp:or scale-in-policy common-lisp:null))
   (scale-out-policy common-lisp:nil :type
    (common-lisp:or scale-out-policy common-lisp:null)))
 (common-lisp:export (common-lisp:list 'auto-scaling 'make-auto-scaling))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-scaling))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-scaling))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-worker-count))
      (common-lisp:list
       (common-lisp:cons "maxWorkerCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mcu-count))
      (common-lisp:list
       (common-lisp:cons "mcuCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-worker-count))
      (common-lisp:list
       (common-lisp:cons "minWorkerCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale-in-policy))
      (common-lisp:list
       (common-lisp:cons "scaleInPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale-out-policy))
      (common-lisp:list
       (common-lisp:cons "scaleOutPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-scaling))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (auto-scaling-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-scaling-description-"))
   (max-worker-count common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (mcu-count common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (min-worker-count common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (scale-in-policy common-lisp:nil :type
    (common-lisp:or scale-in-policy-description common-lisp:null))
   (scale-out-policy common-lisp:nil :type
    (common-lisp:or scale-out-policy-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-description 'make-auto-scaling-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-worker-count))
      (common-lisp:list
       (common-lisp:cons "maxWorkerCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mcu-count))
      (common-lisp:list
       (common-lisp:cons "mcuCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-worker-count))
      (common-lisp:list
       (common-lisp:cons "minWorkerCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale-in-policy))
      (common-lisp:list
       (common-lisp:cons "scaleInPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale-out-policy))
      (common-lisp:list
       (common-lisp:cons "scaleOutPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (auto-scaling-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-scaling-update-"))
   (max-worker-count (common-lisp:error ":maxworkercount is required") :type
    (common-lisp:or |__integerMin1Max10| common-lisp:null))
   (mcu-count (common-lisp:error ":mcucount is required") :type
    (common-lisp:or |__integerMin1Max8| common-lisp:null))
   (min-worker-count (common-lisp:error ":minworkercount is required") :type
    (common-lisp:or |__integerMin1Max10| common-lisp:null))
   (scale-in-policy (common-lisp:error ":scaleinpolicy is required") :type
    (common-lisp:or scale-in-policy-update common-lisp:null))
   (scale-out-policy (common-lisp:error ":scaleoutpolicy is required") :type
    (common-lisp:or scale-out-policy-update common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-update 'make-auto-scaling-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-scaling-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-scaling-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-worker-count))
      (common-lisp:list
       (common-lisp:cons "maxWorkerCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mcu-count))
      (common-lisp:list
       (common-lisp:cons "mcuCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-worker-count))
      (common-lisp:list
       (common-lisp:cons "minWorkerCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale-in-policy))
      (common-lisp:list
       (common-lisp:cons "scaleInPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale-out-policy))
      (common-lisp:list
       (common-lisp:cons "scaleOutPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-scaling-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (kafkaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (capacity (:copier common-lisp:nil) (:conc-name "struct-shape-capacity-"))
   (auto-scaling common-lisp:nil :type
    (common-lisp:or auto-scaling common-lisp:null))
   (provisioned-capacity common-lisp:nil :type
    (common-lisp:or provisioned-capacity common-lisp:null)))
 (common-lisp:export (common-lisp:list 'capacity 'make-capacity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input capacity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input capacity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling))
      (common-lisp:list
       (common-lisp:cons "autoScaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-capacity))
      (common-lisp:list
       (common-lisp:cons "provisionedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input capacity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (capacity-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-capacity-description-"))
   (auto-scaling common-lisp:nil :type
    (common-lisp:or auto-scaling-description common-lisp:null))
   (provisioned-capacity common-lisp:nil :type
    (common-lisp:or provisioned-capacity-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'capacity-description 'make-capacity-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input capacity-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input capacity-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling))
      (common-lisp:list
       (common-lisp:cons "autoScaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-capacity))
      (common-lisp:list
       (common-lisp:cons "provisionedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input capacity-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (capacity-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-capacity-update-"))
   (auto-scaling common-lisp:nil :type
    (common-lisp:or auto-scaling-update common-lisp:null))
   (provisioned-capacity common-lisp:nil :type
    (common-lisp:or provisioned-capacity-update common-lisp:null)))
 (common-lisp:export (common-lisp:list 'capacity-update 'make-capacity-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input capacity-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input capacity-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling))
      (common-lisp:list
       (common-lisp:cons "autoScaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-capacity))
      (common-lisp:list
       (common-lisp:cons "provisionedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input capacity-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-watch-logs-log-delivery (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-watch-logs-log-delivery-"))
   (enabled (common-lisp:error ":enabled is required") :type
    (common-lisp:or |__boolean| common-lisp:null))
   (log-group common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-logs-log-delivery
                    'make-cloud-watch-logs-log-delivery))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-log-delivery))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-log-delivery))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group))
      (common-lisp:list
       (common-lisp:cons "logGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-log-delivery))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-watch-logs-log-delivery-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-watch-logs-log-delivery-description-"))
   (enabled common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (log-group common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-logs-log-delivery-description
                    'make-cloud-watch-logs-log-delivery-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-log-delivery-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-log-delivery-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group))
      (common-lisp:list
       (common-lisp:cons "logGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-log-delivery-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (kafkaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:deftype connector-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (connector-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-connector-summary-"))
   (capacity common-lisp:nil :type
    (common-lisp:or capacity-description common-lisp:null))
   (connector-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (connector-description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (connector-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (connector-state common-lisp:nil :type
    (common-lisp:or connector-state common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (current-version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (kafka-cluster common-lisp:nil :type
    (common-lisp:or kafka-cluster-description common-lisp:null))
   (kafka-cluster-client-authentication common-lisp:nil :type
    (common-lisp:or kafka-cluster-client-authentication-description
                    common-lisp:null))
   (kafka-cluster-encryption-in-transit common-lisp:nil :type
    (common-lisp:or kafka-cluster-encryption-in-transit-description
                    common-lisp:null))
   (kafka-connect-version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (log-delivery common-lisp:nil :type
    (common-lisp:or log-delivery-description common-lisp:null))
   (plugins common-lisp:nil :type
    (common-lisp:or |__listOfPluginDescription| common-lisp:null))
   (service-execution-role-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (worker-configuration common-lisp:nil :type
    (common-lisp:or worker-configuration-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connector-summary 'make-connector-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connector-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connector-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity))
      (common-lisp:list
       (common-lisp:cons "capacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-arn))
      (common-lisp:list
       (common-lisp:cons "connectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-description))
      (common-lisp:list
       (common-lisp:cons "connectorDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-name))
      (common-lisp:list
       (common-lisp:cons "connectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-state))
      (common-lisp:list
       (common-lisp:cons "connectorState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "currentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kafka-cluster))
      (common-lisp:list
       (common-lisp:cons "kafkaCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kafka-cluster-client-authentication))
      (common-lisp:list
       (common-lisp:cons "kafkaClusterClientAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kafka-cluster-encryption-in-transit))
      (common-lisp:list
       (common-lisp:cons "kafkaClusterEncryptionInTransit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kafka-connect-version))
      (common-lisp:list
       (common-lisp:cons "kafkaConnectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-delivery))
      (common-lisp:list
       (common-lisp:cons "logDelivery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plugins))
      (common-lisp:list
       (common-lisp:cons "plugins"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "serviceExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'worker-configuration))
      (common-lisp:list
       (common-lisp:cons "workerConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connector-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-connector-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-connector-request-"))
   (capacity (common-lisp:error ":capacity is required") :type
    (common-lisp:or capacity common-lisp:null))
   (connector-configuration
    (common-lisp:error ":connectorconfiguration is required") :type
    (common-lisp:or |__sensitive__mapOf__string| common-lisp:null))
   (connector-description common-lisp:nil :type
    (common-lisp:or |__stringMax1024| common-lisp:null))
   (connector-name (common-lisp:error ":connectorname is required") :type
    (common-lisp:or |__stringMin1Max128| common-lisp:null))
   (kafka-cluster (common-lisp:error ":kafkacluster is required") :type
    (common-lisp:or kafka-cluster common-lisp:null))
   (kafka-cluster-client-authentication
    (common-lisp:error ":kafkaclusterclientauthentication is required") :type
    (common-lisp:or kafka-cluster-client-authentication common-lisp:null))
   (kafka-cluster-encryption-in-transit
    (common-lisp:error ":kafkaclusterencryptionintransit is required") :type
    (common-lisp:or kafka-cluster-encryption-in-transit common-lisp:null))
   (kafka-connect-version
    (common-lisp:error ":kafkaconnectversion is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (log-delivery common-lisp:nil :type
    (common-lisp:or log-delivery common-lisp:null))
   (plugins (common-lisp:error ":plugins is required") :type
    (common-lisp:or |__listOfPlugin| common-lisp:null))
   (service-execution-role-arn
    (common-lisp:error ":serviceexecutionrolearn is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (worker-configuration common-lisp:nil :type
    (common-lisp:or worker-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-connector-request 'make-create-connector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity))
      (common-lisp:list
       (common-lisp:cons "capacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-configuration))
      (common-lisp:list
       (common-lisp:cons "connectorConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-description))
      (common-lisp:list
       (common-lisp:cons "connectorDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-name))
      (common-lisp:list
       (common-lisp:cons "connectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kafka-cluster))
      (common-lisp:list
       (common-lisp:cons "kafkaCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kafka-cluster-client-authentication))
      (common-lisp:list
       (common-lisp:cons "kafkaClusterClientAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kafka-cluster-encryption-in-transit))
      (common-lisp:list
       (common-lisp:cons "kafkaClusterEncryptionInTransit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kafka-connect-version))
      (common-lisp:list
       (common-lisp:cons "kafkaConnectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-delivery))
      (common-lisp:list
       (common-lisp:cons "logDelivery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plugins))
      (common-lisp:list
       (common-lisp:cons "plugins"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "serviceExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'worker-configuration))
      (common-lisp:list
       (common-lisp:cons "workerConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-connector-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-connector-response-"))
   (connector-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (connector-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (connector-state common-lisp:nil :type
    (common-lisp:or connector-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-connector-response
                    'make-create-connector-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-arn))
      (common-lisp:list
       (common-lisp:cons "connectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-name))
      (common-lisp:list
       (common-lisp:cons "connectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-state))
      (common-lisp:list
       (common-lisp:cons "connectorState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-custom-plugin-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-custom-plugin-request-"))
   (content-type (common-lisp:error ":contenttype is required") :type
    (common-lisp:or custom-plugin-content-type common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |__stringMax1024| common-lisp:null))
   (location (common-lisp:error ":location is required") :type
    (common-lisp:or custom-plugin-location common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |__stringMin1Max128| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-custom-plugin-request
                    'make-create-custom-plugin-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-plugin-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-plugin-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-plugin-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-custom-plugin-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-custom-plugin-response-"))
   (custom-plugin-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (custom-plugin-state common-lisp:nil :type
    (common-lisp:or custom-plugin-state common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (revision common-lisp:nil :type (common-lisp:or |__long| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-custom-plugin-response
                    'make-create-custom-plugin-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-plugin-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-plugin-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-plugin-arn))
      (common-lisp:list
       (common-lisp:cons "customPluginArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-plugin-state))
      (common-lisp:list
       (common-lisp:cons "customPluginState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-plugin-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-worker-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-worker-configuration-request-"))
   (description common-lisp:nil :type
    (common-lisp:or |__stringMax1024| common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |__stringMin1Max128| common-lisp:null))
   (properties-file-content
    (common-lisp:error ":propertiesfilecontent is required") :type
    (common-lisp:or |__sensitiveString| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-worker-configuration-request
                    'make-create-worker-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-worker-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-worker-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'properties-file-content))
      (common-lisp:list
       (common-lisp:cons "propertiesFileContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-worker-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-worker-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-worker-configuration-response-"))
   (creation-time common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (latest-revision common-lisp:nil :type
    (common-lisp:or worker-configuration-revision-summary common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (worker-configuration-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (worker-configuration-state common-lisp:nil :type
    (common-lisp:or worker-configuration-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-worker-configuration-response
                    'make-create-worker-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-worker-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-worker-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-revision))
      (common-lisp:list
       (common-lisp:cons "latestRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'worker-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "workerConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'worker-configuration-state))
      (common-lisp:list
       (common-lisp:cons "workerConfigurationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-worker-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-plugin (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-plugin-"))
   (custom-plugin-arn (common-lisp:error ":custompluginarn is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (revision (common-lisp:error ":revision is required") :type
    (common-lisp:or |__longMin1| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'custom-plugin 'make-custom-plugin))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-plugin))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-plugin))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-plugin-arn))
      (common-lisp:list
       (common-lisp:cons "customPluginArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-plugin))
   common-lisp:nil))
(common-lisp:deftype custom-plugin-content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (custom-plugin-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-plugin-description-"))
   (custom-plugin-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (revision common-lisp:nil :type (common-lisp:or |__long| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-plugin-description
                    'make-custom-plugin-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-plugin-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-plugin-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-plugin-arn))
      (common-lisp:list
       (common-lisp:cons "customPluginArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-plugin-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-plugin-file-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-plugin-file-description-"))
   (file-md5 common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (file-size common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-plugin-file-description
                    'make-custom-plugin-file-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-plugin-file-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-plugin-file-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-md5))
      (common-lisp:list
       (common-lisp:cons "fileMd5"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-size))
      (common-lisp:list
       (common-lisp:cons "fileSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-plugin-file-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-plugin-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-plugin-location-"))
   (s3location (common-lisp:error ":s3location is required") :type
    (common-lisp:or s3location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-plugin-location 'make-custom-plugin-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-plugin-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-plugin-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "s3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-plugin-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-plugin-location-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-plugin-location-description-"))
   (s3location common-lisp:nil :type
    (common-lisp:or s3location-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-plugin-location-description
                    'make-custom-plugin-location-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-plugin-location-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-plugin-location-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "s3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-plugin-location-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-plugin-revision-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-plugin-revision-summary-"))
   (content-type common-lisp:nil :type
    (common-lisp:or custom-plugin-content-type common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (file-description common-lisp:nil :type
    (common-lisp:or custom-plugin-file-description common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or custom-plugin-location-description common-lisp:null))
   (revision common-lisp:nil :type (common-lisp:or |__long| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-plugin-revision-summary
                    'make-custom-plugin-revision-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-plugin-revision-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-plugin-revision-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-description))
      (common-lisp:list
       (common-lisp:cons "fileDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-plugin-revision-summary))
   common-lisp:nil))
(common-lisp:deftype custom-plugin-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (custom-plugin-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-plugin-summary-"))
   (creation-time common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (custom-plugin-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (custom-plugin-state common-lisp:nil :type
    (common-lisp:or custom-plugin-state common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (latest-revision common-lisp:nil :type
    (common-lisp:or custom-plugin-revision-summary common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-plugin-summary 'make-custom-plugin-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-plugin-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-plugin-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-plugin-arn))
      (common-lisp:list
       (common-lisp:cons "customPluginArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-plugin-state))
      (common-lisp:list
       (common-lisp:cons "customPluginState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-revision))
      (common-lisp:list
       (common-lisp:cons "latestRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-plugin-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-connector-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-connector-request-"))
   (connector-arn (common-lisp:error ":connectorarn is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (current-version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-connector-request 'make-delete-connector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-connector-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-connector-response-"))
   (connector-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (connector-state common-lisp:nil :type
    (common-lisp:or connector-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-connector-response
                    'make-delete-connector-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-arn))
      (common-lisp:list
       (common-lisp:cons "connectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-state))
      (common-lisp:list
       (common-lisp:cons "connectorState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-custom-plugin-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-custom-plugin-request-"))
   (custom-plugin-arn (common-lisp:error ":custompluginarn is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-custom-plugin-request
                    'make-delete-custom-plugin-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-plugin-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-plugin-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-plugin-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-custom-plugin-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-custom-plugin-response-"))
   (custom-plugin-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (custom-plugin-state common-lisp:nil :type
    (common-lisp:or custom-plugin-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-custom-plugin-response
                    'make-delete-custom-plugin-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-plugin-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-plugin-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-plugin-arn))
      (common-lisp:list
       (common-lisp:cons "customPluginArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-plugin-state))
      (common-lisp:list
       (common-lisp:cons "customPluginState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-plugin-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-worker-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-worker-configuration-request-"))
   (worker-configuration-arn
    (common-lisp:error ":workerconfigurationarn is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-worker-configuration-request
                    'make-delete-worker-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-worker-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-worker-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-worker-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-worker-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-worker-configuration-response-"))
   (worker-configuration-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (worker-configuration-state common-lisp:nil :type
    (common-lisp:or worker-configuration-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-worker-configuration-response
                    'make-delete-worker-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-worker-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-worker-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'worker-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "workerConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'worker-configuration-state))
      (common-lisp:list
       (common-lisp:cons "workerConfigurationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-worker-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-connector-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-connector-request-"))
   (connector-arn (common-lisp:error ":connectorarn is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-connector-request
                    'make-describe-connector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-connector-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-connector-response-"))
   (capacity common-lisp:nil :type
    (common-lisp:or capacity-description common-lisp:null))
   (connector-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (connector-configuration common-lisp:nil :type
    (common-lisp:or |__sensitive__mapOf__string| common-lisp:null))
   (connector-description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (connector-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (connector-state common-lisp:nil :type
    (common-lisp:or connector-state common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (current-version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (kafka-cluster common-lisp:nil :type
    (common-lisp:or kafka-cluster-description common-lisp:null))
   (kafka-cluster-client-authentication common-lisp:nil :type
    (common-lisp:or kafka-cluster-client-authentication-description
                    common-lisp:null))
   (kafka-cluster-encryption-in-transit common-lisp:nil :type
    (common-lisp:or kafka-cluster-encryption-in-transit-description
                    common-lisp:null))
   (kafka-connect-version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (log-delivery common-lisp:nil :type
    (common-lisp:or log-delivery-description common-lisp:null))
   (plugins common-lisp:nil :type
    (common-lisp:or |__listOfPluginDescription| common-lisp:null))
   (service-execution-role-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (state-description common-lisp:nil :type
    (common-lisp:or state-description common-lisp:null))
   (worker-configuration common-lisp:nil :type
    (common-lisp:or worker-configuration-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-connector-response
                    'make-describe-connector-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity))
      (common-lisp:list
       (common-lisp:cons "capacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-arn))
      (common-lisp:list
       (common-lisp:cons "connectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-configuration))
      (common-lisp:list
       (common-lisp:cons "connectorConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-description))
      (common-lisp:list
       (common-lisp:cons "connectorDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-name))
      (common-lisp:list
       (common-lisp:cons "connectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-state))
      (common-lisp:list
       (common-lisp:cons "connectorState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "currentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kafka-cluster))
      (common-lisp:list
       (common-lisp:cons "kafkaCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kafka-cluster-client-authentication))
      (common-lisp:list
       (common-lisp:cons "kafkaClusterClientAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kafka-cluster-encryption-in-transit))
      (common-lisp:list
       (common-lisp:cons "kafkaClusterEncryptionInTransit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kafka-connect-version))
      (common-lisp:list
       (common-lisp:cons "kafkaConnectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-delivery))
      (common-lisp:list
       (common-lisp:cons "logDelivery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plugins))
      (common-lisp:list
       (common-lisp:cons "plugins"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "serviceExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-description))
      (common-lisp:list
       (common-lisp:cons "stateDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'worker-configuration))
      (common-lisp:list
       (common-lisp:cons "workerConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-custom-plugin-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-custom-plugin-request-"))
   (custom-plugin-arn (common-lisp:error ":custompluginarn is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-custom-plugin-request
                    'make-describe-custom-plugin-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-plugin-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-plugin-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-plugin-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-custom-plugin-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-custom-plugin-response-"))
   (creation-time common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (custom-plugin-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (custom-plugin-state common-lisp:nil :type
    (common-lisp:or custom-plugin-state common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (latest-revision common-lisp:nil :type
    (common-lisp:or custom-plugin-revision-summary common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (state-description common-lisp:nil :type
    (common-lisp:or state-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-custom-plugin-response
                    'make-describe-custom-plugin-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-plugin-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-plugin-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-plugin-arn))
      (common-lisp:list
       (common-lisp:cons "customPluginArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-plugin-state))
      (common-lisp:list
       (common-lisp:cons "customPluginState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-revision))
      (common-lisp:list
       (common-lisp:cons "latestRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-description))
      (common-lisp:list
       (common-lisp:cons "stateDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-plugin-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-worker-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-worker-configuration-request-"))
   (worker-configuration-arn
    (common-lisp:error ":workerconfigurationarn is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-worker-configuration-request
                    'make-describe-worker-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-worker-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-worker-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-worker-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-worker-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-worker-configuration-response-"))
   (creation-time common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (latest-revision common-lisp:nil :type
    (common-lisp:or worker-configuration-revision-description
                    common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (worker-configuration-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (worker-configuration-state common-lisp:nil :type
    (common-lisp:or worker-configuration-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-worker-configuration-response
                    'make-describe-worker-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-worker-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-worker-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-revision))
      (common-lisp:list
       (common-lisp:cons "latestRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'worker-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "workerConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'worker-configuration-state))
      (common-lisp:list
       (common-lisp:cons "workerConfigurationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-worker-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (firehose-log-delivery (:copier common-lisp:nil)
      (:conc-name "struct-shape-firehose-log-delivery-"))
   (delivery-stream common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (enabled (common-lisp:error ":enabled is required") :type
    (common-lisp:or |__boolean| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'firehose-log-delivery 'make-firehose-log-delivery))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          firehose-log-delivery))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          firehose-log-delivery))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-stream))
      (common-lisp:list
       (common-lisp:cons "deliveryStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          firehose-log-delivery))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (firehose-log-delivery-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-firehose-log-delivery-description-"))
   (delivery-stream common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'firehose-log-delivery-description
                    'make-firehose-log-delivery-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          firehose-log-delivery-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          firehose-log-delivery-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-stream))
      (common-lisp:list
       (common-lisp:cons "deliveryStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          firehose-log-delivery-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition forbidden-exception
     (kafkaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       forbidden-exception-message)))
 (common-lisp:export
  (common-lisp:list 'forbidden-exception 'forbidden-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition internal-server-error-exception
     (kafkaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-error-exception
                    'internal-server-error-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (kafka-cluster (:copier common-lisp:nil)
      (:conc-name "struct-shape-kafka-cluster-"))
   (apache-kafka-cluster (common-lisp:error ":apachekafkacluster is required")
    :type (common-lisp:or apache-kafka-cluster common-lisp:null)))
 (common-lisp:export (common-lisp:list 'kafka-cluster 'make-kafka-cluster))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kafka-cluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kafka-cluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'apache-kafka-cluster))
      (common-lisp:list
       (common-lisp:cons "apacheKafkaCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kafka-cluster))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kafka-cluster-client-authentication (:copier common-lisp:nil)
      (:conc-name "struct-shape-kafka-cluster-client-authentication-"))
   (authentication-type (common-lisp:error ":authenticationtype is required")
    :type
    (common-lisp:or kafka-cluster-client-authentication-type
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kafka-cluster-client-authentication
                    'make-kafka-cluster-client-authentication))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kafka-cluster-client-authentication))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kafka-cluster-client-authentication))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "authenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kafka-cluster-client-authentication))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kafka-cluster-client-authentication-description (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-kafka-cluster-client-authentication-description-"))
   (authentication-type common-lisp:nil :type
    (common-lisp:or kafka-cluster-client-authentication-type
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kafka-cluster-client-authentication-description
                    'make-kafka-cluster-client-authentication-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kafka-cluster-client-authentication-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kafka-cluster-client-authentication-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "authenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kafka-cluster-client-authentication-description))
   common-lisp:nil))
(common-lisp:deftype kafka-cluster-client-authentication-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (kafka-cluster-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-kafka-cluster-description-"))
   (apache-kafka-cluster common-lisp:nil :type
    (common-lisp:or apache-kafka-cluster-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kafka-cluster-description
                    'make-kafka-cluster-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kafka-cluster-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kafka-cluster-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'apache-kafka-cluster))
      (common-lisp:list
       (common-lisp:cons "apacheKafkaCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kafka-cluster-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kafka-cluster-encryption-in-transit (:copier common-lisp:nil)
      (:conc-name "struct-shape-kafka-cluster-encryption-in-transit-"))
   (encryption-type (common-lisp:error ":encryptiontype is required") :type
    (common-lisp:or kafka-cluster-encryption-in-transit-type
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kafka-cluster-encryption-in-transit
                    'make-kafka-cluster-encryption-in-transit))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kafka-cluster-encryption-in-transit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kafka-cluster-encryption-in-transit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "encryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kafka-cluster-encryption-in-transit))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kafka-cluster-encryption-in-transit-description (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-kafka-cluster-encryption-in-transit-description-"))
   (encryption-type common-lisp:nil :type
    (common-lisp:or kafka-cluster-encryption-in-transit-type
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kafka-cluster-encryption-in-transit-description
                    'make-kafka-cluster-encryption-in-transit-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kafka-cluster-encryption-in-transit-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kafka-cluster-encryption-in-transit-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "encryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kafka-cluster-encryption-in-transit-description))
   common-lisp:nil))
(common-lisp:deftype kafka-cluster-encryption-in-transit-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-connectors-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-connectors-request-"))
   (connector-name-prefix common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-connectors-request 'make-list-connectors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-connectors-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-connectors-response-"))
   (connectors common-lisp:nil :type
    (common-lisp:or |__listOfConnectorSummary| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-connectors-response 'make-list-connectors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connectors))
      (common-lisp:list
       (common-lisp:cons "connectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-custom-plugins-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-custom-plugins-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (name-prefix common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-custom-plugins-request
                    'make-list-custom-plugins-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-plugins-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-plugins-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-plugins-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-custom-plugins-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-custom-plugins-response-"))
   (custom-plugins common-lisp:nil :type
    (common-lisp:or |__listOfCustomPluginSummary| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-custom-plugins-response
                    'make-list-custom-plugins-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-plugins-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-plugins-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-plugins))
      (common-lisp:list
       (common-lisp:cons "customPlugins"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-plugins-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-worker-configurations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-worker-configurations-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (name-prefix common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-worker-configurations-request
                    'make-list-worker-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-worker-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-worker-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-worker-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-worker-configurations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-worker-configurations-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (worker-configurations common-lisp:nil :type
    (common-lisp:or |__listOfWorkerConfigurationSummary| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-worker-configurations-response
                    'make-list-worker-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-worker-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-worker-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'worker-configurations))
      (common-lisp:list
       (common-lisp:cons "workerConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-worker-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (log-delivery (:copier common-lisp:nil)
      (:conc-name "struct-shape-log-delivery-"))
   (worker-log-delivery (common-lisp:error ":workerlogdelivery is required")
    :type (common-lisp:or worker-log-delivery common-lisp:null)))
 (common-lisp:export (common-lisp:list 'log-delivery 'make-log-delivery))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-delivery))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-delivery))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-log-delivery))
      (common-lisp:list
       (common-lisp:cons "workerLogDelivery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-delivery))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (log-delivery-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-log-delivery-description-"))
   (worker-log-delivery common-lisp:nil :type
    (common-lisp:or worker-log-delivery-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'log-delivery-description 'make-log-delivery-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          log-delivery-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          log-delivery-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-log-delivery))
      (common-lisp:list
       (common-lisp:cons "workerLogDelivery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          log-delivery-description))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (kafkaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (plugin (:copier common-lisp:nil) (:conc-name "struct-shape-plugin-"))
   (custom-plugin (common-lisp:error ":customplugin is required") :type
    (common-lisp:or custom-plugin common-lisp:null)))
 (common-lisp:export (common-lisp:list 'plugin 'make-plugin))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input plugin))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input plugin))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-plugin))
      (common-lisp:list
       (common-lisp:cons "customPlugin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input plugin))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (plugin-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-plugin-description-"))
   (custom-plugin common-lisp:nil :type
    (common-lisp:or custom-plugin-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'plugin-description 'make-plugin-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input plugin-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input plugin-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-plugin))
      (common-lisp:list
       (common-lisp:cons "customPlugin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input plugin-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (provisioned-capacity (:copier common-lisp:nil)
      (:conc-name "struct-shape-provisioned-capacity-"))
   (mcu-count (common-lisp:error ":mcucount is required") :type
    (common-lisp:or |__integerMin1Max8| common-lisp:null))
   (worker-count (common-lisp:error ":workercount is required") :type
    (common-lisp:or |__integerMin1Max10| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'provisioned-capacity 'make-provisioned-capacity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input provisioned-capacity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input provisioned-capacity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mcu-count))
      (common-lisp:list
       (common-lisp:cons "mcuCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-count))
      (common-lisp:list
       (common-lisp:cons "workerCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input provisioned-capacity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (provisioned-capacity-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-provisioned-capacity-description-"))
   (mcu-count common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (worker-count common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'provisioned-capacity-description
                    'make-provisioned-capacity-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-capacity-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-capacity-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mcu-count))
      (common-lisp:list
       (common-lisp:cons "mcuCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-count))
      (common-lisp:list
       (common-lisp:cons "workerCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-capacity-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (provisioned-capacity-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-provisioned-capacity-update-"))
   (mcu-count (common-lisp:error ":mcucount is required") :type
    (common-lisp:or |__integerMin1Max8| common-lisp:null))
   (worker-count (common-lisp:error ":workercount is required") :type
    (common-lisp:or |__integerMin1Max10| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'provisioned-capacity-update
                    'make-provisioned-capacity-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-capacity-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-capacity-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mcu-count))
      (common-lisp:list
       (common-lisp:cons "mcuCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-count))
      (common-lisp:list
       (common-lisp:cons "workerCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-capacity-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3location (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3location-"))
   (bucket-arn (common-lisp:error ":bucketarn is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (file-key (common-lisp:error ":filekey is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (object-version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3location 'make-s3location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "bucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-key))
      (common-lisp:list
       (common-lisp:cons "fileKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-version))
      (common-lisp:list
       (common-lisp:cons "objectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3location-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3location-description-"))
   (bucket-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (file-key common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (object-version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3location-description 'make-s3location-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3location-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3location-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "bucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-key))
      (common-lisp:list
       (common-lisp:cons "fileKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-version))
      (common-lisp:list
       (common-lisp:cons "objectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3location-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3log-delivery (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3log-delivery-"))
   (bucket common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (enabled (common-lisp:error ":enabled is required") :type
    (common-lisp:or |__boolean| common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3log-delivery 'make-s3log-delivery))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3log-delivery))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3log-delivery))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3log-delivery))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3log-delivery-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3log-delivery-description-"))
   (bucket common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3log-delivery-description
                    'make-s3log-delivery-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3log-delivery-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3log-delivery-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3log-delivery-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scale-in-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-scale-in-policy-"))
   (cpu-utilization-percentage
    (common-lisp:error ":cpuutilizationpercentage is required") :type
    (common-lisp:or |__integerMin1Max100| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'scale-in-policy 'make-scale-in-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scale-in-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scale-in-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cpu-utilization-percentage))
      (common-lisp:list
       (common-lisp:cons "cpuUtilizationPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scale-in-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scale-in-policy-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-scale-in-policy-description-"))
   (cpu-utilization-percentage common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scale-in-policy-description
                    'make-scale-in-policy-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scale-in-policy-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scale-in-policy-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cpu-utilization-percentage))
      (common-lisp:list
       (common-lisp:cons "cpuUtilizationPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scale-in-policy-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scale-in-policy-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-scale-in-policy-update-"))
   (cpu-utilization-percentage
    (common-lisp:error ":cpuutilizationpercentage is required") :type
    (common-lisp:or |__integerMin1Max100| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scale-in-policy-update 'make-scale-in-policy-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scale-in-policy-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scale-in-policy-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cpu-utilization-percentage))
      (common-lisp:list
       (common-lisp:cons "cpuUtilizationPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scale-in-policy-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scale-out-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-scale-out-policy-"))
   (cpu-utilization-percentage
    (common-lisp:error ":cpuutilizationpercentage is required") :type
    (common-lisp:or |__integerMin1Max100| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scale-out-policy 'make-scale-out-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scale-out-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scale-out-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cpu-utilization-percentage))
      (common-lisp:list
       (common-lisp:cons "cpuUtilizationPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scale-out-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scale-out-policy-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-scale-out-policy-description-"))
   (cpu-utilization-percentage common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scale-out-policy-description
                    'make-scale-out-policy-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scale-out-policy-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scale-out-policy-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cpu-utilization-percentage))
      (common-lisp:list
       (common-lisp:cons "cpuUtilizationPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scale-out-policy-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scale-out-policy-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-scale-out-policy-update-"))
   (cpu-utilization-percentage
    (common-lisp:error ":cpuutilizationpercentage is required") :type
    (common-lisp:or |__integerMin1Max100| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scale-out-policy-update 'make-scale-out-policy-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scale-out-policy-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scale-out-policy-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cpu-utilization-percentage))
      (common-lisp:list
       (common-lisp:cons "cpuUtilizationPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scale-out-policy-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (kafkaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (state-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-state-description-"))
   (code common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'state-description 'make-state-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input state-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input state-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input state-description))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun make-tags (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (kafkaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unauthorized-exception
     (kafkaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unauthorized-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unauthorized-exception 'unauthorized-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-connector-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-connector-request-"))
   (capacity (common-lisp:error ":capacity is required") :type
    (common-lisp:or capacity-update common-lisp:null))
   (connector-arn (common-lisp:error ":connectorarn is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (current-version (common-lisp:error ":currentversion is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-connector-request 'make-update-connector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity))
      (common-lisp:list
       (common-lisp:cons "capacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-connector-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-connector-response-"))
   (connector-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (connector-state common-lisp:nil :type
    (common-lisp:or connector-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-connector-response
                    'make-update-connector-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-arn))
      (common-lisp:list
       (common-lisp:cons "connectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-state))
      (common-lisp:list
       (common-lisp:cons "connectorState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc (:copier common-lisp:nil) (:conc-name "struct-shape-vpc-"))
   (security-groups common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (subnets (common-lisp:error ":subnets is required") :type
    (common-lisp:or |__listOf__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'vpc 'make-vpc))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "securityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-description-"))
   (security-groups common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (subnets common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'vpc-description 'make-vpc-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "securityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (worker-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-worker-configuration-"))
   (revision (common-lisp:error ":revision is required") :type
    (common-lisp:or |__longMin1| common-lisp:null))
   (worker-configuration-arn
    (common-lisp:error ":workerconfigurationarn is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'worker-configuration 'make-worker-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input worker-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input worker-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'worker-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "workerConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input worker-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (worker-configuration-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-worker-configuration-description-"))
   (revision common-lisp:nil :type (common-lisp:or |__long| common-lisp:null))
   (worker-configuration-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'worker-configuration-description
                    'make-worker-configuration-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          worker-configuration-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          worker-configuration-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'worker-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "workerConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          worker-configuration-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (worker-configuration-revision-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-worker-configuration-revision-description-"))
   (creation-time common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (properties-file-content common-lisp:nil :type
    (common-lisp:or |__sensitiveString| common-lisp:null))
   (revision common-lisp:nil :type (common-lisp:or |__long| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'worker-configuration-revision-description
                    'make-worker-configuration-revision-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          worker-configuration-revision-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          worker-configuration-revision-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'properties-file-content))
      (common-lisp:list
       (common-lisp:cons "propertiesFileContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          worker-configuration-revision-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (worker-configuration-revision-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-worker-configuration-revision-summary-"))
   (creation-time common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (revision common-lisp:nil :type (common-lisp:or |__long| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'worker-configuration-revision-summary
                    'make-worker-configuration-revision-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          worker-configuration-revision-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          worker-configuration-revision-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          worker-configuration-revision-summary))
   common-lisp:nil))
(common-lisp:deftype worker-configuration-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (worker-configuration-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-worker-configuration-summary-"))
   (creation-time common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (latest-revision common-lisp:nil :type
    (common-lisp:or worker-configuration-revision-summary common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (worker-configuration-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (worker-configuration-state common-lisp:nil :type
    (common-lisp:or worker-configuration-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'worker-configuration-summary
                    'make-worker-configuration-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          worker-configuration-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          worker-configuration-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-revision))
      (common-lisp:list
       (common-lisp:cons "latestRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'worker-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "workerConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'worker-configuration-state))
      (common-lisp:list
       (common-lisp:cons "workerConfigurationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          worker-configuration-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (worker-log-delivery (:copier common-lisp:nil)
      (:conc-name "struct-shape-worker-log-delivery-"))
   (cloud-watch-logs common-lisp:nil :type
    (common-lisp:or cloud-watch-logs-log-delivery common-lisp:null))
   (firehose common-lisp:nil :type
    (common-lisp:or firehose-log-delivery common-lisp:null))
   (s3 common-lisp:nil :type (common-lisp:or s3log-delivery common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'worker-log-delivery 'make-worker-log-delivery))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input worker-log-delivery))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input worker-log-delivery))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-watch-logs))
      (common-lisp:list
       (common-lisp:cons "cloudWatchLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firehose))
      (common-lisp:list
       (common-lisp:cons "firehose"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "s3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input worker-log-delivery))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (worker-log-delivery-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-worker-log-delivery-description-"))
   (cloud-watch-logs common-lisp:nil :type
    (common-lisp:or cloud-watch-logs-log-delivery-description
                    common-lisp:null))
   (firehose common-lisp:nil :type
    (common-lisp:or firehose-log-delivery-description common-lisp:null))
   (s3 common-lisp:nil :type
    (common-lisp:or s3log-delivery-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'worker-log-delivery-description
                    'make-worker-log-delivery-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          worker-log-delivery-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          worker-log-delivery-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-watch-logs))
      (common-lisp:list
       (common-lisp:cons "cloudWatchLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firehose))
      (common-lisp:list
       (common-lisp:cons "firehose"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "s3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          worker-log-delivery-description))
   common-lisp:nil))
(common-lisp:deftype |__boolean| () 'common-lisp:boolean)
(common-lisp:deftype |__integer| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max10| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max100| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max8| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |__listOfConnectorSummary| ()
   '(trivial-types:proper-list connector-summary))
 (common-lisp:defun make-__listofconnectorsummary
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connector-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfCustomPluginSummary| ()
   '(trivial-types:proper-list custom-plugin-summary))
 (common-lisp:defun make-__listofcustompluginsummary
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list custom-plugin-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfPlugin| () '(trivial-types:proper-list plugin))
 (common-lisp:defun make-__listofplugin
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list plugin))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfPluginDescription| ()
   '(trivial-types:proper-list plugin-description))
 (common-lisp:defun make-__listofplugindescription
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list plugin-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfWorkerConfigurationSummary| ()
   '(trivial-types:proper-list worker-configuration-summary))
 (common-lisp:defun make-__listofworkerconfigurationsummary
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            worker-configuration-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOf__string| ()
   '(trivial-types:proper-list |__string|))
 (common-lisp:defun make-__listof__string
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |__string|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |__long| () 'common-lisp:integer)
(common-lisp:deftype |__longMin1| () 'common-lisp:integer)
(common-lisp:deftype |__sensitiveString| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |__sensitive__mapOf__string| () 'common-lisp:hash-table)
 (common-lisp:defun make-__sensitive__mapof__string
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype |__string| () 'common-lisp:string)
(common-lisp:deftype |__stringMax1024| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max128| () 'common-lisp:string)
(common-lisp:deftype |__timestampIso8601| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key capacity connector-configuration
                     connector-description connector-name kafka-cluster
                     kafka-cluster-client-authentication
                     kafka-cluster-encryption-in-transit kafka-connect-version
                     log-delivery plugins service-execution-role-arn tags
                     worker-configuration)
   (common-lisp:declare
    (common-lisp:ignorable capacity connector-configuration
     connector-description connector-name kafka-cluster
     kafka-cluster-client-authentication kafka-cluster-encryption-in-transit
     kafka-connect-version log-delivery plugins service-execution-role-arn tags
     worker-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafkaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/v1/connectors"
                                                        "CreateConnector"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-connector))
(common-lisp:progn
 (common-lisp:defun create-custom-plugin
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content-type description location name
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable content-type description location name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-custom-plugin-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafkaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/custom-plugins"
                                                        "CreateCustomPlugin"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-custom-plugin))
(common-lisp:progn
 (common-lisp:defun create-worker-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description name properties-file-content
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable description name properties-file-content tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-worker-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafkaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/worker-configurations"
                                                        "CreateWorkerConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-worker-configuration))
(common-lisp:progn
 (common-lisp:defun delete-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-arn current-version)
   (common-lisp:declare (common-lisp:ignorable connector-arn current-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafkaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/connectors/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'connector-arn))))
                                                        "DeleteConnector"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-connector))
(common-lisp:progn
 (common-lisp:defun delete-custom-plugin
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key custom-plugin-arn)
   (common-lisp:declare (common-lisp:ignorable custom-plugin-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-custom-plugin-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafkaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/custom-plugins/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'custom-plugin-arn))))
                                                        "DeleteCustomPlugin"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-custom-plugin))
(common-lisp:progn
 (common-lisp:defun delete-worker-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key worker-configuration-arn)
   (common-lisp:declare (common-lisp:ignorable worker-configuration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-worker-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafkaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/worker-configurations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'worker-configuration-arn))))
                                                        "DeleteWorkerConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-worker-configuration))
(common-lisp:progn
 (common-lisp:defun describe-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-arn)
   (common-lisp:declare (common-lisp:ignorable connector-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafkaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/connectors/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'connector-arn))))
                                                        "DescribeConnector"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-connector))
(common-lisp:progn
 (common-lisp:defun describe-custom-plugin
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key custom-plugin-arn)
   (common-lisp:declare (common-lisp:ignorable custom-plugin-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-custom-plugin-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafkaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/custom-plugins/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'custom-plugin-arn))))
                                                        "DescribeCustomPlugin"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-custom-plugin))
(common-lisp:progn
 (common-lisp:defun describe-worker-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key worker-configuration-arn)
   (common-lisp:declare (common-lisp:ignorable worker-configuration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-worker-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafkaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/worker-configurations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'worker-configuration-arn))))
                                                        "DescribeWorkerConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-worker-configuration))
(common-lisp:progn
 (common-lisp:defun list-connectors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-name-prefix max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable connector-name-prefix max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-connectors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafkaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/v1/connectors"
                                                        "ListConnectors"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-connectors))
(common-lisp:progn
 (common-lisp:defun list-custom-plugins
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results name-prefix next-token)
   (common-lisp:declare
    (common-lisp:ignorable max-results name-prefix next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-custom-plugins-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafkaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/v1/custom-plugins"
                                                        "ListCustomPlugins"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-custom-plugins))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafkaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-worker-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results name-prefix next-token)
   (common-lisp:declare
    (common-lisp:ignorable max-results name-prefix next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-worker-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafkaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/v1/worker-configurations"
                                                        "ListWorkerConfigurations"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-worker-configurations))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafkaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafkaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key capacity connector-arn current-version)
   (common-lisp:declare
    (common-lisp:ignorable capacity connector-arn current-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafkaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/connectors/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'connector-arn))))
                                                        "UpdateConnector"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-connector))
