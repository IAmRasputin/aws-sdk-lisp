;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/healthlake/api
  (:use)
  (:nicknames #:aws/healthlake)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/healthlake/api)
(common-lisp:progn
 (common-lisp:defclass healthlake-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "healthlake" :protocol
                        :json))
 (common-lisp:export 'healthlake-request))
(common-lisp:progn
 (common-lisp:define-condition healthlake-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'healthlake-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (healthlake-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:deftype bounded-length-string () 'common-lisp:string)
(common-lisp:deftype client-token-string () 'common-lisp:string)
(common-lisp:deftype cmk-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (healthlake-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-fhirdatastore-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-fhirdatastore-request-tags :initform
                         common-lisp:nil)
                        (client-token :initarg :client-token :type
                         (common-lisp:or client-token-string common-lisp:null)
                         :accessor %create-fhirdatastore-request-client-token
                         :initform common-lisp:nil)
                        (preload-data-config :initarg :preload-data-config
                         :type
                         (common-lisp:or preload-data-config common-lisp:null)
                         :accessor
                         %create-fhirdatastore-request-preload-data-config
                         :initform common-lisp:nil)
                        (sse-configuration :initarg :sse-configuration :type
                         (common-lisp:or sse-configuration common-lisp:null)
                         :accessor
                         %create-fhirdatastore-request-sse-configuration
                         :initform common-lisp:nil)
                        (datastore-type-version :initarg
                         :datastore-type-version :type
                         (common-lisp:or fhirversion common-lisp:null)
                         :accessor
                         %create-fhirdatastore-request-datastore-type-version
                         :initform
                         (common-lisp:error
                          ":datastore-type-version is required"))
                        (datastore-name :initarg :datastore-name :type
                         (common-lisp:or datastore-name common-lisp:null)
                         :accessor %create-fhirdatastore-request-datastore-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-fhirdatastore-request
                    'make-create-fhirdatastore-request))
 (common-lisp:defun make-create-fhirdatastore-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags client-token preload-data-config
                     sse-configuration datastore-type-version datastore-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-fhirdatastore-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-fhirdatastore-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-fhirdatastore-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-name))
      (common-lisp:list
       (common-lisp:cons "DatastoreName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'datastore-type-version))
      (common-lisp:list
       (common-lisp:cons "DatastoreTypeVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sse-configuration))
      (common-lisp:list
       (common-lisp:cons "SseConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preload-data-config))
      (common-lisp:list
       (common-lisp:cons "PreloadDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-fhirdatastore-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-fhirdatastore-response common-lisp:nil
                       ((datastore-endpoint :initarg :datastore-endpoint :type
                         (common-lisp:or bounded-length-string
                                         common-lisp:null)
                         :accessor
                         %create-fhirdatastore-response-datastore-endpoint
                         :initform
                         (common-lisp:error ":datastore-endpoint is required"))
                        (datastore-status :initarg :datastore-status :type
                         (common-lisp:or datastore-status common-lisp:null)
                         :accessor
                         %create-fhirdatastore-response-datastore-status
                         :initform
                         (common-lisp:error ":datastore-status is required"))
                        (datastore-arn :initarg :datastore-arn :type
                         (common-lisp:or datastore-arn common-lisp:null)
                         :accessor %create-fhirdatastore-response-datastore-arn
                         :initform
                         (common-lisp:error ":datastore-arn is required"))
                        (datastore-id :initarg :datastore-id :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor %create-fhirdatastore-response-datastore-id
                         :initform
                         (common-lisp:error ":datastore-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-fhirdatastore-response
                    'make-create-fhirdatastore-response))
 (common-lisp:defun make-create-fhirdatastore-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key datastore-endpoint datastore-status
                     datastore-arn datastore-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-fhirdatastore-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-fhirdatastore-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-fhirdatastore-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "DatastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-arn))
      (common-lisp:list
       (common-lisp:cons "DatastoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-status))
      (common-lisp:list
       (common-lisp:cons "DatastoreStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-endpoint))
      (common-lisp:list
       (common-lisp:cons "DatastoreEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-fhirdatastore-response))
   common-lisp:nil))
(common-lisp:deftype datastore-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass datastore-filter common-lisp:nil
                       ((created-after :initarg :created-after :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %datastore-filter-created-after :initform
                         common-lisp:nil)
                        (created-before :initarg :created-before :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %datastore-filter-created-before :initform
                         common-lisp:nil)
                        (datastore-status :initarg :datastore-status :type
                         (common-lisp:or datastore-status common-lisp:null)
                         :accessor %datastore-filter-datastore-status :initform
                         common-lisp:nil)
                        (datastore-name :initarg :datastore-name :type
                         (common-lisp:or datastore-name common-lisp:null)
                         :accessor %datastore-filter-datastore-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'datastore-filter 'make-datastore-filter))
 (common-lisp:defun make-datastore-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-after created-before
                     datastore-status datastore-name)
   (common-lisp:apply #'common-lisp:make-instance 'datastore-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input datastore-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input datastore-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-name))
      (common-lisp:list
       (common-lisp:cons "DatastoreName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-status))
      (common-lisp:list
       (common-lisp:cons "DatastoreStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-before))
      (common-lisp:list
       (common-lisp:cons "CreatedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-after))
      (common-lisp:list
       (common-lisp:cons "CreatedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input datastore-filter))
   common-lisp:nil))
(common-lisp:deftype datastore-id () 'common-lisp:string)
(common-lisp:deftype datastore-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass datastore-properties common-lisp:nil
                       ((preload-data-config :initarg :preload-data-config
                         :type
                         (common-lisp:or preload-data-config common-lisp:null)
                         :accessor %datastore-properties-preload-data-config
                         :initform common-lisp:nil)
                        (sse-configuration :initarg :sse-configuration :type
                         (common-lisp:or sse-configuration common-lisp:null)
                         :accessor %datastore-properties-sse-configuration
                         :initform common-lisp:nil)
                        (datastore-endpoint :initarg :datastore-endpoint :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %datastore-properties-datastore-endpoint :initform
                         (common-lisp:error ":datastore-endpoint is required"))
                        (datastore-type-version :initarg
                         :datastore-type-version :type
                         (common-lisp:or fhirversion common-lisp:null)
                         :accessor %datastore-properties-datastore-type-version
                         :initform
                         (common-lisp:error
                          ":datastore-type-version is required"))
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %datastore-properties-created-at :initform
                         common-lisp:nil)
                        (datastore-status :initarg :datastore-status :type
                         (common-lisp:or datastore-status common-lisp:null)
                         :accessor %datastore-properties-datastore-status
                         :initform
                         (common-lisp:error ":datastore-status is required"))
                        (datastore-name :initarg :datastore-name :type
                         (common-lisp:or datastore-name common-lisp:null)
                         :accessor %datastore-properties-datastore-name
                         :initform common-lisp:nil)
                        (datastore-arn :initarg :datastore-arn :type
                         (common-lisp:or datastore-arn common-lisp:null)
                         :accessor %datastore-properties-datastore-arn
                         :initform
                         (common-lisp:error ":datastore-arn is required"))
                        (datastore-id :initarg :datastore-id :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor %datastore-properties-datastore-id :initform
                         (common-lisp:error ":datastore-id is required"))))
 (common-lisp:export
  (common-lisp:list 'datastore-properties 'make-datastore-properties))
 (common-lisp:defun make-datastore-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key preload-data-config sse-configuration
                     datastore-endpoint datastore-type-version created-at
                     datastore-status datastore-name datastore-arn
                     datastore-id)
   (common-lisp:apply #'common-lisp:make-instance 'datastore-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input datastore-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input datastore-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "DatastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-arn))
      (common-lisp:list
       (common-lisp:cons "DatastoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-name))
      (common-lisp:list
       (common-lisp:cons "DatastoreName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-status))
      (common-lisp:list
       (common-lisp:cons "DatastoreStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'datastore-type-version))
      (common-lisp:list
       (common-lisp:cons "DatastoreTypeVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-endpoint))
      (common-lisp:list
       (common-lisp:cons "DatastoreEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sse-configuration))
      (common-lisp:list
       (common-lisp:cons "SseConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preload-data-config))
      (common-lisp:list
       (common-lisp:cons "PreloadDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input datastore-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype datastore-properties-list ()
   '(trivial-types:proper-list datastore-properties))
 (common-lisp:defun |make-datastore-properties-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list datastore-properties))
   aws-sdk/generator/shape::members))
(common-lisp:deftype datastore-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-fhirdatastore-request common-lisp:nil
                       ((datastore-id :initarg :datastore-id :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor %delete-fhirdatastore-request-datastore-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-fhirdatastore-request
                    'make-delete-fhirdatastore-request))
 (common-lisp:defun make-delete-fhirdatastore-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key datastore-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-fhirdatastore-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-fhirdatastore-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-fhirdatastore-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "DatastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-fhirdatastore-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-fhirdatastore-response common-lisp:nil
                       ((datastore-endpoint :initarg :datastore-endpoint :type
                         (common-lisp:or bounded-length-string
                                         common-lisp:null)
                         :accessor
                         %delete-fhirdatastore-response-datastore-endpoint
                         :initform
                         (common-lisp:error ":datastore-endpoint is required"))
                        (datastore-status :initarg :datastore-status :type
                         (common-lisp:or datastore-status common-lisp:null)
                         :accessor
                         %delete-fhirdatastore-response-datastore-status
                         :initform
                         (common-lisp:error ":datastore-status is required"))
                        (datastore-arn :initarg :datastore-arn :type
                         (common-lisp:or datastore-arn common-lisp:null)
                         :accessor %delete-fhirdatastore-response-datastore-arn
                         :initform
                         (common-lisp:error ":datastore-arn is required"))
                        (datastore-id :initarg :datastore-id :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor %delete-fhirdatastore-response-datastore-id
                         :initform
                         (common-lisp:error ":datastore-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-fhirdatastore-response
                    'make-delete-fhirdatastore-response))
 (common-lisp:defun make-delete-fhirdatastore-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key datastore-endpoint datastore-status
                     datastore-arn datastore-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-fhirdatastore-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-fhirdatastore-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-fhirdatastore-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "DatastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-arn))
      (common-lisp:list
       (common-lisp:cons "DatastoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-status))
      (common-lisp:list
       (common-lisp:cons "DatastoreStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-endpoint))
      (common-lisp:list
       (common-lisp:cons "DatastoreEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-fhirdatastore-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fhirdatastore-request common-lisp:nil
                       ((datastore-id :initarg :datastore-id :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor %describe-fhirdatastore-request-datastore-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-fhirdatastore-request
                    'make-describe-fhirdatastore-request))
 (common-lisp:defun make-describe-fhirdatastore-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key datastore-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fhirdatastore-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fhirdatastore-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fhirdatastore-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "DatastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fhirdatastore-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fhirdatastore-response common-lisp:nil
                       ((datastore-properties :initarg :datastore-properties
                         :type
                         (common-lisp:or datastore-properties common-lisp:null)
                         :accessor
                         %describe-fhirdatastore-response-datastore-properties
                         :initform
                         (common-lisp:error
                          ":datastore-properties is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-fhirdatastore-response
                    'make-describe-fhirdatastore-response))
 (common-lisp:defun make-describe-fhirdatastore-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key datastore-properties)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fhirdatastore-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fhirdatastore-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fhirdatastore-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'datastore-properties))
      (common-lisp:list
       (common-lisp:cons "DatastoreProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fhirdatastore-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fhirexport-job-request common-lisp:nil
                       ((job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %describe-fhirexport-job-request-job-id :initform
                         (common-lisp:error ":job-id is required"))
                        (datastore-id :initarg :datastore-id :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor
                         %describe-fhirexport-job-request-datastore-id
                         :initform
                         (common-lisp:error ":datastore-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-fhirexport-job-request
                    'make-describe-fhirexport-job-request))
 (common-lisp:defun make-describe-fhirexport-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id datastore-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fhirexport-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fhirexport-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fhirexport-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "DatastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fhirexport-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fhirexport-job-response common-lisp:nil
                       ((export-job-properties :initarg :export-job-properties
                         :type
                         (common-lisp:or export-job-properties
                                         common-lisp:null)
                         :accessor
                         %describe-fhirexport-job-response-export-job-properties
                         :initform
                         (common-lisp:error
                          ":export-job-properties is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-fhirexport-job-response
                    'make-describe-fhirexport-job-response))
 (common-lisp:defun make-describe-fhirexport-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key export-job-properties)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fhirexport-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fhirexport-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fhirexport-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-job-properties))
      (common-lisp:list
       (common-lisp:cons "ExportJobProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fhirexport-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fhirimport-job-request common-lisp:nil
                       ((job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %describe-fhirimport-job-request-job-id :initform
                         (common-lisp:error ":job-id is required"))
                        (datastore-id :initarg :datastore-id :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor
                         %describe-fhirimport-job-request-datastore-id
                         :initform
                         (common-lisp:error ":datastore-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-fhirimport-job-request
                    'make-describe-fhirimport-job-request))
 (common-lisp:defun make-describe-fhirimport-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id datastore-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fhirimport-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fhirimport-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fhirimport-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "DatastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fhirimport-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fhirimport-job-response common-lisp:nil
                       ((import-job-properties :initarg :import-job-properties
                         :type
                         (common-lisp:or import-job-properties
                                         common-lisp:null)
                         :accessor
                         %describe-fhirimport-job-response-import-job-properties
                         :initform
                         (common-lisp:error
                          ":import-job-properties is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-fhirimport-job-response
                    'make-describe-fhirimport-job-response))
 (common-lisp:defun make-describe-fhirimport-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key import-job-properties)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fhirimport-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fhirimport-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fhirimport-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'import-job-properties))
      (common-lisp:list
       (common-lisp:cons "ImportJobProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fhirimport-job-response))
   common-lisp:nil))
(common-lisp:deftype encryption-key-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass export-job-properties common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or message common-lisp:null) :accessor
                         %export-job-properties-message :initform
                         common-lisp:nil)
                        (data-access-role-arn :initarg :data-access-role-arn
                         :type (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor %export-job-properties-data-access-role-arn
                         :initform common-lisp:nil)
                        (output-data-config :initarg :output-data-config :type
                         (common-lisp:or output-data-config common-lisp:null)
                         :accessor %export-job-properties-output-data-config
                         :initform
                         (common-lisp:error ":output-data-config is required"))
                        (datastore-id :initarg :datastore-id :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor %export-job-properties-datastore-id
                         :initform
                         (common-lisp:error ":datastore-id is required"))
                        (end-time :initarg :end-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %export-job-properties-end-time :initform
                         common-lisp:nil)
                        (submit-time :initarg :submit-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %export-job-properties-submit-time :initform
                         (common-lisp:error ":submit-time is required"))
                        (job-status :initarg :job-status :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %export-job-properties-job-status :initform
                         (common-lisp:error ":job-status is required"))
                        (job-name :initarg :job-name :type
                         (common-lisp:or job-name common-lisp:null) :accessor
                         %export-job-properties-job-name :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %export-job-properties-job-id :initform
                         (common-lisp:error ":job-id is required"))))
 (common-lisp:export
  (common-lisp:list 'export-job-properties 'make-export-job-properties))
 (common-lisp:defun make-export-job-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message data-access-role-arn
                     output-data-config datastore-id end-time submit-time
                     job-status job-name job-id)
   (common-lisp:apply #'common-lisp:make-instance 'export-job-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-job-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-job-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submit-time))
      (common-lisp:list
       (common-lisp:cons "SubmitTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "DatastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "OutputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-job-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype export-job-properties-list ()
   '(trivial-types:proper-list export-job-properties))
 (common-lisp:defun |make-export-job-properties-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list export-job-properties))
   aws-sdk/generator/shape::members))
(common-lisp:deftype fhirversion () 'common-lisp:string)
(common-lisp:deftype iam-role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass import-job-properties common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or message common-lisp:null) :accessor
                         %import-job-properties-message :initform
                         common-lisp:nil)
                        (data-access-role-arn :initarg :data-access-role-arn
                         :type (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor %import-job-properties-data-access-role-arn
                         :initform common-lisp:nil)
                        (job-output-data-config :initarg
                         :job-output-data-config :type
                         (common-lisp:or output-data-config common-lisp:null)
                         :accessor
                         %import-job-properties-job-output-data-config
                         :initform common-lisp:nil)
                        (input-data-config :initarg :input-data-config :type
                         (common-lisp:or input-data-config common-lisp:null)
                         :accessor %import-job-properties-input-data-config
                         :initform
                         (common-lisp:error ":input-data-config is required"))
                        (datastore-id :initarg :datastore-id :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor %import-job-properties-datastore-id
                         :initform
                         (common-lisp:error ":datastore-id is required"))
                        (end-time :initarg :end-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %import-job-properties-end-time :initform
                         common-lisp:nil)
                        (submit-time :initarg :submit-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %import-job-properties-submit-time :initform
                         (common-lisp:error ":submit-time is required"))
                        (job-status :initarg :job-status :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %import-job-properties-job-status :initform
                         (common-lisp:error ":job-status is required"))
                        (job-name :initarg :job-name :type
                         (common-lisp:or job-name common-lisp:null) :accessor
                         %import-job-properties-job-name :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %import-job-properties-job-id :initform
                         (common-lisp:error ":job-id is required"))))
 (common-lisp:export
  (common-lisp:list 'import-job-properties 'make-import-job-properties))
 (common-lisp:defun make-import-job-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message data-access-role-arn
                     job-output-data-config input-data-config datastore-id
                     end-time submit-time job-status job-name job-id)
   (common-lisp:apply #'common-lisp:make-instance 'import-job-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-job-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-job-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submit-time))
      (common-lisp:list
       (common-lisp:cons "SubmitTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "DatastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-output-data-config))
      (common-lisp:list
       (common-lisp:cons "JobOutputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-job-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype import-job-properties-list ()
   '(trivial-types:proper-list import-job-properties))
 (common-lisp:defun |make-import-job-properties-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list import-job-properties))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass input-data-config common-lisp:nil
                       ((s3uri :initarg :s3uri :type
                         (common-lisp:or s3uri common-lisp:null) :accessor
                         %input-data-config-s3uri :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-data-config 'make-input-data-config))
 (common-lisp:defun make-input-data-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3uri)
   (common-lisp:apply #'common-lisp:make-instance 'input-data-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-data-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-data-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-data-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (healthlake-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:deftype job-name () 'common-lisp:string)
(common-lisp:deftype job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kms-encryption-config common-lisp:nil
                       ((kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or encryption-key-id common-lisp:null)
                         :accessor %kms-encryption-config-kms-key-id :initform
                         common-lisp:nil)
                        (cmk-type :initarg :cmk-type :type
                         (common-lisp:or cmk-type common-lisp:null) :accessor
                         %kms-encryption-config-cmk-type :initform
                         (common-lisp:error ":cmk-type is required"))))
 (common-lisp:export
  (common-lisp:list 'kms-encryption-config 'make-kms-encryption-config))
 (common-lisp:defun make-kms-encryption-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-key-id cmk-type)
   (common-lisp:apply #'common-lisp:make-instance 'kms-encryption-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kms-encryption-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kms-encryption-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cmk-type))
      (common-lisp:list
       (common-lisp:cons "CmkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kms-encryption-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fhirdatastores-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results-integer common-lisp:null)
                         :accessor %list-fhirdatastores-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-fhirdatastores-request-next-token :initform
                         common-lisp:nil)
                        (filter :initarg :filter :type
                         (common-lisp:or datastore-filter common-lisp:null)
                         :accessor %list-fhirdatastores-request-filter
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-fhirdatastores-request
                    'make-list-fhirdatastores-request))
 (common-lisp:defun make-list-fhirdatastores-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filter)
   (common-lisp:apply #'common-lisp:make-instance 'list-fhirdatastores-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-fhirdatastores-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-fhirdatastores-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-fhirdatastores-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fhirdatastores-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-fhirdatastores-response-next-token :initform
                         common-lisp:nil)
                        (datastore-properties-list :initarg
                         :datastore-properties-list :type
                         (common-lisp:or datastore-properties-list
                                         common-lisp:null)
                         :accessor
                         %list-fhirdatastores-response-datastore-properties-list
                         :initform
                         (common-lisp:error
                          ":datastore-properties-list is required"))))
 (common-lisp:export
  (common-lisp:list 'list-fhirdatastores-response
                    'make-list-fhirdatastores-response))
 (common-lisp:defun make-list-fhirdatastores-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token datastore-properties-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-fhirdatastores-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-fhirdatastores-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-fhirdatastores-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'datastore-properties-list))
      (common-lisp:list
       (common-lisp:cons "DatastorePropertiesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-fhirdatastores-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fhirexport-jobs-request common-lisp:nil
                       ((submitted-after :initarg :submitted-after :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %list-fhirexport-jobs-request-submitted-after
                         :initform common-lisp:nil)
                        (submitted-before :initarg :submitted-before :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %list-fhirexport-jobs-request-submitted-before
                         :initform common-lisp:nil)
                        (job-status :initarg :job-status :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %list-fhirexport-jobs-request-job-status :initform
                         common-lisp:nil)
                        (job-name :initarg :job-name :type
                         (common-lisp:or job-name common-lisp:null) :accessor
                         %list-fhirexport-jobs-request-job-name :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results-integer common-lisp:null)
                         :accessor %list-fhirexport-jobs-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-fhirexport-jobs-request-next-token :initform
                         common-lisp:nil)
                        (datastore-id :initarg :datastore-id :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor %list-fhirexport-jobs-request-datastore-id
                         :initform
                         (common-lisp:error ":datastore-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-fhirexport-jobs-request
                    'make-list-fhirexport-jobs-request))
 (common-lisp:defun make-list-fhirexport-jobs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key submitted-after submitted-before
                     job-status job-name max-results next-token datastore-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-fhirexport-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-fhirexport-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-fhirexport-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "DatastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submitted-before))
      (common-lisp:list
       (common-lisp:cons "SubmittedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submitted-after))
      (common-lisp:list
       (common-lisp:cons "SubmittedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-fhirexport-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fhirexport-jobs-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-fhirexport-jobs-response-next-token :initform
                         common-lisp:nil)
                        (export-job-properties-list :initarg
                         :export-job-properties-list :type
                         (common-lisp:or export-job-properties-list
                                         common-lisp:null)
                         :accessor
                         %list-fhirexport-jobs-response-export-job-properties-list
                         :initform
                         (common-lisp:error
                          ":export-job-properties-list is required"))))
 (common-lisp:export
  (common-lisp:list 'list-fhirexport-jobs-response
                    'make-list-fhirexport-jobs-response))
 (common-lisp:defun make-list-fhirexport-jobs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token export-job-properties-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-fhirexport-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-fhirexport-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-fhirexport-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-job-properties-list))
      (common-lisp:list
       (common-lisp:cons "ExportJobPropertiesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-fhirexport-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fhirimport-jobs-request common-lisp:nil
                       ((submitted-after :initarg :submitted-after :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %list-fhirimport-jobs-request-submitted-after
                         :initform common-lisp:nil)
                        (submitted-before :initarg :submitted-before :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %list-fhirimport-jobs-request-submitted-before
                         :initform common-lisp:nil)
                        (job-status :initarg :job-status :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %list-fhirimport-jobs-request-job-status :initform
                         common-lisp:nil)
                        (job-name :initarg :job-name :type
                         (common-lisp:or job-name common-lisp:null) :accessor
                         %list-fhirimport-jobs-request-job-name :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results-integer common-lisp:null)
                         :accessor %list-fhirimport-jobs-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-fhirimport-jobs-request-next-token :initform
                         common-lisp:nil)
                        (datastore-id :initarg :datastore-id :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor %list-fhirimport-jobs-request-datastore-id
                         :initform
                         (common-lisp:error ":datastore-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-fhirimport-jobs-request
                    'make-list-fhirimport-jobs-request))
 (common-lisp:defun make-list-fhirimport-jobs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key submitted-after submitted-before
                     job-status job-name max-results next-token datastore-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-fhirimport-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-fhirimport-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-fhirimport-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "DatastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submitted-before))
      (common-lisp:list
       (common-lisp:cons "SubmittedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submitted-after))
      (common-lisp:list
       (common-lisp:cons "SubmittedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-fhirimport-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fhirimport-jobs-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-fhirimport-jobs-response-next-token :initform
                         common-lisp:nil)
                        (import-job-properties-list :initarg
                         :import-job-properties-list :type
                         (common-lisp:or import-job-properties-list
                                         common-lisp:null)
                         :accessor
                         %list-fhirimport-jobs-response-import-job-properties-list
                         :initform
                         (common-lisp:error
                          ":import-job-properties-list is required"))))
 (common-lisp:export
  (common-lisp:list 'list-fhirimport-jobs-response
                    'make-list-fhirimport-jobs-response))
 (common-lisp:defun make-list-fhirimport-jobs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token import-job-properties-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-fhirimport-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-fhirimport-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-fhirimport-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'import-job-properties-list))
      (common-lisp:list
       (common-lisp:cons "ImportJobPropertiesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-fhirimport-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype max-results-integer () 'common-lisp:integer)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass output-data-config common-lisp:nil
                       ((s3configuration :initarg :s3configuration :type
                         (common-lisp:or s3configuration common-lisp:null)
                         :accessor %output-data-config-s3configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'output-data-config 'make-output-data-config))
 (common-lisp:defun make-output-data-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3configuration)
   (common-lisp:apply #'common-lisp:make-instance 'output-data-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-data-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-data-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3configuration))
      (common-lisp:list
       (common-lisp:cons "S3Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-data-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass preload-data-config common-lisp:nil
                       ((preload-data-type :initarg :preload-data-type :type
                         (common-lisp:or preload-data-type common-lisp:null)
                         :accessor %preload-data-config-preload-data-type
                         :initform
                         (common-lisp:error
                          ":preload-data-type is required"))))
 (common-lisp:export
  (common-lisp:list 'preload-data-config 'make-preload-data-config))
 (common-lisp:defun make-preload-data-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key preload-data-type)
   (common-lisp:apply #'common-lisp:make-instance 'preload-data-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input preload-data-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input preload-data-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preload-data-type))
      (common-lisp:list
       (common-lisp:cons "PreloadDataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input preload-data-config))
   common-lisp:nil))
(common-lisp:deftype preload-data-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (healthlake-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass s3configuration common-lisp:nil
                       ((kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or encryption-key-id common-lisp:null)
                         :accessor %s3configuration-kms-key-id :initform
                         (common-lisp:error ":kms-key-id is required"))
                        (s3uri :initarg :s3uri :type
                         (common-lisp:or s3uri common-lisp:null) :accessor
                         %s3configuration-s3uri :initform
                         (common-lisp:error ":s3uri is required"))))
 (common-lisp:export (common-lisp:list 's3configuration 'make-s3configuration))
 (common-lisp:defun make-s3configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-key-id s3uri)
   (common-lisp:apply #'common-lisp:make-instance 's3configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3configuration))
   common-lisp:nil))
(common-lisp:deftype s3uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sse-configuration common-lisp:nil
                       ((kms-encryption-config :initarg :kms-encryption-config
                         :type
                         (common-lisp:or kms-encryption-config
                                         common-lisp:null)
                         :accessor %sse-configuration-kms-encryption-config
                         :initform
                         (common-lisp:error
                          ":kms-encryption-config is required"))))
 (common-lisp:export
  (common-lisp:list 'sse-configuration 'make-sse-configuration))
 (common-lisp:defun make-sse-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-encryption-config)
   (common-lisp:apply #'common-lisp:make-instance 'sse-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sse-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sse-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kms-encryption-config))
      (common-lisp:list
       (common-lisp:cons "KmsEncryptionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sse-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-fhirexport-job-request common-lisp:nil
                       ((client-token :initarg :client-token :type
                         (common-lisp:or client-token-string common-lisp:null)
                         :accessor %start-fhirexport-job-request-client-token
                         :initform
                         (common-lisp:error ":client-token is required"))
                        (data-access-role-arn :initarg :data-access-role-arn
                         :type (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor
                         %start-fhirexport-job-request-data-access-role-arn
                         :initform
                         (common-lisp:error
                          ":data-access-role-arn is required"))
                        (datastore-id :initarg :datastore-id :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor %start-fhirexport-job-request-datastore-id
                         :initform
                         (common-lisp:error ":datastore-id is required"))
                        (output-data-config :initarg :output-data-config :type
                         (common-lisp:or output-data-config common-lisp:null)
                         :accessor
                         %start-fhirexport-job-request-output-data-config
                         :initform
                         (common-lisp:error ":output-data-config is required"))
                        (job-name :initarg :job-name :type
                         (common-lisp:or job-name common-lisp:null) :accessor
                         %start-fhirexport-job-request-job-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-fhirexport-job-request
                    'make-start-fhirexport-job-request))
 (common-lisp:defun make-start-fhirexport-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token data-access-role-arn
                     datastore-id output-data-config job-name)
   (common-lisp:apply #'common-lisp:make-instance 'start-fhirexport-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-fhirexport-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-fhirexport-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "OutputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "DatastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-fhirexport-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-fhirexport-job-response common-lisp:nil
                       ((datastore-id :initarg :datastore-id :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor %start-fhirexport-job-response-datastore-id
                         :initform common-lisp:nil)
                        (job-status :initarg :job-status :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %start-fhirexport-job-response-job-status :initform
                         (common-lisp:error ":job-status is required"))
                        (job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %start-fhirexport-job-response-job-id :initform
                         (common-lisp:error ":job-id is required"))))
 (common-lisp:export
  (common-lisp:list 'start-fhirexport-job-response
                    'make-start-fhirexport-job-response))
 (common-lisp:defun make-start-fhirexport-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key datastore-id job-status job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-fhirexport-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-fhirexport-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-fhirexport-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "DatastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-fhirexport-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-fhirimport-job-request common-lisp:nil
                       ((client-token :initarg :client-token :type
                         (common-lisp:or client-token-string common-lisp:null)
                         :accessor %start-fhirimport-job-request-client-token
                         :initform
                         (common-lisp:error ":client-token is required"))
                        (data-access-role-arn :initarg :data-access-role-arn
                         :type (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor
                         %start-fhirimport-job-request-data-access-role-arn
                         :initform
                         (common-lisp:error
                          ":data-access-role-arn is required"))
                        (datastore-id :initarg :datastore-id :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor %start-fhirimport-job-request-datastore-id
                         :initform
                         (common-lisp:error ":datastore-id is required"))
                        (job-output-data-config :initarg
                         :job-output-data-config :type
                         (common-lisp:or output-data-config common-lisp:null)
                         :accessor
                         %start-fhirimport-job-request-job-output-data-config
                         :initform
                         (common-lisp:error
                          ":job-output-data-config is required"))
                        (input-data-config :initarg :input-data-config :type
                         (common-lisp:or input-data-config common-lisp:null)
                         :accessor
                         %start-fhirimport-job-request-input-data-config
                         :initform
                         (common-lisp:error ":input-data-config is required"))
                        (job-name :initarg :job-name :type
                         (common-lisp:or job-name common-lisp:null) :accessor
                         %start-fhirimport-job-request-job-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-fhirimport-job-request
                    'make-start-fhirimport-job-request))
 (common-lisp:defun make-start-fhirimport-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token data-access-role-arn
                     datastore-id job-output-data-config input-data-config
                     job-name)
   (common-lisp:apply #'common-lisp:make-instance 'start-fhirimport-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-fhirimport-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-fhirimport-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-output-data-config))
      (common-lisp:list
       (common-lisp:cons "JobOutputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "DatastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-fhirimport-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-fhirimport-job-response common-lisp:nil
                       ((datastore-id :initarg :datastore-id :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor %start-fhirimport-job-response-datastore-id
                         :initform common-lisp:nil)
                        (job-status :initarg :job-status :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %start-fhirimport-job-response-job-status :initform
                         (common-lisp:error ":job-status is required"))
                        (job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %start-fhirimport-job-response-job-id :initform
                         (common-lisp:error ":job-id is required"))))
 (common-lisp:export
  (common-lisp:list 'start-fhirimport-job-response
                    'make-start-fhirimport-job-response))
 (common-lisp:defun make-start-fhirimport-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key datastore-id job-status job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-fhirimport-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-fhirimport-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-fhirimport-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "DatastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-fhirimport-job-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (healthlake-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %untag-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (healthlake-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun create-fhirdatastore
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-name datastore-type-version
                     sse-configuration preload-data-config client-token tags)
   (common-lisp:declare
    (common-lisp:ignorable datastore-name datastore-type-version
     sse-configuration preload-data-config client-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-fhirdatastore-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'healthlake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateFHIRDatastore"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-fhirdatastore))
(common-lisp:progn
 (common-lisp:defun delete-fhirdatastore
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-id)
   (common-lisp:declare (common-lisp:ignorable datastore-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-fhirdatastore-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'healthlake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteFHIRDatastore"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-fhirdatastore))
(common-lisp:progn
 (common-lisp:defun describe-fhirdatastore
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-id)
   (common-lisp:declare (common-lisp:ignorable datastore-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-fhirdatastore-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'healthlake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeFHIRDatastore"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-fhirdatastore))
(common-lisp:progn
 (common-lisp:defun describe-fhirexport-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-id job-id)
   (common-lisp:declare (common-lisp:ignorable datastore-id job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-fhirexport-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'healthlake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeFHIRExportJob"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-fhirexport-job))
(common-lisp:progn
 (common-lisp:defun describe-fhirimport-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-id job-id)
   (common-lisp:declare (common-lisp:ignorable datastore-id job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-fhirimport-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'healthlake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeFHIRImportJob"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-fhirimport-job))
(common-lisp:progn
 (common-lisp:defun list-fhirdatastores
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filter next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-fhirdatastores-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'healthlake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListFHIRDatastores"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-fhirdatastores))
(common-lisp:progn
 (common-lisp:defun list-fhirexport-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-id next-token max-results
                     job-name job-status submitted-before submitted-after)
   (common-lisp:declare
    (common-lisp:ignorable datastore-id next-token max-results job-name
     job-status submitted-before submitted-after))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-fhirexport-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'healthlake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListFHIRExportJobs"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-fhirexport-jobs))
(common-lisp:progn
 (common-lisp:defun list-fhirimport-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-id next-token max-results
                     job-name job-status submitted-before submitted-after)
   (common-lisp:declare
    (common-lisp:ignorable datastore-id next-token max-results job-name
     job-status submitted-before submitted-after))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-fhirimport-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'healthlake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListFHIRImportJobs"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-fhirimport-jobs))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'healthlake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTagsForResource"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun start-fhirexport-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name output-data-config datastore-id
                     data-access-role-arn client-token)
   (common-lisp:declare
    (common-lisp:ignorable job-name output-data-config datastore-id
     data-access-role-arn client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-fhirexport-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'healthlake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartFHIRExportJob"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-fhirexport-job))
(common-lisp:progn
 (common-lisp:defun start-fhirimport-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name input-data-config
                     job-output-data-config datastore-id data-access-role-arn
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable job-name input-data-config job-output-data-config
     datastore-id data-access-role-arn client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-fhirimport-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'healthlake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartFHIRImportJob"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-fhirimport-job))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'healthlake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TagResource"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'healthlake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UntagResource"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
