;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/kinesisanalytics/api
  (:use)
  (:nicknames #:aws/kinesisanalytics)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/kinesisanalytics/api)
(common-lisp:progn
 (common-lisp:defclass kinesisanalytics-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "kinesisanalytics" :protocol
                        :json))
 (common-lisp:export 'kinesisanalytics-request))
(common-lisp:progn
 (common-lisp:define-condition kinesisanalytics-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'kinesisanalytics-error))
(common-lisp:defvar *error-map*
  '(("CodeValidationException" . code-validation-exception)
    ("ConcurrentModificationException" . concurrent-modification-exception)
    ("InvalidApplicationConfigurationException"
     . invalid-application-configuration-exception)
    ("InvalidArgumentException" . invalid-argument-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourceProvisionedThroughputExceededException"
     . resource-provisioned-throughput-exceeded-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("UnableToDetectSchemaException" . unable-to-detect-schema-exception)
    ("UnsupportedOperationException" . unsupported-operation-exception)))
(common-lisp:progn
 (common-lisp:defclass add-application-cloud-watch-logging-option-request
                       common-lisp:nil
                       ((cloud-watch-logging-option :initarg
                         :cloud-watch-logging-option :type
                         (common-lisp:or cloud-watch-logging-option
                                         common-lisp:null)
                         :accessor
                         %add-application-cloud-watch-logging-option-request-cloud-watch-logging-option
                         :initform
                         (common-lisp:error
                          ":cloud-watch-logging-option is required"))
                        (current-application-version-id :initarg
                         :current-application-version-id :type
                         (common-lisp:or application-version-id
                                         common-lisp:null)
                         :accessor
                         %add-application-cloud-watch-logging-option-request-current-application-version-id
                         :initform
                         (common-lisp:error
                          ":current-application-version-id is required"))
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %add-application-cloud-watch-logging-option-request-application-name
                         :initform
                         (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'add-application-cloud-watch-logging-option-request
                    'make-add-application-cloud-watch-logging-option-request))
 (common-lisp:defun make-add-application-cloud-watch-logging-option-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cloud-watch-logging-option
                     current-application-version-id application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-application-cloud-watch-logging-option-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-application-cloud-watch-logging-option-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-application-cloud-watch-logging-option-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logging-option))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLoggingOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-application-cloud-watch-logging-option-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-application-cloud-watch-logging-option-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'add-application-cloud-watch-logging-option-response
                    'make-add-application-cloud-watch-logging-option-response))
 (common-lisp:defun make-add-application-cloud-watch-logging-option-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-application-cloud-watch-logging-option-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-application-cloud-watch-logging-option-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-application-cloud-watch-logging-option-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-application-cloud-watch-logging-option-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-application-input-processing-configuration-request
                       common-lisp:nil
                       ((input-processing-configuration :initarg
                         :input-processing-configuration :type
                         (common-lisp:or input-processing-configuration
                                         common-lisp:null)
                         :accessor
                         %add-application-input-processing-configuration-request-input-processing-configuration
                         :initform
                         (common-lisp:error
                          ":input-processing-configuration is required"))
                        (input-id :initarg :input-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %add-application-input-processing-configuration-request-input-id
                         :initform (common-lisp:error ":input-id is required"))
                        (current-application-version-id :initarg
                         :current-application-version-id :type
                         (common-lisp:or application-version-id
                                         common-lisp:null)
                         :accessor
                         %add-application-input-processing-configuration-request-current-application-version-id
                         :initform
                         (common-lisp:error
                          ":current-application-version-id is required"))
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %add-application-input-processing-configuration-request-application-name
                         :initform
                         (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'add-application-input-processing-configuration-request
                    'make-add-application-input-processing-configuration-request))
 (common-lisp:defun make-add-application-input-processing-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-processing-configuration input-id
                     current-application-version-id application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-application-input-processing-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-application-input-processing-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-application-input-processing-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-id))
      (common-lisp:list
       (common-lisp:cons "InputId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-processing-configuration))
      (common-lisp:list
       (common-lisp:cons "InputProcessingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-application-input-processing-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-application-input-processing-configuration-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'add-application-input-processing-configuration-response
                    'make-add-application-input-processing-configuration-response))
 (common-lisp:defun make-add-application-input-processing-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-application-input-processing-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-application-input-processing-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-application-input-processing-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-application-input-processing-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-application-input-request common-lisp:nil
                       ((input :initarg :input :type
                         (common-lisp:or input common-lisp:null) :accessor
                         %add-application-input-request-input :initform
                         (common-lisp:error ":input is required"))
                        (current-application-version-id :initarg
                         :current-application-version-id :type
                         (common-lisp:or application-version-id
                                         common-lisp:null)
                         :accessor
                         %add-application-input-request-current-application-version-id
                         :initform
                         (common-lisp:error
                          ":current-application-version-id is required"))
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %add-application-input-request-application-name
                         :initform
                         (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'add-application-input-request
                    'make-add-application-input-request))
 (common-lisp:defun make-add-application-input-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input current-application-version-id
                     application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-application-input-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-application-input-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-application-input-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-application-input-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-application-input-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'add-application-input-response
                    'make-add-application-input-response))
 (common-lisp:defun make-add-application-input-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-application-input-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-application-input-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-application-input-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-application-input-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-application-output-request common-lisp:nil
                       ((output :initarg :output :type
                         (common-lisp:or output common-lisp:null) :accessor
                         %add-application-output-request-output :initform
                         (common-lisp:error ":output is required"))
                        (current-application-version-id :initarg
                         :current-application-version-id :type
                         (common-lisp:or application-version-id
                                         common-lisp:null)
                         :accessor
                         %add-application-output-request-current-application-version-id
                         :initform
                         (common-lisp:error
                          ":current-application-version-id is required"))
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %add-application-output-request-application-name
                         :initform
                         (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'add-application-output-request
                    'make-add-application-output-request))
 (common-lisp:defun make-add-application-output-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output current-application-version-id
                     application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-application-output-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-application-output-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-application-output-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "Output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-application-output-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-application-output-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'add-application-output-response
                    'make-add-application-output-response))
 (common-lisp:defun make-add-application-output-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-application-output-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-application-output-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-application-output-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-application-output-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-application-reference-data-source-request
                       common-lisp:nil
                       ((reference-data-source :initarg :reference-data-source
                         :type
                         (common-lisp:or reference-data-source
                                         common-lisp:null)
                         :accessor
                         %add-application-reference-data-source-request-reference-data-source
                         :initform
                         (common-lisp:error
                          ":reference-data-source is required"))
                        (current-application-version-id :initarg
                         :current-application-version-id :type
                         (common-lisp:or application-version-id
                                         common-lisp:null)
                         :accessor
                         %add-application-reference-data-source-request-current-application-version-id
                         :initform
                         (common-lisp:error
                          ":current-application-version-id is required"))
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %add-application-reference-data-source-request-application-name
                         :initform
                         (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'add-application-reference-data-source-request
                    'make-add-application-reference-data-source-request))
 (common-lisp:defun make-add-application-reference-data-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reference-data-source
                     current-application-version-id application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-application-reference-data-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-application-reference-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-application-reference-data-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reference-data-source))
      (common-lisp:list
       (common-lisp:cons "ReferenceDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-application-reference-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-application-reference-data-source-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'add-application-reference-data-source-response
                    'make-add-application-reference-data-source-response))
 (common-lisp:defun make-add-application-reference-data-source-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-application-reference-data-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-application-reference-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-application-reference-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-application-reference-data-source-response))
   common-lisp:nil))
(common-lisp:deftype application-code () 'common-lisp:string)
(common-lisp:deftype application-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass application-detail common-lisp:nil
                       ((application-version-id :initarg
                         :application-version-id :type
                         (common-lisp:or application-version-id
                                         common-lisp:null)
                         :accessor %application-detail-application-version-id
                         :initform
                         (common-lisp:error
                          ":application-version-id is required"))
                        (application-code :initarg :application-code :type
                         (common-lisp:or application-code common-lisp:null)
                         :accessor %application-detail-application-code
                         :initform common-lisp:nil)
                        (cloud-watch-logging-option-descriptions :initarg
                         :cloud-watch-logging-option-descriptions :type
                         (common-lisp:or
                          cloud-watch-logging-option-descriptions
                          common-lisp:null)
                         :accessor
                         %application-detail-cloud-watch-logging-option-descriptions
                         :initform common-lisp:nil)
                        (reference-data-source-descriptions :initarg
                         :reference-data-source-descriptions :type
                         (common-lisp:or reference-data-source-descriptions
                                         common-lisp:null)
                         :accessor
                         %application-detail-reference-data-source-descriptions
                         :initform common-lisp:nil)
                        (output-descriptions :initarg :output-descriptions
                         :type
                         (common-lisp:or output-descriptions common-lisp:null)
                         :accessor %application-detail-output-descriptions
                         :initform common-lisp:nil)
                        (input-descriptions :initarg :input-descriptions :type
                         (common-lisp:or input-descriptions common-lisp:null)
                         :accessor %application-detail-input-descriptions
                         :initform common-lisp:nil)
                        (last-update-timestamp :initarg :last-update-timestamp
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor %application-detail-last-update-timestamp
                         :initform common-lisp:nil)
                        (create-timestamp :initarg :create-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %application-detail-create-timestamp :initform
                         common-lisp:nil)
                        (application-status :initarg :application-status :type
                         (common-lisp:or application-status common-lisp:null)
                         :accessor %application-detail-application-status
                         :initform
                         (common-lisp:error ":application-status is required"))
                        (application-arn :initarg :application-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %application-detail-application-arn
                         :initform
                         (common-lisp:error ":application-arn is required"))
                        (application-description :initarg
                         :application-description :type
                         (common-lisp:or application-description
                                         common-lisp:null)
                         :accessor %application-detail-application-description
                         :initform common-lisp:nil)
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %application-detail-application-name
                         :initform
                         (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'application-detail 'make-application-detail))
 (common-lisp:defun make-application-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-version-id application-code
                     cloud-watch-logging-option-descriptions
                     reference-data-source-descriptions output-descriptions
                     input-descriptions last-update-timestamp create-timestamp
                     application-status application-arn application-description
                     application-name)
   (common-lisp:apply #'common-lisp:make-instance 'application-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-description))
      (common-lisp:list
       (common-lisp:cons "ApplicationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-status))
      (common-lisp:list
       (common-lisp:cons "ApplicationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreateTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-update-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdateTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-descriptions))
      (common-lisp:list
       (common-lisp:cons "InputDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-descriptions))
      (common-lisp:list
       (common-lisp:cons "OutputDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reference-data-source-descriptions))
      (common-lisp:list
       (common-lisp:cons "ReferenceDataSourceDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logging-option-descriptions))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLoggingOptionDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-code))
      (common-lisp:list
       (common-lisp:cons "ApplicationCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-version-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-detail))
   common-lisp:nil))
(common-lisp:deftype application-name () 'common-lisp:string)
(common-lisp:deftype application-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype application-summaries ()
   '(trivial-types:proper-list application-summary))
 (common-lisp:defun |make-application-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass application-summary common-lisp:nil
                       ((application-status :initarg :application-status :type
                         (common-lisp:or application-status common-lisp:null)
                         :accessor %application-summary-application-status
                         :initform
                         (common-lisp:error ":application-status is required"))
                        (application-arn :initarg :application-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %application-summary-application-arn
                         :initform
                         (common-lisp:error ":application-arn is required"))
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %application-summary-application-name
                         :initform
                         (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'application-summary 'make-application-summary))
 (common-lisp:defun make-application-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-status application-arn
                     application-name)
   (common-lisp:apply #'common-lisp:make-instance 'application-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-status))
      (common-lisp:list
       (common-lisp:cons "ApplicationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass application-update common-lisp:nil
                       ((cloud-watch-logging-option-updates :initarg
                         :cloud-watch-logging-option-updates :type
                         (common-lisp:or cloud-watch-logging-option-updates
                                         common-lisp:null)
                         :accessor
                         %application-update-cloud-watch-logging-option-updates
                         :initform common-lisp:nil)
                        (reference-data-source-updates :initarg
                         :reference-data-source-updates :type
                         (common-lisp:or reference-data-source-updates
                                         common-lisp:null)
                         :accessor
                         %application-update-reference-data-source-updates
                         :initform common-lisp:nil)
                        (output-updates :initarg :output-updates :type
                         (common-lisp:or output-updates common-lisp:null)
                         :accessor %application-update-output-updates :initform
                         common-lisp:nil)
                        (application-code-update :initarg
                         :application-code-update :type
                         (common-lisp:or application-code common-lisp:null)
                         :accessor %application-update-application-code-update
                         :initform common-lisp:nil)
                        (input-updates :initarg :input-updates :type
                         (common-lisp:or input-updates common-lisp:null)
                         :accessor %application-update-input-updates :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'application-update 'make-application-update))
 (common-lisp:defun make-application-update
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cloud-watch-logging-option-updates
                     reference-data-source-updates output-updates
                     application-code-update input-updates)
   (common-lisp:apply #'common-lisp:make-instance 'application-update
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-updates))
      (common-lisp:list
       (common-lisp:cons "InputUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-code-update))
      (common-lisp:list
       (common-lisp:cons "ApplicationCodeUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-updates))
      (common-lisp:list
       (common-lisp:cons "OutputUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reference-data-source-updates))
      (common-lisp:list
       (common-lisp:cons "ReferenceDataSourceUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logging-option-updates))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLoggingOptionUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-update))
   common-lisp:nil))
(common-lisp:deftype application-version-id () 'common-lisp:integer)
(common-lisp:deftype boolean-object () 'common-lisp:boolean)
(common-lisp:deftype bucket-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass csvmapping-parameters common-lisp:nil
                       ((record-column-delimiter :initarg
                         :record-column-delimiter :type
                         (common-lisp:or record-column-delimiter
                                         common-lisp:null)
                         :accessor
                         %csvmapping-parameters-record-column-delimiter
                         :initform
                         (common-lisp:error
                          ":record-column-delimiter is required"))
                        (record-row-delimiter :initarg :record-row-delimiter
                         :type
                         (common-lisp:or record-row-delimiter common-lisp:null)
                         :accessor %csvmapping-parameters-record-row-delimiter
                         :initform
                         (common-lisp:error
                          ":record-row-delimiter is required"))))
 (common-lisp:export
  (common-lisp:list 'csvmapping-parameters 'make-csvmapping-parameters))
 (common-lisp:defun make-csvmapping-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key record-column-delimiter
                     record-row-delimiter)
   (common-lisp:apply #'common-lisp:make-instance 'csvmapping-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          csvmapping-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          csvmapping-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'record-row-delimiter))
      (common-lisp:list
       (common-lisp:cons "RecordRowDelimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'record-column-delimiter))
      (common-lisp:list
       (common-lisp:cons "RecordColumnDelimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          csvmapping-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cloud-watch-logging-option common-lisp:nil
                       ((role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %cloud-watch-logging-option-role-arn :initform
                         (common-lisp:error ":role-arn is required"))
                        (log-stream-arn :initarg :log-stream-arn :type
                         (common-lisp:or log-stream-arn common-lisp:null)
                         :accessor %cloud-watch-logging-option-log-stream-arn
                         :initform
                         (common-lisp:error ":log-stream-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-logging-option
                    'make-cloud-watch-logging-option))
 (common-lisp:defun make-cloud-watch-logging-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn log-stream-arn)
   (common-lisp:apply #'common-lisp:make-instance 'cloud-watch-logging-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logging-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logging-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream-arn))
      (common-lisp:list
       (common-lisp:cons "LogStreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logging-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cloud-watch-logging-option-description common-lisp:nil
                       ((role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %cloud-watch-logging-option-description-role-arn
                         :initform (common-lisp:error ":role-arn is required"))
                        (log-stream-arn :initarg :log-stream-arn :type
                         (common-lisp:or log-stream-arn common-lisp:null)
                         :accessor
                         %cloud-watch-logging-option-description-log-stream-arn
                         :initform
                         (common-lisp:error ":log-stream-arn is required"))
                        (cloud-watch-logging-option-id :initarg
                         :cloud-watch-logging-option-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %cloud-watch-logging-option-description-cloud-watch-logging-option-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-logging-option-description
                    'make-cloud-watch-logging-option-description))
 (common-lisp:defun make-cloud-watch-logging-option-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn log-stream-arn
                     cloud-watch-logging-option-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'cloud-watch-logging-option-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logging-option-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logging-option-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logging-option-id))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLoggingOptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream-arn))
      (common-lisp:list
       (common-lisp:cons "LogStreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logging-option-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cloud-watch-logging-option-descriptions ()
   '(trivial-types:proper-list cloud-watch-logging-option-description))
 (common-lisp:defun |make-cloud-watch-logging-option-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cloud-watch-logging-option-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cloud-watch-logging-option-update common-lisp:nil
                       ((role-arnupdate :initarg :role-arnupdate :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %cloud-watch-logging-option-update-role-arnupdate
                         :initform common-lisp:nil)
                        (log-stream-arnupdate :initarg :log-stream-arnupdate
                         :type (common-lisp:or log-stream-arn common-lisp:null)
                         :accessor
                         %cloud-watch-logging-option-update-log-stream-arnupdate
                         :initform common-lisp:nil)
                        (cloud-watch-logging-option-id :initarg
                         :cloud-watch-logging-option-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %cloud-watch-logging-option-update-cloud-watch-logging-option-id
                         :initform
                         (common-lisp:error
                          ":cloud-watch-logging-option-id is required"))))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-logging-option-update
                    'make-cloud-watch-logging-option-update))
 (common-lisp:defun make-cloud-watch-logging-option-update
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arnupdate log-stream-arnupdate
                     cloud-watch-logging-option-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'cloud-watch-logging-option-update
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logging-option-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logging-option-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logging-option-id))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLoggingOptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-stream-arnupdate))
      (common-lisp:list
       (common-lisp:cons "LogStreamARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arnupdate))
      (common-lisp:list
       (common-lisp:cons "RoleARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logging-option-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cloud-watch-logging-option-updates ()
   '(trivial-types:proper-list cloud-watch-logging-option-update))
 (common-lisp:defun |make-cloud-watch-logging-option-updates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cloud-watch-logging-option-update))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype cloud-watch-logging-options ()
   '(trivial-types:proper-list cloud-watch-logging-option))
 (common-lisp:defun |make-cloud-watch-logging-options|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cloud-watch-logging-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition code-validation-exception
     (kinesisanalytics-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       code-validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'code-validation-exception
                    'code-validation-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (kinesisanalytics-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       concurrent-modification-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification-exception
                    'concurrent-modification-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-application-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-application-request-tags :initform
                         common-lisp:nil)
                        (application-code :initarg :application-code :type
                         (common-lisp:or application-code common-lisp:null)
                         :accessor %create-application-request-application-code
                         :initform common-lisp:nil)
                        (cloud-watch-logging-options :initarg
                         :cloud-watch-logging-options :type
                         (common-lisp:or cloud-watch-logging-options
                                         common-lisp:null)
                         :accessor
                         %create-application-request-cloud-watch-logging-options
                         :initform common-lisp:nil)
                        (outputs :initarg :outputs :type
                         (common-lisp:or outputs common-lisp:null) :accessor
                         %create-application-request-outputs :initform
                         common-lisp:nil)
                        (inputs :initarg :inputs :type
                         (common-lisp:or inputs common-lisp:null) :accessor
                         %create-application-request-inputs :initform
                         common-lisp:nil)
                        (application-description :initarg
                         :application-description :type
                         (common-lisp:or application-description
                                         common-lisp:null)
                         :accessor
                         %create-application-request-application-description
                         :initform common-lisp:nil)
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %create-application-request-application-name
                         :initform
                         (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-application-request
                    'make-create-application-request))
 (common-lisp:defun make-create-application-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags application-code
                     cloud-watch-logging-options outputs inputs
                     application-description application-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-description))
      (common-lisp:list
       (common-lisp:cons "ApplicationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logging-options))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLoggingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-code))
      (common-lisp:list
       (common-lisp:cons "ApplicationCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-application-response common-lisp:nil
                       ((application-summary :initarg :application-summary
                         :type
                         (common-lisp:or application-summary common-lisp:null)
                         :accessor
                         %create-application-response-application-summary
                         :initform
                         (common-lisp:error
                          ":application-summary is required"))))
 (common-lisp:export
  (common-lisp:list 'create-application-response
                    'make-create-application-response))
 (common-lisp:defun make-create-application-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-summary)
   (common-lisp:apply #'common-lisp:make-instance 'create-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-summary))
      (common-lisp:list
       (common-lisp:cons "ApplicationSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-application-cloud-watch-logging-option-request
                       common-lisp:nil
                       ((cloud-watch-logging-option-id :initarg
                         :cloud-watch-logging-option-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-application-cloud-watch-logging-option-request-cloud-watch-logging-option-id
                         :initform
                         (common-lisp:error
                          ":cloud-watch-logging-option-id is required"))
                        (current-application-version-id :initarg
                         :current-application-version-id :type
                         (common-lisp:or application-version-id
                                         common-lisp:null)
                         :accessor
                         %delete-application-cloud-watch-logging-option-request-current-application-version-id
                         :initform
                         (common-lisp:error
                          ":current-application-version-id is required"))
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %delete-application-cloud-watch-logging-option-request-application-name
                         :initform
                         (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-application-cloud-watch-logging-option-request
                    'make-delete-application-cloud-watch-logging-option-request))
 (common-lisp:defun make-delete-application-cloud-watch-logging-option-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cloud-watch-logging-option-id
                     current-application-version-id application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-application-cloud-watch-logging-option-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-cloud-watch-logging-option-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-cloud-watch-logging-option-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logging-option-id))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLoggingOptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-cloud-watch-logging-option-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-application-cloud-watch-logging-option-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-application-cloud-watch-logging-option-response
                    'make-delete-application-cloud-watch-logging-option-response))
 (common-lisp:defun make-delete-application-cloud-watch-logging-option-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-application-cloud-watch-logging-option-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-cloud-watch-logging-option-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-cloud-watch-logging-option-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-cloud-watch-logging-option-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  delete-application-input-processing-configuration-request common-lisp:nil
  ((input-id :initarg :input-id :type (common-lisp:or id common-lisp:null)
    :accessor
    %delete-application-input-processing-configuration-request-input-id
    :initform (common-lisp:error ":input-id is required"))
   (current-application-version-id :initarg :current-application-version-id
    :type (common-lisp:or application-version-id common-lisp:null) :accessor
    %delete-application-input-processing-configuration-request-current-application-version-id
    :initform
    (common-lisp:error ":current-application-version-id is required"))
   (application-name :initarg :application-name :type
    (common-lisp:or application-name common-lisp:null) :accessor
    %delete-application-input-processing-configuration-request-application-name
    :initform (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-application-input-processing-configuration-request
                    'make-delete-application-input-processing-configuration-request))
 (common-lisp:defun make-delete-application-input-processing-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-id current-application-version-id
                     application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-application-input-processing-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-input-processing-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-input-processing-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-id))
      (common-lisp:list
       (common-lisp:cons "InputId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-input-processing-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  delete-application-input-processing-configuration-response common-lisp:nil
  common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-application-input-processing-configuration-response
                    'make-delete-application-input-processing-configuration-response))
 (common-lisp:defun make-delete-application-input-processing-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-application-input-processing-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-input-processing-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-input-processing-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-input-processing-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-application-output-request common-lisp:nil
                       ((output-id :initarg :output-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-application-output-request-output-id :initform
                         (common-lisp:error ":output-id is required"))
                        (current-application-version-id :initarg
                         :current-application-version-id :type
                         (common-lisp:or application-version-id
                                         common-lisp:null)
                         :accessor
                         %delete-application-output-request-current-application-version-id
                         :initform
                         (common-lisp:error
                          ":current-application-version-id is required"))
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %delete-application-output-request-application-name
                         :initform
                         (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-application-output-request
                    'make-delete-application-output-request))
 (common-lisp:defun make-delete-application-output-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-id current-application-version-id
                     application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-application-output-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-output-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-output-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-id))
      (common-lisp:list
       (common-lisp:cons "OutputId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-output-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-application-output-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-application-output-response
                    'make-delete-application-output-response))
 (common-lisp:defun make-delete-application-output-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-application-output-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-output-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-output-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-output-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-application-reference-data-source-request
                       common-lisp:nil
                       ((reference-id :initarg :reference-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-application-reference-data-source-request-reference-id
                         :initform
                         (common-lisp:error ":reference-id is required"))
                        (current-application-version-id :initarg
                         :current-application-version-id :type
                         (common-lisp:or application-version-id
                                         common-lisp:null)
                         :accessor
                         %delete-application-reference-data-source-request-current-application-version-id
                         :initform
                         (common-lisp:error
                          ":current-application-version-id is required"))
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %delete-application-reference-data-source-request-application-name
                         :initform
                         (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-application-reference-data-source-request
                    'make-delete-application-reference-data-source-request))
 (common-lisp:defun make-delete-application-reference-data-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reference-id
                     current-application-version-id application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-application-reference-data-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-reference-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-reference-data-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-id))
      (common-lisp:list
       (common-lisp:cons "ReferenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-reference-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-application-reference-data-source-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-application-reference-data-source-response
                    'make-delete-application-reference-data-source-response))
 (common-lisp:defun make-delete-application-reference-data-source-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-application-reference-data-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-reference-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-reference-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-reference-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-application-request common-lisp:nil
                       ((create-timestamp :initarg :create-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %delete-application-request-create-timestamp :initform
                         (common-lisp:error ":create-timestamp is required"))
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %delete-application-request-application-name
                         :initform
                         (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-application-request
                    'make-delete-application-request))
 (common-lisp:defun make-delete-application-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key create-timestamp application-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreateTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-application-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-application-response
                    'make-delete-application-response))
 (common-lisp:defun make-delete-application-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-application-request common-lisp:nil
                       ((application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %describe-application-request-application-name
                         :initform
                         (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-application-request
                    'make-describe-application-request))
 (common-lisp:defun make-describe-application-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-application-response common-lisp:nil
                       ((application-detail :initarg :application-detail :type
                         (common-lisp:or application-detail common-lisp:null)
                         :accessor
                         %describe-application-response-application-detail
                         :initform
                         (common-lisp:error
                          ":application-detail is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-application-response
                    'make-describe-application-response))
 (common-lisp:defun make-describe-application-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-detail)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-detail))
      (common-lisp:list
       (common-lisp:cons "ApplicationDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass destination-schema common-lisp:nil
                       ((record-format-type :initarg :record-format-type :type
                         (common-lisp:or record-format-type common-lisp:null)
                         :accessor %destination-schema-record-format-type
                         :initform
                         (common-lisp:error
                          ":record-format-type is required"))))
 (common-lisp:export
  (common-lisp:list 'destination-schema 'make-destination-schema))
 (common-lisp:defun make-destination-schema
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key record-format-type)
   (common-lisp:apply #'common-lisp:make-instance 'destination-schema
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input destination-schema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input destination-schema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-format-type))
      (common-lisp:list
       (common-lisp:cons "RecordFormatType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input destination-schema))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass discover-input-schema-request common-lisp:nil
                       ((input-processing-configuration :initarg
                         :input-processing-configuration :type
                         (common-lisp:or input-processing-configuration
                                         common-lisp:null)
                         :accessor
                         %discover-input-schema-request-input-processing-configuration
                         :initform common-lisp:nil)
                        (s3configuration :initarg :s3configuration :type
                         (common-lisp:or s3configuration common-lisp:null)
                         :accessor
                         %discover-input-schema-request-s3configuration
                         :initform common-lisp:nil)
                        (input-starting-position-configuration :initarg
                         :input-starting-position-configuration :type
                         (common-lisp:or input-starting-position-configuration
                                         common-lisp:null)
                         :accessor
                         %discover-input-schema-request-input-starting-position-configuration
                         :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %discover-input-schema-request-role-arn :initform
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %discover-input-schema-request-resource-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'discover-input-schema-request
                    'make-discover-input-schema-request))
 (common-lisp:defun make-discover-input-schema-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-processing-configuration
                     s3configuration input-starting-position-configuration
                     role-arn resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'discover-input-schema-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          discover-input-schema-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          discover-input-schema-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-starting-position-configuration))
      (common-lisp:list
       (common-lisp:cons "InputStartingPositionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3configuration))
      (common-lisp:list
       (common-lisp:cons "S3Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-processing-configuration))
      (common-lisp:list
       (common-lisp:cons "InputProcessingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          discover-input-schema-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass discover-input-schema-response common-lisp:nil
                       ((raw-input-records :initarg :raw-input-records :type
                         (common-lisp:or raw-input-records common-lisp:null)
                         :accessor
                         %discover-input-schema-response-raw-input-records
                         :initform common-lisp:nil)
                        (processed-input-records :initarg
                         :processed-input-records :type
                         (common-lisp:or processed-input-records
                                         common-lisp:null)
                         :accessor
                         %discover-input-schema-response-processed-input-records
                         :initform common-lisp:nil)
                        (parsed-input-records :initarg :parsed-input-records
                         :type
                         (common-lisp:or parsed-input-records common-lisp:null)
                         :accessor
                         %discover-input-schema-response-parsed-input-records
                         :initform common-lisp:nil)
                        (input-schema :initarg :input-schema :type
                         (common-lisp:or source-schema common-lisp:null)
                         :accessor %discover-input-schema-response-input-schema
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'discover-input-schema-response
                    'make-discover-input-schema-response))
 (common-lisp:defun make-discover-input-schema-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key raw-input-records processed-input-records
                     parsed-input-records input-schema)
   (common-lisp:apply #'common-lisp:make-instance
                      'discover-input-schema-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          discover-input-schema-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          discover-input-schema-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-schema))
      (common-lisp:list
       (common-lisp:cons "InputSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parsed-input-records))
      (common-lisp:list
       (common-lisp:cons "ParsedInputRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'processed-input-records))
      (common-lisp:list
       (common-lisp:cons "ProcessedInputRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-input-records))
      (common-lisp:list
       (common-lisp:cons "RawInputRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          discover-input-schema-response))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype file-key () 'common-lisp:string)
(common-lisp:deftype id () 'common-lisp:string)
(common-lisp:deftype in-app-stream-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype in-app-stream-names ()
   '(trivial-types:proper-list in-app-stream-name))
 (common-lisp:defun |make-in-app-stream-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list in-app-stream-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype in-app-table-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input common-lisp:nil
                       ((input-schema :initarg :input-schema :type
                         (common-lisp:or source-schema common-lisp:null)
                         :accessor %input-input-schema :initform
                         (common-lisp:error ":input-schema is required"))
                        (input-parallelism :initarg :input-parallelism :type
                         (common-lisp:or input-parallelism common-lisp:null)
                         :accessor %input-input-parallelism :initform
                         common-lisp:nil)
                        (kinesis-firehose-input :initarg
                         :kinesis-firehose-input :type
                         (common-lisp:or kinesis-firehose-input
                                         common-lisp:null)
                         :accessor %input-kinesis-firehose-input :initform
                         common-lisp:nil)
                        (kinesis-streams-input :initarg :kinesis-streams-input
                         :type
                         (common-lisp:or kinesis-streams-input
                                         common-lisp:null)
                         :accessor %input-kinesis-streams-input :initform
                         common-lisp:nil)
                        (input-processing-configuration :initarg
                         :input-processing-configuration :type
                         (common-lisp:or input-processing-configuration
                                         common-lisp:null)
                         :accessor %input-input-processing-configuration
                         :initform common-lisp:nil)
                        (name-prefix :initarg :name-prefix :type
                         (common-lisp:or in-app-stream-name common-lisp:null)
                         :accessor %input-name-prefix :initform
                         (common-lisp:error ":name-prefix is required"))))
 (common-lisp:export (common-lisp:list 'input 'make-input))
 (common-lisp:defun make-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-schema input-parallelism
                     kinesis-firehose-input kinesis-streams-input
                     input-processing-configuration name-prefix)
   (common-lisp:apply #'common-lisp:make-instance 'input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-prefix))
      (common-lisp:list
       (common-lisp:cons "NamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-processing-configuration))
      (common-lisp:list
       (common-lisp:cons "InputProcessingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-streams-input))
      (common-lisp:list
       (common-lisp:cons "KinesisStreamsInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-firehose-input))
      (common-lisp:list
       (common-lisp:cons "KinesisFirehoseInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-parallelism))
      (common-lisp:list
       (common-lisp:cons "InputParallelism"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-schema))
      (common-lisp:list
       (common-lisp:cons "InputSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-configuration common-lisp:nil
                       ((input-starting-position-configuration :initarg
                         :input-starting-position-configuration :type
                         (common-lisp:or input-starting-position-configuration
                                         common-lisp:null)
                         :accessor
                         %input-configuration-input-starting-position-configuration
                         :initform
                         (common-lisp:error
                          ":input-starting-position-configuration is required"))
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %input-configuration-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'input-configuration 'make-input-configuration))
 (common-lisp:defun make-input-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-starting-position-configuration id)
   (common-lisp:apply #'common-lisp:make-instance 'input-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-starting-position-configuration))
      (common-lisp:list
       (common-lisp:cons "InputStartingPositionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype input-configurations ()
   '(trivial-types:proper-list input-configuration))
 (common-lisp:defun |make-input-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass input-description common-lisp:nil
                       ((input-starting-position-configuration :initarg
                         :input-starting-position-configuration :type
                         (common-lisp:or input-starting-position-configuration
                                         common-lisp:null)
                         :accessor
                         %input-description-input-starting-position-configuration
                         :initform common-lisp:nil)
                        (input-parallelism :initarg :input-parallelism :type
                         (common-lisp:or input-parallelism common-lisp:null)
                         :accessor %input-description-input-parallelism
                         :initform common-lisp:nil)
                        (input-schema :initarg :input-schema :type
                         (common-lisp:or source-schema common-lisp:null)
                         :accessor %input-description-input-schema :initform
                         common-lisp:nil)
                        (kinesis-firehose-input-description :initarg
                         :kinesis-firehose-input-description :type
                         (common-lisp:or kinesis-firehose-input-description
                                         common-lisp:null)
                         :accessor
                         %input-description-kinesis-firehose-input-description
                         :initform common-lisp:nil)
                        (kinesis-streams-input-description :initarg
                         :kinesis-streams-input-description :type
                         (common-lisp:or kinesis-streams-input-description
                                         common-lisp:null)
                         :accessor
                         %input-description-kinesis-streams-input-description
                         :initform common-lisp:nil)
                        (input-processing-configuration-description :initarg
                         :input-processing-configuration-description :type
                         (common-lisp:or
                          input-processing-configuration-description
                          common-lisp:null)
                         :accessor
                         %input-description-input-processing-configuration-description
                         :initform common-lisp:nil)
                        (in-app-stream-names :initarg :in-app-stream-names
                         :type
                         (common-lisp:or in-app-stream-names common-lisp:null)
                         :accessor %input-description-in-app-stream-names
                         :initform common-lisp:nil)
                        (name-prefix :initarg :name-prefix :type
                         (common-lisp:or in-app-stream-name common-lisp:null)
                         :accessor %input-description-name-prefix :initform
                         common-lisp:nil)
                        (input-id :initarg :input-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %input-description-input-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-description 'make-input-description))
 (common-lisp:defun make-input-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-starting-position-configuration
                     input-parallelism input-schema
                     kinesis-firehose-input-description
                     kinesis-streams-input-description
                     input-processing-configuration-description
                     in-app-stream-names name-prefix input-id)
   (common-lisp:apply #'common-lisp:make-instance 'input-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-id))
      (common-lisp:list
       (common-lisp:cons "InputId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-prefix))
      (common-lisp:list
       (common-lisp:cons "NamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'in-app-stream-names))
      (common-lisp:list
       (common-lisp:cons "InAppStreamNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-processing-configuration-description))
      (common-lisp:list
       (common-lisp:cons "InputProcessingConfigurationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-streams-input-description))
      (common-lisp:list
       (common-lisp:cons "KinesisStreamsInputDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-firehose-input-description))
      (common-lisp:list
       (common-lisp:cons "KinesisFirehoseInputDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-schema))
      (common-lisp:list
       (common-lisp:cons "InputSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-parallelism))
      (common-lisp:list
       (common-lisp:cons "InputParallelism"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-starting-position-configuration))
      (common-lisp:list
       (common-lisp:cons "InputStartingPositionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype input-descriptions ()
   '(trivial-types:proper-list input-description))
 (common-lisp:defun |make-input-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass input-lambda-processor common-lisp:nil
                       ((role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %input-lambda-processor-role-arn :initform
                         (common-lisp:error ":role-arn is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %input-lambda-processor-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'input-lambda-processor 'make-input-lambda-processor))
 (common-lisp:defun make-input-lambda-processor
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'input-lambda-processor
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-lambda-processor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-lambda-processor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-lambda-processor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-lambda-processor-description common-lisp:nil
                       ((role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %input-lambda-processor-description-role-arn :initform
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         %input-lambda-processor-description-resource-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-lambda-processor-description
                    'make-input-lambda-processor-description))
 (common-lisp:defun make-input-lambda-processor-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'input-lambda-processor-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-lambda-processor-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-lambda-processor-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-lambda-processor-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-lambda-processor-update common-lisp:nil
                       ((role-arnupdate :initarg :role-arnupdate :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %input-lambda-processor-update-role-arnupdate
                         :initform common-lisp:nil)
                        (resource-arnupdate :initarg :resource-arnupdate :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         %input-lambda-processor-update-resource-arnupdate
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-lambda-processor-update
                    'make-input-lambda-processor-update))
 (common-lisp:defun make-input-lambda-processor-update
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arnupdate resource-arnupdate)
   (common-lisp:apply #'common-lisp:make-instance
                      'input-lambda-processor-update
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-lambda-processor-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-lambda-processor-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arnupdate))
      (common-lisp:list
       (common-lisp:cons "ResourceARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arnupdate))
      (common-lisp:list
       (common-lisp:cons "RoleARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-lambda-processor-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-parallelism common-lisp:nil
                       ((count :initarg :count :type
                         (common-lisp:or input-parallelism-count
                                         common-lisp:null)
                         :accessor %input-parallelism-count :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-parallelism 'make-input-parallelism))
 (common-lisp:defun make-input-parallelism
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key count)
   (common-lisp:apply #'common-lisp:make-instance 'input-parallelism
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-parallelism))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-parallelism))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-parallelism))
   common-lisp:nil))
(common-lisp:deftype input-parallelism-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass input-parallelism-update common-lisp:nil
                       ((count-update :initarg :count-update :type
                         (common-lisp:or input-parallelism-count
                                         common-lisp:null)
                         :accessor %input-parallelism-update-count-update
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-parallelism-update 'make-input-parallelism-update))
 (common-lisp:defun make-input-parallelism-update
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key count-update)
   (common-lisp:apply #'common-lisp:make-instance 'input-parallelism-update
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-parallelism-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-parallelism-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count-update))
      (common-lisp:list
       (common-lisp:cons "CountUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-parallelism-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-processing-configuration common-lisp:nil
                       ((input-lambda-processor :initarg
                         :input-lambda-processor :type
                         (common-lisp:or input-lambda-processor
                                         common-lisp:null)
                         :accessor
                         %input-processing-configuration-input-lambda-processor
                         :initform
                         (common-lisp:error
                          ":input-lambda-processor is required"))))
 (common-lisp:export
  (common-lisp:list 'input-processing-configuration
                    'make-input-processing-configuration))
 (common-lisp:defun make-input-processing-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-lambda-processor)
   (common-lisp:apply #'common-lisp:make-instance
                      'input-processing-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-processing-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-processing-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-lambda-processor))
      (common-lisp:list
       (common-lisp:cons "InputLambdaProcessor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-processing-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-processing-configuration-description
                       common-lisp:nil
                       ((input-lambda-processor-description :initarg
                         :input-lambda-processor-description :type
                         (common-lisp:or input-lambda-processor-description
                                         common-lisp:null)
                         :accessor
                         %input-processing-configuration-description-input-lambda-processor-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-processing-configuration-description
                    'make-input-processing-configuration-description))
 (common-lisp:defun make-input-processing-configuration-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-lambda-processor-description)
   (common-lisp:apply #'common-lisp:make-instance
                      'input-processing-configuration-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-processing-configuration-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-processing-configuration-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-lambda-processor-description))
      (common-lisp:list
       (common-lisp:cons "InputLambdaProcessorDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-processing-configuration-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-processing-configuration-update common-lisp:nil
                       ((input-lambda-processor-update :initarg
                         :input-lambda-processor-update :type
                         (common-lisp:or input-lambda-processor-update
                                         common-lisp:null)
                         :accessor
                         %input-processing-configuration-update-input-lambda-processor-update
                         :initform
                         (common-lisp:error
                          ":input-lambda-processor-update is required"))))
 (common-lisp:export
  (common-lisp:list 'input-processing-configuration-update
                    'make-input-processing-configuration-update))
 (common-lisp:defun make-input-processing-configuration-update
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-lambda-processor-update)
   (common-lisp:apply #'common-lisp:make-instance
                      'input-processing-configuration-update
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-processing-configuration-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-processing-configuration-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-lambda-processor-update))
      (common-lisp:list
       (common-lisp:cons "InputLambdaProcessorUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-processing-configuration-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-schema-update common-lisp:nil
                       ((record-column-updates :initarg :record-column-updates
                         :type (common-lisp:or record-columns common-lisp:null)
                         :accessor %input-schema-update-record-column-updates
                         :initform common-lisp:nil)
                        (record-encoding-update :initarg
                         :record-encoding-update :type
                         (common-lisp:or record-encoding common-lisp:null)
                         :accessor %input-schema-update-record-encoding-update
                         :initform common-lisp:nil)
                        (record-format-update :initarg :record-format-update
                         :type (common-lisp:or record-format common-lisp:null)
                         :accessor %input-schema-update-record-format-update
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-schema-update 'make-input-schema-update))
 (common-lisp:defun make-input-schema-update
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key record-column-updates
                     record-encoding-update record-format-update)
   (common-lisp:apply #'common-lisp:make-instance 'input-schema-update
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-schema-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-schema-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'record-format-update))
      (common-lisp:list
       (common-lisp:cons "RecordFormatUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'record-encoding-update))
      (common-lisp:list
       (common-lisp:cons "RecordEncodingUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'record-column-updates))
      (common-lisp:list
       (common-lisp:cons "RecordColumnUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-schema-update))
   common-lisp:nil))
(common-lisp:deftype input-starting-position () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-starting-position-configuration common-lisp:nil
                       ((input-starting-position :initarg
                         :input-starting-position :type
                         (common-lisp:or input-starting-position
                                         common-lisp:null)
                         :accessor
                         %input-starting-position-configuration-input-starting-position
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-starting-position-configuration
                    'make-input-starting-position-configuration))
 (common-lisp:defun make-input-starting-position-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-starting-position)
   (common-lisp:apply #'common-lisp:make-instance
                      'input-starting-position-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-starting-position-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-starting-position-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-starting-position))
      (common-lisp:list
       (common-lisp:cons "InputStartingPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-starting-position-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-update common-lisp:nil
                       ((input-parallelism-update :initarg
                         :input-parallelism-update :type
                         (common-lisp:or input-parallelism-update
                                         common-lisp:null)
                         :accessor %input-update-input-parallelism-update
                         :initform common-lisp:nil)
                        (input-schema-update :initarg :input-schema-update
                         :type
                         (common-lisp:or input-schema-update common-lisp:null)
                         :accessor %input-update-input-schema-update :initform
                         common-lisp:nil)
                        (kinesis-firehose-input-update :initarg
                         :kinesis-firehose-input-update :type
                         (common-lisp:or kinesis-firehose-input-update
                                         common-lisp:null)
                         :accessor %input-update-kinesis-firehose-input-update
                         :initform common-lisp:nil)
                        (kinesis-streams-input-update :initarg
                         :kinesis-streams-input-update :type
                         (common-lisp:or kinesis-streams-input-update
                                         common-lisp:null)
                         :accessor %input-update-kinesis-streams-input-update
                         :initform common-lisp:nil)
                        (input-processing-configuration-update :initarg
                         :input-processing-configuration-update :type
                         (common-lisp:or input-processing-configuration-update
                                         common-lisp:null)
                         :accessor
                         %input-update-input-processing-configuration-update
                         :initform common-lisp:nil)
                        (name-prefix-update :initarg :name-prefix-update :type
                         (common-lisp:or in-app-stream-name common-lisp:null)
                         :accessor %input-update-name-prefix-update :initform
                         common-lisp:nil)
                        (input-id :initarg :input-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %input-update-input-id :initform
                         (common-lisp:error ":input-id is required"))))
 (common-lisp:export (common-lisp:list 'input-update 'make-input-update))
 (common-lisp:defun make-input-update
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-parallelism-update
                     input-schema-update kinesis-firehose-input-update
                     kinesis-streams-input-update
                     input-processing-configuration-update name-prefix-update
                     input-id)
   (common-lisp:apply #'common-lisp:make-instance 'input-update
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-id))
      (common-lisp:list
       (common-lisp:cons "InputId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-prefix-update))
      (common-lisp:list
       (common-lisp:cons "NamePrefixUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-processing-configuration-update))
      (common-lisp:list
       (common-lisp:cons "InputProcessingConfigurationUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-streams-input-update))
      (common-lisp:list
       (common-lisp:cons "KinesisStreamsInputUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-firehose-input-update))
      (common-lisp:list
       (common-lisp:cons "KinesisFirehoseInputUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-schema-update))
      (common-lisp:list
       (common-lisp:cons "InputSchemaUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-parallelism-update))
      (common-lisp:list
       (common-lisp:cons "InputParallelismUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype input-updates ()
   '(trivial-types:proper-list input-update))
 (common-lisp:defun |make-input-updates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-update))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype inputs () '(trivial-types:proper-list input))
 (common-lisp:defun |make-inputs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition invalid-application-configuration-exception
     (kinesisanalytics-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-application-configuration-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-application-configuration-exception
                    'invalid-application-configuration-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-argument-exception
     (kinesisanalytics-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-argument-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-argument-exception
                    'invalid-argument-exception-message)))
(common-lisp:progn
 (common-lisp:defclass jsonmapping-parameters common-lisp:nil
                       ((record-row-path :initarg :record-row-path :type
                         (common-lisp:or record-row-path common-lisp:null)
                         :accessor %jsonmapping-parameters-record-row-path
                         :initform
                         (common-lisp:error ":record-row-path is required"))))
 (common-lisp:export
  (common-lisp:list 'jsonmapping-parameters 'make-jsonmapping-parameters))
 (common-lisp:defun make-jsonmapping-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key record-row-path)
   (common-lisp:apply #'common-lisp:make-instance 'jsonmapping-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          jsonmapping-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          jsonmapping-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-row-path))
      (common-lisp:list
       (common-lisp:cons "RecordRowPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          jsonmapping-parameters))
   common-lisp:nil))
(common-lisp:deftype kinesis-analytics-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kinesis-firehose-input common-lisp:nil
                       ((role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %kinesis-firehose-input-role-arn :initform
                         (common-lisp:error ":role-arn is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %kinesis-firehose-input-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'kinesis-firehose-input 'make-kinesis-firehose-input))
 (common-lisp:defun make-kinesis-firehose-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'kinesis-firehose-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kinesis-firehose-input-description common-lisp:nil
                       ((role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %kinesis-firehose-input-description-role-arn :initform
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         %kinesis-firehose-input-description-resource-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'kinesis-firehose-input-description
                    'make-kinesis-firehose-input-description))
 (common-lisp:defun make-kinesis-firehose-input-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'kinesis-firehose-input-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-input-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-input-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-input-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kinesis-firehose-input-update common-lisp:nil
                       ((role-arnupdate :initarg :role-arnupdate :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %kinesis-firehose-input-update-role-arnupdate
                         :initform common-lisp:nil)
                        (resource-arnupdate :initarg :resource-arnupdate :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         %kinesis-firehose-input-update-resource-arnupdate
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'kinesis-firehose-input-update
                    'make-kinesis-firehose-input-update))
 (common-lisp:defun make-kinesis-firehose-input-update
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arnupdate resource-arnupdate)
   (common-lisp:apply #'common-lisp:make-instance
                      'kinesis-firehose-input-update
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-input-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-input-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arnupdate))
      (common-lisp:list
       (common-lisp:cons "ResourceARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arnupdate))
      (common-lisp:list
       (common-lisp:cons "RoleARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-input-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kinesis-firehose-output common-lisp:nil
                       ((role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %kinesis-firehose-output-role-arn :initform
                         (common-lisp:error ":role-arn is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %kinesis-firehose-output-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'kinesis-firehose-output 'make-kinesis-firehose-output))
 (common-lisp:defun make-kinesis-firehose-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'kinesis-firehose-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kinesis-firehose-output-description common-lisp:nil
                       ((role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %kinesis-firehose-output-description-role-arn
                         :initform common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         %kinesis-firehose-output-description-resource-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'kinesis-firehose-output-description
                    'make-kinesis-firehose-output-description))
 (common-lisp:defun make-kinesis-firehose-output-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'kinesis-firehose-output-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-output-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-output-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-output-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kinesis-firehose-output-update common-lisp:nil
                       ((role-arnupdate :initarg :role-arnupdate :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %kinesis-firehose-output-update-role-arnupdate
                         :initform common-lisp:nil)
                        (resource-arnupdate :initarg :resource-arnupdate :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         %kinesis-firehose-output-update-resource-arnupdate
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'kinesis-firehose-output-update
                    'make-kinesis-firehose-output-update))
 (common-lisp:defun make-kinesis-firehose-output-update
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arnupdate resource-arnupdate)
   (common-lisp:apply #'common-lisp:make-instance
                      'kinesis-firehose-output-update
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-output-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-output-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arnupdate))
      (common-lisp:list
       (common-lisp:cons "ResourceARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arnupdate))
      (common-lisp:list
       (common-lisp:cons "RoleARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-output-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kinesis-streams-input common-lisp:nil
                       ((role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %kinesis-streams-input-role-arn :initform
                         (common-lisp:error ":role-arn is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %kinesis-streams-input-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'kinesis-streams-input 'make-kinesis-streams-input))
 (common-lisp:defun make-kinesis-streams-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'kinesis-streams-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kinesis-streams-input-description common-lisp:nil
                       ((role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %kinesis-streams-input-description-role-arn :initform
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         %kinesis-streams-input-description-resource-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'kinesis-streams-input-description
                    'make-kinesis-streams-input-description))
 (common-lisp:defun make-kinesis-streams-input-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'kinesis-streams-input-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-input-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-input-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-input-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kinesis-streams-input-update common-lisp:nil
                       ((role-arnupdate :initarg :role-arnupdate :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %kinesis-streams-input-update-role-arnupdate :initform
                         common-lisp:nil)
                        (resource-arnupdate :initarg :resource-arnupdate :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         %kinesis-streams-input-update-resource-arnupdate
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'kinesis-streams-input-update
                    'make-kinesis-streams-input-update))
 (common-lisp:defun make-kinesis-streams-input-update
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arnupdate resource-arnupdate)
   (common-lisp:apply #'common-lisp:make-instance 'kinesis-streams-input-update
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-input-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-input-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arnupdate))
      (common-lisp:list
       (common-lisp:cons "ResourceARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arnupdate))
      (common-lisp:list
       (common-lisp:cons "RoleARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-input-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kinesis-streams-output common-lisp:nil
                       ((role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %kinesis-streams-output-role-arn :initform
                         (common-lisp:error ":role-arn is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %kinesis-streams-output-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'kinesis-streams-output 'make-kinesis-streams-output))
 (common-lisp:defun make-kinesis-streams-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'kinesis-streams-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kinesis-streams-output-description common-lisp:nil
                       ((role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %kinesis-streams-output-description-role-arn :initform
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         %kinesis-streams-output-description-resource-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'kinesis-streams-output-description
                    'make-kinesis-streams-output-description))
 (common-lisp:defun make-kinesis-streams-output-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'kinesis-streams-output-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-output-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-output-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-output-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kinesis-streams-output-update common-lisp:nil
                       ((role-arnupdate :initarg :role-arnupdate :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %kinesis-streams-output-update-role-arnupdate
                         :initform common-lisp:nil)
                        (resource-arnupdate :initarg :resource-arnupdate :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         %kinesis-streams-output-update-resource-arnupdate
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'kinesis-streams-output-update
                    'make-kinesis-streams-output-update))
 (common-lisp:defun make-kinesis-streams-output-update
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arnupdate resource-arnupdate)
   (common-lisp:apply #'common-lisp:make-instance
                      'kinesis-streams-output-update
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-output-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-output-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arnupdate))
      (common-lisp:list
       (common-lisp:cons "ResourceARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arnupdate))
      (common-lisp:list
       (common-lisp:cons "RoleARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-output-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lambda-output common-lisp:nil
                       ((role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %lambda-output-role-arn :initform
                         (common-lisp:error ":role-arn is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %lambda-output-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export (common-lisp:list 'lambda-output 'make-lambda-output))
 (common-lisp:defun make-lambda-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'lambda-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lambda-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lambda-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lambda-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lambda-output-description common-lisp:nil
                       ((role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %lambda-output-description-role-arn :initform
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %lambda-output-description-resource-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lambda-output-description
                    'make-lambda-output-description))
 (common-lisp:defun make-lambda-output-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'lambda-output-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-output-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-output-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-output-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lambda-output-update common-lisp:nil
                       ((role-arnupdate :initarg :role-arnupdate :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %lambda-output-update-role-arnupdate :initform
                         common-lisp:nil)
                        (resource-arnupdate :initarg :resource-arnupdate :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %lambda-output-update-resource-arnupdate
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lambda-output-update 'make-lambda-output-update))
 (common-lisp:defun make-lambda-output-update
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arnupdate resource-arnupdate)
   (common-lisp:apply #'common-lisp:make-instance 'lambda-output-update
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lambda-output-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lambda-output-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arnupdate))
      (common-lisp:list
       (common-lisp:cons "ResourceARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arnupdate))
      (common-lisp:list
       (common-lisp:cons "RoleARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lambda-output-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (kinesisanalytics-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:deftype list-applications-input-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-applications-request common-lisp:nil
                       ((exclusive-start-application-name :initarg
                         :exclusive-start-application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %list-applications-request-exclusive-start-application-name
                         :initform common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or list-applications-input-limit
                                         common-lisp:null)
                         :accessor %list-applications-request-limit :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-applications-request
                    'make-list-applications-request))
 (common-lisp:defun make-list-applications-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key exclusive-start-application-name limit)
   (common-lisp:apply #'common-lisp:make-instance 'list-applications-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclusive-start-application-name))
      (common-lisp:list
       (common-lisp:cons "ExclusiveStartApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-applications-response common-lisp:nil
                       ((has-more-applications :initarg :has-more-applications
                         :type (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         %list-applications-response-has-more-applications
                         :initform
                         (common-lisp:error
                          ":has-more-applications is required"))
                        (application-summaries :initarg :application-summaries
                         :type
                         (common-lisp:or application-summaries
                                         common-lisp:null)
                         :accessor
                         %list-applications-response-application-summaries
                         :initform
                         (common-lisp:error
                          ":application-summaries is required"))))
 (common-lisp:export
  (common-lisp:list 'list-applications-response
                    'make-list-applications-response))
 (common-lisp:defun make-list-applications-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key has-more-applications
                     application-summaries)
   (common-lisp:apply #'common-lisp:make-instance 'list-applications-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-summaries))
      (common-lisp:list
       (common-lisp:cons "ApplicationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'has-more-applications))
      (common-lisp:list
       (common-lisp:cons "HasMoreApplications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or kinesis-analytics-arn
                                         common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype log-stream-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass mapping-parameters common-lisp:nil
                       ((csvmapping-parameters :initarg :csvmapping-parameters
                         :type
                         (common-lisp:or csvmapping-parameters
                                         common-lisp:null)
                         :accessor %mapping-parameters-csvmapping-parameters
                         :initform common-lisp:nil)
                        (jsonmapping-parameters :initarg
                         :jsonmapping-parameters :type
                         (common-lisp:or jsonmapping-parameters
                                         common-lisp:null)
                         :accessor %mapping-parameters-jsonmapping-parameters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'mapping-parameters 'make-mapping-parameters))
 (common-lisp:defun make-mapping-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key csvmapping-parameters
                     jsonmapping-parameters)
   (common-lisp:apply #'common-lisp:make-instance 'mapping-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mapping-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mapping-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'jsonmapping-parameters))
      (common-lisp:list
       (common-lisp:cons "JSONMappingParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'csvmapping-parameters))
      (common-lisp:list
       (common-lisp:cons "CSVMappingParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mapping-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output common-lisp:nil
                       ((destination-schema :initarg :destination-schema :type
                         (common-lisp:or destination-schema common-lisp:null)
                         :accessor %output-destination-schema :initform
                         (common-lisp:error ":destination-schema is required"))
                        (lambda-output :initarg :lambda-output :type
                         (common-lisp:or lambda-output common-lisp:null)
                         :accessor %output-lambda-output :initform
                         common-lisp:nil)
                        (kinesis-firehose-output :initarg
                         :kinesis-firehose-output :type
                         (common-lisp:or kinesis-firehose-output
                                         common-lisp:null)
                         :accessor %output-kinesis-firehose-output :initform
                         common-lisp:nil)
                        (kinesis-streams-output :initarg
                         :kinesis-streams-output :type
                         (common-lisp:or kinesis-streams-output
                                         common-lisp:null)
                         :accessor %output-kinesis-streams-output :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or in-app-stream-name common-lisp:null)
                         :accessor %output-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'output 'make-output))
 (common-lisp:defun make-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination-schema lambda-output
                     kinesis-firehose-output kinesis-streams-output name)
   (common-lisp:apply #'common-lisp:make-instance 'output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-streams-output))
      (common-lisp:list
       (common-lisp:cons "KinesisStreamsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-firehose-output))
      (common-lisp:list
       (common-lisp:cons "KinesisFirehoseOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-output))
      (common-lisp:list
       (common-lisp:cons "LambdaOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-schema))
      (common-lisp:list
       (common-lisp:cons "DestinationSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output-description common-lisp:nil
                       ((destination-schema :initarg :destination-schema :type
                         (common-lisp:or destination-schema common-lisp:null)
                         :accessor %output-description-destination-schema
                         :initform common-lisp:nil)
                        (lambda-output-description :initarg
                         :lambda-output-description :type
                         (common-lisp:or lambda-output-description
                                         common-lisp:null)
                         :accessor
                         %output-description-lambda-output-description
                         :initform common-lisp:nil)
                        (kinesis-firehose-output-description :initarg
                         :kinesis-firehose-output-description :type
                         (common-lisp:or kinesis-firehose-output-description
                                         common-lisp:null)
                         :accessor
                         %output-description-kinesis-firehose-output-description
                         :initform common-lisp:nil)
                        (kinesis-streams-output-description :initarg
                         :kinesis-streams-output-description :type
                         (common-lisp:or kinesis-streams-output-description
                                         common-lisp:null)
                         :accessor
                         %output-description-kinesis-streams-output-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or in-app-stream-name common-lisp:null)
                         :accessor %output-description-name :initform
                         common-lisp:nil)
                        (output-id :initarg :output-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %output-description-output-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'output-description 'make-output-description))
 (common-lisp:defun make-output-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination-schema
                     lambda-output-description
                     kinesis-firehose-output-description
                     kinesis-streams-output-description name output-id)
   (common-lisp:apply #'common-lisp:make-instance 'output-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-id))
      (common-lisp:list
       (common-lisp:cons "OutputId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-streams-output-description))
      (common-lisp:list
       (common-lisp:cons "KinesisStreamsOutputDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-firehose-output-description))
      (common-lisp:list
       (common-lisp:cons "KinesisFirehoseOutputDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-output-description))
      (common-lisp:list
       (common-lisp:cons "LambdaOutputDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-schema))
      (common-lisp:list
       (common-lisp:cons "DestinationSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype output-descriptions ()
   '(trivial-types:proper-list output-description))
 (common-lisp:defun |make-output-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass output-update common-lisp:nil
                       ((destination-schema-update :initarg
                         :destination-schema-update :type
                         (common-lisp:or destination-schema common-lisp:null)
                         :accessor %output-update-destination-schema-update
                         :initform common-lisp:nil)
                        (lambda-output-update :initarg :lambda-output-update
                         :type
                         (common-lisp:or lambda-output-update common-lisp:null)
                         :accessor %output-update-lambda-output-update
                         :initform common-lisp:nil)
                        (kinesis-firehose-output-update :initarg
                         :kinesis-firehose-output-update :type
                         (common-lisp:or kinesis-firehose-output-update
                                         common-lisp:null)
                         :accessor
                         %output-update-kinesis-firehose-output-update
                         :initform common-lisp:nil)
                        (kinesis-streams-output-update :initarg
                         :kinesis-streams-output-update :type
                         (common-lisp:or kinesis-streams-output-update
                                         common-lisp:null)
                         :accessor %output-update-kinesis-streams-output-update
                         :initform common-lisp:nil)
                        (name-update :initarg :name-update :type
                         (common-lisp:or in-app-stream-name common-lisp:null)
                         :accessor %output-update-name-update :initform
                         common-lisp:nil)
                        (output-id :initarg :output-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %output-update-output-id :initform
                         (common-lisp:error ":output-id is required"))))
 (common-lisp:export (common-lisp:list 'output-update 'make-output-update))
 (common-lisp:defun make-output-update
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination-schema-update
                     lambda-output-update kinesis-firehose-output-update
                     kinesis-streams-output-update name-update output-id)
   (common-lisp:apply #'common-lisp:make-instance 'output-update
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-id))
      (common-lisp:list
       (common-lisp:cons "OutputId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-update))
      (common-lisp:list
       (common-lisp:cons "NameUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-streams-output-update))
      (common-lisp:list
       (common-lisp:cons "KinesisStreamsOutputUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-firehose-output-update))
      (common-lisp:list
       (common-lisp:cons "KinesisFirehoseOutputUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-output-update))
      (common-lisp:list
       (common-lisp:cons "LambdaOutputUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-schema-update))
      (common-lisp:list
       (common-lisp:cons "DestinationSchemaUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype output-updates ()
   '(trivial-types:proper-list output-update))
 (common-lisp:defun |make-output-updates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-update))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype outputs () '(trivial-types:proper-list output))
 (common-lisp:defun |make-outputs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype parsed-input-record ()
   '(trivial-types:proper-list parsed-input-record-field))
 (common-lisp:defun |make-parsed-input-record|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            parsed-input-record-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype parsed-input-record-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parsed-input-records ()
   '(trivial-types:proper-list parsed-input-record))
 (common-lisp:defun |make-parsed-input-records|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parsed-input-record))
   aws-sdk/generator/shape::members))
(common-lisp:deftype processed-input-record () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype processed-input-records ()
   '(trivial-types:proper-list processed-input-record))
 (common-lisp:defun |make-processed-input-records|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list processed-input-record))
   aws-sdk/generator/shape::members))
(common-lisp:deftype raw-input-record () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype raw-input-records ()
   '(trivial-types:proper-list raw-input-record))
 (common-lisp:defun |make-raw-input-records|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list raw-input-record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass record-column common-lisp:nil
                       ((sql-type :initarg :sql-type :type
                         (common-lisp:or record-column-sql-type
                                         common-lisp:null)
                         :accessor %record-column-sql-type :initform
                         (common-lisp:error ":sql-type is required"))
                        (mapping :initarg :mapping :type
                         (common-lisp:or record-column-mapping
                                         common-lisp:null)
                         :accessor %record-column-mapping :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or record-column-name common-lisp:null)
                         :accessor %record-column-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'record-column 'make-record-column))
 (common-lisp:defun make-record-column
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sql-type mapping name)
   (common-lisp:apply #'common-lisp:make-instance 'record-column
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input record-column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input record-column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mapping))
      (common-lisp:list
       (common-lisp:cons "Mapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql-type))
      (common-lisp:list
       (common-lisp:cons "SqlType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input record-column))
   common-lisp:nil))
(common-lisp:deftype record-column-delimiter () 'common-lisp:string)
(common-lisp:deftype record-column-mapping () 'common-lisp:string)
(common-lisp:deftype record-column-name () 'common-lisp:string)
(common-lisp:deftype record-column-sql-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype record-columns ()
   '(trivial-types:proper-list record-column))
 (common-lisp:defun |make-record-columns|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list record-column))
   aws-sdk/generator/shape::members))
(common-lisp:deftype record-encoding () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass record-format common-lisp:nil
                       ((mapping-parameters :initarg :mapping-parameters :type
                         (common-lisp:or mapping-parameters common-lisp:null)
                         :accessor %record-format-mapping-parameters :initform
                         common-lisp:nil)
                        (record-format-type :initarg :record-format-type :type
                         (common-lisp:or record-format-type common-lisp:null)
                         :accessor %record-format-record-format-type :initform
                         (common-lisp:error
                          ":record-format-type is required"))))
 (common-lisp:export (common-lisp:list 'record-format 'make-record-format))
 (common-lisp:defun make-record-format
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mapping-parameters record-format-type)
   (common-lisp:apply #'common-lisp:make-instance 'record-format
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input record-format))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input record-format))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-format-type))
      (common-lisp:list
       (common-lisp:cons "RecordFormatType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mapping-parameters))
      (common-lisp:list
       (common-lisp:cons "MappingParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input record-format))
   common-lisp:nil))
(common-lisp:deftype record-format-type () 'common-lisp:string)
(common-lisp:deftype record-row-delimiter () 'common-lisp:string)
(common-lisp:deftype record-row-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reference-data-source common-lisp:nil
                       ((reference-schema :initarg :reference-schema :type
                         (common-lisp:or source-schema common-lisp:null)
                         :accessor %reference-data-source-reference-schema
                         :initform
                         (common-lisp:error ":reference-schema is required"))
                        (s3reference-data-source :initarg
                         :s3reference-data-source :type
                         (common-lisp:or s3reference-data-source
                                         common-lisp:null)
                         :accessor
                         %reference-data-source-s3reference-data-source
                         :initform common-lisp:nil)
                        (table-name :initarg :table-name :type
                         (common-lisp:or in-app-table-name common-lisp:null)
                         :accessor %reference-data-source-table-name :initform
                         (common-lisp:error ":table-name is required"))))
 (common-lisp:export
  (common-lisp:list 'reference-data-source 'make-reference-data-source))
 (common-lisp:defun make-reference-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reference-schema s3reference-data-source
                     table-name)
   (common-lisp:apply #'common-lisp:make-instance 'reference-data-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reference-data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reference-data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3reference-data-source))
      (common-lisp:list
       (common-lisp:cons "S3ReferenceDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-schema))
      (common-lisp:list
       (common-lisp:cons "ReferenceSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reference-data-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reference-data-source-description common-lisp:nil
                       ((reference-schema :initarg :reference-schema :type
                         (common-lisp:or source-schema common-lisp:null)
                         :accessor
                         %reference-data-source-description-reference-schema
                         :initform common-lisp:nil)
                        (s3reference-data-source-description :initarg
                         :s3reference-data-source-description :type
                         (common-lisp:or s3reference-data-source-description
                                         common-lisp:null)
                         :accessor
                         %reference-data-source-description-s3reference-data-source-description
                         :initform
                         (common-lisp:error
                          ":s3reference-data-source-description is required"))
                        (table-name :initarg :table-name :type
                         (common-lisp:or in-app-table-name common-lisp:null)
                         :accessor
                         %reference-data-source-description-table-name
                         :initform
                         (common-lisp:error ":table-name is required"))
                        (reference-id :initarg :reference-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %reference-data-source-description-reference-id
                         :initform
                         (common-lisp:error ":reference-id is required"))))
 (common-lisp:export
  (common-lisp:list 'reference-data-source-description
                    'make-reference-data-source-description))
 (common-lisp:defun make-reference-data-source-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reference-schema
                     s3reference-data-source-description table-name
                     reference-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'reference-data-source-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reference-data-source-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reference-data-source-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-id))
      (common-lisp:list
       (common-lisp:cons "ReferenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3reference-data-source-description))
      (common-lisp:list
       (common-lisp:cons "S3ReferenceDataSourceDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-schema))
      (common-lisp:list
       (common-lisp:cons "ReferenceSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reference-data-source-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reference-data-source-descriptions ()
   '(trivial-types:proper-list reference-data-source-description))
 (common-lisp:defun |make-reference-data-source-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reference-data-source-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass reference-data-source-update common-lisp:nil
                       ((reference-schema-update :initarg
                         :reference-schema-update :type
                         (common-lisp:or source-schema common-lisp:null)
                         :accessor
                         %reference-data-source-update-reference-schema-update
                         :initform common-lisp:nil)
                        (s3reference-data-source-update :initarg
                         :s3reference-data-source-update :type
                         (common-lisp:or s3reference-data-source-update
                                         common-lisp:null)
                         :accessor
                         %reference-data-source-update-s3reference-data-source-update
                         :initform common-lisp:nil)
                        (table-name-update :initarg :table-name-update :type
                         (common-lisp:or in-app-table-name common-lisp:null)
                         :accessor
                         %reference-data-source-update-table-name-update
                         :initform common-lisp:nil)
                        (reference-id :initarg :reference-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %reference-data-source-update-reference-id :initform
                         (common-lisp:error ":reference-id is required"))))
 (common-lisp:export
  (common-lisp:list 'reference-data-source-update
                    'make-reference-data-source-update))
 (common-lisp:defun make-reference-data-source-update
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reference-schema-update
                     s3reference-data-source-update table-name-update
                     reference-id)
   (common-lisp:apply #'common-lisp:make-instance 'reference-data-source-update
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reference-data-source-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reference-data-source-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-id))
      (common-lisp:list
       (common-lisp:cons "ReferenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name-update))
      (common-lisp:list
       (common-lisp:cons "TableNameUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3reference-data-source-update))
      (common-lisp:list
       (common-lisp:cons "S3ReferenceDataSourceUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reference-schema-update))
      (common-lisp:list
       (common-lisp:cons "ReferenceSchemaUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reference-data-source-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reference-data-source-updates ()
   '(trivial-types:proper-list reference-data-source-update))
 (common-lisp:defun |make-reference-data-source-updates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reference-data-source-update))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (kinesisanalytics-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (kinesisanalytics-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-provisioned-throughput-exceeded-exception
     (kinesisanalytics-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-provisioned-throughput-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-provisioned-throughput-exceeded-exception
                    'resource-provisioned-throughput-exceeded-exception-message)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3configuration common-lisp:nil
                       ((file-key :initarg :file-key :type
                         (common-lisp:or file-key common-lisp:null) :accessor
                         %s3configuration-file-key :initform
                         (common-lisp:error ":file-key is required"))
                        (bucket-arn :initarg :bucket-arn :type
                         (common-lisp:or bucket-arn common-lisp:null) :accessor
                         %s3configuration-bucket-arn :initform
                         (common-lisp:error ":bucket-arn is required"))
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %s3configuration-role-arn :initform
                         (common-lisp:error ":role-arn is required"))))
 (common-lisp:export (common-lisp:list 's3configuration 'make-s3configuration))
 (common-lisp:defun make-s3configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key file-key bucket-arn role-arn)
   (common-lisp:apply #'common-lisp:make-instance 's3configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "BucketARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-key))
      (common-lisp:list
       (common-lisp:cons "FileKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3reference-data-source common-lisp:nil
                       ((reference-role-arn :initarg :reference-role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %s3reference-data-source-reference-role-arn :initform
                         (common-lisp:error ":reference-role-arn is required"))
                        (file-key :initarg :file-key :type
                         (common-lisp:or file-key common-lisp:null) :accessor
                         %s3reference-data-source-file-key :initform
                         (common-lisp:error ":file-key is required"))
                        (bucket-arn :initarg :bucket-arn :type
                         (common-lisp:or bucket-arn common-lisp:null) :accessor
                         %s3reference-data-source-bucket-arn :initform
                         (common-lisp:error ":bucket-arn is required"))))
 (common-lisp:export
  (common-lisp:list 's3reference-data-source 'make-s3reference-data-source))
 (common-lisp:defun make-s3reference-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reference-role-arn file-key bucket-arn)
   (common-lisp:apply #'common-lisp:make-instance 's3reference-data-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3reference-data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3reference-data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "BucketARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-key))
      (common-lisp:list
       (common-lisp:cons "FileKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-role-arn))
      (common-lisp:list
       (common-lisp:cons "ReferenceRoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3reference-data-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3reference-data-source-description common-lisp:nil
                       ((reference-role-arn :initarg :reference-role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %s3reference-data-source-description-reference-role-arn
                         :initform
                         (common-lisp:error ":reference-role-arn is required"))
                        (file-key :initarg :file-key :type
                         (common-lisp:or file-key common-lisp:null) :accessor
                         %s3reference-data-source-description-file-key
                         :initform (common-lisp:error ":file-key is required"))
                        (bucket-arn :initarg :bucket-arn :type
                         (common-lisp:or bucket-arn common-lisp:null) :accessor
                         %s3reference-data-source-description-bucket-arn
                         :initform
                         (common-lisp:error ":bucket-arn is required"))))
 (common-lisp:export
  (common-lisp:list 's3reference-data-source-description
                    'make-s3reference-data-source-description))
 (common-lisp:defun make-s3reference-data-source-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reference-role-arn file-key bucket-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      's3reference-data-source-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3reference-data-source-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3reference-data-source-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "BucketARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-key))
      (common-lisp:list
       (common-lisp:cons "FileKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-role-arn))
      (common-lisp:list
       (common-lisp:cons "ReferenceRoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3reference-data-source-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3reference-data-source-update common-lisp:nil
                       ((reference-role-arnupdate :initarg
                         :reference-role-arnupdate :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %s3reference-data-source-update-reference-role-arnupdate
                         :initform common-lisp:nil)
                        (file-key-update :initarg :file-key-update :type
                         (common-lisp:or file-key common-lisp:null) :accessor
                         %s3reference-data-source-update-file-key-update
                         :initform common-lisp:nil)
                        (bucket-arnupdate :initarg :bucket-arnupdate :type
                         (common-lisp:or bucket-arn common-lisp:null) :accessor
                         %s3reference-data-source-update-bucket-arnupdate
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 's3reference-data-source-update
                    'make-s3reference-data-source-update))
 (common-lisp:defun make-s3reference-data-source-update
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reference-role-arnupdate file-key-update
                     bucket-arnupdate)
   (common-lisp:apply #'common-lisp:make-instance
                      's3reference-data-source-update
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3reference-data-source-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3reference-data-source-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arnupdate))
      (common-lisp:list
       (common-lisp:cons "BucketARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-key-update))
      (common-lisp:list
       (common-lisp:cons "FileKeyUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reference-role-arnupdate))
      (common-lisp:list
       (common-lisp:cons "ReferenceRoleARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3reference-data-source-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (kinesisanalytics-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:progn
 (common-lisp:defclass source-schema common-lisp:nil
                       ((record-columns :initarg :record-columns :type
                         (common-lisp:or record-columns common-lisp:null)
                         :accessor %source-schema-record-columns :initform
                         (common-lisp:error ":record-columns is required"))
                        (record-encoding :initarg :record-encoding :type
                         (common-lisp:or record-encoding common-lisp:null)
                         :accessor %source-schema-record-encoding :initform
                         common-lisp:nil)
                        (record-format :initarg :record-format :type
                         (common-lisp:or record-format common-lisp:null)
                         :accessor %source-schema-record-format :initform
                         (common-lisp:error ":record-format is required"))))
 (common-lisp:export (common-lisp:list 'source-schema 'make-source-schema))
 (common-lisp:defun make-source-schema
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key record-columns record-encoding
                     record-format)
   (common-lisp:apply #'common-lisp:make-instance 'source-schema
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-schema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-schema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-format))
      (common-lisp:list
       (common-lisp:cons "RecordFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-encoding))
      (common-lisp:list
       (common-lisp:cons "RecordEncoding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-columns))
      (common-lisp:list
       (common-lisp:cons "RecordColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-schema))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-application-request common-lisp:nil
                       ((input-configurations :initarg :input-configurations
                         :type
                         (common-lisp:or input-configurations common-lisp:null)
                         :accessor
                         %start-application-request-input-configurations
                         :initform
                         (common-lisp:error
                          ":input-configurations is required"))
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %start-application-request-application-name
                         :initform
                         (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'start-application-request
                    'make-start-application-request))
 (common-lisp:defun make-start-application-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-configurations application-name)
   (common-lisp:apply #'common-lisp:make-instance 'start-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-configurations))
      (common-lisp:list
       (common-lisp:cons "InputConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-application-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'start-application-response
                    'make-start-application-response))
 (common-lisp:defun make-start-application-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'start-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-application-request common-lisp:nil
                       ((application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %stop-application-request-application-name
                         :initform
                         (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-application-request 'make-stop-application-request))
 (common-lisp:defun make-stop-application-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-name)
   (common-lisp:apply #'common-lisp:make-instance 'stop-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-application-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'stop-application-response
                    'make-stop-application-response))
 (common-lisp:defun make-stop-application-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'stop-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or kinesis-analytics-arn
                                         common-lisp:null)
                         :accessor %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (kinesisanalytics-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       too-many-tags-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unable-to-detect-schema-exception
     (kinesisanalytics-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       unable-to-detect-schema-exception-message)
      (raw-input-records :initarg :raw-input-records :initform common-lisp:nil
       :reader unable-to-detect-schema-exception-raw-input-records)
      (processed-input-records :initarg :processed-input-records :initform
       common-lisp:nil :reader
       unable-to-detect-schema-exception-processed-input-records)))
 (common-lisp:export
  (common-lisp:list 'unable-to-detect-schema-exception
                    'unable-to-detect-schema-exception-message
                    'unable-to-detect-schema-exception-raw-input-records
                    'unable-to-detect-schema-exception-processed-input-records)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-operation-exception
     (kinesisanalytics-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       unsupported-operation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-operation-exception
                    'unsupported-operation-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or kinesis-analytics-arn
                                         common-lisp:null)
                         :accessor %untag-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-application-request common-lisp:nil
                       ((application-update :initarg :application-update :type
                         (common-lisp:or application-update common-lisp:null)
                         :accessor
                         %update-application-request-application-update
                         :initform
                         (common-lisp:error ":application-update is required"))
                        (current-application-version-id :initarg
                         :current-application-version-id :type
                         (common-lisp:or application-version-id
                                         common-lisp:null)
                         :accessor
                         %update-application-request-current-application-version-id
                         :initform
                         (common-lisp:error
                          ":current-application-version-id is required"))
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %update-application-request-application-name
                         :initform
                         (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-application-request
                    'make-update-application-request))
 (common-lisp:defun make-update-application-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-update
                     current-application-version-id application-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-update))
      (common-lisp:list
       (common-lisp:cons "ApplicationUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-application-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-application-response
                    'make-update-application-response))
 (common-lisp:defun make-update-application-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'update-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun add-application-cloud-watch-logging-option
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id cloud-watch-logging-option)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id
     cloud-watch-logging-option))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-application-cloud-watch-logging-option-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST"
        :json "/" "AddApplicationCloudWatchLoggingOption" "2015-08-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-application-cloud-watch-logging-option))
(common-lisp:progn
 (common-lisp:defun add-application-input
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id input)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id
     input))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-application-input-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST"
        :json "/" "AddApplicationInput" "2015-08-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-application-input))
(common-lisp:progn
 (common-lisp:defun add-application-input-processing-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id input-id
                     input-processing-configuration)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id
     input-id input-processing-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-application-input-processing-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST"
        :json "/" "AddApplicationInputProcessingConfiguration" "2015-08-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-application-input-processing-configuration))
(common-lisp:progn
 (common-lisp:defun add-application-output
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id output)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id
     output))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-application-output-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST"
        :json "/" "AddApplicationOutput" "2015-08-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-application-output))
(common-lisp:progn
 (common-lisp:defun add-application-reference-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id reference-data-source)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id
     reference-data-source))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-application-reference-data-source-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST"
        :json "/" "AddApplicationReferenceDataSource" "2015-08-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-application-reference-data-source))
(common-lisp:progn
 (common-lisp:defun create-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name application-description
                     inputs outputs cloud-watch-logging-options
                     application-code tags)
   (common-lisp:declare
    (common-lisp:ignorable application-name application-description inputs
     outputs cloud-watch-logging-options application-code tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST"
        :json "/" "CreateApplication" "2015-08-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-application))
(common-lisp:progn
 (common-lisp:defun delete-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name create-timestamp)
   (common-lisp:declare
    (common-lisp:ignorable application-name create-timestamp))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteApplication" "2015-08-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-application))
(common-lisp:progn
 (common-lisp:defun delete-application-cloud-watch-logging-option
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id
                     cloud-watch-logging-option-id)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id
     cloud-watch-logging-option-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-application-cloud-watch-logging-option-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteApplicationCloudWatchLoggingOption" "2015-08-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-application-cloud-watch-logging-option))
(common-lisp:progn
 (common-lisp:defun delete-application-input-processing-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id input-id)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id
     input-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-application-input-processing-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteApplicationInputProcessingConfiguration"
        "2015-08-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-application-input-processing-configuration))
(common-lisp:progn
 (common-lisp:defun delete-application-output
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id output-id)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id
     output-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-application-output-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteApplicationOutput" "2015-08-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-application-output))
(common-lisp:progn
 (common-lisp:defun delete-application-reference-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id reference-id)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id
     reference-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-application-reference-data-source-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteApplicationReferenceDataSource" "2015-08-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-application-reference-data-source))
(common-lisp:progn
 (common-lisp:defun describe-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name)
   (common-lisp:declare (common-lisp:ignorable application-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST"
        :json "/" "DescribeApplication" "2015-08-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-application))
(common-lisp:progn
 (common-lisp:defun discover-input-schema
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn role-arn
                     input-starting-position-configuration s3configuration
                     input-processing-configuration)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn role-arn
     input-starting-position-configuration s3configuration
     input-processing-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-discover-input-schema-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST"
        :json "/" "DiscoverInputSchema" "2015-08-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'discover-input-schema))
(common-lisp:progn
 (common-lisp:defun list-applications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit exclusive-start-application-name)
   (common-lisp:declare
    (common-lisp:ignorable limit exclusive-start-application-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-applications-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListApplications" "2015-08-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-applications))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListTagsForResource" "2015-08-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun start-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name input-configurations)
   (common-lisp:declare
    (common-lisp:ignorable application-name input-configurations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST"
        :json "/" "StartApplication" "2015-08-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-application))
(common-lisp:progn
 (common-lisp:defun stop-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name)
   (common-lisp:declare (common-lisp:ignorable application-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST"
        :json "/" "StopApplication" "2015-08-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-application))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST"
        :json "/" "TagResource" "2015-08-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST"
        :json "/" "UntagResource" "2015-08-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id application-update)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id
     application-update))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST"
        :json "/" "UpdateApplication" "2015-08-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-application))
