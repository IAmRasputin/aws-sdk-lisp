;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/b2bi/api
  (:use)
  (:nicknames #:aws/b2bi)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/b2bi/api)
(common-lisp:progn
 (common-lisp:define-condition b2bi-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'b2bi-error))
(common-lisp:progn
 (common-lisp:defclass b2bi-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "b2bi" :api-version
                        "2022-06-23" :host-prefix "b2bi" :signing-name "b2bi"
                        :global-host common-lisp:nil :target-prefix "B2BI"
                        :json-version "1.0"))
 (common-lisp:export 'b2bi-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (b2bi-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:deftype bucket-name () 'common-lisp:string)
(common-lisp:deftype business-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (capability-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-capability-configuration-"))
   (edi common-lisp:nil :type
    (common-lisp:or edi-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'capability-configuration 'make-capability-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          capability-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          capability-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edi))
      (common-lisp:list
       (common-lisp:cons "edi"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          capability-configuration))
   common-lisp:nil))
(common-lisp:deftype capability-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype capability-list ()
   '(trivial-types:proper-list capability-summary))
 (common-lisp:defun make-capability-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list capability-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype capability-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (capability-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-capability-summary-"))
   (capability-id (common-lisp:error ":capabilityid is required") :type
    (common-lisp:or capability-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or capability-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or capability-type common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-date common-lisp:null))
   (modified-at common-lisp:nil :type
    (common-lisp:or modified-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'capability-summary 'make-capability-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input capability-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input capability-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capability-id))
      (common-lisp:list
       (common-lisp:cons "capabilityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input capability-summary))
   common-lisp:nil))
(common-lisp:deftype capability-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (b2bi-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-capability-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-capability-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or capability-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or capability-type common-lisp:null))
   (configuration (common-lisp:error ":configuration is required") :type
    (common-lisp:or capability-configuration common-lisp:null))
   (instructions-documents common-lisp:nil :type
    (common-lisp:or instructions-documents common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-capability-request
                    'make-create-capability-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-capability-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-capability-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instructions-documents))
      (common-lisp:list
       (common-lisp:cons "instructionsDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-capability-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-capability-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-capability-response-"))
   (capability-id (common-lisp:error ":capabilityid is required") :type
    (common-lisp:or capability-id common-lisp:null))
   (capability-arn (common-lisp:error ":capabilityarn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or capability-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or capability-type common-lisp:null))
   (configuration (common-lisp:error ":configuration is required") :type
    (common-lisp:or capability-configuration common-lisp:null))
   (instructions-documents common-lisp:nil :type
    (common-lisp:or instructions-documents common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-capability-response
                    'make-create-capability-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-capability-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-capability-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capability-id))
      (common-lisp:list
       (common-lisp:cons "capabilityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capability-arn))
      (common-lisp:list
       (common-lisp:cons "capabilityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instructions-documents))
      (common-lisp:list
       (common-lisp:cons "instructionsDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-capability-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-partnership-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-partnership-request-"))
   (profile-id (common-lisp:error ":profileid is required") :type
    (common-lisp:or profile-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or partner-name common-lisp:null))
   (email (common-lisp:error ":email is required") :type
    (common-lisp:or email common-lisp:null))
   (phone common-lisp:nil :type (common-lisp:or phone common-lisp:null))
   (capabilities common-lisp:nil :type
    (common-lisp:or partnership-capabilities common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-partnership-request
                    'make-create-partnership-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-partnership-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-partnership-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "profileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone))
      (common-lisp:list
       (common-lisp:cons "phone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-partnership-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-partnership-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-partnership-response-"))
   (profile-id (common-lisp:error ":profileid is required") :type
    (common-lisp:or profile-id common-lisp:null))
   (partnership-id (common-lisp:error ":partnershipid is required") :type
    (common-lisp:or partnership-id common-lisp:null))
   (partnership-arn (common-lisp:error ":partnershiparn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or partner-name common-lisp:null))
   (email common-lisp:nil :type (common-lisp:or email common-lisp:null))
   (phone common-lisp:nil :type (common-lisp:or phone common-lisp:null))
   (capabilities common-lisp:nil :type
    (common-lisp:or partnership-capabilities common-lisp:null))
   (trading-partner-id common-lisp:nil :type
    (common-lisp:or trading-partner-id common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-partnership-response
                    'make-create-partnership-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-partnership-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-partnership-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "profileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partnership-id))
      (common-lisp:list
       (common-lisp:cons "partnershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partnership-arn))
      (common-lisp:list
       (common-lisp:cons "partnershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone))
      (common-lisp:list
       (common-lisp:cons "phone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trading-partner-id))
      (common-lisp:list
       (common-lisp:cons "tradingPartnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-partnership-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-profile-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or profile-name common-lisp:null))
   (email common-lisp:nil :type (common-lisp:or email common-lisp:null))
   (phone (common-lisp:error ":phone is required") :type
    (common-lisp:or phone common-lisp:null))
   (business-name (common-lisp:error ":businessname is required") :type
    (common-lisp:or business-name common-lisp:null))
   (logging (common-lisp:error ":logging is required") :type
    (common-lisp:or logging common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-profile-request 'make-create-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone))
      (common-lisp:list
       (common-lisp:cons "phone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'business-name))
      (common-lisp:list
       (common-lisp:cons "businessName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-profile-response-"))
   (profile-id (common-lisp:error ":profileid is required") :type
    (common-lisp:or profile-id common-lisp:null))
   (profile-arn (common-lisp:error ":profilearn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or profile-name common-lisp:null))
   (business-name (common-lisp:error ":businessname is required") :type
    (common-lisp:or business-name common-lisp:null))
   (phone (common-lisp:error ":phone is required") :type
    (common-lisp:or phone common-lisp:null))
   (email common-lisp:nil :type (common-lisp:or email common-lisp:null))
   (logging common-lisp:nil :type (common-lisp:or logging common-lisp:null))
   (log-group-name common-lisp:nil :type
    (common-lisp:or log-group-name common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-profile-response 'make-create-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "profileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arn))
      (common-lisp:list
       (common-lisp:cons "profileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'business-name))
      (common-lisp:list
       (common-lisp:cons "businessName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone))
      (common-lisp:list
       (common-lisp:cons "phone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-transformer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-transformer-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or transformer-name common-lisp:null))
   (file-format (common-lisp:error ":fileformat is required") :type
    (common-lisp:or file-format common-lisp:null))
   (mapping-template (common-lisp:error ":mappingtemplate is required") :type
    (common-lisp:or mapping-template common-lisp:null))
   (edi-type (common-lisp:error ":editype is required") :type
    (common-lisp:or edi-type common-lisp:null))
   (sample-document common-lisp:nil :type
    (common-lisp:or file-location common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-transformer-request
                    'make-create-transformer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-transformer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-transformer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-format))
      (common-lisp:list
       (common-lisp:cons "fileFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mapping-template))
      (common-lisp:list
       (common-lisp:cons "mappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edi-type))
      (common-lisp:list
       (common-lisp:cons "ediType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-document))
      (common-lisp:list
       (common-lisp:cons "sampleDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-transformer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-transformer-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-transformer-response-"))
   (transformer-id (common-lisp:error ":transformerid is required") :type
    (common-lisp:or transformer-id common-lisp:null))
   (transformer-arn (common-lisp:error ":transformerarn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or transformer-name common-lisp:null))
   (file-format (common-lisp:error ":fileformat is required") :type
    (common-lisp:or file-format common-lisp:null))
   (mapping-template (common-lisp:error ":mappingtemplate is required") :type
    (common-lisp:or mapping-template common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or transformer-status common-lisp:null))
   (edi-type (common-lisp:error ":editype is required") :type
    (common-lisp:or edi-type common-lisp:null))
   (sample-document common-lisp:nil :type
    (common-lisp:or file-location common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-transformer-response
                    'make-create-transformer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-transformer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-transformer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transformer-id))
      (common-lisp:list
       (common-lisp:cons "transformerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transformer-arn))
      (common-lisp:list
       (common-lisp:cons "transformerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-format))
      (common-lisp:list
       (common-lisp:cons "fileFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mapping-template))
      (common-lisp:list
       (common-lisp:cons "mappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edi-type))
      (common-lisp:list
       (common-lisp:cons "ediType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-document))
      (common-lisp:list
       (common-lisp:cons "sampleDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-transformer-response))
   common-lisp:nil))
(common-lisp:deftype created-date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-capability-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-capability-request-"))
   (capability-id (common-lisp:error ":capabilityid is required") :type
    (common-lisp:or capability-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-capability-request
                    'make-delete-capability-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-capability-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-capability-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capability-id))
      (common-lisp:list
       (common-lisp:cons "capabilityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-capability-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-partnership-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-partnership-request-"))
   (partnership-id (common-lisp:error ":partnershipid is required") :type
    (common-lisp:or partnership-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-partnership-request
                    'make-delete-partnership-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-partnership-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-partnership-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partnership-id))
      (common-lisp:list
       (common-lisp:cons "partnershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-partnership-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-profile-request-"))
   (profile-id (common-lisp:error ":profileid is required") :type
    (common-lisp:or profile-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-profile-request 'make-delete-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "profileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-transformer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-transformer-request-"))
   (transformer-id (common-lisp:error ":transformerid is required") :type
    (common-lisp:or transformer-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-transformer-request
                    'make-delete-transformer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-transformer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-transformer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transformer-id))
      (common-lisp:list
       (common-lisp:cons "transformerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-transformer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (edi-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-edi-configuration-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or edi-type common-lisp:null))
   (input-location (common-lisp:error ":inputlocation is required") :type
    (common-lisp:or s3location common-lisp:null))
   (output-location (common-lisp:error ":outputlocation is required") :type
    (common-lisp:or s3location common-lisp:null))
   (transformer-id (common-lisp:error ":transformerid is required") :type
    (common-lisp:or transformer-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'edi-configuration 'make-edi-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input edi-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input edi-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-location))
      (common-lisp:list
       (common-lisp:cons "inputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-location))
      (common-lisp:list
       (common-lisp:cons "outputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transformer-id))
      (common-lisp:list
       (common-lisp:cons "transformerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input edi-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (edi-type (:copier common-lisp:nil) (:conc-name "struct-shape-edi-type-"))
   (x12details common-lisp:nil :type
    (common-lisp:or x12details common-lisp:null)))
 (common-lisp:export (common-lisp:list 'edi-type 'make-edi-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input edi-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input edi-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'x12details))
      (common-lisp:list
       (common-lisp:cons "x12Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input edi-type))
   common-lisp:nil))
(common-lisp:deftype email () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype file-format () 'common-lisp:string)
(common-lisp:deftype file-location () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-capability-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-capability-request-"))
   (capability-id (common-lisp:error ":capabilityid is required") :type
    (common-lisp:or capability-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-capability-request 'make-get-capability-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-capability-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-capability-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capability-id))
      (common-lisp:list
       (common-lisp:cons "capabilityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-capability-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-capability-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-capability-response-"))
   (capability-id (common-lisp:error ":capabilityid is required") :type
    (common-lisp:or capability-id common-lisp:null))
   (capability-arn (common-lisp:error ":capabilityarn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or capability-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or capability-type common-lisp:null))
   (configuration (common-lisp:error ":configuration is required") :type
    (common-lisp:or capability-configuration common-lisp:null))
   (instructions-documents common-lisp:nil :type
    (common-lisp:or instructions-documents common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-date common-lisp:null))
   (modified-at common-lisp:nil :type
    (common-lisp:or modified-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-capability-response 'make-get-capability-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-capability-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-capability-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capability-id))
      (common-lisp:list
       (common-lisp:cons "capabilityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capability-arn))
      (common-lisp:list
       (common-lisp:cons "capabilityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instructions-documents))
      (common-lisp:list
       (common-lisp:cons "instructionsDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-capability-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-partnership-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-partnership-request-"))
   (partnership-id (common-lisp:error ":partnershipid is required") :type
    (common-lisp:or partnership-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-partnership-request 'make-get-partnership-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-partnership-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-partnership-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partnership-id))
      (common-lisp:list
       (common-lisp:cons "partnershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-partnership-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-partnership-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-partnership-response-"))
   (profile-id (common-lisp:error ":profileid is required") :type
    (common-lisp:or profile-id common-lisp:null))
   (partnership-id (common-lisp:error ":partnershipid is required") :type
    (common-lisp:or partnership-id common-lisp:null))
   (partnership-arn (common-lisp:error ":partnershiparn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or partner-name common-lisp:null))
   (email common-lisp:nil :type (common-lisp:or email common-lisp:null))
   (phone common-lisp:nil :type (common-lisp:or phone common-lisp:null))
   (capabilities common-lisp:nil :type
    (common-lisp:or partnership-capabilities common-lisp:null))
   (trading-partner-id common-lisp:nil :type
    (common-lisp:or trading-partner-id common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-date common-lisp:null))
   (modified-at common-lisp:nil :type
    (common-lisp:or modified-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-partnership-response 'make-get-partnership-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-partnership-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-partnership-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "profileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partnership-id))
      (common-lisp:list
       (common-lisp:cons "partnershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partnership-arn))
      (common-lisp:list
       (common-lisp:cons "partnershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone))
      (common-lisp:list
       (common-lisp:cons "phone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trading-partner-id))
      (common-lisp:list
       (common-lisp:cons "tradingPartnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-partnership-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-profile-request-"))
   (profile-id (common-lisp:error ":profileid is required") :type
    (common-lisp:or profile-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-profile-request 'make-get-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "profileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-profile-response-"))
   (profile-id (common-lisp:error ":profileid is required") :type
    (common-lisp:or profile-id common-lisp:null))
   (profile-arn (common-lisp:error ":profilearn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or profile-name common-lisp:null))
   (email common-lisp:nil :type (common-lisp:or email common-lisp:null))
   (phone (common-lisp:error ":phone is required") :type
    (common-lisp:or phone common-lisp:null))
   (business-name (common-lisp:error ":businessname is required") :type
    (common-lisp:or business-name common-lisp:null))
   (logging common-lisp:nil :type (common-lisp:or logging common-lisp:null))
   (log-group-name common-lisp:nil :type
    (common-lisp:or log-group-name common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-date common-lisp:null))
   (modified-at common-lisp:nil :type
    (common-lisp:or modified-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-profile-response 'make-get-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "profileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arn))
      (common-lisp:list
       (common-lisp:cons "profileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone))
      (common-lisp:list
       (common-lisp:cons "phone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'business-name))
      (common-lisp:list
       (common-lisp:cons "businessName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-transformer-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-transformer-job-request-"))
   (transformer-job-id (common-lisp:error ":transformerjobid is required")
    :type (common-lisp:or transformer-job-id common-lisp:null))
   (transformer-id (common-lisp:error ":transformerid is required") :type
    (common-lisp:or transformer-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-transformer-job-request
                    'make-get-transformer-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-transformer-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-transformer-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transformer-job-id))
      (common-lisp:list
       (common-lisp:cons "transformerJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transformer-id))
      (common-lisp:list
       (common-lisp:cons "transformerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-transformer-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-transformer-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-transformer-job-response-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or transformer-job-status common-lisp:null))
   (output-files common-lisp:nil :type
    (common-lisp:or s3location-list common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-transformer-job-response
                    'make-get-transformer-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-transformer-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-transformer-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-files))
      (common-lisp:list
       (common-lisp:cons "outputFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-transformer-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-transformer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-transformer-request-"))
   (transformer-id (common-lisp:error ":transformerid is required") :type
    (common-lisp:or transformer-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-transformer-request 'make-get-transformer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-transformer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-transformer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transformer-id))
      (common-lisp:list
       (common-lisp:cons "transformerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-transformer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-transformer-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-transformer-response-"))
   (transformer-id (common-lisp:error ":transformerid is required") :type
    (common-lisp:or transformer-id common-lisp:null))
   (transformer-arn (common-lisp:error ":transformerarn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or transformer-name common-lisp:null))
   (file-format (common-lisp:error ":fileformat is required") :type
    (common-lisp:or file-format common-lisp:null))
   (mapping-template (common-lisp:error ":mappingtemplate is required") :type
    (common-lisp:or mapping-template common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or transformer-status common-lisp:null))
   (edi-type (common-lisp:error ":editype is required") :type
    (common-lisp:or edi-type common-lisp:null))
   (sample-document common-lisp:nil :type
    (common-lisp:or file-location common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-date common-lisp:null))
   (modified-at common-lisp:nil :type
    (common-lisp:or modified-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-transformer-response 'make-get-transformer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-transformer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-transformer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transformer-id))
      (common-lisp:list
       (common-lisp:cons "transformerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transformer-arn))
      (common-lisp:list
       (common-lisp:cons "transformerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-format))
      (common-lisp:list
       (common-lisp:cons "fileFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mapping-template))
      (common-lisp:list
       (common-lisp:cons "mappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edi-type))
      (common-lisp:list
       (common-lisp:cons "ediType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-document))
      (common-lisp:list
       (common-lisp:cons "sampleDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-transformer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instructions-documents ()
   '(trivial-types:proper-list s3location))
 (common-lisp:defun make-instructions-documents
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3location))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (b2bi-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader internal-server-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-retry-after-seconds)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-capabilities-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-capabilities-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or page-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-capabilities-request
                    'make-list-capabilities-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-capabilities-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-capabilities-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-capabilities-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-capabilities-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-capabilities-response-"))
   (capabilities (common-lisp:error ":capabilities is required") :type
    (common-lisp:or capability-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-capabilities-response
                    'make-list-capabilities-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-capabilities-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-capabilities-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-capabilities-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-partnerships-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-partnerships-request-"))
   (profile-id common-lisp:nil :type
    (common-lisp:or profile-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or page-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-partnerships-request
                    'make-list-partnerships-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-partnerships-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-partnerships-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "profileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-partnerships-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-partnerships-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-partnerships-response-"))
   (partnerships (common-lisp:error ":partnerships is required") :type
    (common-lisp:or partnership-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-partnerships-response
                    'make-list-partnerships-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-partnerships-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-partnerships-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partnerships))
      (common-lisp:list
       (common-lisp:cons "partnerships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-partnerships-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-profiles-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-profiles-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or page-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-profiles-request 'make-list-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profiles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-profiles-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-profiles-response-"))
   (profiles (common-lisp:error ":profiles is required") :type
    (common-lisp:or profile-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-profiles-response 'make-list-profiles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profiles))
      (common-lisp:list
       (common-lisp:cons "profiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profiles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-transformers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-transformers-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or page-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-transformers-request
                    'make-list-transformers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-transformers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-transformers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-transformers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-transformers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-transformers-response-"))
   (transformers (common-lisp:error ":transformers is required") :type
    (common-lisp:or transformer-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-transformers-response
                    'make-list-transformers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-transformers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-transformers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transformers))
      (common-lisp:list
       (common-lisp:cons "transformers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-transformers-response))
   common-lisp:nil))
(common-lisp:deftype log-group-name () 'common-lisp:string)
(common-lisp:deftype logging () 'common-lisp:string)
(common-lisp:deftype mapping-template () 'common-lisp:string)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype modified-date () 'common-lisp:string)
(common-lisp:deftype page-token () 'common-lisp:string)
(common-lisp:deftype partner-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype partnership-capabilities ()
   '(trivial-types:proper-list capability-id))
 (common-lisp:defun make-partnership-capabilities
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list capability-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype partnership-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype partnership-list ()
   '(trivial-types:proper-list partnership-summary))
 (common-lisp:defun make-partnership-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list partnership-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (partnership-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-partnership-summary-"))
   (profile-id (common-lisp:error ":profileid is required") :type
    (common-lisp:or profile-id common-lisp:null))
   (partnership-id (common-lisp:error ":partnershipid is required") :type
    (common-lisp:or partnership-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or partner-name common-lisp:null))
   (capabilities common-lisp:nil :type
    (common-lisp:or partnership-capabilities common-lisp:null))
   (trading-partner-id common-lisp:nil :type
    (common-lisp:or trading-partner-id common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-date common-lisp:null))
   (modified-at common-lisp:nil :type
    (common-lisp:or modified-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'partnership-summary 'make-partnership-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input partnership-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input partnership-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "profileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partnership-id))
      (common-lisp:list
       (common-lisp:cons "partnershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trading-partner-id))
      (common-lisp:list
       (common-lisp:cons "tradingPartnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input partnership-summary))
   common-lisp:nil))
(common-lisp:deftype phone () 'common-lisp:string)
(common-lisp:deftype profile-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype profile-list ()
   '(trivial-types:proper-list profile-summary))
 (common-lisp:defun make-profile-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list profile-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype profile-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (profile-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-profile-summary-"))
   (profile-id (common-lisp:error ":profileid is required") :type
    (common-lisp:or profile-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or profile-name common-lisp:null))
   (business-name (common-lisp:error ":businessname is required") :type
    (common-lisp:or business-name common-lisp:null))
   (logging common-lisp:nil :type (common-lisp:or logging common-lisp:null))
   (log-group-name common-lisp:nil :type
    (common-lisp:or log-group-name common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-date common-lisp:null))
   (modified-at common-lisp:nil :type
    (common-lisp:or modified-date common-lisp:null)))
 (common-lisp:export (common-lisp:list 'profile-summary 'make-profile-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input profile-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input profile-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "profileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'business-name))
      (common-lisp:list
       (common-lisp:cons "businessName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input profile-summary))
   common-lisp:nil))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (b2bi-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3location (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3location-"))
   (bucket-name common-lisp:nil :type
    (common-lisp:or bucket-name common-lisp:null))
   (key common-lisp:nil :type (common-lisp:or s3key common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3location 'make-s3location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype s3location-list ()
   '(trivial-types:proper-list s3location))
 (common-lisp:defun make-s3location-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3location))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (b2bi-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-service-code)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-code)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type
                    'service-quota-exceeded-exception-service-code
                    'service-quota-exceeded-exception-quota-code)))
(common-lisp:progn
 (common-lisp:defstruct
     (start-transformer-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-transformer-job-request-"))
   (input-file (common-lisp:error ":inputfile is required") :type
    (common-lisp:or s3location common-lisp:null))
   (output-location (common-lisp:error ":outputlocation is required") :type
    (common-lisp:or s3location common-lisp:null))
   (transformer-id (common-lisp:error ":transformerid is required") :type
    (common-lisp:or transformer-id common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-transformer-job-request
                    'make-start-transformer-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-transformer-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-transformer-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-file))
      (common-lisp:list
       (common-lisp:cons "inputFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-location))
      (common-lisp:list
       (common-lisp:cons "outputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transformer-id))
      (common-lisp:list
       (common-lisp:cons "transformerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-transformer-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-transformer-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-transformer-job-response-"))
   (transformer-job-id (common-lisp:error ":transformerjobid is required")
    :type (common-lisp:or transformer-job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-transformer-job-response
                    'make-start-transformer-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-transformer-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-transformer-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transformer-job-id))
      (common-lisp:list
       (common-lisp:cons "transformerJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-transformer-job-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype test-mapping-input-file-content () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (test-mapping-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-test-mapping-request-"))
   (input-file-content (common-lisp:error ":inputfilecontent is required")
    :type (common-lisp:or test-mapping-input-file-content common-lisp:null))
   (mapping-template (common-lisp:error ":mappingtemplate is required") :type
    (common-lisp:or mapping-template common-lisp:null))
   (file-format (common-lisp:error ":fileformat is required") :type
    (common-lisp:or file-format common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-mapping-request 'make-test-mapping-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input test-mapping-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input test-mapping-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-file-content))
      (common-lisp:list
       (common-lisp:cons "inputFileContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mapping-template))
      (common-lisp:list
       (common-lisp:cons "mappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-format))
      (common-lisp:list
       (common-lisp:cons "fileFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input test-mapping-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (test-mapping-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-test-mapping-response-"))
   (mapped-file-content (common-lisp:error ":mappedfilecontent is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-mapping-response 'make-test-mapping-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-mapping-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-mapping-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mapped-file-content))
      (common-lisp:list
       (common-lisp:cons "mappedFileContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-mapping-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (test-parsing-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-test-parsing-request-"))
   (input-file (common-lisp:error ":inputfile is required") :type
    (common-lisp:or s3location common-lisp:null))
   (file-format (common-lisp:error ":fileformat is required") :type
    (common-lisp:or file-format common-lisp:null))
   (edi-type (common-lisp:error ":editype is required") :type
    (common-lisp:or edi-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-parsing-request 'make-test-parsing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input test-parsing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input test-parsing-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-file))
      (common-lisp:list
       (common-lisp:cons "inputFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-format))
      (common-lisp:list
       (common-lisp:cons "fileFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edi-type))
      (common-lisp:list
       (common-lisp:cons "ediType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input test-parsing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (test-parsing-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-test-parsing-response-"))
   (parsed-file-content (common-lisp:error ":parsedfilecontent is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-parsing-response 'make-test-parsing-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-parsing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-parsing-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parsed-file-content))
      (common-lisp:list
       (common-lisp:cons "parsedFileContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-parsing-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (b2bi-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-retry-after-seconds)))
(common-lisp:deftype trading-partner-id () 'common-lisp:string)
(common-lisp:deftype transformer-id () 'common-lisp:string)
(common-lisp:deftype transformer-job-id () 'common-lisp:string)
(common-lisp:deftype transformer-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype transformer-list ()
   '(trivial-types:proper-list transformer-summary))
 (common-lisp:defun make-transformer-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list transformer-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype transformer-name () 'common-lisp:string)
(common-lisp:deftype transformer-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (transformer-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-transformer-summary-"))
   (transformer-id (common-lisp:error ":transformerid is required") :type
    (common-lisp:or transformer-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or transformer-name common-lisp:null))
   (file-format (common-lisp:error ":fileformat is required") :type
    (common-lisp:or file-format common-lisp:null))
   (mapping-template (common-lisp:error ":mappingtemplate is required") :type
    (common-lisp:or mapping-template common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or transformer-status common-lisp:null))
   (edi-type (common-lisp:error ":editype is required") :type
    (common-lisp:or edi-type common-lisp:null))
   (sample-document common-lisp:nil :type
    (common-lisp:or file-location common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-date common-lisp:null))
   (modified-at common-lisp:nil :type
    (common-lisp:or modified-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transformer-summary 'make-transformer-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transformer-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transformer-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transformer-id))
      (common-lisp:list
       (common-lisp:cons "transformerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-format))
      (common-lisp:list
       (common-lisp:cons "fileFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mapping-template))
      (common-lisp:list
       (common-lisp:cons "mappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edi-type))
      (common-lisp:list
       (common-lisp:cons "ediType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-document))
      (common-lisp:list
       (common-lisp:cons "sampleDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transformer-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-capability-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-capability-request-"))
   (capability-id (common-lisp:error ":capabilityid is required") :type
    (common-lisp:or capability-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or capability-name common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or capability-configuration common-lisp:null))
   (instructions-documents common-lisp:nil :type
    (common-lisp:or instructions-documents common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-capability-request
                    'make-update-capability-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-capability-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-capability-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capability-id))
      (common-lisp:list
       (common-lisp:cons "capabilityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instructions-documents))
      (common-lisp:list
       (common-lisp:cons "instructionsDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-capability-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-capability-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-capability-response-"))
   (capability-id (common-lisp:error ":capabilityid is required") :type
    (common-lisp:or capability-id common-lisp:null))
   (capability-arn (common-lisp:error ":capabilityarn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or capability-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or capability-type common-lisp:null))
   (configuration (common-lisp:error ":configuration is required") :type
    (common-lisp:or capability-configuration common-lisp:null))
   (instructions-documents common-lisp:nil :type
    (common-lisp:or instructions-documents common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-date common-lisp:null))
   (modified-at common-lisp:nil :type
    (common-lisp:or modified-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-capability-response
                    'make-update-capability-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-capability-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-capability-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capability-id))
      (common-lisp:list
       (common-lisp:cons "capabilityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capability-arn))
      (common-lisp:list
       (common-lisp:cons "capabilityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instructions-documents))
      (common-lisp:list
       (common-lisp:cons "instructionsDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-capability-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-partnership-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-partnership-request-"))
   (partnership-id (common-lisp:error ":partnershipid is required") :type
    (common-lisp:or partnership-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or partner-name common-lisp:null))
   (capabilities common-lisp:nil :type
    (common-lisp:or partnership-capabilities common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-partnership-request
                    'make-update-partnership-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-partnership-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-partnership-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partnership-id))
      (common-lisp:list
       (common-lisp:cons "partnershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-partnership-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-partnership-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-partnership-response-"))
   (profile-id (common-lisp:error ":profileid is required") :type
    (common-lisp:or profile-id common-lisp:null))
   (partnership-id (common-lisp:error ":partnershipid is required") :type
    (common-lisp:or partnership-id common-lisp:null))
   (partnership-arn (common-lisp:error ":partnershiparn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or partner-name common-lisp:null))
   (email common-lisp:nil :type (common-lisp:or email common-lisp:null))
   (phone common-lisp:nil :type (common-lisp:or phone common-lisp:null))
   (capabilities common-lisp:nil :type
    (common-lisp:or partnership-capabilities common-lisp:null))
   (trading-partner-id common-lisp:nil :type
    (common-lisp:or trading-partner-id common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-date common-lisp:null))
   (modified-at common-lisp:nil :type
    (common-lisp:or modified-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-partnership-response
                    'make-update-partnership-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-partnership-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-partnership-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "profileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partnership-id))
      (common-lisp:list
       (common-lisp:cons "partnershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partnership-arn))
      (common-lisp:list
       (common-lisp:cons "partnershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone))
      (common-lisp:list
       (common-lisp:cons "phone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trading-partner-id))
      (common-lisp:list
       (common-lisp:cons "tradingPartnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-partnership-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-profile-request-"))
   (profile-id (common-lisp:error ":profileid is required") :type
    (common-lisp:or profile-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or profile-name common-lisp:null))
   (email common-lisp:nil :type (common-lisp:or email common-lisp:null))
   (phone common-lisp:nil :type (common-lisp:or phone common-lisp:null))
   (business-name common-lisp:nil :type
    (common-lisp:or business-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-profile-request 'make-update-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "profileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone))
      (common-lisp:list
       (common-lisp:cons "phone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'business-name))
      (common-lisp:list
       (common-lisp:cons "businessName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-profile-response-"))
   (profile-id (common-lisp:error ":profileid is required") :type
    (common-lisp:or profile-id common-lisp:null))
   (profile-arn (common-lisp:error ":profilearn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or profile-name common-lisp:null))
   (email common-lisp:nil :type (common-lisp:or email common-lisp:null))
   (phone (common-lisp:error ":phone is required") :type
    (common-lisp:or phone common-lisp:null))
   (business-name (common-lisp:error ":businessname is required") :type
    (common-lisp:or business-name common-lisp:null))
   (logging common-lisp:nil :type (common-lisp:or logging common-lisp:null))
   (log-group-name common-lisp:nil :type
    (common-lisp:or log-group-name common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-date common-lisp:null))
   (modified-at common-lisp:nil :type
    (common-lisp:or modified-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-profile-response 'make-update-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "profileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arn))
      (common-lisp:list
       (common-lisp:cons "profileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone))
      (common-lisp:list
       (common-lisp:cons "phone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'business-name))
      (common-lisp:list
       (common-lisp:cons "businessName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-transformer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-transformer-request-"))
   (transformer-id (common-lisp:error ":transformerid is required") :type
    (common-lisp:or transformer-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or transformer-name common-lisp:null))
   (file-format common-lisp:nil :type
    (common-lisp:or file-format common-lisp:null))
   (mapping-template common-lisp:nil :type
    (common-lisp:or mapping-template common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or transformer-status common-lisp:null))
   (edi-type common-lisp:nil :type (common-lisp:or edi-type common-lisp:null))
   (sample-document common-lisp:nil :type
    (common-lisp:or file-location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-transformer-request
                    'make-update-transformer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-transformer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-transformer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transformer-id))
      (common-lisp:list
       (common-lisp:cons "transformerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-format))
      (common-lisp:list
       (common-lisp:cons "fileFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mapping-template))
      (common-lisp:list
       (common-lisp:cons "mappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edi-type))
      (common-lisp:list
       (common-lisp:cons "ediType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-document))
      (common-lisp:list
       (common-lisp:cons "sampleDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-transformer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-transformer-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-transformer-response-"))
   (transformer-id (common-lisp:error ":transformerid is required") :type
    (common-lisp:or transformer-id common-lisp:null))
   (transformer-arn (common-lisp:error ":transformerarn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or transformer-name common-lisp:null))
   (file-format (common-lisp:error ":fileformat is required") :type
    (common-lisp:or file-format common-lisp:null))
   (mapping-template (common-lisp:error ":mappingtemplate is required") :type
    (common-lisp:or mapping-template common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or transformer-status common-lisp:null))
   (edi-type (common-lisp:error ":editype is required") :type
    (common-lisp:or edi-type common-lisp:null))
   (sample-document common-lisp:nil :type
    (common-lisp:or file-location common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-date common-lisp:null))
   (modified-at (common-lisp:error ":modifiedat is required") :type
    (common-lisp:or modified-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-transformer-response
                    'make-update-transformer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-transformer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-transformer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transformer-id))
      (common-lisp:list
       (common-lisp:cons "transformerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transformer-arn))
      (common-lisp:list
       (common-lisp:cons "transformerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-format))
      (common-lisp:list
       (common-lisp:cons "fileFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mapping-template))
      (common-lisp:list
       (common-lisp:cons "mappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edi-type))
      (common-lisp:list
       (common-lisp:cons "ediType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-document))
      (common-lisp:list
       (common-lisp:cons "sampleDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-transformer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (b2bi-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (x12details (:copier common-lisp:nil)
      (:conc-name "struct-shape-x12details-"))
   (transaction-set common-lisp:nil :type
    (common-lisp:or x12transaction-set common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or x12version common-lisp:null)))
 (common-lisp:export (common-lisp:list 'x12details 'make-x12details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input x12details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input x12details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-set))
      (common-lisp:list
       (common-lisp:cons "transactionSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input x12details))
   common-lisp:nil))
(common-lisp:deftype x12transaction-set () 'common-lisp:string)
(common-lisp:deftype x12version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-capability
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name type configuration
                     instructions-documents client-token tags)
   (common-lisp:declare
    (common-lisp:ignorable name type configuration instructions-documents
     client-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-capability-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'b2bi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCapability"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-capability))
(common-lisp:progn
 (common-lisp:defun create-partnership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-id name email phone capabilities
                     client-token tags)
   (common-lisp:declare
    (common-lisp:ignorable profile-id name email phone capabilities
     client-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-partnership-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'b2bi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreatePartnership"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-partnership))
(common-lisp:progn
 (common-lisp:defun create-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name email phone business-name logging
                     client-token tags)
   (common-lisp:declare
    (common-lisp:ignorable name email phone business-name logging client-token
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'b2bi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-profile))
(common-lisp:progn
 (common-lisp:defun create-transformer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name file-format mapping-template
                     edi-type sample-document client-token tags)
   (common-lisp:declare
    (common-lisp:ignorable name file-format mapping-template edi-type
     sample-document client-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-transformer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'b2bi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateTransformer"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-transformer))
(common-lisp:progn
 (common-lisp:defun delete-capability
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key capability-id)
   (common-lisp:declare (common-lisp:ignorable capability-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-capability-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'b2bi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCapability"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-capability))
(common-lisp:progn
 (common-lisp:defun delete-partnership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key partnership-id)
   (common-lisp:declare (common-lisp:ignorable partnership-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-partnership-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'b2bi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeletePartnership"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-partnership))
(common-lisp:progn
 (common-lisp:defun delete-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-id)
   (common-lisp:declare (common-lisp:ignorable profile-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'b2bi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-profile))
(common-lisp:progn
 (common-lisp:defun delete-transformer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transformer-id)
   (common-lisp:declare (common-lisp:ignorable transformer-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-transformer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'b2bi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteTransformer"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-transformer))
(common-lisp:progn
 (common-lisp:defun get-capability
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key capability-id)
   (common-lisp:declare (common-lisp:ignorable capability-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-capability-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'b2bi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCapability"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-capability))
(common-lisp:progn
 (common-lisp:defun get-partnership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key partnership-id)
   (common-lisp:declare (common-lisp:ignorable partnership-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-partnership-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'b2bi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetPartnership"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-partnership))
(common-lisp:progn
 (common-lisp:defun get-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-id)
   (common-lisp:declare (common-lisp:ignorable profile-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'b2bi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-profile))
(common-lisp:progn
 (common-lisp:defun get-transformer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transformer-id)
   (common-lisp:declare (common-lisp:ignorable transformer-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-transformer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'b2bi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetTransformer"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-transformer))
(common-lisp:progn
 (common-lisp:defun get-transformer-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transformer-job-id transformer-id)
   (common-lisp:declare
    (common-lisp:ignorable transformer-job-id transformer-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-transformer-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'b2bi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetTransformerJob"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-transformer-job))
(common-lisp:progn
 (common-lisp:defun list-capabilities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-capabilities-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'b2bi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListCapabilities"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-capabilities))
(common-lisp:progn
 (common-lisp:defun list-partnerships
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable profile-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-partnerships-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'b2bi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListPartnerships"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-partnerships))
(common-lisp:progn
 (common-lisp:defun list-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'b2bi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListProfiles"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-profiles))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'b2bi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-transformers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-transformers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'b2bi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTransformers"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-transformers))
(common-lisp:progn
 (common-lisp:defun start-transformer-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-file output-location transformer-id
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable input-file output-location transformer-id
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-transformer-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'b2bi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartTransformerJob"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-transformer-job))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'b2bi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun test-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-file-content mapping-template
                     file-format)
   (common-lisp:declare
    (common-lisp:ignorable input-file-content mapping-template file-format))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-test-mapping-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'b2bi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TestMapping"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'test-mapping))
(common-lisp:progn
 (common-lisp:defun test-parsing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-file file-format edi-type)
   (common-lisp:declare
    (common-lisp:ignorable input-file file-format edi-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-test-parsing-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'b2bi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TestParsing"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'test-parsing))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'b2bi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-capability
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key capability-id name configuration
                     instructions-documents)
   (common-lisp:declare
    (common-lisp:ignorable capability-id name configuration
     instructions-documents))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-capability-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'b2bi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateCapability"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-capability))
(common-lisp:progn
 (common-lisp:defun update-partnership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key partnership-id name capabilities)
   (common-lisp:declare
    (common-lisp:ignorable partnership-id name capabilities))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-partnership-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'b2bi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdatePartnership"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-partnership))
(common-lisp:progn
 (common-lisp:defun update-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-id name email phone
                     business-name)
   (common-lisp:declare
    (common-lisp:ignorable profile-id name email phone business-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'b2bi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-profile))
(common-lisp:progn
 (common-lisp:defun update-transformer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transformer-id name file-format
                     mapping-template status edi-type sample-document)
   (common-lisp:declare
    (common-lisp:ignorable transformer-id name file-format mapping-template
     status edi-type sample-document))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-transformer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'b2bi-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateTransformer"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-transformer))
