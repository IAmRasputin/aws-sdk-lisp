;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/datazone/api
  (:use)
  (:nicknames #:aws/datazone)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/datazone/api)
(common-lisp:progn
 (common-lisp:define-condition datazone-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'datazone-error))
(common-lisp:progn
 (common-lisp:defclass datazone-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "datazone" :api-version
                        "2018-05-10" :host-prefix "datazone" :signing-name
                        "datazone" :global-host common-lisp:nil))
 (common-lisp:export 'datazone-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("UnauthorizedException" . unauthorized-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (accept-choice (:copier common-lisp:nil)
      (:conc-name "struct-shape-accept-choice-"))
   (prediction-choice common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (prediction-target common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'accept-choice 'make-accept-choice))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input accept-choice))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input accept-choice))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prediction-choice))
      (common-lisp:list
       (common-lisp:cons "predictionChoice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prediction-target))
      (common-lisp:list
       (common-lisp:cons "predictionTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input accept-choice))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype accept-choices ()
   '(trivial-types:proper-list accept-choice))
 (common-lisp:defun make-accept-choices
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list accept-choice))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (accept-predictions-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-accept-predictions-input-"))
   (accept-choices common-lisp:nil :type
    (common-lisp:or accept-choices common-lisp:null))
   (accept-rule common-lisp:nil :type
    (common-lisp:or accept-rule common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or asset-identifier common-lisp:null))
   (revision common-lisp:nil :type (common-lisp:or revision common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'accept-predictions-input 'make-accept-predictions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-predictions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-predictions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-choices))
      (common-lisp:list
       (common-lisp:cons "acceptChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-rule))
      (common-lisp:list
       (common-lisp:cons "acceptRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-predictions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (accept-predictions-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-accept-predictions-output-"))
   (asset-id (common-lisp:error ":assetid is required") :type
    (common-lisp:or asset-id common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (revision (common-lisp:error ":revision is required") :type
    (common-lisp:or revision common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'accept-predictions-output
                    'make-accept-predictions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-predictions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-predictions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-predictions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (accept-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-accept-rule-"))
   (rule common-lisp:nil :type
    (common-lisp:or accept-rule-behavior common-lisp:null))
   (threshold common-lisp:nil :type (common-lisp:or float common-lisp:null)))
 (common-lisp:export (common-lisp:list 'accept-rule 'make-accept-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input accept-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input accept-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input accept-rule))
   common-lisp:nil))
(common-lisp:deftype accept-rule-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (accept-subscription-request-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-accept-subscription-request-input-"))
   (decision-comment common-lisp:nil :type
    (common-lisp:or decision-comment common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or subscription-request-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'accept-subscription-request-input
                    'make-accept-subscription-request-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-subscription-request-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-subscription-request-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decision-comment))
      (common-lisp:list
       (common-lisp:cons "decisionComment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-subscription-request-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (accept-subscription-request-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-accept-subscription-request-output-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-at common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or created-by common-lisp:null))
   (decision-comment common-lisp:nil :type
    (common-lisp:or decision-comment common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or subscription-request-id common-lisp:null))
   (request-reason (common-lisp:error ":requestreason is required") :type
    (common-lisp:or request-reason common-lisp:null))
   (reviewer-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or subscription-request-status common-lisp:null))
   (subscribed-listings (common-lisp:error ":subscribedlistings is required")
    :type
    (common-lisp:or accept-subscription-request-output-subscribed-listings-list
                    common-lisp:null))
   (subscribed-principals
    (common-lisp:error ":subscribedprincipals is required") :type
    (common-lisp:or
     accept-subscription-request-output-subscribed-principals-list
     common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or updated-at common-lisp:null))
   (updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'accept-subscription-request-output
                    'make-accept-subscription-request-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-subscription-request-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-subscription-request-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decision-comment))
      (common-lisp:list
       (common-lisp:cons "decisionComment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-reason))
      (common-lisp:list
       (common-lisp:cons "requestReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reviewer-id))
      (common-lisp:list
       (common-lisp:cons "reviewerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribed-listings))
      (common-lisp:list
       (common-lisp:cons "subscribedListings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscribed-principals))
      (common-lisp:list
       (common-lisp:cons "subscribedPrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-subscription-request-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype accept-subscription-request-output-subscribed-listings-list
                      ()
   '(trivial-types:proper-list subscribed-listing))
 (common-lisp:defun make-accept-subscription-request-output-subscribed-listings-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscribed-listing))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype accept-subscription-request-output-subscribed-principals-list
                      ()
   '(trivial-types:proper-list subscribed-principal))
 (common-lisp:defun make-accept-subscription-request-output-subscribed-principals-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscribed-principal))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (datazone-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype action-link () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype applicable-asset-types ()
   '(trivial-types:proper-list type-name))
 (common-lisp:defun make-applicable-asset-types
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list type-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype asset-id () 'common-lisp:string)
(common-lisp:deftype asset-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (asset-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-item-"))
   (additional-attributes common-lisp:nil :type
    (common-lisp:or asset-item-additional-attributes common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or created-at common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or created-by common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (external-identifier common-lisp:nil :type
    (common-lisp:or external-identifier common-lisp:null))
   (first-revision-created-at common-lisp:nil :type
    (common-lisp:or created-at common-lisp:null))
   (first-revision-created-by common-lisp:nil :type
    (common-lisp:or created-by common-lisp:null))
   (glossary-terms common-lisp:nil :type
    (common-lisp:or glossary-terms common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or asset-identifier common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or asset-name common-lisp:null))
   (owning-project-id (common-lisp:error ":owningprojectid is required") :type
    (common-lisp:or project-id common-lisp:null))
   (type-identifier (common-lisp:error ":typeidentifier is required") :type
    (common-lisp:or asset-type-identifier common-lisp:null))
   (type-revision (common-lisp:error ":typerevision is required") :type
    (common-lisp:or revision common-lisp:null)))
 (common-lisp:export (common-lisp:list 'asset-item 'make-asset-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-attributes))
      (common-lisp:list
       (common-lisp:cons "additionalAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-identifier))
      (common-lisp:list
       (common-lisp:cons "externalIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'first-revision-created-at))
      (common-lisp:list
       (common-lisp:cons "firstRevisionCreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'first-revision-created-by))
      (common-lisp:list
       (common-lisp:cons "firstRevisionCreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-identifier))
      (common-lisp:list
       (common-lisp:cons "typeIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-revision))
      (common-lisp:list
       (common-lisp:cons "typeRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (asset-item-additional-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-item-additional-attributes-"))
   (forms-output common-lisp:nil :type
    (common-lisp:or form-output-list common-lisp:null))
   (read-only-forms-output common-lisp:nil :type
    (common-lisp:or form-output-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'asset-item-additional-attributes
                    'make-asset-item-additional-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-item-additional-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-item-additional-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forms-output))
      (common-lisp:list
       (common-lisp:cons "formsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-only-forms-output))
      (common-lisp:list
       (common-lisp:cons "readOnlyFormsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-item-additional-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (asset-listing (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-listing-"))
   (asset-id common-lisp:nil :type (common-lisp:or asset-id common-lisp:null))
   (asset-revision common-lisp:nil :type
    (common-lisp:or revision common-lisp:null))
   (asset-type common-lisp:nil :type
    (common-lisp:or type-name common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or created-at common-lisp:null))
   (forms common-lisp:nil :type (common-lisp:or forms common-lisp:null))
   (glossary-terms common-lisp:nil :type
    (common-lisp:or detailed-glossary-terms common-lisp:null))
   (owning-project-id common-lisp:nil :type
    (common-lisp:or project-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'asset-listing 'make-asset-listing))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-listing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-listing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-revision))
      (common-lisp:list
       (common-lisp:cons "assetRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-type))
      (common-lisp:list
       (common-lisp:cons "assetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forms))
      (common-lisp:list
       (common-lisp:cons "forms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-listing))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (asset-listing-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-listing-details-"))
   (listing-id (common-lisp:error ":listingid is required") :type
    (common-lisp:or listing-id common-lisp:null))
   (listing-status (common-lisp:error ":listingstatus is required") :type
    (common-lisp:or listing-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'asset-listing-details 'make-asset-listing-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-listing-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-listing-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listing-id))
      (common-lisp:list
       (common-lisp:cons "listingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listing-status))
      (common-lisp:list
       (common-lisp:cons "listingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-listing-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (asset-listing-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-listing-item-"))
   (additional-attributes common-lisp:nil :type
    (common-lisp:or asset-listing-item-additional-attributes common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or created-at common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (entity-id common-lisp:nil :type (common-lisp:or asset-id common-lisp:null))
   (entity-revision common-lisp:nil :type
    (common-lisp:or revision common-lisp:null))
   (entity-type common-lisp:nil :type
    (common-lisp:or type-name common-lisp:null))
   (glossary-terms common-lisp:nil :type
    (common-lisp:or detailed-glossary-terms common-lisp:null))
   (listing-created-by common-lisp:nil :type
    (common-lisp:or created-by common-lisp:null))
   (listing-id common-lisp:nil :type
    (common-lisp:or listing-id common-lisp:null))
   (listing-revision common-lisp:nil :type
    (common-lisp:or revision common-lisp:null))
   (listing-updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or asset-name common-lisp:null))
   (owning-project-id common-lisp:nil :type
    (common-lisp:or project-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'asset-listing-item 'make-asset-listing-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-listing-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-listing-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-attributes))
      (common-lisp:list
       (common-lisp:cons "additionalAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "entityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-revision))
      (common-lisp:list
       (common-lisp:cons "entityRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type))
      (common-lisp:list
       (common-lisp:cons "entityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listing-created-by))
      (common-lisp:list
       (common-lisp:cons "listingCreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listing-id))
      (common-lisp:list
       (common-lisp:cons "listingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listing-revision))
      (common-lisp:list
       (common-lisp:cons "listingRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listing-updated-by))
      (common-lisp:list
       (common-lisp:cons "listingUpdatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-listing-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (asset-listing-item-additional-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-listing-item-additional-attributes-"))
   (forms common-lisp:nil :type (common-lisp:or forms common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'asset-listing-item-additional-attributes
                    'make-asset-listing-item-additional-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-listing-item-additional-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-listing-item-additional-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forms))
      (common-lisp:list
       (common-lisp:cons "forms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-listing-item-additional-attributes))
   common-lisp:nil))
(common-lisp:deftype asset-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (asset-revision (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-revision-"))
   (created-at common-lisp:nil :type
    (common-lisp:or created-at common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or created-by common-lisp:null))
   (domain-id common-lisp:nil :type
    (common-lisp:or domain-id common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or asset-id common-lisp:null))
   (revision common-lisp:nil :type (common-lisp:or revision common-lisp:null)))
 (common-lisp:export (common-lisp:list 'asset-revision 'make-asset-revision))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-revision))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-revision))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-revision))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-revisions ()
   '(trivial-types:proper-list asset-revision))
 (common-lisp:defun make-asset-revisions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-revision))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (asset-target-name-map (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-target-name-map-"))
   (asset-id (common-lisp:error ":assetid is required") :type
    (common-lisp:or asset-id common-lisp:null))
   (target-name (common-lisp:error ":targetname is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'asset-target-name-map 'make-asset-target-name-map))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-target-name-map))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-target-name-map))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-name))
      (common-lisp:list
       (common-lisp:cons "targetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-target-name-map))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-target-names ()
   '(trivial-types:proper-list asset-target-name-map))
 (common-lisp:defun make-asset-target-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-target-name-map))
   aws-sdk/generator/shape::members))
(common-lisp:deftype asset-type-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (asset-type-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-type-item-"))
   (created-at common-lisp:nil :type
    (common-lisp:or created-at common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or created-by common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (forms-output (common-lisp:error ":formsoutput is required") :type
    (common-lisp:or forms-output-map common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or type-name common-lisp:null))
   (origin-domain-id common-lisp:nil :type
    (common-lisp:or domain-id common-lisp:null))
   (origin-project-id common-lisp:nil :type
    (common-lisp:or project-id common-lisp:null))
   (owning-project-id (common-lisp:error ":owningprojectid is required") :type
    (common-lisp:or project-id common-lisp:null))
   (revision (common-lisp:error ":revision is required") :type
    (common-lisp:or revision common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or updated-at common-lisp:null))
   (updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null)))
 (common-lisp:export (common-lisp:list 'asset-type-item 'make-asset-type-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-type-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-type-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forms-output))
      (common-lisp:list
       (common-lisp:cons "formsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-domain-id))
      (common-lisp:list
       (common-lisp:cons "originDomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-project-id))
      (common-lisp:list
       (common-lisp:cons "originProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-type-item))
   common-lisp:nil))
(common-lisp:deftype attribute () 'common-lisp:string)
(common-lisp:deftype auth-type () 'common-lisp:string)
(common-lisp:deftype authorized-principal-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype authorized-principal-identifiers ()
   '(trivial-types:proper-list authorized-principal-identifier))
 (common-lisp:defun make-authorized-principal-identifiers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            authorized-principal-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aws-account-id () 'common-lisp:string)
(common-lisp:deftype aws-region () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (business-name-generation-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-business-name-generation-configuration-"))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'business-name-generation-configuration
                    'make-business-name-generation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          business-name-generation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          business-name-generation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          business-name-generation-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-subscription-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-subscription-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or subscription-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-subscription-input
                    'make-cancel-subscription-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-subscription-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-subscription-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-subscription-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-subscription-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-subscription-output-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-at common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or created-by common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or subscription-id common-lisp:null))
   (retain-permissions common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or subscription-status common-lisp:null))
   (subscribed-listing (common-lisp:error ":subscribedlisting is required")
    :type (common-lisp:or subscribed-listing common-lisp:null))
   (subscribed-principal (common-lisp:error ":subscribedprincipal is required")
    :type (common-lisp:or subscribed-principal common-lisp:null))
   (subscription-request-id common-lisp:nil :type
    (common-lisp:or subscription-request-id common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or updated-at common-lisp:null))
   (updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-subscription-output
                    'make-cancel-subscription-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-subscription-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-subscription-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-permissions))
      (common-lisp:list
       (common-lisp:cons "retainPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribed-listing))
      (common-lisp:list
       (common-lisp:cons "subscribedListing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscribed-principal))
      (common-lisp:list
       (common-lisp:cons "subscribedPrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-request-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-subscription-output))
   common-lisp:nil))
(common-lisp:deftype change-action () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-formation-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-formation-properties-"))
   (template-url (common-lisp:error ":templateurl is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-formation-properties
                    'make-cloud-formation-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-url))
      (common-lisp:list
       (common-lisp:cons "templateUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (configurable-action-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-configurable-action-parameter-"))
   (key common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'configurable-action-parameter
                    'make-configurable-action-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configurable-action-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configurable-action-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configurable-action-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configurable-action-parameter-list ()
   '(trivial-types:proper-list configurable-action-parameter))
 (common-lisp:defun make-configurable-action-parameter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configurable-action-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype configurable-action-type-authorization ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (configurable-environment-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-configurable-environment-action-"))
   (auth common-lisp:nil :type
    (common-lisp:or configurable-action-type-authorization common-lisp:null))
   (parameters (common-lisp:error ":parameters is required") :type
    (common-lisp:or configurable-action-parameter-list common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'configurable-environment-action
                    'make-configurable-environment-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configurable-environment-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configurable-environment-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth))
      (common-lisp:list
       (common-lisp:cons "auth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configurable-environment-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (datazone-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-asset-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-asset-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (external-identifier common-lisp:nil :type
    (common-lisp:or external-identifier common-lisp:null))
   (forms-input common-lisp:nil :type
    (common-lisp:or form-input-list common-lisp:null))
   (glossary-terms common-lisp:nil :type
    (common-lisp:or glossary-terms common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or asset-name common-lisp:null))
   (owning-project-identifier
    (common-lisp:error ":owningprojectidentifier is required") :type
    (common-lisp:or project-id common-lisp:null))
   (prediction-configuration common-lisp:nil :type
    (common-lisp:or prediction-configuration common-lisp:null))
   (type-identifier (common-lisp:error ":typeidentifier is required") :type
    (common-lisp:or asset-type-identifier common-lisp:null))
   (type-revision common-lisp:nil :type
    (common-lisp:or revision common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-asset-input 'make-create-asset-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-asset-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-asset-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-identifier))
      (common-lisp:list
       (common-lisp:cons "externalIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forms-input))
      (common-lisp:list
       (common-lisp:cons "formsInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'owning-project-identifier))
      (common-lisp:list
       (common-lisp:cons "owningProjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-configuration))
      (common-lisp:list
       (common-lisp:cons "predictionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-identifier))
      (common-lisp:list
       (common-lisp:cons "typeIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-revision))
      (common-lisp:list
       (common-lisp:cons "typeRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-asset-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-asset-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-asset-output-"))
   (created-at common-lisp:nil :type
    (common-lisp:or created-at common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or created-by common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (external-identifier common-lisp:nil :type
    (common-lisp:or external-identifier common-lisp:null))
   (first-revision-created-at common-lisp:nil :type
    (common-lisp:or created-at common-lisp:null))
   (first-revision-created-by common-lisp:nil :type
    (common-lisp:or created-by common-lisp:null))
   (forms-output (common-lisp:error ":formsoutput is required") :type
    (common-lisp:or form-output-list common-lisp:null))
   (glossary-terms common-lisp:nil :type
    (common-lisp:or glossary-terms common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or asset-id common-lisp:null))
   (listing common-lisp:nil :type
    (common-lisp:or asset-listing-details common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or asset-name common-lisp:null))
   (owning-project-id (common-lisp:error ":owningprojectid is required") :type
    (common-lisp:or project-id common-lisp:null))
   (prediction-configuration common-lisp:nil :type
    (common-lisp:or prediction-configuration common-lisp:null))
   (read-only-forms-output common-lisp:nil :type
    (common-lisp:or form-output-list common-lisp:null))
   (revision (common-lisp:error ":revision is required") :type
    (common-lisp:or revision common-lisp:null))
   (type-identifier (common-lisp:error ":typeidentifier is required") :type
    (common-lisp:or asset-type-identifier common-lisp:null))
   (type-revision (common-lisp:error ":typerevision is required") :type
    (common-lisp:or revision common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-asset-output 'make-create-asset-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-asset-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-asset-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-identifier))
      (common-lisp:list
       (common-lisp:cons "externalIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'first-revision-created-at))
      (common-lisp:list
       (common-lisp:cons "firstRevisionCreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'first-revision-created-by))
      (common-lisp:list
       (common-lisp:cons "firstRevisionCreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forms-output))
      (common-lisp:list
       (common-lisp:cons "formsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listing))
      (common-lisp:list
       (common-lisp:cons "listing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-configuration))
      (common-lisp:list
       (common-lisp:cons "predictionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-only-forms-output))
      (common-lisp:list
       (common-lisp:cons "readOnlyFormsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-identifier))
      (common-lisp:list
       (common-lisp:cons "typeIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-revision))
      (common-lisp:list
       (common-lisp:cons "typeRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-asset-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-asset-revision-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-asset-revision-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (forms-input common-lisp:nil :type
    (common-lisp:or form-input-list common-lisp:null))
   (glossary-terms common-lisp:nil :type
    (common-lisp:or glossary-terms common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or asset-identifier common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or asset-name common-lisp:null))
   (prediction-configuration common-lisp:nil :type
    (common-lisp:or prediction-configuration common-lisp:null))
   (type-revision common-lisp:nil :type
    (common-lisp:or revision common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-asset-revision-input
                    'make-create-asset-revision-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-revision-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-revision-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forms-input))
      (common-lisp:list
       (common-lisp:cons "formsInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-configuration))
      (common-lisp:list
       (common-lisp:cons "predictionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-revision))
      (common-lisp:list
       (common-lisp:cons "typeRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-revision-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-asset-revision-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-asset-revision-output-"))
   (created-at common-lisp:nil :type
    (common-lisp:or created-at common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or created-by common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (external-identifier common-lisp:nil :type
    (common-lisp:or external-identifier common-lisp:null))
   (first-revision-created-at common-lisp:nil :type
    (common-lisp:or created-at common-lisp:null))
   (first-revision-created-by common-lisp:nil :type
    (common-lisp:or created-by common-lisp:null))
   (forms-output (common-lisp:error ":formsoutput is required") :type
    (common-lisp:or form-output-list common-lisp:null))
   (glossary-terms common-lisp:nil :type
    (common-lisp:or glossary-terms common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or asset-id common-lisp:null))
   (listing common-lisp:nil :type
    (common-lisp:or asset-listing-details common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or asset-name common-lisp:null))
   (owning-project-id (common-lisp:error ":owningprojectid is required") :type
    (common-lisp:or project-id common-lisp:null))
   (prediction-configuration common-lisp:nil :type
    (common-lisp:or prediction-configuration common-lisp:null))
   (read-only-forms-output common-lisp:nil :type
    (common-lisp:or form-output-list common-lisp:null))
   (revision (common-lisp:error ":revision is required") :type
    (common-lisp:or revision common-lisp:null))
   (type-identifier (common-lisp:error ":typeidentifier is required") :type
    (common-lisp:or asset-type-identifier common-lisp:null))
   (type-revision (common-lisp:error ":typerevision is required") :type
    (common-lisp:or revision common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-asset-revision-output
                    'make-create-asset-revision-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-revision-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-revision-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-identifier))
      (common-lisp:list
       (common-lisp:cons "externalIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'first-revision-created-at))
      (common-lisp:list
       (common-lisp:cons "firstRevisionCreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'first-revision-created-by))
      (common-lisp:list
       (common-lisp:cons "firstRevisionCreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forms-output))
      (common-lisp:list
       (common-lisp:cons "formsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listing))
      (common-lisp:list
       (common-lisp:cons "listing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-configuration))
      (common-lisp:list
       (common-lisp:cons "predictionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-only-forms-output))
      (common-lisp:list
       (common-lisp:cons "readOnlyFormsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-identifier))
      (common-lisp:list
       (common-lisp:cons "typeIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-revision))
      (common-lisp:list
       (common-lisp:cons "typeRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-revision-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-asset-type-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-asset-type-input-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (forms-input (common-lisp:error ":formsinput is required") :type
    (common-lisp:or forms-input-map common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or type-name common-lisp:null))
   (owning-project-identifier
    (common-lisp:error ":owningprojectidentifier is required") :type
    (common-lisp:or project-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-asset-type-input 'make-create-asset-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-type-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forms-input))
      (common-lisp:list
       (common-lisp:cons "formsInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'owning-project-identifier))
      (common-lisp:list
       (common-lisp:cons "owningProjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-asset-type-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-asset-type-output-"))
   (created-at common-lisp:nil :type
    (common-lisp:or created-at common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or created-by common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (forms-output (common-lisp:error ":formsoutput is required") :type
    (common-lisp:or forms-output-map common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or type-name common-lisp:null))
   (origin-domain-id common-lisp:nil :type
    (common-lisp:or domain-id common-lisp:null))
   (origin-project-id common-lisp:nil :type
    (common-lisp:or project-id common-lisp:null))
   (owning-project-id common-lisp:nil :type
    (common-lisp:or project-id common-lisp:null))
   (revision (common-lisp:error ":revision is required") :type
    (common-lisp:or revision common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or updated-at common-lisp:null))
   (updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-asset-type-output 'make-create-asset-type-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-type-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forms-output))
      (common-lisp:list
       (common-lisp:cons "formsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-domain-id))
      (common-lisp:list
       (common-lisp:cons "originDomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-project-id))
      (common-lisp:list
       (common-lisp:cons "originProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-type-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-data-source-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-data-source-input-"))
   (asset-forms-input common-lisp:nil :type
    (common-lisp:or form-input-list common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or data-source-configuration-input common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (enable-setting common-lisp:nil :type
    (common-lisp:or enable-setting common-lisp:null))
   (environment-identifier
    (common-lisp:error ":environmentidentifier is required") :type
    (common-lisp:or string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (project-identifier (common-lisp:error ":projectidentifier is required")
    :type (common-lisp:or string common-lisp:null))
   (publish-on-import common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (recommendation common-lisp:nil :type
    (common-lisp:or recommendation-configuration common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or schedule-configuration common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or data-source-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-data-source-input 'make-create-data-source-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-forms-input))
      (common-lisp:list
       (common-lisp:cons "assetFormsInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-setting))
      (common-lisp:list
       (common-lisp:cons "enableSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-identifier))
      (common-lisp:list
       (common-lisp:cons "environmentIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-identifier))
      (common-lisp:list
       (common-lisp:cons "projectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publish-on-import))
      (common-lisp:list
       (common-lisp:cons "publishOnImport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation))
      (common-lisp:list
       (common-lisp:cons "recommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-data-source-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-data-source-output-"))
   (asset-forms-output common-lisp:nil :type
    (common-lisp:or form-output-list common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or data-source-configuration-output common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (enable-setting common-lisp:nil :type
    (common-lisp:or enable-setting common-lisp:null))
   (environment-id (common-lisp:error ":environmentid is required") :type
    (common-lisp:or environment-id common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or data-source-error-message common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or data-source-id common-lisp:null))
   (last-run-at common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (last-run-error-message common-lisp:nil :type
    (common-lisp:or data-source-error-message common-lisp:null))
   (last-run-status common-lisp:nil :type
    (common-lisp:or data-source-run-status common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (project-id (common-lisp:error ":projectid is required") :type
    (common-lisp:or project-id common-lisp:null))
   (publish-on-import common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (recommendation common-lisp:nil :type
    (common-lisp:or recommendation-configuration common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or schedule-configuration common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or data-source-status common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or data-source-type common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-data-source-output
                    'make-create-data-source-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-forms-output))
      (common-lisp:list
       (common-lisp:cons "assetFormsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-setting))
      (common-lisp:list
       (common-lisp:cons "enableSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-at))
      (common-lisp:list
       (common-lisp:cons "lastRunAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-run-error-message))
      (common-lisp:list
       (common-lisp:cons "lastRunErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-status))
      (common-lisp:list
       (common-lisp:cons "lastRunStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publish-on-import))
      (common-lisp:list
       (common-lisp:cons "publishOnImport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation))
      (common-lisp:list
       (common-lisp:cons "recommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-domain-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-domain-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (domain-execution-role
    (common-lisp:error ":domainexecutionrole is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (kms-key-identifier common-lisp:nil :type
    (common-lisp:or kms-key-arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (single-sign-on common-lisp:nil :type
    (common-lisp:or single-sign-on common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-domain-input 'make-create-domain-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-domain-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-domain-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-execution-role))
      (common-lisp:list
       (common-lisp:cons "domainExecutionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-identifier))
      (common-lisp:list
       (common-lisp:cons "kmsKeyIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'single-sign-on))
      (common-lisp:list
       (common-lisp:cons "singleSignOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-domain-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-domain-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-domain-output-"))
   (arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (domain-execution-role common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (kms-key-identifier common-lisp:nil :type
    (common-lisp:or kms-key-arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (portal-url common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (single-sign-on common-lisp:nil :type
    (common-lisp:or single-sign-on common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or domain-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-domain-output 'make-create-domain-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-domain-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-domain-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-execution-role))
      (common-lisp:list
       (common-lisp:cons "domainExecutionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-identifier))
      (common-lisp:list
       (common-lisp:cons "kmsKeyIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-url))
      (common-lisp:list
       (common-lisp:cons "portalUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'single-sign-on))
      (common-lisp:list
       (common-lisp:cons "singleSignOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-domain-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-environment-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-environment-input-"))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (environment-profile-identifier
    (common-lisp:error ":environmentprofileidentifier is required") :type
    (common-lisp:or environment-profile-id common-lisp:null))
   (glossary-terms common-lisp:nil :type
    (common-lisp:or glossary-terms common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (project-identifier (common-lisp:error ":projectidentifier is required")
    :type (common-lisp:or project-id common-lisp:null))
   (user-parameters common-lisp:nil :type
    (common-lisp:or environment-parameters-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-environment-input 'make-create-environment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-profile-identifier))
      (common-lisp:list
       (common-lisp:cons "environmentProfileIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-identifier))
      (common-lisp:list
       (common-lisp:cons "projectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-parameters))
      (common-lisp:list
       (common-lisp:cons "userParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-environment-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-environment-output-"))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (aws-account-region common-lisp:nil :type
    (common-lisp:or aws-region common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or string common-lisp:null))
   (deployment-properties common-lisp:nil :type
    (common-lisp:or deployment-properties common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (environment-actions common-lisp:nil :type
    (common-lisp:or environment-action-list common-lisp:null))
   (environment-blueprint-id common-lisp:nil :type
    (common-lisp:or environment-blueprint-id common-lisp:null))
   (environment-profile-id
    (common-lisp:error ":environmentprofileid is required") :type
    (common-lisp:or environment-profile-id common-lisp:null))
   (glossary-terms common-lisp:nil :type
    (common-lisp:or glossary-terms common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or environment-id common-lisp:null))
   (last-deployment common-lisp:nil :type
    (common-lisp:or deployment common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or environment-name common-lisp:null))
   (project-id (common-lisp:error ":projectid is required") :type
    (common-lisp:or project-id common-lisp:null))
   (provider (common-lisp:error ":provider is required") :type
    (common-lisp:or string common-lisp:null))
   (provisioned-resources common-lisp:nil :type
    (common-lisp:or resource-list common-lisp:null))
   (provisioning-properties common-lisp:nil :type
    (common-lisp:or provisioning-properties common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or environment-status common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (user-parameters common-lisp:nil :type
    (common-lisp:or custom-parameter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-environment-output
                    'make-create-environment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-region))
      (common-lisp:list
       (common-lisp:cons "awsAccountRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-properties))
      (common-lisp:list
       (common-lisp:cons "deploymentProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-actions))
      (common-lisp:list
       (common-lisp:cons "environmentActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "environmentBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-profile-id))
      (common-lisp:list
       (common-lisp:cons "environmentProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-deployment))
      (common-lisp:list
       (common-lisp:cons "lastDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-resources))
      (common-lisp:list
       (common-lisp:cons "provisionedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-properties))
      (common-lisp:list
       (common-lisp:cons "provisioningProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-parameters))
      (common-lisp:list
       (common-lisp:cons "userParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-environment-profile-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-environment-profile-input-"))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (aws-account-region common-lisp:nil :type
    (common-lisp:or aws-region common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (environment-blueprint-identifier
    (common-lisp:error ":environmentblueprintidentifier is required") :type
    (common-lisp:or environment-blueprint-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or environment-profile-name common-lisp:null))
   (project-identifier (common-lisp:error ":projectidentifier is required")
    :type (common-lisp:or project-id common-lisp:null))
   (user-parameters common-lisp:nil :type
    (common-lisp:or environment-parameters-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-environment-profile-input
                    'make-create-environment-profile-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-profile-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-region))
      (common-lisp:list
       (common-lisp:cons "awsAccountRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-blueprint-identifier))
      (common-lisp:list
       (common-lisp:cons "environmentBlueprintIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-identifier))
      (common-lisp:list
       (common-lisp:cons "projectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-parameters))
      (common-lisp:list
       (common-lisp:cons "userParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-profile-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-environment-profile-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-environment-profile-output-"))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (aws-account-region common-lisp:nil :type
    (common-lisp:or aws-region common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (environment-blueprint-id
    (common-lisp:error ":environmentblueprintid is required") :type
    (common-lisp:or environment-blueprint-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or environment-profile-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or environment-profile-name common-lisp:null))
   (project-id common-lisp:nil :type
    (common-lisp:or project-id common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (user-parameters common-lisp:nil :type
    (common-lisp:or custom-parameter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-environment-profile-output
                    'make-create-environment-profile-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-profile-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-profile-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-region))
      (common-lisp:list
       (common-lisp:cons "awsAccountRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "environmentBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-parameters))
      (common-lisp:list
       (common-lisp:cons "userParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-profile-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-form-type-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-form-type-input-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (model (common-lisp:error ":model is required") :type
    (common-lisp:or model common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or form-type-name common-lisp:null))
   (owning-project-identifier
    (common-lisp:error ":owningprojectidentifier is required") :type
    (common-lisp:or project-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or form-type-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-form-type-input 'make-create-form-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-form-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-form-type-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model))
      (common-lisp:list
       (common-lisp:cons "model"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'owning-project-identifier))
      (common-lisp:list
       (common-lisp:cons "owningProjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-form-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-form-type-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-form-type-output-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or form-type-name common-lisp:null))
   (origin-domain-id common-lisp:nil :type
    (common-lisp:or domain-id common-lisp:null))
   (origin-project-id common-lisp:nil :type
    (common-lisp:or project-id common-lisp:null))
   (owning-project-id common-lisp:nil :type
    (common-lisp:or project-id common-lisp:null))
   (revision (common-lisp:error ":revision is required") :type
    (common-lisp:or revision common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-form-type-output 'make-create-form-type-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-form-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-form-type-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-domain-id))
      (common-lisp:list
       (common-lisp:cons "originDomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-project-id))
      (common-lisp:list
       (common-lisp:cons "originProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-form-type-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-glossary-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-glossary-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or glossary-description common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or glossary-name common-lisp:null))
   (owning-project-identifier
    (common-lisp:error ":owningprojectidentifier is required") :type
    (common-lisp:or project-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or glossary-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-glossary-input 'make-create-glossary-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-glossary-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-glossary-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'owning-project-identifier))
      (common-lisp:list
       (common-lisp:cons "owningProjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-glossary-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-glossary-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-glossary-output-"))
   (description common-lisp:nil :type
    (common-lisp:or glossary-description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or glossary-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or glossary-name common-lisp:null))
   (owning-project-id (common-lisp:error ":owningprojectid is required") :type
    (common-lisp:or project-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or glossary-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-glossary-output 'make-create-glossary-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-glossary-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-glossary-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-glossary-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-glossary-term-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-glossary-term-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (glossary-identifier (common-lisp:error ":glossaryidentifier is required")
    :type (common-lisp:or glossary-term-id common-lisp:null))
   (long-description common-lisp:nil :type
    (common-lisp:or long-description common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or glossary-term-name common-lisp:null))
   (short-description common-lisp:nil :type
    (common-lisp:or short-description common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or glossary-term-status common-lisp:null))
   (term-relations common-lisp:nil :type
    (common-lisp:or term-relations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-glossary-term-input
                    'make-create-glossary-term-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-glossary-term-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-glossary-term-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-identifier))
      (common-lisp:list
       (common-lisp:cons "glossaryIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-description))
      (common-lisp:list
       (common-lisp:cons "longDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-description))
      (common-lisp:list
       (common-lisp:cons "shortDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term-relations))
      (common-lisp:list
       (common-lisp:cons "termRelations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-glossary-term-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-glossary-term-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-glossary-term-output-"))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (glossary-id (common-lisp:error ":glossaryid is required") :type
    (common-lisp:or glossary-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or glossary-term-id common-lisp:null))
   (long-description common-lisp:nil :type
    (common-lisp:or long-description common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or glossary-term-name common-lisp:null))
   (short-description common-lisp:nil :type
    (common-lisp:or short-description common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or glossary-term-status common-lisp:null))
   (term-relations common-lisp:nil :type
    (common-lisp:or term-relations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-glossary-term-output
                    'make-create-glossary-term-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-glossary-term-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-glossary-term-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-id))
      (common-lisp:list
       (common-lisp:cons "glossaryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-description))
      (common-lisp:list
       (common-lisp:cons "longDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-description))
      (common-lisp:list
       (common-lisp:cons "shortDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term-relations))
      (common-lisp:list
       (common-lisp:cons "termRelations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-glossary-term-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-group-profile-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-group-profile-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (group-identifier (common-lisp:error ":groupidentifier is required") :type
    (common-lisp:or group-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-group-profile-input
                    'make-create-group-profile-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-group-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-group-profile-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-identifier))
      (common-lisp:list
       (common-lisp:cons "groupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-group-profile-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-group-profile-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-group-profile-output-"))
   (domain-id common-lisp:nil :type
    (common-lisp:or domain-id common-lisp:null))
   (group-name common-lisp:nil :type
    (common-lisp:or group-profile-name common-lisp:null))
   (id common-lisp:nil :type
    (common-lisp:or group-profile-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or group-profile-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-group-profile-output
                    'make-create-group-profile-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-group-profile-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-group-profile-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "groupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-group-profile-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-listing-change-set-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-listing-change-set-input-"))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or change-action common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (entity-identifier (common-lisp:error ":entityidentifier is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (entity-revision common-lisp:nil :type
    (common-lisp:or revision common-lisp:null))
   (entity-type (common-lisp:error ":entitytype is required") :type
    (common-lisp:or entity-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-listing-change-set-input
                    'make-create-listing-change-set-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-listing-change-set-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-listing-change-set-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-identifier))
      (common-lisp:list
       (common-lisp:cons "entityIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-revision))
      (common-lisp:list
       (common-lisp:cons "entityRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type))
      (common-lisp:list
       (common-lisp:cons "entityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-listing-change-set-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-listing-change-set-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-listing-change-set-output-"))
   (listing-id (common-lisp:error ":listingid is required") :type
    (common-lisp:or listing-id common-lisp:null))
   (listing-revision (common-lisp:error ":listingrevision is required") :type
    (common-lisp:or revision common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or listing-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-listing-change-set-output
                    'make-create-listing-change-set-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-listing-change-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-listing-change-set-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listing-id))
      (common-lisp:list
       (common-lisp:cons "listingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listing-revision))
      (common-lisp:list
       (common-lisp:cons "listingRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-listing-change-set-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-project-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-project-input-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (glossary-terms common-lisp:nil :type
    (common-lisp:or glossary-terms common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or project-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-project-input 'make-create-project-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-project-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-project-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-project-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-project-membership-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-project-membership-input-"))
   (designation (common-lisp:error ":designation is required") :type
    (common-lisp:or user-designation common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (member (common-lisp:error ":member is required") :type
    (common-lisp:or member common-lisp:null))
   (project-identifier (common-lisp:error ":projectidentifier is required")
    :type (common-lisp:or project-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-project-membership-input
                    'make-create-project-membership-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-membership-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-membership-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'designation))
      (common-lisp:list
       (common-lisp:cons "designation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member))
      (common-lisp:list
       (common-lisp:cons "member"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-membership-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-project-membership-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-project-membership-output-")))
 (common-lisp:export
  (common-lisp:list 'create-project-membership-output
                    'make-create-project-membership-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-membership-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-membership-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-membership-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-project-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-project-output-"))
   (created-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or created-by common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (failure-reasons common-lisp:nil :type
    (common-lisp:or failure-reasons common-lisp:null))
   (glossary-terms common-lisp:nil :type
    (common-lisp:or glossary-terms common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or project-id common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or project-name common-lisp:null))
   (project-status common-lisp:nil :type
    (common-lisp:or project-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-project-output 'make-create-project-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-status))
      (common-lisp:list
       (common-lisp:cons "projectStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-subscription-grant-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-subscription-grant-input-"))
   (asset-target-names common-lisp:nil :type
    (common-lisp:or asset-target-names common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (environment-identifier
    (common-lisp:error ":environmentidentifier is required") :type
    (common-lisp:or environment-id common-lisp:null))
   (granted-entity (common-lisp:error ":grantedentity is required") :type
    (common-lisp:or granted-entity-input common-lisp:null))
   (subscription-target-identifier
    (common-lisp:error ":subscriptiontargetidentifier is required") :type
    (common-lisp:or subscription-target-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-subscription-grant-input
                    'make-create-subscription-grant-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-grant-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-grant-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-target-names))
      (common-lisp:list
       (common-lisp:cons "assetTargetNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-identifier))
      (common-lisp:list
       (common-lisp:cons "environmentIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granted-entity))
      (common-lisp:list
       (common-lisp:cons "grantedEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-target-identifier))
      (common-lisp:list
       (common-lisp:cons "subscriptionTargetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-grant-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-subscription-grant-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-subscription-grant-output-"))
   (assets common-lisp:nil :type
    (common-lisp:or subscribed-assets common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-at common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or created-by common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (granted-entity (common-lisp:error ":grantedentity is required") :type
    (common-lisp:or granted-entity common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or subscription-grant-id common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or subscription-grant-overall-status common-lisp:null))
   (subscription-id common-lisp:nil :type
    (common-lisp:or subscription-id common-lisp:null))
   (subscription-target-id
    (common-lisp:error ":subscriptiontargetid is required") :type
    (common-lisp:or subscription-target-id common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or updated-at common-lisp:null))
   (updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-subscription-grant-output
                    'make-create-subscription-grant-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-grant-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-grant-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assets))
      (common-lisp:list
       (common-lisp:cons "assets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granted-entity))
      (common-lisp:list
       (common-lisp:cons "grantedEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-target-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionTargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-grant-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-subscription-request-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-subscription-request-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (request-reason (common-lisp:error ":requestreason is required") :type
    (common-lisp:or request-reason common-lisp:null))
   (subscribed-listings (common-lisp:error ":subscribedlistings is required")
    :type (common-lisp:or subscribed-listing-inputs common-lisp:null))
   (subscribed-principals
    (common-lisp:error ":subscribedprincipals is required") :type
    (common-lisp:or subscribed-principal-inputs common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-subscription-request-input
                    'make-create-subscription-request-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-request-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-request-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-reason))
      (common-lisp:list
       (common-lisp:cons "requestReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribed-listings))
      (common-lisp:list
       (common-lisp:cons "subscribedListings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscribed-principals))
      (common-lisp:list
       (common-lisp:cons "subscribedPrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-request-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-subscription-request-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-subscription-request-output-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-at common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or created-by common-lisp:null))
   (decision-comment common-lisp:nil :type
    (common-lisp:or decision-comment common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or subscription-request-id common-lisp:null))
   (request-reason (common-lisp:error ":requestreason is required") :type
    (common-lisp:or request-reason common-lisp:null))
   (reviewer-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or subscription-request-status common-lisp:null))
   (subscribed-listings (common-lisp:error ":subscribedlistings is required")
    :type
    (common-lisp:or create-subscription-request-output-subscribed-listings-list
                    common-lisp:null))
   (subscribed-principals
    (common-lisp:error ":subscribedprincipals is required") :type
    (common-lisp:or
     create-subscription-request-output-subscribed-principals-list
     common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or updated-at common-lisp:null))
   (updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-subscription-request-output
                    'make-create-subscription-request-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-request-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-request-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decision-comment))
      (common-lisp:list
       (common-lisp:cons "decisionComment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-reason))
      (common-lisp:list
       (common-lisp:cons "requestReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reviewer-id))
      (common-lisp:list
       (common-lisp:cons "reviewerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribed-listings))
      (common-lisp:list
       (common-lisp:cons "subscribedListings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscribed-principals))
      (common-lisp:list
       (common-lisp:cons "subscribedPrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-request-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-subscription-request-output-subscribed-listings-list
                      ()
   '(trivial-types:proper-list subscribed-listing))
 (common-lisp:defun make-create-subscription-request-output-subscribed-listings-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscribed-listing))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype create-subscription-request-output-subscribed-principals-list
                      ()
   '(trivial-types:proper-list subscribed-principal))
 (common-lisp:defun make-create-subscription-request-output-subscribed-principals-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscribed-principal))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (create-subscription-target-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-subscription-target-input-"))
   (applicable-asset-types
    (common-lisp:error ":applicableassettypes is required") :type
    (common-lisp:or applicable-asset-types common-lisp:null))
   (authorized-principals
    (common-lisp:error ":authorizedprincipals is required") :type
    (common-lisp:or authorized-principal-identifiers common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (environment-identifier
    (common-lisp:error ":environmentidentifier is required") :type
    (common-lisp:or environment-id common-lisp:null))
   (manage-access-role (common-lisp:error ":manageaccessrole is required")
    :type (common-lisp:or string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or subscription-target-name common-lisp:null))
   (provider common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (subscription-target-config
    (common-lisp:error ":subscriptiontargetconfig is required") :type
    (common-lisp:or subscription-target-forms common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-subscription-target-input
                    'make-create-subscription-target-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-target-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-target-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'applicable-asset-types))
      (common-lisp:list
       (common-lisp:cons "applicableAssetTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorized-principals))
      (common-lisp:list
       (common-lisp:cons "authorizedPrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manage-access-role))
      (common-lisp:list
       (common-lisp:cons "manageAccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-target-config))
      (common-lisp:list
       (common-lisp:cons "subscriptionTargetConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-target-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-subscription-target-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-subscription-target-output-"))
   (applicable-asset-types
    (common-lisp:error ":applicableassettypes is required") :type
    (common-lisp:or applicable-asset-types common-lisp:null))
   (authorized-principals
    (common-lisp:error ":authorizedprincipals is required") :type
    (common-lisp:or authorized-principal-identifiers common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-at common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or created-by common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (environment-id (common-lisp:error ":environmentid is required") :type
    (common-lisp:or environment-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or subscription-target-id common-lisp:null))
   (manage-access-role (common-lisp:error ":manageaccessrole is required")
    :type (common-lisp:or string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or subscription-target-name common-lisp:null))
   (project-id (common-lisp:error ":projectid is required") :type
    (common-lisp:or project-id common-lisp:null))
   (provider (common-lisp:error ":provider is required") :type
    (common-lisp:or string common-lisp:null))
   (subscription-target-config
    (common-lisp:error ":subscriptiontargetconfig is required") :type
    (common-lisp:or subscription-target-forms common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or string common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or updated-at common-lisp:null))
   (updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-subscription-target-output
                    'make-create-subscription-target-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-target-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-target-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'applicable-asset-types))
      (common-lisp:list
       (common-lisp:cons "applicableAssetTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorized-principals))
      (common-lisp:list
       (common-lisp:cons "authorizedPrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manage-access-role))
      (common-lisp:list
       (common-lisp:cons "manageAccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-target-config))
      (common-lisp:list
       (common-lisp:cons "subscriptionTargetConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-target-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-user-profile-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-user-profile-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (user-identifier (common-lisp:error ":useridentifier is required") :type
    (common-lisp:or user-identifier common-lisp:null))
   (user-type common-lisp:nil :type
    (common-lisp:or user-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-user-profile-input
                    'make-create-user-profile-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-profile-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-identifier))
      (common-lisp:list
       (common-lisp:cons "userIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-type))
      (common-lisp:list
       (common-lisp:cons "userType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-profile-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-user-profile-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-user-profile-output-"))
   (details common-lisp:nil :type
    (common-lisp:or user-profile-details common-lisp:null))
   (domain-id common-lisp:nil :type
    (common-lisp:or domain-id common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or user-profile-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or user-profile-status common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or user-profile-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-user-profile-output
                    'make-create-user-profile-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-profile-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-profile-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-profile-output))
   common-lisp:nil))
(common-lisp:deftype created-at () 'common-lisp:string)
(common-lisp:deftype created-by () 'common-lisp:string)
(common-lisp:deftype cron-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (custom-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-parameter-"))
   (default-value common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (field-type (common-lisp:error ":fieldtype is required") :type
    (common-lisp:or string common-lisp:null))
   (is-editable common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (is-optional common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (key-name (common-lisp:error ":keyname is required") :type
    (common-lisp:or custom-parameter-key-name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-parameter 'make-custom-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-type))
      (common-lisp:list
       (common-lisp:cons "fieldType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-editable))
      (common-lisp:list
       (common-lisp:cons "isEditable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-optional))
      (common-lisp:list
       (common-lisp:cons "isOptional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "keyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-parameter))
   common-lisp:nil))
(common-lisp:deftype custom-parameter-key-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype custom-parameter-list ()
   '(trivial-types:proper-list custom-parameter))
 (common-lisp:defun make-custom-parameter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list custom-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-asset-activity-status () 'common-lisp:string)
(common-lisp:deftype data-product-description () 'common-lisp:string)
(common-lisp:deftype data-product-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (data-product-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-product-item-"))
   (domain-id common-lisp:nil :type
    (common-lisp:or domain-id common-lisp:null))
   (item-id common-lisp:nil :type
    (common-lisp:or data-product-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-product-item 'make-data-product-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-product-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-product-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item-id))
      (common-lisp:list
       (common-lisp:cons "itemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-product-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-product-items ()
   '(trivial-types:proper-list data-product-item))
 (common-lisp:defun make-data-product-items
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-product-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-product-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (data-product-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-product-summary-"))
   (created-at common-lisp:nil :type
    (common-lisp:or created-at common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or created-by common-lisp:null))
   (data-product-items common-lisp:nil :type
    (common-lisp:or data-product-items common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or data-product-description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (glossary-terms common-lisp:nil :type
    (common-lisp:or glossary-terms common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or data-product-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or data-product-name common-lisp:null))
   (owning-project-id (common-lisp:error ":owningprojectid is required") :type
    (common-lisp:or project-id common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or updated-at common-lisp:null))
   (updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-product-summary 'make-data-product-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-product-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-product-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-product-items))
      (common-lisp:list
       (common-lisp:cons "dataProductItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-product-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-source-configuration-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-configuration-input-"))
   (glue-run-configuration common-lisp:nil :type
    (common-lisp:or glue-run-configuration-input common-lisp:null))
   (redshift-run-configuration common-lisp:nil :type
    (common-lisp:or redshift-run-configuration-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-source-configuration-input
                    'make-data-source-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'glue-run-configuration))
      (common-lisp:list
       (common-lisp:cons "glueRunConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-run-configuration))
      (common-lisp:list
       (common-lisp:cons "redshiftRunConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-source-configuration-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-configuration-output-"))
   (glue-run-configuration common-lisp:nil :type
    (common-lisp:or glue-run-configuration-output common-lisp:null))
   (redshift-run-configuration common-lisp:nil :type
    (common-lisp:or redshift-run-configuration-output common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-source-configuration-output
                    'make-data-source-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'glue-run-configuration))
      (common-lisp:list
       (common-lisp:cons "glueRunConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-run-configuration))
      (common-lisp:list
       (common-lisp:cons "redshiftRunConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-source-error-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-error-message-"))
   (error-detail common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (error-type (common-lisp:error ":errortype is required") :type
    (common-lisp:or data-source-error-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-source-error-message
                    'make-data-source-error-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-error-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-error-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-detail))
      (common-lisp:list
       (common-lisp:cons "errorDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-type))
      (common-lisp:list
       (common-lisp:cons "errorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-error-message))
   common-lisp:nil))
(common-lisp:deftype data-source-error-type () 'common-lisp:string)
(common-lisp:deftype data-source-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-source-run-activities ()
   '(trivial-types:proper-list data-source-run-activity))
 (common-lisp:defun make-data-source-run-activities
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-source-run-activity))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (data-source-run-activity (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-run-activity-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or date-time common-lisp:null))
   (data-asset-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (data-asset-status (common-lisp:error ":dataassetstatus is required") :type
    (common-lisp:or data-asset-activity-status common-lisp:null))
   (data-source-run-id (common-lisp:error ":datasourcerunid is required") :type
    (common-lisp:or data-source-run-id common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or name common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or data-source-error-message common-lisp:null))
   (project-id (common-lisp:error ":projectid is required") :type
    (common-lisp:or project-id common-lisp:null))
   (technical-description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (technical-name (common-lisp:error ":technicalname is required") :type
    (common-lisp:or name common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-source-run-activity 'make-data-source-run-activity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-run-activity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-run-activity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-asset-id))
      (common-lisp:list
       (common-lisp:cons "dataAssetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-asset-status))
      (common-lisp:list
       (common-lisp:cons "dataAssetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-run-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'technical-description))
      (common-lisp:list
       (common-lisp:cons "technicalDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'technical-name))
      (common-lisp:list
       (common-lisp:cons "technicalName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-run-activity))
   common-lisp:nil))
(common-lisp:deftype data-source-run-id () 'common-lisp:string)
(common-lisp:deftype data-source-run-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-source-run-summaries ()
   '(trivial-types:proper-list data-source-run-summary))
 (common-lisp:defun make-data-source-run-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-source-run-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (data-source-run-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-run-summary-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or date-time common-lisp:null))
   (data-source-id (common-lisp:error ":datasourceid is required") :type
    (common-lisp:or data-source-id common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or data-source-error-message common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or data-source-run-id common-lisp:null))
   (project-id (common-lisp:error ":projectid is required") :type
    (common-lisp:or project-id common-lisp:null))
   (run-statistics-for-assets common-lisp:nil :type
    (common-lisp:or run-statistics-for-assets common-lisp:null))
   (started-at common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or data-source-run-status common-lisp:null))
   (stopped-at common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or data-source-run-type common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-source-run-summary 'make-data-source-run-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-run-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-run-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'run-statistics-for-assets))
      (common-lisp:list
       (common-lisp:cons "runStatisticsForAssets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopped-at))
      (common-lisp:list
       (common-lisp:cons "stoppedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-run-summary))
   common-lisp:nil))
(common-lisp:deftype data-source-run-type () 'common-lisp:string)
(common-lisp:deftype data-source-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-source-summaries ()
   '(trivial-types:proper-list data-source-summary))
 (common-lisp:defun make-data-source-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-source-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (data-source-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-summary-"))
   (created-at common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (data-source-id (common-lisp:error ":datasourceid is required") :type
    (common-lisp:or data-source-id common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (enable-setting common-lisp:nil :type
    (common-lisp:or enable-setting common-lisp:null))
   (environment-id (common-lisp:error ":environmentid is required") :type
    (common-lisp:or environment-id common-lisp:null))
   (last-run-asset-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (last-run-at common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (last-run-error-message common-lisp:nil :type
    (common-lisp:or data-source-error-message common-lisp:null))
   (last-run-status common-lisp:nil :type
    (common-lisp:or data-source-run-status common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or schedule-configuration common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or data-source-status common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or string common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-source-summary 'make-data-source-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-source-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-source-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-setting))
      (common-lisp:list
       (common-lisp:cons "enableSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-run-asset-count))
      (common-lisp:list
       (common-lisp:cons "lastRunAssetCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-at))
      (common-lisp:list
       (common-lisp:cons "lastRunAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-run-error-message))
      (common-lisp:list
       (common-lisp:cons "lastRunErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-status))
      (common-lisp:list
       (common-lisp:cons "lastRunStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-source-summary))
   common-lisp:nil))
(common-lisp:deftype data-source-type () 'common-lisp:string)
(common-lisp:deftype date-time () 'common-lisp:string)
(common-lisp:deftype decision-comment () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-asset-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-asset-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or asset-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-asset-input 'make-delete-asset-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-asset-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-asset-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-asset-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-asset-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-asset-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-asset-output 'make-delete-asset-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-asset-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-asset-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-asset-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-asset-type-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-asset-type-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or asset-type-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-asset-type-input 'make-delete-asset-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-asset-type-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-asset-type-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-asset-type-output 'make-delete-asset-type-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-type-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-data-source-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-data-source-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or data-source-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-data-source-input 'make-delete-data-source-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-data-source-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-data-source-output-"))
   (asset-forms-output common-lisp:nil :type
    (common-lisp:or form-output-list common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or data-source-configuration-output common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (enable-setting common-lisp:nil :type
    (common-lisp:or enable-setting common-lisp:null))
   (environment-id (common-lisp:error ":environmentid is required") :type
    (common-lisp:or environment-id common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or data-source-error-message common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or data-source-id common-lisp:null))
   (last-run-at common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (last-run-error-message common-lisp:nil :type
    (common-lisp:or data-source-error-message common-lisp:null))
   (last-run-status common-lisp:nil :type
    (common-lisp:or data-source-run-status common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (project-id (common-lisp:error ":projectid is required") :type
    (common-lisp:or project-id common-lisp:null))
   (publish-on-import common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or schedule-configuration common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or data-source-status common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or data-source-type common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-data-source-output
                    'make-delete-data-source-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-forms-output))
      (common-lisp:list
       (common-lisp:cons "assetFormsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-setting))
      (common-lisp:list
       (common-lisp:cons "enableSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-at))
      (common-lisp:list
       (common-lisp:cons "lastRunAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-run-error-message))
      (common-lisp:list
       (common-lisp:cons "lastRunErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-status))
      (common-lisp:list
       (common-lisp:cons "lastRunStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publish-on-import))
      (common-lisp:list
       (common-lisp:cons "publishOnImport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-domain-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-domain-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (skip-deletion-check common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-domain-input 'make-delete-domain-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-domain-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-domain-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-domain-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-domain-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-domain-output-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or domain-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-domain-output 'make-delete-domain-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-domain-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-domain-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-domain-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-environment-blueprint-configuration-input
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-environment-blueprint-configuration-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (environment-blueprint-identifier
    (common-lisp:error ":environmentblueprintidentifier is required") :type
    (common-lisp:or environment-blueprint-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-environment-blueprint-configuration-input
                    'make-delete-environment-blueprint-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-blueprint-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-blueprint-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-blueprint-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-environment-blueprint-configuration-output
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-environment-blueprint-configuration-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-environment-blueprint-configuration-output
                    'make-delete-environment-blueprint-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-blueprint-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-blueprint-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-blueprint-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-environment-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-environment-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or environment-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-environment-input 'make-delete-environment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-environment-profile-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-environment-profile-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or environment-profile-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-environment-profile-input
                    'make-delete-environment-profile-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-profile-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-form-type-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-form-type-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (form-type-identifier (common-lisp:error ":formtypeidentifier is required")
    :type (common-lisp:or form-type-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-form-type-input 'make-delete-form-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-form-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-form-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-form-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-form-type-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-form-type-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-form-type-output 'make-delete-form-type-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-form-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-form-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-form-type-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-glossary-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-glossary-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or glossary-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-glossary-input 'make-delete-glossary-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-glossary-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-glossary-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-glossary-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-glossary-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-glossary-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-glossary-output 'make-delete-glossary-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-glossary-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-glossary-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-glossary-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-glossary-term-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-glossary-term-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or glossary-term-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-glossary-term-input
                    'make-delete-glossary-term-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-glossary-term-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-glossary-term-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-glossary-term-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-glossary-term-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-glossary-term-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-glossary-term-output
                    'make-delete-glossary-term-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-glossary-term-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-glossary-term-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-glossary-term-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-listing-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-listing-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or listing-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-listing-input 'make-delete-listing-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-listing-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-listing-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-listing-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-listing-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-listing-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-listing-output 'make-delete-listing-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-listing-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-listing-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-listing-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-project-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-project-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or project-id common-lisp:null))
   (skip-deletion-check common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-project-input 'make-delete-project-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-project-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-project-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-project-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-project-membership-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-project-membership-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (member (common-lisp:error ":member is required") :type
    (common-lisp:or member common-lisp:null))
   (project-identifier (common-lisp:error ":projectidentifier is required")
    :type (common-lisp:or project-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-project-membership-input
                    'make-delete-project-membership-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-membership-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-membership-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member))
      (common-lisp:list
       (common-lisp:cons "member"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-membership-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-project-membership-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-project-membership-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-project-membership-output
                    'make-delete-project-membership-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-membership-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-membership-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-membership-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-project-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-project-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-project-output 'make-delete-project-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-subscription-grant-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-subscription-grant-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or subscription-grant-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-subscription-grant-input
                    'make-delete-subscription-grant-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-grant-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-grant-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-grant-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-subscription-grant-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-subscription-grant-output-"))
   (assets common-lisp:nil :type
    (common-lisp:or subscribed-assets common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-at common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or created-by common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (granted-entity (common-lisp:error ":grantedentity is required") :type
    (common-lisp:or granted-entity common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or subscription-grant-id common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or subscription-grant-overall-status common-lisp:null))
   (subscription-id common-lisp:nil :type
    (common-lisp:or subscription-id common-lisp:null))
   (subscription-target-id
    (common-lisp:error ":subscriptiontargetid is required") :type
    (common-lisp:or subscription-target-id common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or updated-at common-lisp:null))
   (updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-subscription-grant-output
                    'make-delete-subscription-grant-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-grant-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-grant-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assets))
      (common-lisp:list
       (common-lisp:cons "assets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granted-entity))
      (common-lisp:list
       (common-lisp:cons "grantedEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-target-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionTargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-grant-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-subscription-request-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-subscription-request-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or subscription-request-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-subscription-request-input
                    'make-delete-subscription-request-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-request-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-request-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-request-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-subscription-target-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-subscription-target-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (environment-identifier
    (common-lisp:error ":environmentidentifier is required") :type
    (common-lisp:or environment-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or subscription-target-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-subscription-target-input
                    'make-delete-subscription-target-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-target-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-target-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-target-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deployment (:copier common-lisp:nil)
      (:conc-name "struct-shape-deployment-"))
   (deployment-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (deployment-status common-lisp:nil :type
    (common-lisp:or deployment-status common-lisp:null))
   (deployment-type common-lisp:nil :type
    (common-lisp:or deployment-type common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or environment-error common-lisp:null))
   (is-deployment-complete common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (messages common-lisp:nil :type
    (common-lisp:or deployment-messages-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'deployment 'make-deployment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-status))
      (common-lisp:list
       (common-lisp:cons "deploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-type))
      (common-lisp:list
       (common-lisp:cons "deploymentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-deployment-complete))
      (common-lisp:list
       (common-lisp:cons "isDeploymentComplete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'messages))
      (common-lisp:list
       (common-lisp:cons "messages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment))
   common-lisp:nil))
(common-lisp:deftype deployment-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype deployment-messages-list ()
   '(trivial-types:proper-list deployment-message))
 (common-lisp:defun make-deployment-messages-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deployment-message))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (deployment-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-deployment-properties-"))
   (end-timeout-minutes common-lisp:nil :type
    (common-lisp:or deployment-properties-end-timeout-minutes-integer
                    common-lisp:null))
   (start-timeout-minutes common-lisp:nil :type
    (common-lisp:or deployment-properties-start-timeout-minutes-integer
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deployment-properties 'make-deployment-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deployment-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deployment-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "endTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "startTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deployment-properties))
   common-lisp:nil))
(common-lisp:deftype deployment-properties-end-timeout-minutes-integer ()
  'common-lisp:integer)
(common-lisp:deftype deployment-properties-start-timeout-minutes-integer ()
  'common-lisp:integer)
(common-lisp:deftype deployment-status () 'common-lisp:string)
(common-lisp:deftype deployment-type () 'common-lisp:string)
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (detailed-glossary-term (:copier common-lisp:nil)
      (:conc-name "struct-shape-detailed-glossary-term-"))
   (name common-lisp:nil :type
    (common-lisp:or glossary-term-name common-lisp:null))
   (short-description common-lisp:nil :type
    (common-lisp:or short-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detailed-glossary-term 'make-detailed-glossary-term))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detailed-glossary-term))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detailed-glossary-term))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-description))
      (common-lisp:list
       (common-lisp:cons "shortDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detailed-glossary-term))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype detailed-glossary-terms ()
   '(trivial-types:proper-list detailed-glossary-term))
 (common-lisp:defun make-detailed-glossary-terms
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list detailed-glossary-term))
   aws-sdk/generator/shape::members))
(common-lisp:deftype domain-description () 'common-lisp:string)
(common-lisp:deftype domain-id () 'common-lisp:string)
(common-lisp:deftype domain-name () 'common-lisp:string)
(common-lisp:deftype domain-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype domain-summaries ()
   '(trivial-types:proper-list domain-summary))
 (common-lisp:defun make-domain-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (domain-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-domain-summary-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or string common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-at common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or domain-description common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or updated-at common-lisp:null))
   (managed-account-id (common-lisp:error ":managedaccountid is required")
    :type (common-lisp:or string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (portal-url common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or domain-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'domain-summary 'make-domain-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-account-id))
      (common-lisp:list
       (common-lisp:cons "managedAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-url))
      (common-lisp:list
       (common-lisp:cons "portalUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-summary))
   common-lisp:nil))
(common-lisp:deftype enable-setting () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype enabled-region-list ()
   '(trivial-types:proper-list region-name))
 (common-lisp:defun make-enabled-region-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list region-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype entity-id () 'common-lisp:string)
(common-lisp:deftype entity-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype environment-action-list ()
   '(trivial-types:proper-list configurable-environment-action))
 (common-lisp:defun make-environment-action-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configurable-environment-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (environment-blueprint-configuration-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-blueprint-configuration-item-"))
   (created-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (enabled-regions common-lisp:nil :type
    (common-lisp:or enabled-region-list common-lisp:null))
   (environment-blueprint-id
    (common-lisp:error ":environmentblueprintid is required") :type
    (common-lisp:or environment-blueprint-id common-lisp:null))
   (manage-access-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (provisioning-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (regional-parameters common-lisp:nil :type
    (common-lisp:or regional-parameter-map common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'environment-blueprint-configuration-item
                    'make-environment-blueprint-configuration-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-blueprint-configuration-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-blueprint-configuration-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-regions))
      (common-lisp:list
       (common-lisp:cons "enabledRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "environmentBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manage-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "manageAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-role-arn))
      (common-lisp:list
       (common-lisp:cons "provisioningRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regional-parameters))
      (common-lisp:list
       (common-lisp:cons "regionalParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-blueprint-configuration-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype environment-blueprint-configurations ()
   '(trivial-types:proper-list environment-blueprint-configuration-item))
 (common-lisp:defun make-environment-blueprint-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            environment-blueprint-configuration-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype environment-blueprint-id () 'common-lisp:string)
(common-lisp:deftype environment-blueprint-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype environment-blueprint-summaries ()
   '(trivial-types:proper-list environment-blueprint-summary))
 (common-lisp:defun make-environment-blueprint-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            environment-blueprint-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (environment-blueprint-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-blueprint-summary-"))
   (created-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or environment-blueprint-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or environment-blueprint-name common-lisp:null))
   (provider (common-lisp:error ":provider is required") :type
    (common-lisp:or string common-lisp:null))
   (provisioning-properties
    (common-lisp:error ":provisioningproperties is required") :type
    (common-lisp:or provisioning-properties common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'environment-blueprint-summary
                    'make-environment-blueprint-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-blueprint-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-blueprint-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-properties))
      (common-lisp:list
       (common-lisp:cons "provisioningProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-blueprint-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (environment-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-error-"))
   (code common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'environment-error 'make-environment-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environment-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environment-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environment-error))
   common-lisp:nil))
(common-lisp:deftype environment-id () 'common-lisp:string)
(common-lisp:deftype environment-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (environment-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-parameter-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'environment-parameter 'make-environment-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype environment-parameters-list ()
   '(trivial-types:proper-list environment-parameter))
 (common-lisp:defun make-environment-parameters-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list environment-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype environment-profile-id () 'common-lisp:string)
(common-lisp:deftype environment-profile-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype environment-profile-summaries ()
   '(trivial-types:proper-list environment-profile-summary))
 (common-lisp:defun make-environment-profile-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            environment-profile-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (environment-profile-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-profile-summary-"))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (aws-account-region common-lisp:nil :type
    (common-lisp:or aws-region common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (environment-blueprint-id
    (common-lisp:error ":environmentblueprintid is required") :type
    (common-lisp:or environment-blueprint-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or environment-profile-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or environment-profile-name common-lisp:null))
   (project-id common-lisp:nil :type
    (common-lisp:or project-id common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'environment-profile-summary
                    'make-environment-profile-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-profile-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-profile-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-region))
      (common-lisp:list
       (common-lisp:cons "awsAccountRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "environmentBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-profile-summary))
   common-lisp:nil))
(common-lisp:deftype environment-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype environment-summaries ()
   '(trivial-types:proper-list environment-summary))
 (common-lisp:defun make-environment-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list environment-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (environment-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-summary-"))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (aws-account-region common-lisp:nil :type
    (common-lisp:or aws-region common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (environment-profile-id
    (common-lisp:error ":environmentprofileid is required") :type
    (common-lisp:or environment-profile-id common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or environment-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or environment-name common-lisp:null))
   (project-id (common-lisp:error ":projectid is required") :type
    (common-lisp:or project-id common-lisp:null))
   (provider (common-lisp:error ":provider is required") :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or environment-status common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'environment-summary 'make-environment-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environment-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environment-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-region))
      (common-lisp:list
       (common-lisp:cons "awsAccountRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-profile-id))
      (common-lisp:list
       (common-lisp:cons "environmentProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environment-summary))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype external-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (failure-cause (:copier common-lisp:nil)
      (:conc-name "struct-shape-failure-cause-"))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'failure-cause 'make-failure-cause))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failure-cause))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failure-cause))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failure-cause))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype failure-reasons ()
   '(trivial-types:proper-list project-deletion-error))
 (common-lisp:defun make-failure-reasons
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list project-deletion-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (filter (:copier common-lisp:nil) (:conc-name "struct-shape-filter-"))
   (attribute (common-lisp:error ":attribute is required") :type
    (common-lisp:or attribute common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or filter-value-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (filter-clause (:copier common-lisp:nil)
      (:conc-name "struct-shape-filter-clause-"))
   (and common-lisp:nil :type (common-lisp:or filter-list common-lisp:null))
   (filter common-lisp:nil :type (common-lisp:or filter common-lisp:null))
   (or common-lisp:nil :type (common-lisp:or filter-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filter-clause 'make-filter-clause))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-clause))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-clause))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "and"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'or))
      (common-lisp:list
       (common-lisp:cons "or"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-clause))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (filter-expression (:copier common-lisp:nil)
      (:conc-name "struct-shape-filter-expression-"))
   (expression (common-lisp:error ":expression is required") :type
    (common-lisp:or filter-expression-expression-string common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or filter-expression-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'filter-expression 'make-filter-expression))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-expression))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-expression))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-expression))
   common-lisp:nil))
(common-lisp:deftype filter-expression-expression-string () 'common-lisp:string)
(common-lisp:deftype filter-expression-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-expressions ()
   '(trivial-types:proper-list filter-expression))
 (common-lisp:defun make-filter-expressions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-expression))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype filter-list ()
   '(trivial-types:proper-list filter-clause))
 (common-lisp:defun make-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-clause))
   aws-sdk/generator/shape::members))
(common-lisp:deftype filter-value-string () 'common-lisp:string)
(common-lisp:deftype first-name () 'common-lisp:string)
(common-lisp:deftype float () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defstruct
     (form-entry-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-form-entry-input-"))
   (required common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (type-identifier (common-lisp:error ":typeidentifier is required") :type
    (common-lisp:or form-type-identifier common-lisp:null))
   (type-revision (common-lisp:error ":typerevision is required") :type
    (common-lisp:or revision common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'form-entry-input 'make-form-entry-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input form-entry-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input form-entry-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required))
      (common-lisp:list
       (common-lisp:cons "required"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-identifier))
      (common-lisp:list
       (common-lisp:cons "typeIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-revision))
      (common-lisp:list
       (common-lisp:cons "typeRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input form-entry-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (form-entry-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-form-entry-output-"))
   (required common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (type-name (common-lisp:error ":typename is required") :type
    (common-lisp:or form-type-name common-lisp:null))
   (type-revision (common-lisp:error ":typerevision is required") :type
    (common-lisp:or revision common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'form-entry-output 'make-form-entry-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input form-entry-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input form-entry-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required))
      (common-lisp:list
       (common-lisp:cons "required"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "typeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-revision))
      (common-lisp:list
       (common-lisp:cons "typeRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input form-entry-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (form-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-form-input-"))
   (content common-lisp:nil :type
    (common-lisp:or form-input-content-string common-lisp:null))
   (form-name (common-lisp:error ":formname is required") :type
    (common-lisp:or form-name common-lisp:null))
   (type-identifier common-lisp:nil :type
    (common-lisp:or form-type-identifier common-lisp:null))
   (type-revision common-lisp:nil :type
    (common-lisp:or revision common-lisp:null)))
 (common-lisp:export (common-lisp:list 'form-input 'make-form-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input form-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input form-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'form-name))
      (common-lisp:list
       (common-lisp:cons "formName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-identifier))
      (common-lisp:list
       (common-lisp:cons "typeIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-revision))
      (common-lisp:list
       (common-lisp:cons "typeRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input form-input))
   common-lisp:nil))
(common-lisp:deftype form-input-content-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype form-input-list ()
   '(trivial-types:proper-list form-input))
 (common-lisp:defun make-form-input-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list form-input))
   aws-sdk/generator/shape::members))
(common-lisp:deftype form-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (form-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-form-output-"))
   (content common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (form-name (common-lisp:error ":formname is required") :type
    (common-lisp:or form-name common-lisp:null))
   (type-name common-lisp:nil :type
    (common-lisp:or form-type-name common-lisp:null))
   (type-revision common-lisp:nil :type
    (common-lisp:or revision common-lisp:null)))
 (common-lisp:export (common-lisp:list 'form-output 'make-form-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input form-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input form-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'form-name))
      (common-lisp:list
       (common-lisp:cons "formName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "typeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-revision))
      (common-lisp:list
       (common-lisp:cons "typeRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input form-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype form-output-list ()
   '(trivial-types:proper-list form-output))
 (common-lisp:defun make-form-output-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list form-output))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (form-type-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-form-type-data-"))
   (created-at common-lisp:nil :type
    (common-lisp:or created-at common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or created-by common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (imports common-lisp:nil :type
    (common-lisp:or import-list common-lisp:null))
   (model common-lisp:nil :type (common-lisp:or model common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or form-type-name common-lisp:null))
   (origin-domain-id common-lisp:nil :type
    (common-lisp:or domain-id common-lisp:null))
   (origin-project-id common-lisp:nil :type
    (common-lisp:or project-id common-lisp:null))
   (owning-project-id common-lisp:nil :type
    (common-lisp:or project-id common-lisp:null))
   (revision (common-lisp:error ":revision is required") :type
    (common-lisp:or revision common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or form-type-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'form-type-data 'make-form-type-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input form-type-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input form-type-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'imports))
      (common-lisp:list
       (common-lisp:cons "imports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model))
      (common-lisp:list
       (common-lisp:cons "model"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-domain-id))
      (common-lisp:list
       (common-lisp:cons "originDomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-project-id))
      (common-lisp:list
       (common-lisp:cons "originProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input form-type-data))
   common-lisp:nil))
(common-lisp:deftype form-type-identifier () 'common-lisp:string)
(common-lisp:deftype form-type-name () 'common-lisp:string)
(common-lisp:deftype form-type-status () 'common-lisp:string)
(common-lisp:deftype forms () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype forms-input-map () 'common-lisp:hash-table)
 (common-lisp:defun make-forms-input-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype forms-output-map () 'common-lisp:hash-table)
 (common-lisp:defun make-forms-output-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-asset-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-asset-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or asset-identifier common-lisp:null))
   (revision common-lisp:nil :type (common-lisp:or revision common-lisp:null)))
 (common-lisp:export (common-lisp:list 'get-asset-input 'make-get-asset-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-asset-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-asset-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-asset-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-asset-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-asset-output-"))
   (created-at common-lisp:nil :type
    (common-lisp:or created-at common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or created-by common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (external-identifier common-lisp:nil :type
    (common-lisp:or external-identifier common-lisp:null))
   (first-revision-created-at common-lisp:nil :type
    (common-lisp:or created-at common-lisp:null))
   (first-revision-created-by common-lisp:nil :type
    (common-lisp:or created-by common-lisp:null))
   (forms-output (common-lisp:error ":formsoutput is required") :type
    (common-lisp:or form-output-list common-lisp:null))
   (glossary-terms common-lisp:nil :type
    (common-lisp:or glossary-terms common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or asset-id common-lisp:null))
   (listing common-lisp:nil :type
    (common-lisp:or asset-listing-details common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or asset-name common-lisp:null))
   (owning-project-id (common-lisp:error ":owningprojectid is required") :type
    (common-lisp:or project-id common-lisp:null))
   (read-only-forms-output common-lisp:nil :type
    (common-lisp:or form-output-list common-lisp:null))
   (revision (common-lisp:error ":revision is required") :type
    (common-lisp:or revision common-lisp:null))
   (type-identifier (common-lisp:error ":typeidentifier is required") :type
    (common-lisp:or asset-type-identifier common-lisp:null))
   (type-revision (common-lisp:error ":typerevision is required") :type
    (common-lisp:or revision common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-asset-output 'make-get-asset-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-asset-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-asset-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-identifier))
      (common-lisp:list
       (common-lisp:cons "externalIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'first-revision-created-at))
      (common-lisp:list
       (common-lisp:cons "firstRevisionCreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'first-revision-created-by))
      (common-lisp:list
       (common-lisp:cons "firstRevisionCreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forms-output))
      (common-lisp:list
       (common-lisp:cons "formsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listing))
      (common-lisp:list
       (common-lisp:cons "listing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-only-forms-output))
      (common-lisp:list
       (common-lisp:cons "readOnlyFormsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-identifier))
      (common-lisp:list
       (common-lisp:cons "typeIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-revision))
      (common-lisp:list
       (common-lisp:cons "typeRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-asset-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-asset-type-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-asset-type-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or asset-type-identifier common-lisp:null))
   (revision common-lisp:nil :type (common-lisp:or revision common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-asset-type-input 'make-get-asset-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-asset-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-asset-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-asset-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-asset-type-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-asset-type-output-"))
   (created-at common-lisp:nil :type
    (common-lisp:or created-at common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or created-by common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (forms-output (common-lisp:error ":formsoutput is required") :type
    (common-lisp:or forms-output-map common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or type-name common-lisp:null))
   (origin-domain-id common-lisp:nil :type
    (common-lisp:or domain-id common-lisp:null))
   (origin-project-id common-lisp:nil :type
    (common-lisp:or project-id common-lisp:null))
   (owning-project-id (common-lisp:error ":owningprojectid is required") :type
    (common-lisp:or project-id common-lisp:null))
   (revision (common-lisp:error ":revision is required") :type
    (common-lisp:or revision common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or updated-at common-lisp:null))
   (updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-asset-type-output 'make-get-asset-type-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-type-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forms-output))
      (common-lisp:list
       (common-lisp:cons "formsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-domain-id))
      (common-lisp:list
       (common-lisp:cons "originDomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-project-id))
      (common-lisp:list
       (common-lisp:cons "originProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-type-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-data-source-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-data-source-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or data-source-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-data-source-input 'make-get-data-source-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-data-source-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-data-source-output-"))
   (asset-forms-output common-lisp:nil :type
    (common-lisp:or form-output-list common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or data-source-configuration-output common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (enable-setting common-lisp:nil :type
    (common-lisp:or enable-setting common-lisp:null))
   (environment-id (common-lisp:error ":environmentid is required") :type
    (common-lisp:or environment-id common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or data-source-error-message common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or data-source-id common-lisp:null))
   (last-run-asset-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (last-run-at common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (last-run-error-message common-lisp:nil :type
    (common-lisp:or data-source-error-message common-lisp:null))
   (last-run-status common-lisp:nil :type
    (common-lisp:or data-source-run-status common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (project-id (common-lisp:error ":projectid is required") :type
    (common-lisp:or project-id common-lisp:null))
   (publish-on-import common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (recommendation common-lisp:nil :type
    (common-lisp:or recommendation-configuration common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or schedule-configuration common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or data-source-status common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or data-source-type common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-data-source-output 'make-get-data-source-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-forms-output))
      (common-lisp:list
       (common-lisp:cons "assetFormsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-setting))
      (common-lisp:list
       (common-lisp:cons "enableSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-run-asset-count))
      (common-lisp:list
       (common-lisp:cons "lastRunAssetCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-at))
      (common-lisp:list
       (common-lisp:cons "lastRunAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-run-error-message))
      (common-lisp:list
       (common-lisp:cons "lastRunErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-status))
      (common-lisp:list
       (common-lisp:cons "lastRunStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publish-on-import))
      (common-lisp:list
       (common-lisp:cons "publishOnImport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation))
      (common-lisp:list
       (common-lisp:cons "recommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-data-source-run-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-data-source-run-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or data-source-run-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-data-source-run-input
                    'make-get-data-source-run-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-run-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-run-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-run-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-data-source-run-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-data-source-run-output-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or date-time common-lisp:null))
   (data-source-configuration-snapshot common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (data-source-id (common-lisp:error ":datasourceid is required") :type
    (common-lisp:or data-source-id common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or data-source-error-message common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or data-source-run-id common-lisp:null))
   (project-id (common-lisp:error ":projectid is required") :type
    (common-lisp:or project-id common-lisp:null))
   (run-statistics-for-assets common-lisp:nil :type
    (common-lisp:or run-statistics-for-assets common-lisp:null))
   (started-at common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or data-source-run-status common-lisp:null))
   (stopped-at common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or data-source-run-type common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-data-source-run-output
                    'make-get-data-source-run-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-run-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-run-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-configuration-snapshot))
      (common-lisp:list
       (common-lisp:cons "dataSourceConfigurationSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'run-statistics-for-assets))
      (common-lisp:list
       (common-lisp:cons "runStatisticsForAssets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopped-at))
      (common-lisp:list
       (common-lisp:cons "stoppedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-run-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-domain-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-domain-input-"))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or domain-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-domain-input 'make-get-domain-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-domain-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-domain-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-domain-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-domain-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-domain-output-"))
   (arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or created-at common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (domain-execution-role
    (common-lisp:error ":domainexecutionrole is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (kms-key-identifier common-lisp:nil :type
    (common-lisp:or kms-key-arn common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or updated-at common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (portal-url common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (single-sign-on common-lisp:nil :type
    (common-lisp:or single-sign-on common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or domain-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-domain-output 'make-get-domain-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-domain-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-domain-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-execution-role))
      (common-lisp:list
       (common-lisp:cons "domainExecutionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-identifier))
      (common-lisp:list
       (common-lisp:cons "kmsKeyIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-url))
      (common-lisp:list
       (common-lisp:cons "portalUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'single-sign-on))
      (common-lisp:list
       (common-lisp:cons "singleSignOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-domain-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-environment-blueprint-configuration-input (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-environment-blueprint-configuration-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (environment-blueprint-identifier
    (common-lisp:error ":environmentblueprintidentifier is required") :type
    (common-lisp:or environment-blueprint-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-environment-blueprint-configuration-input
                    'make-get-environment-blueprint-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-blueprint-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-blueprint-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-blueprint-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-environment-blueprint-configuration-output (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-environment-blueprint-configuration-output-"))
   (created-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (enabled-regions common-lisp:nil :type
    (common-lisp:or enabled-region-list common-lisp:null))
   (environment-blueprint-id
    (common-lisp:error ":environmentblueprintid is required") :type
    (common-lisp:or environment-blueprint-id common-lisp:null))
   (manage-access-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (provisioning-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (regional-parameters common-lisp:nil :type
    (common-lisp:or regional-parameter-map common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-environment-blueprint-configuration-output
                    'make-get-environment-blueprint-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-blueprint-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-blueprint-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-regions))
      (common-lisp:list
       (common-lisp:cons "enabledRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "environmentBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manage-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "manageAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-role-arn))
      (common-lisp:list
       (common-lisp:cons "provisioningRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regional-parameters))
      (common-lisp:list
       (common-lisp:cons "regionalParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-blueprint-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-environment-blueprint-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-environment-blueprint-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or environment-blueprint-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-environment-blueprint-input
                    'make-get-environment-blueprint-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-blueprint-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-blueprint-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-blueprint-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-environment-blueprint-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-environment-blueprint-output-"))
   (created-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (deployment-properties common-lisp:nil :type
    (common-lisp:or deployment-properties common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (glossary-terms common-lisp:nil :type
    (common-lisp:or glossary-terms common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or environment-blueprint-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or environment-blueprint-name common-lisp:null))
   (provider (common-lisp:error ":provider is required") :type
    (common-lisp:or string common-lisp:null))
   (provisioning-properties
    (common-lisp:error ":provisioningproperties is required") :type
    (common-lisp:or provisioning-properties common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (user-parameters common-lisp:nil :type
    (common-lisp:or custom-parameter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-environment-blueprint-output
                    'make-get-environment-blueprint-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-blueprint-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-blueprint-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-properties))
      (common-lisp:list
       (common-lisp:cons "deploymentProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-properties))
      (common-lisp:list
       (common-lisp:cons "provisioningProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-parameters))
      (common-lisp:list
       (common-lisp:cons "userParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-blueprint-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-environment-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-environment-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or environment-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-environment-input 'make-get-environment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-environment-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-environment-output-"))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (aws-account-region common-lisp:nil :type
    (common-lisp:or aws-region common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or string common-lisp:null))
   (deployment-properties common-lisp:nil :type
    (common-lisp:or deployment-properties common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (environment-actions common-lisp:nil :type
    (common-lisp:or environment-action-list common-lisp:null))
   (environment-blueprint-id common-lisp:nil :type
    (common-lisp:or environment-blueprint-id common-lisp:null))
   (environment-profile-id
    (common-lisp:error ":environmentprofileid is required") :type
    (common-lisp:or environment-profile-id common-lisp:null))
   (glossary-terms common-lisp:nil :type
    (common-lisp:or glossary-terms common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or environment-id common-lisp:null))
   (last-deployment common-lisp:nil :type
    (common-lisp:or deployment common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or environment-name common-lisp:null))
   (project-id (common-lisp:error ":projectid is required") :type
    (common-lisp:or project-id common-lisp:null))
   (provider (common-lisp:error ":provider is required") :type
    (common-lisp:or string common-lisp:null))
   (provisioned-resources common-lisp:nil :type
    (common-lisp:or resource-list common-lisp:null))
   (provisioning-properties common-lisp:nil :type
    (common-lisp:or provisioning-properties common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or environment-status common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (user-parameters common-lisp:nil :type
    (common-lisp:or custom-parameter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-environment-output 'make-get-environment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-region))
      (common-lisp:list
       (common-lisp:cons "awsAccountRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-properties))
      (common-lisp:list
       (common-lisp:cons "deploymentProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-actions))
      (common-lisp:list
       (common-lisp:cons "environmentActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "environmentBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-profile-id))
      (common-lisp:list
       (common-lisp:cons "environmentProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-deployment))
      (common-lisp:list
       (common-lisp:cons "lastDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-resources))
      (common-lisp:list
       (common-lisp:cons "provisionedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-properties))
      (common-lisp:list
       (common-lisp:cons "provisioningProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-parameters))
      (common-lisp:list
       (common-lisp:cons "userParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-environment-profile-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-environment-profile-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or environment-profile-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-environment-profile-input
                    'make-get-environment-profile-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-profile-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-environment-profile-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-environment-profile-output-"))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (aws-account-region common-lisp:nil :type
    (common-lisp:or aws-region common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (environment-blueprint-id
    (common-lisp:error ":environmentblueprintid is required") :type
    (common-lisp:or environment-blueprint-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or environment-profile-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or environment-profile-name common-lisp:null))
   (project-id common-lisp:nil :type
    (common-lisp:or project-id common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (user-parameters common-lisp:nil :type
    (common-lisp:or custom-parameter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-environment-profile-output
                    'make-get-environment-profile-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-profile-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-profile-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-region))
      (common-lisp:list
       (common-lisp:cons "awsAccountRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "environmentBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-parameters))
      (common-lisp:list
       (common-lisp:cons "userParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-profile-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-form-type-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-form-type-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (form-type-identifier (common-lisp:error ":formtypeidentifier is required")
    :type (common-lisp:or form-type-identifier common-lisp:null))
   (revision common-lisp:nil :type (common-lisp:or revision common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-form-type-input 'make-get-form-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-form-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-form-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-form-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-form-type-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-form-type-output-"))
   (created-at common-lisp:nil :type
    (common-lisp:or created-at common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or created-by common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (imports common-lisp:nil :type
    (common-lisp:or import-list common-lisp:null))
   (model (common-lisp:error ":model is required") :type
    (common-lisp:or model common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or form-type-name common-lisp:null))
   (origin-domain-id common-lisp:nil :type
    (common-lisp:or domain-id common-lisp:null))
   (origin-project-id common-lisp:nil :type
    (common-lisp:or project-id common-lisp:null))
   (owning-project-id common-lisp:nil :type
    (common-lisp:or project-id common-lisp:null))
   (revision (common-lisp:error ":revision is required") :type
    (common-lisp:or revision common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or form-type-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-form-type-output 'make-get-form-type-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-form-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-form-type-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'imports))
      (common-lisp:list
       (common-lisp:cons "imports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model))
      (common-lisp:list
       (common-lisp:cons "model"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-domain-id))
      (common-lisp:list
       (common-lisp:cons "originDomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-project-id))
      (common-lisp:list
       (common-lisp:cons "originProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-form-type-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-glossary-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-glossary-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or glossary-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-glossary-input 'make-get-glossary-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-glossary-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-glossary-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-glossary-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-glossary-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-glossary-output-"))
   (created-at common-lisp:nil :type
    (common-lisp:or created-at common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or created-by common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or glossary-description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or glossary-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or glossary-name common-lisp:null))
   (owning-project-id (common-lisp:error ":owningprojectid is required") :type
    (common-lisp:or project-id common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or glossary-status common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or updated-at common-lisp:null))
   (updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-glossary-output 'make-get-glossary-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-glossary-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-glossary-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-glossary-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-glossary-term-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-glossary-term-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or glossary-term-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-glossary-term-input 'make-get-glossary-term-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-glossary-term-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-glossary-term-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-glossary-term-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-glossary-term-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-glossary-term-output-"))
   (created-at common-lisp:nil :type
    (common-lisp:or created-at common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or created-by common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (glossary-id (common-lisp:error ":glossaryid is required") :type
    (common-lisp:or glossary-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or glossary-term-id common-lisp:null))
   (long-description common-lisp:nil :type
    (common-lisp:or long-description common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or glossary-term-name common-lisp:null))
   (short-description common-lisp:nil :type
    (common-lisp:or short-description common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or glossary-term-status common-lisp:null))
   (term-relations common-lisp:nil :type
    (common-lisp:or term-relations common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or updated-at common-lisp:null))
   (updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-glossary-term-output 'make-get-glossary-term-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-glossary-term-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-glossary-term-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-id))
      (common-lisp:list
       (common-lisp:cons "glossaryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-description))
      (common-lisp:list
       (common-lisp:cons "longDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-description))
      (common-lisp:list
       (common-lisp:cons "shortDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term-relations))
      (common-lisp:list
       (common-lisp:cons "termRelations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-glossary-term-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-group-profile-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-group-profile-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (group-identifier (common-lisp:error ":groupidentifier is required") :type
    (common-lisp:or group-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-group-profile-input 'make-get-group-profile-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-group-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-group-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-group-profile-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-group-profile-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-group-profile-output-"))
   (domain-id common-lisp:nil :type
    (common-lisp:or domain-id common-lisp:null))
   (group-name common-lisp:nil :type
    (common-lisp:or group-profile-name common-lisp:null))
   (id common-lisp:nil :type
    (common-lisp:or group-profile-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or group-profile-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-group-profile-output 'make-get-group-profile-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-group-profile-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-group-profile-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "groupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-group-profile-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-iam-portal-login-url-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-iam-portal-login-url-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-iam-portal-login-url-input
                    'make-get-iam-portal-login-url-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-iam-portal-login-url-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-iam-portal-login-url-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-iam-portal-login-url-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-iam-portal-login-url-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-iam-portal-login-url-output-"))
   (auth-code-url common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (user-profile-id (common-lisp:error ":userprofileid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-iam-portal-login-url-output
                    'make-get-iam-portal-login-url-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-iam-portal-login-url-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-iam-portal-login-url-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-code-url))
      (common-lisp:list
       (common-lisp:cons "authCodeUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-profile-id))
      (common-lisp:list
       (common-lisp:cons "userProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-iam-portal-login-url-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-listing-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-listing-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or listing-id common-lisp:null))
   (listing-revision common-lisp:nil :type
    (common-lisp:or revision common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-listing-input 'make-get-listing-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-listing-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-listing-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-listing-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-listing-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-listing-output-"))
   (created-at common-lisp:nil :type
    (common-lisp:or created-at common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or created-by common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or listing-id common-lisp:null))
   (item common-lisp:nil :type (common-lisp:or listing-item common-lisp:null))
   (listing-revision (common-lisp:error ":listingrevision is required") :type
    (common-lisp:or revision common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or listing-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or listing-status common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or updated-at common-lisp:null))
   (updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-listing-output 'make-get-listing-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-listing-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-listing-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item))
      (common-lisp:list
       (common-lisp:cons "item"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listing-revision))
      (common-lisp:list
       (common-lisp:cons "listingRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-listing-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-project-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-project-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or project-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-project-input 'make-get-project-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-project-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-project-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-project-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-project-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-project-output-"))
   (created-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or created-by common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (failure-reasons common-lisp:nil :type
    (common-lisp:or failure-reasons common-lisp:null))
   (glossary-terms common-lisp:nil :type
    (common-lisp:or glossary-terms common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or project-id common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or project-name common-lisp:null))
   (project-status common-lisp:nil :type
    (common-lisp:or project-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-project-output 'make-get-project-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-project-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-project-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-status))
      (common-lisp:list
       (common-lisp:cons "projectStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-project-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-subscription-grant-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-subscription-grant-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or subscription-grant-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-subscription-grant-input
                    'make-get-subscription-grant-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-grant-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-grant-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-grant-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-subscription-grant-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-subscription-grant-output-"))
   (assets common-lisp:nil :type
    (common-lisp:or subscribed-assets common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-at common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or created-by common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (granted-entity (common-lisp:error ":grantedentity is required") :type
    (common-lisp:or granted-entity common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or subscription-grant-id common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or subscription-grant-overall-status common-lisp:null))
   (subscription-id common-lisp:nil :type
    (common-lisp:or subscription-id common-lisp:null))
   (subscription-target-id
    (common-lisp:error ":subscriptiontargetid is required") :type
    (common-lisp:or subscription-target-id common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or updated-at common-lisp:null))
   (updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-subscription-grant-output
                    'make-get-subscription-grant-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-grant-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-grant-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assets))
      (common-lisp:list
       (common-lisp:cons "assets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granted-entity))
      (common-lisp:list
       (common-lisp:cons "grantedEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-target-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionTargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-grant-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-subscription-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-subscription-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or subscription-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-subscription-input 'make-get-subscription-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-subscription-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-subscription-output-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-at common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or created-by common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or subscription-id common-lisp:null))
   (retain-permissions common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or subscription-status common-lisp:null))
   (subscribed-listing (common-lisp:error ":subscribedlisting is required")
    :type (common-lisp:or subscribed-listing common-lisp:null))
   (subscribed-principal (common-lisp:error ":subscribedprincipal is required")
    :type (common-lisp:or subscribed-principal common-lisp:null))
   (subscription-request-id common-lisp:nil :type
    (common-lisp:or subscription-request-id common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or updated-at common-lisp:null))
   (updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-subscription-output 'make-get-subscription-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-permissions))
      (common-lisp:list
       (common-lisp:cons "retainPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribed-listing))
      (common-lisp:list
       (common-lisp:cons "subscribedListing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscribed-principal))
      (common-lisp:list
       (common-lisp:cons "subscribedPrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-request-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-subscription-request-details-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-subscription-request-details-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or subscription-request-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-subscription-request-details-input
                    'make-get-subscription-request-details-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-request-details-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-request-details-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-request-details-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-subscription-request-details-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-subscription-request-details-output-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-at common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or created-by common-lisp:null))
   (decision-comment common-lisp:nil :type
    (common-lisp:or decision-comment common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or subscription-request-id common-lisp:null))
   (request-reason (common-lisp:error ":requestreason is required") :type
    (common-lisp:or request-reason common-lisp:null))
   (reviewer-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or subscription-request-status common-lisp:null))
   (subscribed-listings (common-lisp:error ":subscribedlistings is required")
    :type
    (common-lisp:or
     get-subscription-request-details-output-subscribed-listings-list
     common-lisp:null))
   (subscribed-principals
    (common-lisp:error ":subscribedprincipals is required") :type
    (common-lisp:or
     get-subscription-request-details-output-subscribed-principals-list
     common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or updated-at common-lisp:null))
   (updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-subscription-request-details-output
                    'make-get-subscription-request-details-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-request-details-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-request-details-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decision-comment))
      (common-lisp:list
       (common-lisp:cons "decisionComment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-reason))
      (common-lisp:list
       (common-lisp:cons "requestReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reviewer-id))
      (common-lisp:list
       (common-lisp:cons "reviewerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribed-listings))
      (common-lisp:list
       (common-lisp:cons "subscribedListings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscribed-principals))
      (common-lisp:list
       (common-lisp:cons "subscribedPrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-request-details-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype get-subscription-request-details-output-subscribed-listings-list
                      ()
   '(trivial-types:proper-list subscribed-listing))
 (common-lisp:defun make-get-subscription-request-details-output-subscribed-listings-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscribed-listing))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype get-subscription-request-details-output-subscribed-principals-list
                      ()
   '(trivial-types:proper-list subscribed-principal))
 (common-lisp:defun make-get-subscription-request-details-output-subscribed-principals-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscribed-principal))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-subscription-target-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-subscription-target-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (environment-identifier
    (common-lisp:error ":environmentidentifier is required") :type
    (common-lisp:or environment-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or subscription-target-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-subscription-target-input
                    'make-get-subscription-target-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-target-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-target-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-target-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-subscription-target-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-subscription-target-output-"))
   (applicable-asset-types
    (common-lisp:error ":applicableassettypes is required") :type
    (common-lisp:or applicable-asset-types common-lisp:null))
   (authorized-principals
    (common-lisp:error ":authorizedprincipals is required") :type
    (common-lisp:or authorized-principal-identifiers common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-at common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or created-by common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (environment-id (common-lisp:error ":environmentid is required") :type
    (common-lisp:or environment-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or subscription-target-id common-lisp:null))
   (manage-access-role (common-lisp:error ":manageaccessrole is required")
    :type (common-lisp:or string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or subscription-target-name common-lisp:null))
   (project-id (common-lisp:error ":projectid is required") :type
    (common-lisp:or project-id common-lisp:null))
   (provider (common-lisp:error ":provider is required") :type
    (common-lisp:or string common-lisp:null))
   (subscription-target-config
    (common-lisp:error ":subscriptiontargetconfig is required") :type
    (common-lisp:or subscription-target-forms common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or string common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or updated-at common-lisp:null))
   (updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-subscription-target-output
                    'make-get-subscription-target-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-target-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-target-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'applicable-asset-types))
      (common-lisp:list
       (common-lisp:cons "applicableAssetTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorized-principals))
      (common-lisp:list
       (common-lisp:cons "authorizedPrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manage-access-role))
      (common-lisp:list
       (common-lisp:cons "manageAccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-target-config))
      (common-lisp:list
       (common-lisp:cons "subscriptionTargetConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-target-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-user-profile-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-user-profile-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or user-profile-type common-lisp:null))
   (user-identifier (common-lisp:error ":useridentifier is required") :type
    (common-lisp:or user-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-user-profile-input 'make-get-user-profile-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-profile-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-user-profile-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-user-profile-output-"))
   (details common-lisp:nil :type
    (common-lisp:or user-profile-details common-lisp:null))
   (domain-id common-lisp:nil :type
    (common-lisp:or domain-id common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or user-profile-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or user-profile-status common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or user-profile-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-user-profile-output 'make-get-user-profile-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-profile-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-profile-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-profile-output))
   common-lisp:nil))
(common-lisp:deftype glossary-description () 'common-lisp:string)
(common-lisp:deftype glossary-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (glossary-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-glossary-item-"))
   (created-at common-lisp:nil :type
    (common-lisp:or created-at common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or created-by common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or glossary-description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or glossary-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or glossary-name common-lisp:null))
   (owning-project-id (common-lisp:error ":owningprojectid is required") :type
    (common-lisp:or project-id common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or glossary-status common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or updated-at common-lisp:null))
   (updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null)))
 (common-lisp:export (common-lisp:list 'glossary-item 'make-glossary-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input glossary-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input glossary-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input glossary-item))
   common-lisp:nil))
(common-lisp:deftype glossary-name () 'common-lisp:string)
(common-lisp:deftype glossary-status () 'common-lisp:string)
(common-lisp:deftype glossary-term-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (glossary-term-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-glossary-term-item-"))
   (created-at common-lisp:nil :type
    (common-lisp:or created-at common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or created-by common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (glossary-id (common-lisp:error ":glossaryid is required") :type
    (common-lisp:or glossary-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or glossary-term-id common-lisp:null))
   (long-description common-lisp:nil :type
    (common-lisp:or long-description common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or glossary-term-name common-lisp:null))
   (short-description common-lisp:nil :type
    (common-lisp:or short-description common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or glossary-term-status common-lisp:null))
   (term-relations common-lisp:nil :type
    (common-lisp:or term-relations common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or updated-at common-lisp:null))
   (updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'glossary-term-item 'make-glossary-term-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input glossary-term-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input glossary-term-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-id))
      (common-lisp:list
       (common-lisp:cons "glossaryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-description))
      (common-lisp:list
       (common-lisp:cons "longDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-description))
      (common-lisp:list
       (common-lisp:cons "shortDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term-relations))
      (common-lisp:list
       (common-lisp:cons "termRelations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input glossary-term-item))
   common-lisp:nil))
(common-lisp:deftype glossary-term-name () 'common-lisp:string)
(common-lisp:deftype glossary-term-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype glossary-terms ()
   '(trivial-types:proper-list glossary-term-id))
 (common-lisp:defun make-glossary-terms
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list glossary-term-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (glue-run-configuration-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-glue-run-configuration-input-"))
   (data-access-role common-lisp:nil :type
    (common-lisp:or glue-run-configuration-input-data-access-role-string
                    common-lisp:null))
   (relational-filter-configurations
    (common-lisp:error ":relationalfilterconfigurations is required") :type
    (common-lisp:or relational-filter-configurations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'glue-run-configuration-input
                    'make-glue-run-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          glue-run-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          glue-run-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-access-role))
      (common-lisp:list
       (common-lisp:cons "dataAccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-filter-configurations))
      (common-lisp:list
       (common-lisp:cons "relationalFilterConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          glue-run-configuration-input))
   common-lisp:nil))
(common-lisp:deftype glue-run-configuration-input-data-access-role-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (glue-run-configuration-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-glue-run-configuration-output-"))
   (account-id common-lisp:nil :type
    (common-lisp:or glue-run-configuration-output-account-id-string
                    common-lisp:null))
   (data-access-role common-lisp:nil :type
    (common-lisp:or glue-run-configuration-output-data-access-role-string
                    common-lisp:null))
   (region common-lisp:nil :type
    (common-lisp:or glue-run-configuration-output-region-string
                    common-lisp:null))
   (relational-filter-configurations
    (common-lisp:error ":relationalfilterconfigurations is required") :type
    (common-lisp:or relational-filter-configurations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'glue-run-configuration-output
                    'make-glue-run-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          glue-run-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          glue-run-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-access-role))
      (common-lisp:list
       (common-lisp:cons "dataAccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-filter-configurations))
      (common-lisp:list
       (common-lisp:cons "relationalFilterConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          glue-run-configuration-output))
   common-lisp:nil))
(common-lisp:deftype glue-run-configuration-output-account-id-string ()
  'common-lisp:string)
(common-lisp:deftype glue-run-configuration-output-data-access-role-string ()
  'common-lisp:string)
(common-lisp:deftype glue-run-configuration-output-region-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (granted-entity (:copier common-lisp:nil)
      (:conc-name "struct-shape-granted-entity-"))
   (listing common-lisp:nil :type
    (common-lisp:or listing-revision common-lisp:null)))
 (common-lisp:export (common-lisp:list 'granted-entity 'make-granted-entity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input granted-entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input granted-entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listing))
      (common-lisp:list
       (common-lisp:cons "listing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input granted-entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (granted-entity-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-granted-entity-input-"))
   (listing common-lisp:nil :type
    (common-lisp:or listing-revision-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'granted-entity-input 'make-granted-entity-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input granted-entity-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input granted-entity-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listing))
      (common-lisp:list
       (common-lisp:cons "listing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input granted-entity-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (group-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-group-details-"))
   (group-id (common-lisp:error ":groupid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'group-details 'make-group-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "groupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-details))
   common-lisp:nil))
(common-lisp:deftype group-identifier () 'common-lisp:string)
(common-lisp:deftype group-profile-id () 'common-lisp:string)
(common-lisp:deftype group-profile-name () 'common-lisp:string)
(common-lisp:deftype group-profile-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype group-profile-summaries ()
   '(trivial-types:proper-list group-profile-summary))
 (common-lisp:defun make-group-profile-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group-profile-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (group-profile-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-group-profile-summary-"))
   (domain-id common-lisp:nil :type
    (common-lisp:or domain-id common-lisp:null))
   (group-name common-lisp:nil :type
    (common-lisp:or group-profile-name common-lisp:null))
   (id common-lisp:nil :type
    (common-lisp:or group-profile-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or group-profile-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'group-profile-summary 'make-group-profile-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          group-profile-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          group-profile-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "groupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          group-profile-summary))
   common-lisp:nil))
(common-lisp:deftype group-search-text () 'common-lisp:string)
(common-lisp:deftype group-search-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (iam-user-profile-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-iam-user-profile-details-"))
   (arn common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'iam-user-profile-details 'make-iam-user-profile-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          iam-user-profile-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          iam-user-profile-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          iam-user-profile-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import (:copier common-lisp:nil) (:conc-name "struct-shape-import-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or form-type-name common-lisp:null))
   (revision (common-lisp:error ":revision is required") :type
    (common-lisp:or revision common-lisp:null)))
 (common-lisp:export (common-lisp:list 'import 'make-import))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype import-list () '(trivial-types:proper-list import))
 (common-lisp:defun make-import-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list import))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (datazone-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype inventory-search-scope () 'common-lisp:string)
(common-lisp:deftype kms-key-arn () 'common-lisp:string)
(common-lisp:deftype last-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-asset-revisions-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-asset-revisions-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or asset-identifier common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-asset-revisions-input
                    'make-list-asset-revisions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-revisions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-revisions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-revisions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-asset-revisions-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-asset-revisions-output-"))
   (items common-lisp:nil :type
    (common-lisp:or asset-revisions common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-asset-revisions-output
                    'make-list-asset-revisions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-revisions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-revisions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-revisions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-source-run-activities-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-source-run-activities-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or data-source-run-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or data-asset-activity-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-source-run-activities-input
                    'make-list-data-source-run-activities-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-run-activities-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-run-activities-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-run-activities-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-source-run-activities-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-source-run-activities-output-"))
   (items (common-lisp:error ":items is required") :type
    (common-lisp:or data-source-run-activities common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-source-run-activities-output
                    'make-list-data-source-run-activities-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-run-activities-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-run-activities-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-run-activities-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-source-runs-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-source-runs-input-"))
   (data-source-identifier
    (common-lisp:error ":datasourceidentifier is required") :type
    (common-lisp:or data-source-id common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or data-source-run-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-source-runs-input
                    'make-list-data-source-runs-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-runs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-runs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-runs-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-source-runs-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-source-runs-output-"))
   (items (common-lisp:error ":items is required") :type
    (common-lisp:or data-source-run-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-source-runs-output
                    'make-list-data-source-runs-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-runs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-runs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-runs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-sources-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-sources-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (environment-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (project-identifier (common-lisp:error ":projectidentifier is required")
    :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or data-source-status common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or data-source-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-sources-input 'make-list-data-sources-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-sources-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-sources-output-"))
   (items (common-lisp:error ":items is required") :type
    (common-lisp:or data-source-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-sources-output 'make-list-data-sources-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-domains-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-domains-input-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-for-list-domains common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or domain-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-domains-input 'make-list-domains-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-domains-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-domains-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-domains-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-domains-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-domains-output-"))
   (items (common-lisp:error ":items is required") :type
    (common-lisp:or domain-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-domains-output 'make-list-domains-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-domains-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-domains-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-domains-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-environment-blueprint-configurations-input (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-environment-blueprint-configurations-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-environment-blueprint-configurations-input
                    'make-list-environment-blueprint-configurations-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-blueprint-configurations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-blueprint-configurations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-blueprint-configurations-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-environment-blueprint-configurations-output
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-environment-blueprint-configurations-output-"))
   (items common-lisp:nil :type
    (common-lisp:or environment-blueprint-configurations common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-environment-blueprint-configurations-output
                    'make-list-environment-blueprint-configurations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-blueprint-configurations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-blueprint-configurations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-blueprint-configurations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-environment-blueprints-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-environment-blueprints-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (managed common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or environment-blueprint-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-environment-blueprints-input
                    'make-list-environment-blueprints-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-blueprints-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-blueprints-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-blueprints-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-environment-blueprints-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-environment-blueprints-output-"))
   (items (common-lisp:error ":items is required") :type
    (common-lisp:or environment-blueprint-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-environment-blueprints-output
                    'make-list-environment-blueprints-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-blueprints-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-blueprints-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-blueprints-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-environment-profiles-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-environment-profiles-input-"))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (aws-account-region common-lisp:nil :type
    (common-lisp:or aws-region common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (environment-blueprint-identifier common-lisp:nil :type
    (common-lisp:or environment-blueprint-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or environment-profile-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (project-identifier common-lisp:nil :type
    (common-lisp:or project-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-environment-profiles-input
                    'make-list-environment-profiles-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-profiles-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-profiles-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-profiles-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-environment-profiles-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-environment-profiles-output-"))
   (items (common-lisp:error ":items is required") :type
    (common-lisp:or environment-profile-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-environment-profiles-output
                    'make-list-environment-profiles-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-profiles-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-profiles-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-profiles-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-environments-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-environments-input-"))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (aws-account-region common-lisp:nil :type
    (common-lisp:or aws-region common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (environment-blueprint-identifier common-lisp:nil :type
    (common-lisp:or environment-blueprint-id common-lisp:null))
   (environment-profile-identifier common-lisp:nil :type
    (common-lisp:or environment-profile-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (project-identifier (common-lisp:error ":projectidentifier is required")
    :type (common-lisp:or project-id common-lisp:null))
   (provider common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or environment-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-environments-input 'make-list-environments-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-environments-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-environments-output-"))
   (items (common-lisp:error ":items is required") :type
    (common-lisp:or environment-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-environments-output 'make-list-environments-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-notifications-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-notifications-input-"))
   (after-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (before-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (subjects common-lisp:nil :type
    (common-lisp:or notification-subjects common-lisp:null))
   (task-status common-lisp:nil :type
    (common-lisp:or task-status common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or notification-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-notifications-input 'make-list-notifications-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-notifications-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-notifications-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (notifications common-lisp:nil :type
    (common-lisp:or notifications-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-notifications-output
                    'make-list-notifications-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notifications))
      (common-lisp:list
       (common-lisp:cons "notifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-project-memberships-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-project-memberships-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (project-identifier (common-lisp:error ":projectidentifier is required")
    :type (common-lisp:or project-id common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or sort-field-project common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-project-memberships-input
                    'make-list-project-memberships-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-project-memberships-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-project-memberships-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-project-memberships-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-project-memberships-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-project-memberships-output-"))
   (members (common-lisp:error ":members is required") :type
    (common-lisp:or project-members common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-project-memberships-output
                    'make-list-project-memberships-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-project-memberships-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-project-memberships-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-project-memberships-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-projects-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-projects-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (group-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or project-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (user-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-projects-input 'make-list-projects-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-projects-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-projects-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-projects-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-projects-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-projects-output-"))
   (items common-lisp:nil :type
    (common-lisp:or project-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-projects-output 'make-list-projects-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-projects-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-projects-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-projects-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-subscription-grants-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-subscription-grants-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (environment-id common-lisp:nil :type
    (common-lisp:or environment-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (sort-by common-lisp:nil :type (common-lisp:or sort-key common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (subscribed-listing-id common-lisp:nil :type
    (common-lisp:or listing-id common-lisp:null))
   (subscription-id common-lisp:nil :type
    (common-lisp:or subscription-id common-lisp:null))
   (subscription-target-id common-lisp:nil :type
    (common-lisp:or subscription-target-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-subscription-grants-input
                    'make-list-subscription-grants-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-grants-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-grants-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-grants-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-subscription-grants-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-subscription-grants-output-"))
   (items (common-lisp:error ":items is required") :type
    (common-lisp:or subscription-grants common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-subscription-grants-output
                    'make-list-subscription-grants-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-grants-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-grants-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-grants-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-subscription-requests-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-subscription-requests-input-"))
   (approver-project-id common-lisp:nil :type
    (common-lisp:or project-id common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (owning-project-id common-lisp:nil :type
    (common-lisp:or project-id common-lisp:null))
   (sort-by common-lisp:nil :type (common-lisp:or sort-key common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or subscription-request-status common-lisp:null))
   (subscribed-listing-id common-lisp:nil :type
    (common-lisp:or listing-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-subscription-requests-input
                    'make-list-subscription-requests-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-requests-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-requests-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-requests-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-subscription-requests-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-subscription-requests-output-"))
   (items (common-lisp:error ":items is required") :type
    (common-lisp:or subscription-requests common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-subscription-requests-output
                    'make-list-subscription-requests-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-requests-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-requests-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-requests-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-subscription-targets-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-subscription-targets-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (environment-identifier
    (common-lisp:error ":environmentidentifier is required") :type
    (common-lisp:or environment-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (sort-by common-lisp:nil :type (common-lisp:or sort-key common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-subscription-targets-input
                    'make-list-subscription-targets-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-targets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-targets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-targets-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-subscription-targets-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-subscription-targets-output-"))
   (items (common-lisp:error ":items is required") :type
    (common-lisp:or subscription-targets common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-subscription-targets-output
                    'make-list-subscription-targets-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-targets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-targets-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-targets-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-subscriptions-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-subscriptions-input-"))
   (approver-project-id common-lisp:nil :type
    (common-lisp:or project-id common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (owning-project-id common-lisp:nil :type
    (common-lisp:or project-id common-lisp:null))
   (sort-by common-lisp:nil :type (common-lisp:or sort-key common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or subscription-status common-lisp:null))
   (subscribed-listing-id common-lisp:nil :type
    (common-lisp:or listing-id common-lisp:null))
   (subscription-request-identifier common-lisp:nil :type
    (common-lisp:or subscription-request-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-subscriptions-input 'make-list-subscriptions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-subscriptions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-subscriptions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-subscriptions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-subscriptions-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-subscriptions-output-"))
   (items (common-lisp:error ":items is required") :type
    (common-lisp:or subscriptions common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-subscriptions-output
                    'make-list-subscriptions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-subscriptions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-subscriptions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-subscriptions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype listing-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (listing-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-listing-item-"))
   (asset-listing common-lisp:nil :type
    (common-lisp:or asset-listing common-lisp:null)))
 (common-lisp:export (common-lisp:list 'listing-item 'make-listing-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listing-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listing-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-listing))
      (common-lisp:list
       (common-lisp:cons "assetListing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listing-item))
   common-lisp:nil))
(common-lisp:deftype listing-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (listing-revision (:copier common-lisp:nil)
      (:conc-name "struct-shape-listing-revision-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or listing-id common-lisp:null))
   (revision (common-lisp:error ":revision is required") :type
    (common-lisp:or revision common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'listing-revision 'make-listing-revision))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listing-revision))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listing-revision))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listing-revision))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (listing-revision-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-listing-revision-input-"))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or listing-id common-lisp:null))
   (revision (common-lisp:error ":revision is required") :type
    (common-lisp:or revision common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'listing-revision-input 'make-listing-revision-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          listing-revision-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          listing-revision-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          listing-revision-input))
   common-lisp:nil))
(common-lisp:deftype listing-status () 'common-lisp:string)
(common-lisp:deftype long-description () 'common-lisp:string)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype max-results-for-list-domains () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (member (:copier common-lisp:nil) (:conc-name "struct-shape-member-"))
   (group-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (user-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'member 'make-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-identifier))
      (common-lisp:list
       (common-lisp:cons "groupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-identifier))
      (common-lisp:list
       (common-lisp:cons "userIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (member-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-member-details-"))
   (group common-lisp:nil :type
    (common-lisp:or group-details common-lisp:null))
   (user common-lisp:nil :type (common-lisp:or user-details common-lisp:null)))
 (common-lisp:export (common-lisp:list 'member-details 'make-member-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "user"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member-details))
   common-lisp:nil))
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype metadata-map () 'common-lisp:hash-table)
 (common-lisp:defun make-metadata-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (model (:copier common-lisp:nil) (:conc-name "struct-shape-model-"))
   (smithy common-lisp:nil :type (common-lisp:or smithy common-lisp:null)))
 (common-lisp:export (common-lisp:list 'model 'make-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'smithy))
      (common-lisp:list
       (common-lisp:cons "smithy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model))
   common-lisp:nil))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (notification-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-notification-output-"))
   (action-link (common-lisp:error ":actionlink is required") :type
    (common-lisp:or action-link common-lisp:null))
   (creation-timestamp (common-lisp:error ":creationtimestamp is required")
    :type (common-lisp:or timestamp common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or task-id common-lisp:null))
   (last-updated-timestamp
    (common-lisp:error ":lastupdatedtimestamp is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or message common-lisp:null))
   (metadata common-lisp:nil :type
    (common-lisp:or metadata-map common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or task-status common-lisp:null))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or title common-lisp:null))
   (topic (common-lisp:error ":topic is required") :type
    (common-lisp:or topic common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or notification-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'notification-output 'make-notification-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input notification-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input notification-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-link))
      (common-lisp:list
       (common-lisp:cons "actionLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "creationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-identifier))
      (common-lisp:list
       (common-lisp:cons "domainIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic))
      (common-lisp:list
       (common-lisp:cons "topic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input notification-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (notification-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-notification-resource-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or string common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or notification-resource-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'notification-resource 'make-notification-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-resource))
   common-lisp:nil))
(common-lisp:deftype notification-resource-type () 'common-lisp:string)
(common-lisp:deftype notification-role () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype notification-subjects ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-notification-subjects
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype notification-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype notifications-list ()
   '(trivial-types:proper-list notification-output))
 (common-lisp:defun make-notifications-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list notification-output))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype prediction-choices ()
   '(trivial-types:proper-list integer))
 (common-lisp:defun make-prediction-choices
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list integer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (prediction-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-prediction-configuration-"))
   (business-name-generation common-lisp:nil :type
    (common-lisp:or business-name-generation-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'prediction-configuration 'make-prediction-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          prediction-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          prediction-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'business-name-generation))
      (common-lisp:list
       (common-lisp:cons "businessNameGeneration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          prediction-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (project-deletion-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-project-deletion-error-"))
   (code common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'project-deletion-error 'make-project-deletion-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          project-deletion-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          project-deletion-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          project-deletion-error))
   common-lisp:nil))
(common-lisp:deftype project-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (project-member (:copier common-lisp:nil)
      (:conc-name "struct-shape-project-member-"))
   (designation (common-lisp:error ":designation is required") :type
    (common-lisp:or user-designation common-lisp:null))
   (member-details (common-lisp:error ":memberdetails is required") :type
    (common-lisp:or member-details common-lisp:null)))
 (common-lisp:export (common-lisp:list 'project-member 'make-project-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'designation))
      (common-lisp:list
       (common-lisp:cons "designation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-details))
      (common-lisp:list
       (common-lisp:cons "memberDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype project-members ()
   '(trivial-types:proper-list project-member))
 (common-lisp:defun make-project-members
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list project-member))
   aws-sdk/generator/shape::members))
(common-lisp:deftype project-name () 'common-lisp:string)
(common-lisp:deftype project-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype project-summaries ()
   '(trivial-types:proper-list project-summary))
 (common-lisp:defun make-project-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list project-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (project-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-project-summary-"))
   (created-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or created-by common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (failure-reasons common-lisp:nil :type
    (common-lisp:or failure-reasons common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or project-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or project-name common-lisp:null))
   (project-status common-lisp:nil :type
    (common-lisp:or project-status common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null)))
 (common-lisp:export (common-lisp:list 'project-summary 'make-project-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-status))
      (common-lisp:list
       (common-lisp:cons "projectStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (provisioning-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-provisioning-properties-"))
   (cloud-formation common-lisp:nil :type
    (common-lisp:or cloud-formation-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'provisioning-properties 'make-provisioning-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-formation))
      (common-lisp:list
       (common-lisp:cons "cloudFormation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-environment-blueprint-configuration-input (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-put-environment-blueprint-configuration-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (enabled-regions (common-lisp:error ":enabledregions is required") :type
    (common-lisp:or enabled-region-list common-lisp:null))
   (environment-blueprint-identifier
    (common-lisp:error ":environmentblueprintidentifier is required") :type
    (common-lisp:or environment-blueprint-id common-lisp:null))
   (manage-access-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (provisioning-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (regional-parameters common-lisp:nil :type
    (common-lisp:or regional-parameter-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-environment-blueprint-configuration-input
                    'make-put-environment-blueprint-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-environment-blueprint-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-environment-blueprint-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-regions))
      (common-lisp:list
       (common-lisp:cons "enabledRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manage-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "manageAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-role-arn))
      (common-lisp:list
       (common-lisp:cons "provisioningRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regional-parameters))
      (common-lisp:list
       (common-lisp:cons "regionalParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-environment-blueprint-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-environment-blueprint-configuration-output (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-put-environment-blueprint-configuration-output-"))
   (created-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (enabled-regions common-lisp:nil :type
    (common-lisp:or enabled-region-list common-lisp:null))
   (environment-blueprint-id
    (common-lisp:error ":environmentblueprintid is required") :type
    (common-lisp:or environment-blueprint-id common-lisp:null))
   (manage-access-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (provisioning-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (regional-parameters common-lisp:nil :type
    (common-lisp:or regional-parameter-map common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-environment-blueprint-configuration-output
                    'make-put-environment-blueprint-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-environment-blueprint-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-environment-blueprint-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-regions))
      (common-lisp:list
       (common-lisp:cons "enabledRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "environmentBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manage-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "manageAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-role-arn))
      (common-lisp:list
       (common-lisp:cons "provisioningRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regional-parameters))
      (common-lisp:list
       (common-lisp:cons "regionalParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-environment-blueprint-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-configuration-"))
   (enable-business-name-generation common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-configuration
                    'make-recommendation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-business-name-generation))
      (common-lisp:list
       (common-lisp:cons "enableBusinessNameGeneration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (redshift-cluster-storage (:copier common-lisp:nil)
      (:conc-name "struct-shape-redshift-cluster-storage-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or redshift-cluster-storage-cluster-name-string
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'redshift-cluster-storage 'make-redshift-cluster-storage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redshift-cluster-storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redshift-cluster-storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redshift-cluster-storage))
   common-lisp:nil))
(common-lisp:deftype redshift-cluster-storage-cluster-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (redshift-credential-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-redshift-credential-configuration-"))
   (secret-manager-arn (common-lisp:error ":secretmanagerarn is required")
    :type
    (common-lisp:or redshift-credential-configuration-secret-manager-arn-string
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'redshift-credential-configuration
                    'make-redshift-credential-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redshift-credential-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redshift-credential-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-manager-arn))
      (common-lisp:list
       (common-lisp:cons "secretManagerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redshift-credential-configuration))
   common-lisp:nil))
(common-lisp:deftype redshift-credential-configuration-secret-manager-arn-string
                     ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (redshift-run-configuration-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-redshift-run-configuration-input-"))
   (data-access-role common-lisp:nil :type
    (common-lisp:or redshift-run-configuration-input-data-access-role-string
                    common-lisp:null))
   (redshift-credential-configuration
    (common-lisp:error ":redshiftcredentialconfiguration is required") :type
    (common-lisp:or redshift-credential-configuration common-lisp:null))
   (redshift-storage (common-lisp:error ":redshiftstorage is required") :type
    (common-lisp:or redshift-storage common-lisp:null))
   (relational-filter-configurations
    (common-lisp:error ":relationalfilterconfigurations is required") :type
    (common-lisp:or relational-filter-configurations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'redshift-run-configuration-input
                    'make-redshift-run-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redshift-run-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redshift-run-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-access-role))
      (common-lisp:list
       (common-lisp:cons "dataAccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-credential-configuration))
      (common-lisp:list
       (common-lisp:cons "redshiftCredentialConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift-storage))
      (common-lisp:list
       (common-lisp:cons "redshiftStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-filter-configurations))
      (common-lisp:list
       (common-lisp:cons "relationalFilterConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redshift-run-configuration-input))
   common-lisp:nil))
(common-lisp:deftype redshift-run-configuration-input-data-access-role-string
                     ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (redshift-run-configuration-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-redshift-run-configuration-output-"))
   (account-id common-lisp:nil :type
    (common-lisp:or redshift-run-configuration-output-account-id-string
                    common-lisp:null))
   (data-access-role common-lisp:nil :type
    (common-lisp:or redshift-run-configuration-output-data-access-role-string
                    common-lisp:null))
   (redshift-credential-configuration
    (common-lisp:error ":redshiftcredentialconfiguration is required") :type
    (common-lisp:or redshift-credential-configuration common-lisp:null))
   (redshift-storage (common-lisp:error ":redshiftstorage is required") :type
    (common-lisp:or redshift-storage common-lisp:null))
   (region common-lisp:nil :type
    (common-lisp:or redshift-run-configuration-output-region-string
                    common-lisp:null))
   (relational-filter-configurations
    (common-lisp:error ":relationalfilterconfigurations is required") :type
    (common-lisp:or relational-filter-configurations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'redshift-run-configuration-output
                    'make-redshift-run-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redshift-run-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redshift-run-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-access-role))
      (common-lisp:list
       (common-lisp:cons "dataAccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-credential-configuration))
      (common-lisp:list
       (common-lisp:cons "redshiftCredentialConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift-storage))
      (common-lisp:list
       (common-lisp:cons "redshiftStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-filter-configurations))
      (common-lisp:list
       (common-lisp:cons "relationalFilterConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redshift-run-configuration-output))
   common-lisp:nil))
(common-lisp:deftype redshift-run-configuration-output-account-id-string ()
  'common-lisp:string)
(common-lisp:deftype redshift-run-configuration-output-data-access-role-string
                     ()
  'common-lisp:string)
(common-lisp:deftype redshift-run-configuration-output-region-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (redshift-serverless-storage (:copier common-lisp:nil)
      (:conc-name "struct-shape-redshift-serverless-storage-"))
   (workgroup-name (common-lisp:error ":workgroupname is required") :type
    (common-lisp:or redshift-serverless-storage-workgroup-name-string
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'redshift-serverless-storage
                    'make-redshift-serverless-storage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redshift-serverless-storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redshift-serverless-storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "workgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redshift-serverless-storage))
   common-lisp:nil))
(common-lisp:deftype redshift-serverless-storage-workgroup-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (redshift-storage (:copier common-lisp:nil)
      (:conc-name "struct-shape-redshift-storage-"))
   (redshift-cluster-source common-lisp:nil :type
    (common-lisp:or redshift-cluster-storage common-lisp:null))
   (redshift-serverless-source common-lisp:nil :type
    (common-lisp:or redshift-serverless-storage common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'redshift-storage 'make-redshift-storage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input redshift-storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input redshift-storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-cluster-source))
      (common-lisp:list
       (common-lisp:cons "redshiftClusterSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-serverless-source))
      (common-lisp:list
       (common-lisp:cons "redshiftServerlessSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input redshift-storage))
   common-lisp:nil))
(common-lisp:deftype region-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype regional-parameter () 'common-lisp:hash-table)
 (common-lisp:defun make-regional-parameter
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype regional-parameter-map () 'common-lisp:hash-table)
 (common-lisp:defun make-regional-parameter-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (reject-choice (:copier common-lisp:nil)
      (:conc-name "struct-shape-reject-choice-"))
   (prediction-choices common-lisp:nil :type
    (common-lisp:or prediction-choices common-lisp:null))
   (prediction-target common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'reject-choice 'make-reject-choice))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reject-choice))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reject-choice))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prediction-choices))
      (common-lisp:list
       (common-lisp:cons "predictionChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prediction-target))
      (common-lisp:list
       (common-lisp:cons "predictionTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reject-choice))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reject-choices ()
   '(trivial-types:proper-list reject-choice))
 (common-lisp:defun make-reject-choices
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reject-choice))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (reject-predictions-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-reject-predictions-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or asset-identifier common-lisp:null))
   (reject-choices common-lisp:nil :type
    (common-lisp:or reject-choices common-lisp:null))
   (reject-rule common-lisp:nil :type
    (common-lisp:or reject-rule common-lisp:null))
   (revision common-lisp:nil :type (common-lisp:or revision common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reject-predictions-input 'make-reject-predictions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-predictions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-predictions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reject-choices))
      (common-lisp:list
       (common-lisp:cons "rejectChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reject-rule))
      (common-lisp:list
       (common-lisp:cons "rejectRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-predictions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reject-predictions-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-reject-predictions-output-"))
   (asset-id (common-lisp:error ":assetid is required") :type
    (common-lisp:or asset-id common-lisp:null))
   (asset-revision (common-lisp:error ":assetrevision is required") :type
    (common-lisp:or revision common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reject-predictions-output
                    'make-reject-predictions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-predictions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-predictions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-revision))
      (common-lisp:list
       (common-lisp:cons "assetRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-predictions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reject-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-reject-rule-"))
   (rule common-lisp:nil :type
    (common-lisp:or reject-rule-behavior common-lisp:null))
   (threshold common-lisp:nil :type (common-lisp:or float common-lisp:null)))
 (common-lisp:export (common-lisp:list 'reject-rule 'make-reject-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reject-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reject-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reject-rule))
   common-lisp:nil))
(common-lisp:deftype reject-rule-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (reject-subscription-request-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-reject-subscription-request-input-"))
   (decision-comment common-lisp:nil :type
    (common-lisp:or decision-comment common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or subscription-request-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reject-subscription-request-input
                    'make-reject-subscription-request-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-subscription-request-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-subscription-request-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decision-comment))
      (common-lisp:list
       (common-lisp:cons "decisionComment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-subscription-request-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reject-subscription-request-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-reject-subscription-request-output-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-at common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or created-by common-lisp:null))
   (decision-comment common-lisp:nil :type
    (common-lisp:or decision-comment common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or subscription-request-id common-lisp:null))
   (request-reason (common-lisp:error ":requestreason is required") :type
    (common-lisp:or request-reason common-lisp:null))
   (reviewer-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or subscription-request-status common-lisp:null))
   (subscribed-listings (common-lisp:error ":subscribedlistings is required")
    :type
    (common-lisp:or reject-subscription-request-output-subscribed-listings-list
                    common-lisp:null))
   (subscribed-principals
    (common-lisp:error ":subscribedprincipals is required") :type
    (common-lisp:or
     reject-subscription-request-output-subscribed-principals-list
     common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or updated-at common-lisp:null))
   (updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reject-subscription-request-output
                    'make-reject-subscription-request-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-subscription-request-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-subscription-request-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decision-comment))
      (common-lisp:list
       (common-lisp:cons "decisionComment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-reason))
      (common-lisp:list
       (common-lisp:cons "requestReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reviewer-id))
      (common-lisp:list
       (common-lisp:cons "reviewerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribed-listings))
      (common-lisp:list
       (common-lisp:cons "subscribedListings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscribed-principals))
      (common-lisp:list
       (common-lisp:cons "subscribedPrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-subscription-request-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reject-subscription-request-output-subscribed-listings-list
                      ()
   '(trivial-types:proper-list subscribed-listing))
 (common-lisp:defun make-reject-subscription-request-output-subscribed-listings-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscribed-listing))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype reject-subscription-request-output-subscribed-principals-list
                      ()
   '(trivial-types:proper-list subscribed-principal))
 (common-lisp:defun make-reject-subscription-request-output-subscribed-principals-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscribed-principal))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (relational-filter-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-relational-filter-configuration-"))
   (database-name (common-lisp:error ":databasename is required") :type
    (common-lisp:or relational-filter-configuration-database-name-string
                    common-lisp:null))
   (filter-expressions common-lisp:nil :type
    (common-lisp:or filter-expressions common-lisp:null))
   (schema-name common-lisp:nil :type
    (common-lisp:or relational-filter-configuration-schema-name-string
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'relational-filter-configuration
                    'make-relational-filter-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          relational-filter-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          relational-filter-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "databaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-expressions))
      (common-lisp:list
       (common-lisp:cons "filterExpressions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "schemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          relational-filter-configuration))
   common-lisp:nil))
(common-lisp:deftype relational-filter-configuration-database-name-string ()
  'common-lisp:string)
(common-lisp:deftype relational-filter-configuration-schema-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype relational-filter-configurations ()
   '(trivial-types:proper-list relational-filter-configuration))
 (common-lisp:defun make-relational-filter-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            relational-filter-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype request-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resource (:copier common-lisp:nil) (:conc-name "struct-shape-resource-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (provider common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or string common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource 'make-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-list () '(trivial-types:proper-list resource))
 (common-lisp:defun make-resource-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (datazone-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype revision () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (revoke-subscription-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-revoke-subscription-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or subscription-id common-lisp:null))
   (retain-permissions common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'revoke-subscription-input
                    'make-revoke-subscription-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-subscription-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-subscription-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-permissions))
      (common-lisp:list
       (common-lisp:cons "retainPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-subscription-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (revoke-subscription-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-revoke-subscription-output-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-at common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or created-by common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or subscription-id common-lisp:null))
   (retain-permissions common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or subscription-status common-lisp:null))
   (subscribed-listing (common-lisp:error ":subscribedlisting is required")
    :type (common-lisp:or subscribed-listing common-lisp:null))
   (subscribed-principal (common-lisp:error ":subscribedprincipal is required")
    :type (common-lisp:or subscribed-principal common-lisp:null))
   (subscription-request-id common-lisp:nil :type
    (common-lisp:or subscription-request-id common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or updated-at common-lisp:null))
   (updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'revoke-subscription-output
                    'make-revoke-subscription-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-subscription-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-subscription-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-permissions))
      (common-lisp:list
       (common-lisp:cons "retainPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribed-listing))
      (common-lisp:list
       (common-lisp:cons "subscribedListing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscribed-principal))
      (common-lisp:list
       (common-lisp:cons "subscribedPrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-request-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-subscription-output))
   common-lisp:nil))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (run-statistics-for-assets (:copier common-lisp:nil)
      (:conc-name "struct-shape-run-statistics-for-assets-"))
   (added common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (failed common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (skipped common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (unchanged common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (updated common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'run-statistics-for-assets
                    'make-run-statistics-for-assets))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          run-statistics-for-assets))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          run-statistics-for-assets))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'added))
      (common-lisp:list
       (common-lisp:cons "added"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skipped))
      (common-lisp:list
       (common-lisp:cons "skipped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unchanged))
      (common-lisp:list
       (common-lisp:cons "unchanged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated))
      (common-lisp:list
       (common-lisp:cons "updated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          run-statistics-for-assets))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (schedule-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-schedule-configuration-"))
   (schedule common-lisp:nil :type
    (common-lisp:or cron-string common-lisp:null))
   (timezone common-lisp:nil :type (common-lisp:or timezone common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'schedule-configuration 'make-schedule-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schedule-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schedule-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schedule-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-group-profiles-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-group-profiles-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (group-type (common-lisp:error ":grouptype is required") :type
    (common-lisp:or group-search-type common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (search-text common-lisp:nil :type
    (common-lisp:or group-search-text common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-group-profiles-input
                    'make-search-group-profiles-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-group-profiles-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-group-profiles-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-type))
      (common-lisp:list
       (common-lisp:cons "groupType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-text))
      (common-lisp:list
       (common-lisp:cons "searchText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-group-profiles-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-group-profiles-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-group-profiles-output-"))
   (items common-lisp:nil :type
    (common-lisp:or group-profile-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-group-profiles-output
                    'make-search-group-profiles-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-group-profiles-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-group-profiles-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-group-profiles-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-in-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-in-item-"))
   (attribute (common-lisp:error ":attribute is required") :type
    (common-lisp:or attribute common-lisp:null)))
 (common-lisp:export (common-lisp:list 'search-in-item 'make-search-in-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-in-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-in-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-in-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-in-list ()
   '(trivial-types:proper-list search-in-item))
 (common-lisp:defun make-search-in-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-in-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (search-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-input-"))
   (additional-attributes common-lisp:nil :type
    (common-lisp:or search-output-additional-attributes common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-clause common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (owning-project-identifier common-lisp:nil :type
    (common-lisp:or project-id common-lisp:null))
   (search-in common-lisp:nil :type
    (common-lisp:or search-in-list common-lisp:null))
   (search-scope (common-lisp:error ":searchscope is required") :type
    (common-lisp:or inventory-search-scope common-lisp:null))
   (search-text common-lisp:nil :type
    (common-lisp:or search-text common-lisp:null))
   (sort common-lisp:nil :type (common-lisp:or search-sort common-lisp:null)))
 (common-lisp:export (common-lisp:list 'search-input 'make-search-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-attributes))
      (common-lisp:list
       (common-lisp:cons "additionalAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'owning-project-identifier))
      (common-lisp:list
       (common-lisp:cons "owningProjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-in))
      (common-lisp:list
       (common-lisp:cons "searchIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-scope))
      (common-lisp:list
       (common-lisp:cons "searchScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-text))
      (common-lisp:list
       (common-lisp:cons "searchText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-inventory-result-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-inventory-result-item-"))
   (asset-item common-lisp:nil :type
    (common-lisp:or asset-item common-lisp:null))
   (data-product-item common-lisp:nil :type
    (common-lisp:or data-product-summary common-lisp:null))
   (glossary-item common-lisp:nil :type
    (common-lisp:or glossary-item common-lisp:null))
   (glossary-term-item common-lisp:nil :type
    (common-lisp:or glossary-term-item common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-inventory-result-item
                    'make-search-inventory-result-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-inventory-result-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-inventory-result-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-item))
      (common-lisp:list
       (common-lisp:cons "assetItem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-product-item))
      (common-lisp:list
       (common-lisp:cons "dataProductItem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-item))
      (common-lisp:list
       (common-lisp:cons "glossaryItem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-term-item))
      (common-lisp:list
       (common-lisp:cons "glossaryTermItem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-inventory-result-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-inventory-result-items ()
   '(trivial-types:proper-list search-inventory-result-item))
 (common-lisp:defun make-search-inventory-result-items
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            search-inventory-result-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (search-listings-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-listings-input-"))
   (additional-attributes common-lisp:nil :type
    (common-lisp:or search-output-additional-attributes common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-clause common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (search-in common-lisp:nil :type
    (common-lisp:or search-in-list common-lisp:null))
   (search-text common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (sort common-lisp:nil :type (common-lisp:or search-sort common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-listings-input 'make-search-listings-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-listings-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-listings-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-attributes))
      (common-lisp:list
       (common-lisp:cons "additionalAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-in))
      (common-lisp:list
       (common-lisp:cons "searchIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-text))
      (common-lisp:list
       (common-lisp:cons "searchText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-listings-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-listings-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-listings-output-"))
   (items common-lisp:nil :type
    (common-lisp:or search-result-items common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (total-match-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-listings-output 'make-search-listings-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-listings-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-listings-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-match-count))
      (common-lisp:list
       (common-lisp:cons "totalMatchCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-listings-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-output-"))
   (items common-lisp:nil :type
    (common-lisp:or search-inventory-result-items common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (total-match-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'search-output 'make-search-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-match-count))
      (common-lisp:list
       (common-lisp:cons "totalMatchCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-output))
   common-lisp:nil))
(common-lisp:deftype search-output-additional-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype search-output-additional-attributes ()
   '(trivial-types:proper-list search-output-additional-attribute))
 (common-lisp:defun make-search-output-additional-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            search-output-additional-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (search-result-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-result-item-"))
   (asset-listing common-lisp:nil :type
    (common-lisp:or asset-listing-item common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-result-item 'make-search-result-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-result-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-result-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-listing))
      (common-lisp:list
       (common-lisp:cons "assetListing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-result-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-result-items ()
   '(trivial-types:proper-list search-result-item))
 (common-lisp:defun make-search-result-items
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-result-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (search-sort (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-sort-"))
   (attribute (common-lisp:error ":attribute is required") :type
    (common-lisp:or attribute common-lisp:null))
   (order common-lisp:nil :type (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export (common-lisp:list 'search-sort 'make-search-sort))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-sort))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-sort))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-sort))
   common-lisp:nil))
(common-lisp:deftype search-text () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (search-types-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-types-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-clause common-lisp:null))
   (managed (common-lisp:error ":managed is required") :type
    (common-lisp:or boolean common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (search-in common-lisp:nil :type
    (common-lisp:or search-in-list common-lisp:null))
   (search-scope (common-lisp:error ":searchscope is required") :type
    (common-lisp:or types-search-scope common-lisp:null))
   (search-text common-lisp:nil :type
    (common-lisp:or search-text common-lisp:null))
   (sort common-lisp:nil :type (common-lisp:or search-sort common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-types-input 'make-search-types-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-types-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-types-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed))
      (common-lisp:list
       (common-lisp:cons "managed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-in))
      (common-lisp:list
       (common-lisp:cons "searchIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-scope))
      (common-lisp:list
       (common-lisp:cons "searchScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-text))
      (common-lisp:list
       (common-lisp:cons "searchText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-types-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-types-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-types-output-"))
   (items common-lisp:nil :type
    (common-lisp:or search-types-result-items common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (total-match-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-types-output 'make-search-types-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-types-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-types-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-match-count))
      (common-lisp:list
       (common-lisp:cons "totalMatchCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-types-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-types-result-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-types-result-item-"))
   (asset-type-item common-lisp:nil :type
    (common-lisp:or asset-type-item common-lisp:null))
   (form-type-item common-lisp:nil :type
    (common-lisp:or form-type-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-types-result-item 'make-search-types-result-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-types-result-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-types-result-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-type-item))
      (common-lisp:list
       (common-lisp:cons "assetTypeItem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'form-type-item))
      (common-lisp:list
       (common-lisp:cons "formTypeItem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-types-result-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-types-result-items ()
   '(trivial-types:proper-list search-types-result-item))
 (common-lisp:defun make-search-types-result-items
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            search-types-result-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (search-user-profiles-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-user-profiles-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (search-text common-lisp:nil :type
    (common-lisp:or user-search-text common-lisp:null))
   (user-type (common-lisp:error ":usertype is required") :type
    (common-lisp:or user-search-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-user-profiles-input
                    'make-search-user-profiles-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-user-profiles-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-user-profiles-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-text))
      (common-lisp:list
       (common-lisp:cons "searchText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-type))
      (common-lisp:list
       (common-lisp:cons "userType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-user-profiles-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-user-profiles-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-user-profiles-output-"))
   (items common-lisp:nil :type
    (common-lisp:or user-profile-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-user-profiles-output
                    'make-search-user-profiles-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-user-profiles-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-user-profiles-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-user-profiles-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (datazone-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype short-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (single-sign-on (:copier common-lisp:nil)
      (:conc-name "struct-shape-single-sign-on-"))
   (type common-lisp:nil :type (common-lisp:or auth-type common-lisp:null))
   (user-assignment common-lisp:nil :type
    (common-lisp:or user-assignment common-lisp:null)))
 (common-lisp:export (common-lisp:list 'single-sign-on 'make-single-sign-on))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input single-sign-on))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input single-sign-on))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-assignment))
      (common-lisp:list
       (common-lisp:cons "userAssignment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input single-sign-on))
   common-lisp:nil))
(common-lisp:deftype smithy () 'common-lisp:string)
(common-lisp:deftype sort-field-project () 'common-lisp:string)
(common-lisp:deftype sort-key () 'common-lisp:string)
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (sso-user-profile-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-sso-user-profile-details-"))
   (first-name common-lisp:nil :type
    (common-lisp:or first-name common-lisp:null))
   (last-name common-lisp:nil :type
    (common-lisp:or last-name common-lisp:null))
   (username common-lisp:nil :type
    (common-lisp:or user-profile-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sso-user-profile-details 'make-sso-user-profile-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sso-user-profile-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sso-user-profile-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "firstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "lastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sso-user-profile-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-data-source-run-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-data-source-run-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (data-source-identifier
    (common-lisp:error ":datasourceidentifier is required") :type
    (common-lisp:or data-source-id common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-data-source-run-input
                    'make-start-data-source-run-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-run-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-run-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-run-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-data-source-run-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-data-source-run-output-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or date-time common-lisp:null))
   (data-source-configuration-snapshot common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (data-source-id (common-lisp:error ":datasourceid is required") :type
    (common-lisp:or data-source-id common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or data-source-error-message common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or data-source-run-id common-lisp:null))
   (project-id (common-lisp:error ":projectid is required") :type
    (common-lisp:or project-id common-lisp:null))
   (run-statistics-for-assets common-lisp:nil :type
    (common-lisp:or run-statistics-for-assets common-lisp:null))
   (started-at common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or data-source-run-status common-lisp:null))
   (stopped-at common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or data-source-run-type common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-data-source-run-output
                    'make-start-data-source-run-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-run-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-run-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-configuration-snapshot))
      (common-lisp:list
       (common-lisp:cons "dataSourceConfigurationSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'run-statistics-for-assets))
      (common-lisp:list
       (common-lisp:cons "runStatisticsForAssets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopped-at))
      (common-lisp:list
       (common-lisp:cons "stoppedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-run-output))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (subscribed-asset (:copier common-lisp:nil)
      (:conc-name "struct-shape-subscribed-asset-"))
   (asset-id (common-lisp:error ":assetid is required") :type
    (common-lisp:or asset-id common-lisp:null))
   (asset-revision (common-lisp:error ":assetrevision is required") :type
    (common-lisp:or revision common-lisp:null))
   (failure-cause common-lisp:nil :type
    (common-lisp:or failure-cause common-lisp:null))
   (failure-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (granted-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or subscription-grant-status common-lisp:null))
   (target-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'subscribed-asset 'make-subscribed-asset))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subscribed-asset))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subscribed-asset))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-revision))
      (common-lisp:list
       (common-lisp:cons "assetRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-cause))
      (common-lisp:list
       (common-lisp:cons "failureCause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-timestamp))
      (common-lisp:list
       (common-lisp:cons "failureTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granted-timestamp))
      (common-lisp:list
       (common-lisp:cons "grantedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-name))
      (common-lisp:list
       (common-lisp:cons "targetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subscribed-asset))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (subscribed-asset-listing (:copier common-lisp:nil)
      (:conc-name "struct-shape-subscribed-asset-listing-"))
   (entity-id common-lisp:nil :type (common-lisp:or asset-id common-lisp:null))
   (entity-revision common-lisp:nil :type
    (common-lisp:or revision common-lisp:null))
   (entity-type common-lisp:nil :type
    (common-lisp:or type-name common-lisp:null))
   (forms common-lisp:nil :type (common-lisp:or forms common-lisp:null))
   (glossary-terms common-lisp:nil :type
    (common-lisp:or detailed-glossary-terms common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'subscribed-asset-listing 'make-subscribed-asset-listing))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-asset-listing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-asset-listing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "entityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-revision))
      (common-lisp:list
       (common-lisp:cons "entityRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type))
      (common-lisp:list
       (common-lisp:cons "entityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forms))
      (common-lisp:list
       (common-lisp:cons "forms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-asset-listing))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype subscribed-assets ()
   '(trivial-types:proper-list subscribed-asset))
 (common-lisp:defun make-subscribed-assets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscribed-asset))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (subscribed-listing (:copier common-lisp:nil)
      (:conc-name "struct-shape-subscribed-listing-"))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or description common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or listing-id common-lisp:null))
   (item (common-lisp:error ":item is required") :type
    (common-lisp:or subscribed-listing-item common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or listing-name common-lisp:null))
   (owner-project-id (common-lisp:error ":ownerprojectid is required") :type
    (common-lisp:or project-id common-lisp:null))
   (owner-project-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (revision common-lisp:nil :type (common-lisp:or revision common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'subscribed-listing 'make-subscribed-listing))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subscribed-listing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subscribed-listing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item))
      (common-lisp:list
       (common-lisp:cons "item"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-project-id))
      (common-lisp:list
       (common-lisp:cons "ownerProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-project-name))
      (common-lisp:list
       (common-lisp:cons "ownerProjectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subscribed-listing))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (subscribed-listing-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-subscribed-listing-input-"))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or listing-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'subscribed-listing-input 'make-subscribed-listing-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-listing-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-listing-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-listing-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype subscribed-listing-inputs ()
   '(trivial-types:proper-list subscribed-listing-input))
 (common-lisp:defun make-subscribed-listing-inputs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            subscribed-listing-input))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (subscribed-listing-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-subscribed-listing-item-"))
   (asset-listing common-lisp:nil :type
    (common-lisp:or subscribed-asset-listing common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'subscribed-listing-item 'make-subscribed-listing-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-listing-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-listing-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-listing))
      (common-lisp:list
       (common-lisp:cons "assetListing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-listing-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (subscribed-principal (:copier common-lisp:nil)
      (:conc-name "struct-shape-subscribed-principal-"))
   (project common-lisp:nil :type
    (common-lisp:or subscribed-project common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'subscribed-principal 'make-subscribed-principal))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subscribed-principal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subscribed-principal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project))
      (common-lisp:list
       (common-lisp:cons "project"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subscribed-principal))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (subscribed-principal-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-subscribed-principal-input-"))
   (project common-lisp:nil :type
    (common-lisp:or subscribed-project-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'subscribed-principal-input
                    'make-subscribed-principal-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-principal-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-principal-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project))
      (common-lisp:list
       (common-lisp:cons "project"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-principal-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype subscribed-principal-inputs ()
   '(trivial-types:proper-list subscribed-principal-input))
 (common-lisp:defun make-subscribed-principal-inputs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            subscribed-principal-input))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (subscribed-project (:copier common-lisp:nil)
      (:conc-name "struct-shape-subscribed-project-"))
   (id common-lisp:nil :type (common-lisp:or project-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or project-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'subscribed-project 'make-subscribed-project))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subscribed-project))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subscribed-project))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subscribed-project))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (subscribed-project-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-subscribed-project-input-"))
   (identifier common-lisp:nil :type
    (common-lisp:or project-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'subscribed-project-input 'make-subscribed-project-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-project-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-project-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-project-input))
   common-lisp:nil))
(common-lisp:deftype subscription-grant-id () 'common-lisp:string)
(common-lisp:deftype subscription-grant-overall-status () 'common-lisp:string)
(common-lisp:deftype subscription-grant-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (subscription-grant-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-subscription-grant-summary-"))
   (assets common-lisp:nil :type
    (common-lisp:or subscribed-assets common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-at common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or created-by common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (granted-entity (common-lisp:error ":grantedentity is required") :type
    (common-lisp:or granted-entity common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or subscription-grant-id common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or subscription-grant-overall-status common-lisp:null))
   (subscription-id common-lisp:nil :type
    (common-lisp:or subscription-id common-lisp:null))
   (subscription-target-id
    (common-lisp:error ":subscriptiontargetid is required") :type
    (common-lisp:or subscription-target-id common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or updated-at common-lisp:null))
   (updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'subscription-grant-summary
                    'make-subscription-grant-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subscription-grant-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subscription-grant-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assets))
      (common-lisp:list
       (common-lisp:cons "assets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granted-entity))
      (common-lisp:list
       (common-lisp:cons "grantedEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-target-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionTargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subscription-grant-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype subscription-grants ()
   '(trivial-types:proper-list subscription-grant-summary))
 (common-lisp:defun make-subscription-grants
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            subscription-grant-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype subscription-id () 'common-lisp:string)
(common-lisp:deftype subscription-request-id () 'common-lisp:string)
(common-lisp:deftype subscription-request-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (subscription-request-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-subscription-request-summary-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-at common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or created-by common-lisp:null))
   (decision-comment common-lisp:nil :type
    (common-lisp:or decision-comment common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or subscription-request-id common-lisp:null))
   (request-reason (common-lisp:error ":requestreason is required") :type
    (common-lisp:or request-reason common-lisp:null))
   (reviewer-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or subscription-request-status common-lisp:null))
   (subscribed-listings (common-lisp:error ":subscribedlistings is required")
    :type
    (common-lisp:or subscription-request-summary-subscribed-listings-list
                    common-lisp:null))
   (subscribed-principals
    (common-lisp:error ":subscribedprincipals is required") :type
    (common-lisp:or subscription-request-summary-subscribed-principals-list
                    common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or updated-at common-lisp:null))
   (updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'subscription-request-summary
                    'make-subscription-request-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subscription-request-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subscription-request-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decision-comment))
      (common-lisp:list
       (common-lisp:cons "decisionComment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-reason))
      (common-lisp:list
       (common-lisp:cons "requestReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reviewer-id))
      (common-lisp:list
       (common-lisp:cons "reviewerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribed-listings))
      (common-lisp:list
       (common-lisp:cons "subscribedListings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscribed-principals))
      (common-lisp:list
       (common-lisp:cons "subscribedPrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subscription-request-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype subscription-request-summary-subscribed-listings-list ()
   '(trivial-types:proper-list subscribed-listing))
 (common-lisp:defun make-subscription-request-summary-subscribed-listings-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscribed-listing))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype subscription-request-summary-subscribed-principals-list
                      ()
   '(trivial-types:proper-list subscribed-principal))
 (common-lisp:defun make-subscription-request-summary-subscribed-principals-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscribed-principal))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype subscription-requests ()
   '(trivial-types:proper-list subscription-request-summary))
 (common-lisp:defun make-subscription-requests
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            subscription-request-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype subscription-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (subscription-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-subscription-summary-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-at common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or created-by common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or subscription-id common-lisp:null))
   (retain-permissions common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or subscription-status common-lisp:null))
   (subscribed-listing (common-lisp:error ":subscribedlisting is required")
    :type (common-lisp:or subscribed-listing common-lisp:null))
   (subscribed-principal (common-lisp:error ":subscribedprincipal is required")
    :type (common-lisp:or subscribed-principal common-lisp:null))
   (subscription-request-id common-lisp:nil :type
    (common-lisp:or subscription-request-id common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or updated-at common-lisp:null))
   (updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'subscription-summary 'make-subscription-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subscription-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subscription-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-permissions))
      (common-lisp:list
       (common-lisp:cons "retainPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribed-listing))
      (common-lisp:list
       (common-lisp:cons "subscribedListing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscribed-principal))
      (common-lisp:list
       (common-lisp:cons "subscribedPrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-request-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subscription-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (subscription-target-form (:copier common-lisp:nil)
      (:conc-name "struct-shape-subscription-target-form-"))
   (content (common-lisp:error ":content is required") :type
    (common-lisp:or string common-lisp:null))
   (form-name (common-lisp:error ":formname is required") :type
    (common-lisp:or form-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'subscription-target-form 'make-subscription-target-form))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subscription-target-form))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subscription-target-form))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'form-name))
      (common-lisp:list
       (common-lisp:cons "formName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subscription-target-form))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype subscription-target-forms ()
   '(trivial-types:proper-list subscription-target-form))
 (common-lisp:defun make-subscription-target-forms
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            subscription-target-form))
   aws-sdk/generator/shape::members))
(common-lisp:deftype subscription-target-id () 'common-lisp:string)
(common-lisp:deftype subscription-target-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (subscription-target-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-subscription-target-summary-"))
   (applicable-asset-types
    (common-lisp:error ":applicableassettypes is required") :type
    (common-lisp:or applicable-asset-types common-lisp:null))
   (authorized-principals
    (common-lisp:error ":authorizedprincipals is required") :type
    (common-lisp:or authorized-principal-identifiers common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-at common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or created-by common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (environment-id (common-lisp:error ":environmentid is required") :type
    (common-lisp:or environment-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or subscription-target-id common-lisp:null))
   (manage-access-role (common-lisp:error ":manageaccessrole is required")
    :type (common-lisp:or string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or subscription-target-name common-lisp:null))
   (project-id (common-lisp:error ":projectid is required") :type
    (common-lisp:or project-id common-lisp:null))
   (provider (common-lisp:error ":provider is required") :type
    (common-lisp:or string common-lisp:null))
   (subscription-target-config
    (common-lisp:error ":subscriptiontargetconfig is required") :type
    (common-lisp:or subscription-target-forms common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or string common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or updated-at common-lisp:null))
   (updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'subscription-target-summary
                    'make-subscription-target-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subscription-target-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subscription-target-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'applicable-asset-types))
      (common-lisp:list
       (common-lisp:cons "applicableAssetTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorized-principals))
      (common-lisp:list
       (common-lisp:cons "authorizedPrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manage-access-role))
      (common-lisp:list
       (common-lisp:cons "manageAccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-target-config))
      (common-lisp:list
       (common-lisp:cons "subscriptionTargetConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subscription-target-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype subscription-targets ()
   '(trivial-types:proper-list subscription-target-summary))
 (common-lisp:defun make-subscription-targets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            subscription-target-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype subscriptions ()
   '(trivial-types:proper-list subscription-summary))
 (common-lisp:defun make-subscriptions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscription-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype synthetic-timestamp-date-time () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or string common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun make-tags (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype task-id () 'common-lisp:string)
(common-lisp:deftype task-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (term-relations (:copier common-lisp:nil)
      (:conc-name "struct-shape-term-relations-"))
   (classifies common-lisp:nil :type
    (common-lisp:or term-relations-classifies-list common-lisp:null))
   (is-a common-lisp:nil :type
    (common-lisp:or term-relations-is-alist common-lisp:null)))
 (common-lisp:export (common-lisp:list 'term-relations 'make-term-relations))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input term-relations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input term-relations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classifies))
      (common-lisp:list
       (common-lisp:cons "classifies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-a))
      (common-lisp:list
       (common-lisp:cons "isA"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input term-relations))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype term-relations-classifies-list ()
   '(trivial-types:proper-list glossary-term-id))
 (common-lisp:defun make-term-relations-classifies-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list glossary-term-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype term-relations-is-alist ()
   '(trivial-types:proper-list glossary-term-id))
 (common-lisp:defun make-term-relations-is-alist
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list glossary-term-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (datazone-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype timezone () 'common-lisp:string)
(common-lisp:deftype title () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (topic (:copier common-lisp:nil) (:conc-name "struct-shape-topic-"))
   (resource (common-lisp:error ":resource is required") :type
    (common-lisp:or notification-resource common-lisp:null))
   (role (common-lisp:error ":role is required") :type
    (common-lisp:or notification-role common-lisp:null))
   (subject (common-lisp:error ":subject is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'topic 'make-topic))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input topic))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input topic))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input topic))
   common-lisp:nil))
(common-lisp:deftype type-name () 'common-lisp:string)
(common-lisp:deftype types-search-scope () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unauthorized-exception
     (datazone-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unauthorized-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unauthorized-exception 'unauthorized-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or string common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-data-source-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-data-source-input-"))
   (asset-forms-input common-lisp:nil :type
    (common-lisp:or form-input-list common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or data-source-configuration-input common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (enable-setting common-lisp:nil :type
    (common-lisp:or enable-setting common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or data-source-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (publish-on-import common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (recommendation common-lisp:nil :type
    (common-lisp:or recommendation-configuration common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or schedule-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-data-source-input 'make-update-data-source-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-forms-input))
      (common-lisp:list
       (common-lisp:cons "assetFormsInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-setting))
      (common-lisp:list
       (common-lisp:cons "enableSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publish-on-import))
      (common-lisp:list
       (common-lisp:cons "publishOnImport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation))
      (common-lisp:list
       (common-lisp:cons "recommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-data-source-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-data-source-output-"))
   (asset-forms-output common-lisp:nil :type
    (common-lisp:or form-output-list common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or data-source-configuration-output common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (enable-setting common-lisp:nil :type
    (common-lisp:or enable-setting common-lisp:null))
   (environment-id (common-lisp:error ":environmentid is required") :type
    (common-lisp:or environment-id common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or data-source-error-message common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or data-source-id common-lisp:null))
   (last-run-at common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (last-run-error-message common-lisp:nil :type
    (common-lisp:or data-source-error-message common-lisp:null))
   (last-run-status common-lisp:nil :type
    (common-lisp:or data-source-run-status common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (project-id (common-lisp:error ":projectid is required") :type
    (common-lisp:or project-id common-lisp:null))
   (publish-on-import common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (recommendation common-lisp:nil :type
    (common-lisp:or recommendation-configuration common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or schedule-configuration common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or data-source-status common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or data-source-type common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-data-source-output
                    'make-update-data-source-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-forms-output))
      (common-lisp:list
       (common-lisp:cons "assetFormsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-setting))
      (common-lisp:list
       (common-lisp:cons "enableSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-at))
      (common-lisp:list
       (common-lisp:cons "lastRunAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-run-error-message))
      (common-lisp:list
       (common-lisp:cons "lastRunErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-status))
      (common-lisp:list
       (common-lisp:cons "lastRunStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publish-on-import))
      (common-lisp:list
       (common-lisp:cons "publishOnImport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation))
      (common-lisp:list
       (common-lisp:cons "recommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-domain-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-domain-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (domain-execution-role common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (single-sign-on common-lisp:nil :type
    (common-lisp:or single-sign-on common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-domain-input 'make-update-domain-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-domain-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-domain-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-execution-role))
      (common-lisp:list
       (common-lisp:cons "domainExecutionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'single-sign-on))
      (common-lisp:list
       (common-lisp:cons "singleSignOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-domain-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-domain-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-domain-output-"))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (domain-execution-role common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or updated-at common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (single-sign-on common-lisp:nil :type
    (common-lisp:or single-sign-on common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-domain-output 'make-update-domain-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-domain-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-domain-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-execution-role))
      (common-lisp:list
       (common-lisp:cons "domainExecutionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'single-sign-on))
      (common-lisp:list
       (common-lisp:cons "singleSignOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-domain-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-environment-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-environment-input-"))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (glossary-terms common-lisp:nil :type
    (common-lisp:or glossary-terms common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or environment-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-environment-input 'make-update-environment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-environment-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-environment-output-"))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (aws-account-region common-lisp:nil :type
    (common-lisp:or aws-region common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or string common-lisp:null))
   (deployment-properties common-lisp:nil :type
    (common-lisp:or deployment-properties common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (environment-actions common-lisp:nil :type
    (common-lisp:or environment-action-list common-lisp:null))
   (environment-blueprint-id common-lisp:nil :type
    (common-lisp:or environment-blueprint-id common-lisp:null))
   (environment-profile-id
    (common-lisp:error ":environmentprofileid is required") :type
    (common-lisp:or environment-profile-id common-lisp:null))
   (glossary-terms common-lisp:nil :type
    (common-lisp:or glossary-terms common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or environment-id common-lisp:null))
   (last-deployment common-lisp:nil :type
    (common-lisp:or deployment common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or environment-name common-lisp:null))
   (project-id (common-lisp:error ":projectid is required") :type
    (common-lisp:or project-id common-lisp:null))
   (provider (common-lisp:error ":provider is required") :type
    (common-lisp:or string common-lisp:null))
   (provisioned-resources common-lisp:nil :type
    (common-lisp:or resource-list common-lisp:null))
   (provisioning-properties common-lisp:nil :type
    (common-lisp:or provisioning-properties common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or environment-status common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (user-parameters common-lisp:nil :type
    (common-lisp:or custom-parameter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-environment-output
                    'make-update-environment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-region))
      (common-lisp:list
       (common-lisp:cons "awsAccountRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-properties))
      (common-lisp:list
       (common-lisp:cons "deploymentProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-actions))
      (common-lisp:list
       (common-lisp:cons "environmentActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "environmentBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-profile-id))
      (common-lisp:list
       (common-lisp:cons "environmentProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-deployment))
      (common-lisp:list
       (common-lisp:cons "lastDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-resources))
      (common-lisp:list
       (common-lisp:cons "provisionedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-properties))
      (common-lisp:list
       (common-lisp:cons "provisioningProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-parameters))
      (common-lisp:list
       (common-lisp:cons "userParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-environment-profile-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-environment-profile-input-"))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (aws-account-region common-lisp:nil :type
    (common-lisp:or aws-region common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or environment-profile-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or environment-profile-name common-lisp:null))
   (user-parameters common-lisp:nil :type
    (common-lisp:or environment-parameters-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-environment-profile-input
                    'make-update-environment-profile-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-profile-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-region))
      (common-lisp:list
       (common-lisp:cons "awsAccountRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-parameters))
      (common-lisp:list
       (common-lisp:cons "userParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-profile-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-environment-profile-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-environment-profile-output-"))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (aws-account-region common-lisp:nil :type
    (common-lisp:or aws-region common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (environment-blueprint-id
    (common-lisp:error ":environmentblueprintid is required") :type
    (common-lisp:or environment-blueprint-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or environment-profile-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or environment-profile-name common-lisp:null))
   (project-id common-lisp:nil :type
    (common-lisp:or project-id common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (user-parameters common-lisp:nil :type
    (common-lisp:or custom-parameter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-environment-profile-output
                    'make-update-environment-profile-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-profile-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-profile-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-region))
      (common-lisp:list
       (common-lisp:cons "awsAccountRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "environmentBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-parameters))
      (common-lisp:list
       (common-lisp:cons "userParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-profile-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-glossary-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-glossary-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or glossary-description common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or glossary-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or glossary-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or glossary-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-glossary-input 'make-update-glossary-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-glossary-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-glossary-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-glossary-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-glossary-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-glossary-output-"))
   (description common-lisp:nil :type
    (common-lisp:or glossary-description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or glossary-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or glossary-name common-lisp:null))
   (owning-project-id (common-lisp:error ":owningprojectid is required") :type
    (common-lisp:or project-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or glossary-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-glossary-output 'make-update-glossary-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-glossary-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-glossary-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-glossary-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-glossary-term-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-glossary-term-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (glossary-identifier common-lisp:nil :type
    (common-lisp:or glossary-term-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or glossary-term-id common-lisp:null))
   (long-description common-lisp:nil :type
    (common-lisp:or long-description common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or glossary-term-name common-lisp:null))
   (short-description common-lisp:nil :type
    (common-lisp:or short-description common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or glossary-term-status common-lisp:null))
   (term-relations common-lisp:nil :type
    (common-lisp:or term-relations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-glossary-term-input
                    'make-update-glossary-term-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-glossary-term-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-glossary-term-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-identifier))
      (common-lisp:list
       (common-lisp:cons "glossaryIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-description))
      (common-lisp:list
       (common-lisp:cons "longDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-description))
      (common-lisp:list
       (common-lisp:cons "shortDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term-relations))
      (common-lisp:list
       (common-lisp:cons "termRelations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-glossary-term-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-glossary-term-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-glossary-term-output-"))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (glossary-id (common-lisp:error ":glossaryid is required") :type
    (common-lisp:or glossary-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or glossary-term-id common-lisp:null))
   (long-description common-lisp:nil :type
    (common-lisp:or long-description common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or glossary-term-name common-lisp:null))
   (short-description common-lisp:nil :type
    (common-lisp:or short-description common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or glossary-term-status common-lisp:null))
   (term-relations common-lisp:nil :type
    (common-lisp:or term-relations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-glossary-term-output
                    'make-update-glossary-term-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-glossary-term-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-glossary-term-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-id))
      (common-lisp:list
       (common-lisp:cons "glossaryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-description))
      (common-lisp:list
       (common-lisp:cons "longDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-description))
      (common-lisp:list
       (common-lisp:cons "shortDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term-relations))
      (common-lisp:list
       (common-lisp:cons "termRelations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-glossary-term-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-group-profile-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-group-profile-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (group-identifier (common-lisp:error ":groupidentifier is required") :type
    (common-lisp:or group-identifier common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or group-profile-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-group-profile-input
                    'make-update-group-profile-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-group-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-group-profile-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-group-profile-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-group-profile-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-group-profile-output-"))
   (domain-id common-lisp:nil :type
    (common-lisp:or domain-id common-lisp:null))
   (group-name common-lisp:nil :type
    (common-lisp:or group-profile-name common-lisp:null))
   (id common-lisp:nil :type
    (common-lisp:or group-profile-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or group-profile-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-group-profile-output
                    'make-update-group-profile-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-group-profile-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-group-profile-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "groupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-group-profile-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-project-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-project-input-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (glossary-terms common-lisp:nil :type
    (common-lisp:or glossary-terms common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or project-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or project-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-project-input 'make-update-project-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-project-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-project-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-project-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-project-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-project-output-"))
   (created-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or created-by common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (failure-reasons common-lisp:nil :type
    (common-lisp:or failure-reasons common-lisp:null))
   (glossary-terms common-lisp:nil :type
    (common-lisp:or glossary-terms common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or project-id common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or project-name common-lisp:null))
   (project-status common-lisp:nil :type
    (common-lisp:or project-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-project-output 'make-update-project-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-project-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-project-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-status))
      (common-lisp:list
       (common-lisp:cons "projectStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-project-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-subscription-grant-status-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-subscription-grant-status-input-"))
   (asset-identifier (common-lisp:error ":assetidentifier is required") :type
    (common-lisp:or asset-id common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (failure-cause common-lisp:nil :type
    (common-lisp:or failure-cause common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or subscription-grant-id common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or subscription-grant-status common-lisp:null))
   (target-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-subscription-grant-status-input
                    'make-update-subscription-grant-status-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-grant-status-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-grant-status-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-cause))
      (common-lisp:list
       (common-lisp:cons "failureCause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-name))
      (common-lisp:list
       (common-lisp:cons "targetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-grant-status-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-subscription-grant-status-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-subscription-grant-status-output-"))
   (assets common-lisp:nil :type
    (common-lisp:or subscribed-assets common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-at common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or created-by common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (granted-entity (common-lisp:error ":grantedentity is required") :type
    (common-lisp:or granted-entity common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or subscription-grant-id common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or subscription-grant-overall-status common-lisp:null))
   (subscription-id common-lisp:nil :type
    (common-lisp:or subscription-id common-lisp:null))
   (subscription-target-id
    (common-lisp:error ":subscriptiontargetid is required") :type
    (common-lisp:or subscription-target-id common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or updated-at common-lisp:null))
   (updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-subscription-grant-status-output
                    'make-update-subscription-grant-status-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-grant-status-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-grant-status-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assets))
      (common-lisp:list
       (common-lisp:cons "assets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granted-entity))
      (common-lisp:list
       (common-lisp:cons "grantedEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-target-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionTargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-grant-status-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-subscription-request-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-subscription-request-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or subscription-request-id common-lisp:null))
   (request-reason (common-lisp:error ":requestreason is required") :type
    (common-lisp:or request-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-subscription-request-input
                    'make-update-subscription-request-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-request-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-request-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-reason))
      (common-lisp:list
       (common-lisp:cons "requestReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-request-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-subscription-request-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-subscription-request-output-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-at common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or created-by common-lisp:null))
   (decision-comment common-lisp:nil :type
    (common-lisp:or decision-comment common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or subscription-request-id common-lisp:null))
   (request-reason (common-lisp:error ":requestreason is required") :type
    (common-lisp:or request-reason common-lisp:null))
   (reviewer-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or subscription-request-status common-lisp:null))
   (subscribed-listings (common-lisp:error ":subscribedlistings is required")
    :type
    (common-lisp:or update-subscription-request-output-subscribed-listings-list
                    common-lisp:null))
   (subscribed-principals
    (common-lisp:error ":subscribedprincipals is required") :type
    (common-lisp:or
     update-subscription-request-output-subscribed-principals-list
     common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or updated-at common-lisp:null))
   (updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-subscription-request-output
                    'make-update-subscription-request-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-request-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-request-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decision-comment))
      (common-lisp:list
       (common-lisp:cons "decisionComment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-reason))
      (common-lisp:list
       (common-lisp:cons "requestReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reviewer-id))
      (common-lisp:list
       (common-lisp:cons "reviewerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribed-listings))
      (common-lisp:list
       (common-lisp:cons "subscribedListings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscribed-principals))
      (common-lisp:list
       (common-lisp:cons "subscribedPrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-request-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-subscription-request-output-subscribed-listings-list
                      ()
   '(trivial-types:proper-list subscribed-listing))
 (common-lisp:defun make-update-subscription-request-output-subscribed-listings-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscribed-listing))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype update-subscription-request-output-subscribed-principals-list
                      ()
   '(trivial-types:proper-list subscribed-principal))
 (common-lisp:defun make-update-subscription-request-output-subscribed-principals-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscribed-principal))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (update-subscription-target-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-subscription-target-input-"))
   (applicable-asset-types common-lisp:nil :type
    (common-lisp:or applicable-asset-types common-lisp:null))
   (authorized-principals common-lisp:nil :type
    (common-lisp:or authorized-principal-identifiers common-lisp:null))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (environment-identifier
    (common-lisp:error ":environmentidentifier is required") :type
    (common-lisp:or environment-id common-lisp:null))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or subscription-target-id common-lisp:null))
   (manage-access-role common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or subscription-target-name common-lisp:null))
   (provider common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (subscription-target-config common-lisp:nil :type
    (common-lisp:or subscription-target-forms common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-subscription-target-input
                    'make-update-subscription-target-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-target-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-target-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'applicable-asset-types))
      (common-lisp:list
       (common-lisp:cons "applicableAssetTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorized-principals))
      (common-lisp:list
       (common-lisp:cons "authorizedPrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manage-access-role))
      (common-lisp:list
       (common-lisp:cons "manageAccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-target-config))
      (common-lisp:list
       (common-lisp:cons "subscriptionTargetConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-target-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-subscription-target-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-subscription-target-output-"))
   (applicable-asset-types
    (common-lisp:error ":applicableassettypes is required") :type
    (common-lisp:or applicable-asset-types common-lisp:null))
   (authorized-principals
    (common-lisp:error ":authorizedprincipals is required") :type
    (common-lisp:or authorized-principal-identifiers common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or created-at common-lisp:null))
   (created-by (common-lisp:error ":createdby is required") :type
    (common-lisp:or created-by common-lisp:null))
   (domain-id (common-lisp:error ":domainid is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (environment-id (common-lisp:error ":environmentid is required") :type
    (common-lisp:or environment-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or subscription-target-id common-lisp:null))
   (manage-access-role (common-lisp:error ":manageaccessrole is required")
    :type (common-lisp:or string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or subscription-target-name common-lisp:null))
   (project-id (common-lisp:error ":projectid is required") :type
    (common-lisp:or project-id common-lisp:null))
   (provider (common-lisp:error ":provider is required") :type
    (common-lisp:or string common-lisp:null))
   (subscription-target-config
    (common-lisp:error ":subscriptiontargetconfig is required") :type
    (common-lisp:or subscription-target-forms common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or string common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or updated-at common-lisp:null))
   (updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-subscription-target-output
                    'make-update-subscription-target-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-target-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-target-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'applicable-asset-types))
      (common-lisp:list
       (common-lisp:cons "applicableAssetTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorized-principals))
      (common-lisp:list
       (common-lisp:cons "authorizedPrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manage-access-role))
      (common-lisp:list
       (common-lisp:cons "manageAccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-target-config))
      (common-lisp:list
       (common-lisp:cons "subscriptionTargetConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-target-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-user-profile-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-user-profile-input-"))
   (domain-identifier (common-lisp:error ":domainidentifier is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or user-profile-status common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or user-profile-type common-lisp:null))
   (user-identifier (common-lisp:error ":useridentifier is required") :type
    (common-lisp:or user-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-user-profile-input
                    'make-update-user-profile-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-profile-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-profile-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-user-profile-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-user-profile-output-"))
   (details common-lisp:nil :type
    (common-lisp:or user-profile-details common-lisp:null))
   (domain-id common-lisp:nil :type
    (common-lisp:or domain-id common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or user-profile-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or user-profile-status common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or user-profile-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-user-profile-output
                    'make-update-user-profile-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-profile-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-profile-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-profile-output))
   common-lisp:nil))
(common-lisp:deftype updated-at () 'common-lisp:string)
(common-lisp:deftype updated-by () 'common-lisp:string)
(common-lisp:deftype user-assignment () 'common-lisp:string)
(common-lisp:deftype user-designation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (user-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-details-"))
   (user-id (common-lisp:error ":userid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user-details 'make-user-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "userId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-details))
   common-lisp:nil))
(common-lisp:deftype user-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (user-profile-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-profile-details-"))
   (iam common-lisp:nil :type
    (common-lisp:or iam-user-profile-details common-lisp:null))
   (sso common-lisp:nil :type
    (common-lisp:or sso-user-profile-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'user-profile-details 'make-user-profile-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-profile-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-profile-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam))
      (common-lisp:list
       (common-lisp:cons "iam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sso))
      (common-lisp:list
       (common-lisp:cons "sso"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-profile-details))
   common-lisp:nil))
(common-lisp:deftype user-profile-id () 'common-lisp:string)
(common-lisp:deftype user-profile-name () 'common-lisp:string)
(common-lisp:deftype user-profile-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype user-profile-summaries ()
   '(trivial-types:proper-list user-profile-summary))
 (common-lisp:defun make-user-profile-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-profile-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (user-profile-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-profile-summary-"))
   (details common-lisp:nil :type
    (common-lisp:or user-profile-details common-lisp:null))
   (domain-id common-lisp:nil :type
    (common-lisp:or domain-id common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or user-profile-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or user-profile-status common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or user-profile-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'user-profile-summary 'make-user-profile-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-profile-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-profile-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-profile-summary))
   common-lisp:nil))
(common-lisp:deftype user-profile-type () 'common-lisp:string)
(common-lisp:deftype user-search-text () 'common-lisp:string)
(common-lisp:deftype user-search-type () 'common-lisp:string)
(common-lisp:deftype user-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (datazone-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun accept-predictions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-choices accept-rule client-token
                     domain-identifier identifier revision)
   (common-lisp:declare
    (common-lisp:ignorable accept-choices accept-rule client-token
     domain-identifier identifier revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-accept-predictions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/assets/~A/accept-predictions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "AcceptPredictions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'accept-predictions))
(common-lisp:progn
 (common-lisp:defun accept-subscription-request
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key decision-comment domain-identifier
                     identifier)
   (common-lisp:declare
    (common-lisp:ignorable decision-comment domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-accept-subscription-request-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscription-requests/~A/accept"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "AcceptSubscriptionRequest"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'accept-subscription-request))
(common-lisp:progn
 (common-lisp:defun cancel-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-subscription-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscriptions/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "CancelSubscription"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-subscription))
(common-lisp:progn
 (common-lisp:defun create-asset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description
                     domain-identifier external-identifier forms-input
                     glossary-terms name owning-project-identifier
                     prediction-configuration type-identifier type-revision)
   (common-lisp:declare
    (common-lisp:ignorable client-token description domain-identifier
     external-identifier forms-input glossary-terms name
     owning-project-identifier prediction-configuration type-identifier
     type-revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-asset-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/assets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "CreateAsset"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-asset))
(common-lisp:progn
 (common-lisp:defun create-asset-revision
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description
                     domain-identifier forms-input glossary-terms identifier
                     name prediction-configuration type-revision)
   (common-lisp:declare
    (common-lisp:ignorable client-token description domain-identifier
     forms-input glossary-terms identifier name prediction-configuration
     type-revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-asset-revision-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/assets/~A/revisions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "CreateAssetRevision"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-asset-revision))
(common-lisp:progn
 (common-lisp:defun create-asset-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description domain-identifier forms-input
                     name owning-project-identifier)
   (common-lisp:declare
    (common-lisp:ignorable description domain-identifier forms-input name
     owning-project-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-asset-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/asset-types"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "CreateAssetType"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-asset-type))
(common-lisp:progn
 (common-lisp:defun create-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-forms-input client-token
                     configuration description domain-identifier enable-setting
                     environment-identifier name project-identifier
                     publish-on-import recommendation schedule type)
   (common-lisp:declare
    (common-lisp:ignorable asset-forms-input client-token configuration
     description domain-identifier enable-setting environment-identifier name
     project-identifier publish-on-import recommendation schedule type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-data-source-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/data-sources"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "CreateDataSource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-data-source))
(common-lisp:progn
 (common-lisp:defun create-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description
                     domain-execution-role kms-key-identifier name
                     single-sign-on tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token description domain-execution-role
     kms-key-identifier name single-sign-on tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-domain-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/v2/domains"
                                                        "CreateDomain"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-domain))
(common-lisp:progn
 (common-lisp:defun create-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description domain-identifier
                     environment-profile-identifier glossary-terms name
                     project-identifier user-parameters)
   (common-lisp:declare
    (common-lisp:ignorable description domain-identifier
     environment-profile-identifier glossary-terms name project-identifier
     user-parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-environment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environments"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "CreateEnvironment"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-environment))
(common-lisp:progn
 (common-lisp:defun create-environment-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id aws-account-region
                     description domain-identifier
                     environment-blueprint-identifier name project-identifier
                     user-parameters)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id aws-account-region description
     domain-identifier environment-blueprint-identifier name project-identifier
     user-parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-environment-profile-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environment-profiles"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "CreateEnvironmentProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-environment-profile))
(common-lisp:progn
 (common-lisp:defun create-form-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description domain-identifier model name
                     owning-project-identifier status)
   (common-lisp:declare
    (common-lisp:ignorable description domain-identifier model name
     owning-project-identifier status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-form-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/form-types"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "CreateFormType"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-form-type))
(common-lisp:progn
 (common-lisp:defun create-glossary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description
                     domain-identifier name owning-project-identifier status)
   (common-lisp:declare
    (common-lisp:ignorable client-token description domain-identifier name
     owning-project-identifier status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-glossary-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/glossaries"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "CreateGlossary"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-glossary))
(common-lisp:progn
 (common-lisp:defun create-glossary-term
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token domain-identifier
                     glossary-identifier long-description name
                     short-description status term-relations)
   (common-lisp:declare
    (common-lisp:ignorable client-token domain-identifier glossary-identifier
     long-description name short-description status term-relations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-glossary-term-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/glossary-terms"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "CreateGlossaryTerm"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-glossary-term))
(common-lisp:progn
 (common-lisp:defun create-group-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token domain-identifier
                     group-identifier)
   (common-lisp:declare
    (common-lisp:ignorable client-token domain-identifier group-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-group-profile-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/group-profiles"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "CreateGroupProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-group-profile))
(common-lisp:progn
 (common-lisp:defun create-listing-change-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action client-token domain-identifier
                     entity-identifier entity-revision entity-type)
   (common-lisp:declare
    (common-lisp:ignorable action client-token domain-identifier
     entity-identifier entity-revision entity-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-listing-change-set-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/listings/change-set"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "CreateListingChangeSet"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-listing-change-set))
(common-lisp:progn
 (common-lisp:defun create-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description domain-identifier
                     glossary-terms name)
   (common-lisp:declare
    (common-lisp:ignorable description domain-identifier glossary-terms name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-project-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/projects"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "CreateProject"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-project))
(common-lisp:progn
 (common-lisp:defun create-project-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key designation domain-identifier member
                     project-identifier)
   (common-lisp:declare
    (common-lisp:ignorable designation domain-identifier member
     project-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-project-membership-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/projects/~A/createMembership"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-identifier))))
                                                        "CreateProjectMembership"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-project-membership))
(common-lisp:progn
 (common-lisp:defun create-subscription-grant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-target-names client-token
                     domain-identifier environment-identifier granted-entity
                     subscription-target-identifier)
   (common-lisp:declare
    (common-lisp:ignorable asset-target-names client-token domain-identifier
     environment-identifier granted-entity subscription-target-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-subscription-grant-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscription-grants"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "CreateSubscriptionGrant"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-subscription-grant))
(common-lisp:progn
 (common-lisp:defun create-subscription-request
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token domain-identifier
                     request-reason subscribed-listings subscribed-principals)
   (common-lisp:declare
    (common-lisp:ignorable client-token domain-identifier request-reason
     subscribed-listings subscribed-principals))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-subscription-request-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscription-requests"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "CreateSubscriptionRequest"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-subscription-request))
(common-lisp:progn
 (common-lisp:defun create-subscription-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key applicable-asset-types
                     authorized-principals client-token domain-identifier
                     environment-identifier manage-access-role name provider
                     subscription-target-config type)
   (common-lisp:declare
    (common-lisp:ignorable applicable-asset-types authorized-principals
     client-token domain-identifier environment-identifier manage-access-role
     name provider subscription-target-config type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-subscription-target-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environments/~A/subscription-targets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-identifier))))
                                                        "CreateSubscriptionTarget"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-subscription-target))
(common-lisp:progn
 (common-lisp:defun create-user-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token domain-identifier
                     user-identifier user-type)
   (common-lisp:declare
    (common-lisp:ignorable client-token domain-identifier user-identifier
     user-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-profile-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/user-profiles"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "CreateUserProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-user-profile))
(common-lisp:progn
 (common-lisp:defun delete-asset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-asset-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/assets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "DeleteAsset"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-asset))
(common-lisp:progn
 (common-lisp:defun delete-asset-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-asset-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/asset-types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "DeleteAssetType"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-asset-type))
(common-lisp:progn
 (common-lisp:defun delete-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token domain-identifier
                     identifier)
   (common-lisp:declare
    (common-lisp:ignorable client-token domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-data-source-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/data-sources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "DeleteDataSource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-data-source))
(common-lisp:progn
 (common-lisp:defun delete-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token identifier
                     skip-deletion-check)
   (common-lisp:declare
    (common-lisp:ignorable client-token identifier skip-deletion-check))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-domain-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "DeleteDomain"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-domain))
(common-lisp:progn
 (common-lisp:defun delete-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-environment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "DeleteEnvironment"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-environment))
(common-lisp:progn
 (common-lisp:defun delete-environment-blueprint-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier
                     environment-blueprint-identifier)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier environment-blueprint-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-environment-blueprint-configuration-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environment-blueprint-configurations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-blueprint-identifier))))
                                                        "DeleteEnvironmentBlueprintConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-environment-blueprint-configuration))
(common-lisp:progn
 (common-lisp:defun delete-environment-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-environment-profile-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environment-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "DeleteEnvironmentProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-environment-profile))
(common-lisp:progn
 (common-lisp:defun delete-form-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier form-type-identifier)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier form-type-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-form-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/form-types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'form-type-identifier))))
                                                        "DeleteFormType"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-form-type))
(common-lisp:progn
 (common-lisp:defun delete-glossary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-glossary-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/glossaries/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "DeleteGlossary"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-glossary))
(common-lisp:progn
 (common-lisp:defun delete-glossary-term
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-glossary-term-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/glossary-terms/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "DeleteGlossaryTerm"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-glossary-term))
(common-lisp:progn
 (common-lisp:defun delete-listing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-listing-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/listings/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "DeleteListing"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-listing))
(common-lisp:progn
 (common-lisp:defun delete-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier
                     skip-deletion-check)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier identifier skip-deletion-check))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-project-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/projects/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "DeleteProject"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-project))
(common-lisp:progn
 (common-lisp:defun delete-project-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier member
                     project-identifier)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier member project-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-project-membership-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/projects/~A/deleteMembership"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-identifier))))
                                                        "DeleteProjectMembership"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-project-membership))
(common-lisp:progn
 (common-lisp:defun delete-subscription-grant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-subscription-grant-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscription-grants/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "DeleteSubscriptionGrant"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-subscription-grant))
(common-lisp:progn
 (common-lisp:defun delete-subscription-request
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-subscription-request-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscription-requests/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "DeleteSubscriptionRequest"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-subscription-request))
(common-lisp:progn
 (common-lisp:defun delete-subscription-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier environment-identifier
                     identifier)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier environment-identifier
     identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-subscription-target-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environments/~A/subscription-targets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "DeleteSubscriptionTarget"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-subscription-target))
(common-lisp:progn
 (common-lisp:defun get-asset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier revision)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier identifier revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-asset-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/assets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetAsset"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-asset))
(common-lisp:progn
 (common-lisp:defun get-asset-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier revision)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier identifier revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-asset-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/asset-types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetAssetType"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-asset-type))
(common-lisp:progn
 (common-lisp:defun get-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-data-source-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/data-sources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetDataSource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-data-source))
(common-lisp:progn
 (common-lisp:defun get-data-source-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-data-source-run-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/data-source-runs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetDataSourceRun"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-data-source-run))
(common-lisp:progn
 (common-lisp:defun get-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identifier)
   (common-lisp:declare (common-lisp:ignorable identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-domain-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetDomain"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-domain))
(common-lisp:progn
 (common-lisp:defun get-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-environment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetEnvironment"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-environment))
(common-lisp:progn
 (common-lisp:defun get-environment-blueprint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-environment-blueprint-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environment-blueprints/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetEnvironmentBlueprint"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-environment-blueprint))
(common-lisp:progn
 (common-lisp:defun get-environment-blueprint-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier
                     environment-blueprint-identifier)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier environment-blueprint-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-environment-blueprint-configuration-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environment-blueprint-configurations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-blueprint-identifier))))
                                                        "GetEnvironmentBlueprintConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-environment-blueprint-configuration))
(common-lisp:progn
 (common-lisp:defun get-environment-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-environment-profile-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environment-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetEnvironmentProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-environment-profile))
(common-lisp:progn
 (common-lisp:defun get-form-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier form-type-identifier
                     revision)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier form-type-identifier revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-form-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/form-types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'form-type-identifier))))
                                                        "GetFormType"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-form-type))
(common-lisp:progn
 (common-lisp:defun get-glossary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-glossary-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/glossaries/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetGlossary"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-glossary))
(common-lisp:progn
 (common-lisp:defun get-glossary-term
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-glossary-term-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/glossary-terms/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetGlossaryTerm"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-glossary-term))
(common-lisp:progn
 (common-lisp:defun get-group-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier group-identifier)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier group-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-group-profile-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/group-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'group-identifier))))
                                                        "GetGroupProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-group-profile))
(common-lisp:progn
 (common-lisp:defun get-iam-portal-login-url
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-iam-portal-login-url-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/get-portal-login-url"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "GetIamPortalLoginUrl"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-iam-portal-login-url))
(common-lisp:progn
 (common-lisp:defun get-listing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier
                     listing-revision)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier identifier listing-revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-listing-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/listings/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetListing"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-listing))
(common-lisp:progn
 (common-lisp:defun get-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-project-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/projects/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetProject"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-project))
(common-lisp:progn
 (common-lisp:defun get-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-subscription-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscriptions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetSubscription"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-subscription))
(common-lisp:progn
 (common-lisp:defun get-subscription-grant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-subscription-grant-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscription-grants/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetSubscriptionGrant"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-subscription-grant))
(common-lisp:progn
 (common-lisp:defun get-subscription-request-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-subscription-request-details-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscription-requests/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetSubscriptionRequestDetails"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-subscription-request-details))
(common-lisp:progn
 (common-lisp:defun get-subscription-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier environment-identifier
                     identifier)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier environment-identifier
     identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-subscription-target-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environments/~A/subscription-targets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetSubscriptionTarget"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-subscription-target))
(common-lisp:progn
 (common-lisp:defun get-user-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier type user-identifier)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier type user-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-user-profile-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/user-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-identifier))))
                                                        "GetUserProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-user-profile))
(common-lisp:progn
 (common-lisp:defun list-asset-revisions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier identifier max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-asset-revisions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/assets/~A/revisions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "ListAssetRevisions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-asset-revisions))
(common-lisp:progn
 (common-lisp:defun list-data-source-run-activities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier max-results
                     next-token status)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier identifier max-results next-token
     status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-data-source-run-activities-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/data-source-runs/~A/activities"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "ListDataSourceRunActivities"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-data-source-run-activities))
(common-lisp:progn
 (common-lisp:defun list-data-source-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-source-identifier domain-identifier
                     max-results next-token status)
   (common-lisp:declare
    (common-lisp:ignorable data-source-identifier domain-identifier max-results
     next-token status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-data-source-runs-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/data-sources/~A/runs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-identifier))))
                                                        "ListDataSourceRuns"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-data-source-runs))
(common-lisp:progn
 (common-lisp:defun list-data-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier environment-identifier
                     max-results name next-token project-identifier status
                     type)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier environment-identifier max-results
     name next-token project-identifier status type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-data-sources-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/data-sources"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "ListDataSources"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-data-sources))
(common-lisp:progn
 (common-lisp:defun list-domains
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token status)
   (common-lisp:declare (common-lisp:ignorable max-results next-token status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-domains-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/v2/domains"
                                                        "ListDomains"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-domains))
(common-lisp:progn
 (common-lisp:defun list-environment-blueprint-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-environment-blueprint-configurations-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environment-blueprint-configurations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "ListEnvironmentBlueprintConfigurations"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-environment-blueprint-configurations))
(common-lisp:progn
 (common-lisp:defun list-environment-blueprints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier managed max-results
                     name next-token)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier managed max-results name
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-environment-blueprints-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environment-blueprints"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "ListEnvironmentBlueprints"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-environment-blueprints))
(common-lisp:progn
 (common-lisp:defun list-environment-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id aws-account-region
                     domain-identifier environment-blueprint-identifier
                     max-results name next-token project-identifier)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id aws-account-region domain-identifier
     environment-blueprint-identifier max-results name next-token
     project-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-environment-profiles-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environment-profiles"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "ListEnvironmentProfiles"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-environment-profiles))
(common-lisp:progn
 (common-lisp:defun list-environments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id aws-account-region
                     domain-identifier environment-blueprint-identifier
                     environment-profile-identifier max-results name next-token
                     project-identifier provider status)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id aws-account-region domain-identifier
     environment-blueprint-identifier environment-profile-identifier
     max-results name next-token project-identifier provider status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-environments-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environments"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "ListEnvironments"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-environments))
(common-lisp:progn
 (common-lisp:defun list-notifications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key after-timestamp before-timestamp
                     domain-identifier max-results next-token subjects
                     task-status type)
   (common-lisp:declare
    (common-lisp:ignorable after-timestamp before-timestamp domain-identifier
     max-results next-token subjects task-status type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-notifications-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/notifications"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "ListNotifications"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-notifications))
(common-lisp:progn
 (common-lisp:defun list-project-memberships
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier max-results next-token
                     project-identifier sort-by sort-order)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier max-results next-token
     project-identifier sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-project-memberships-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/projects/~A/memberships"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-identifier))))
                                                        "ListProjectMemberships"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-project-memberships))
(common-lisp:progn
 (common-lisp:defun list-projects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier group-identifier
                     max-results name next-token user-identifier)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier group-identifier max-results name
     next-token user-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-projects-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/projects"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "ListProjects"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-projects))
(common-lisp:progn
 (common-lisp:defun list-subscription-grants
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier environment-id
                     max-results next-token sort-by sort-order
                     subscribed-listing-id subscription-id
                     subscription-target-id)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier environment-id max-results
     next-token sort-by sort-order subscribed-listing-id subscription-id
     subscription-target-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-subscription-grants-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscription-grants"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "ListSubscriptionGrants"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-subscription-grants))
(common-lisp:progn
 (common-lisp:defun list-subscription-requests
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key approver-project-id domain-identifier
                     max-results next-token owning-project-id sort-by
                     sort-order status subscribed-listing-id)
   (common-lisp:declare
    (common-lisp:ignorable approver-project-id domain-identifier max-results
     next-token owning-project-id sort-by sort-order status
     subscribed-listing-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-subscription-requests-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscription-requests"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "ListSubscriptionRequests"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-subscription-requests))
(common-lisp:progn
 (common-lisp:defun list-subscription-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier environment-identifier
                     max-results next-token sort-by sort-order)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier environment-identifier max-results
     next-token sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-subscription-targets-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environments/~A/subscription-targets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-identifier))))
                                                        "ListSubscriptionTargets"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-subscription-targets))
(common-lisp:progn
 (common-lisp:defun list-subscriptions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key approver-project-id domain-identifier
                     max-results next-token owning-project-id sort-by
                     sort-order status subscribed-listing-id
                     subscription-request-identifier)
   (common-lisp:declare
    (common-lisp:ignorable approver-project-id domain-identifier max-results
     next-token owning-project-id sort-by sort-order status
     subscribed-listing-id subscription-request-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-subscriptions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscriptions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "ListSubscriptions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-subscriptions))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-environment-blueprint-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier enabled-regions
                     environment-blueprint-identifier manage-access-role-arn
                     provisioning-role-arn regional-parameters)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier enabled-regions
     environment-blueprint-identifier manage-access-role-arn
     provisioning-role-arn regional-parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-environment-blueprint-configuration-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environment-blueprint-configurations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-blueprint-identifier))))
                                                        "PutEnvironmentBlueprintConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-environment-blueprint-configuration))
(common-lisp:progn
 (common-lisp:defun reject-predictions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token domain-identifier identifier
                     reject-choices reject-rule revision)
   (common-lisp:declare
    (common-lisp:ignorable client-token domain-identifier identifier
     reject-choices reject-rule revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reject-predictions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/assets/~A/reject-predictions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "RejectPredictions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reject-predictions))
(common-lisp:progn
 (common-lisp:defun reject-subscription-request
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key decision-comment domain-identifier
                     identifier)
   (common-lisp:declare
    (common-lisp:ignorable decision-comment domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reject-subscription-request-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscription-requests/~A/reject"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "RejectSubscriptionRequest"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reject-subscription-request))
(common-lisp:progn
 (common-lisp:defun revoke-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier
                     retain-permissions)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier identifier retain-permissions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-revoke-subscription-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscriptions/~A/revoke"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "RevokeSubscription"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'revoke-subscription))
(common-lisp:progn
 (common-lisp:defun search
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key additional-attributes domain-identifier
                     filters max-results next-token owning-project-identifier
                     search-in search-scope search-text sort)
   (common-lisp:declare
    (common-lisp:ignorable additional-attributes domain-identifier filters
     max-results next-token owning-project-identifier search-in search-scope
     search-text sort))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/search"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "Search"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search))
(common-lisp:progn
 (common-lisp:defun search-group-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier group-type max-results
                     next-token search-text)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier group-type max-results next-token
     search-text))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-group-profiles-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/search-group-profiles"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "SearchGroupProfiles"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-group-profiles))
(common-lisp:progn
 (common-lisp:defun search-listings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key additional-attributes domain-identifier
                     filters max-results next-token search-in search-text sort)
   (common-lisp:declare
    (common-lisp:ignorable additional-attributes domain-identifier filters
     max-results next-token search-in search-text sort))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-listings-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/listings/search"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "SearchListings"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-listings))
(common-lisp:progn
 (common-lisp:defun search-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier filters managed
                     max-results next-token search-in search-scope search-text
                     sort)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier filters managed max-results
     next-token search-in search-scope search-text sort))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-types-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/types-search"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "SearchTypes"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-types))
(common-lisp:progn
 (common-lisp:defun search-user-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier max-results next-token
                     search-text user-type)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier max-results next-token search-text
     user-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-user-profiles-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/search-user-profiles"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "SearchUserProfiles"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-user-profiles))
(common-lisp:progn
 (common-lisp:defun start-data-source-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token data-source-identifier
                     domain-identifier)
   (common-lisp:declare
    (common-lisp:ignorable client-token data-source-identifier
     domain-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-data-source-run-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/data-sources/~A/runs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-identifier))))
                                                        "StartDataSourceRun"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-data-source-run))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-forms-input configuration
                     description domain-identifier enable-setting identifier
                     name publish-on-import recommendation schedule)
   (common-lisp:declare
    (common-lisp:ignorable asset-forms-input configuration description
     domain-identifier enable-setting identifier name publish-on-import
     recommendation schedule))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-data-source-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/data-sources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "UpdateDataSource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-data-source))
(common-lisp:progn
 (common-lisp:defun update-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description
                     domain-execution-role identifier name single-sign-on)
   (common-lisp:declare
    (common-lisp:ignorable client-token description domain-execution-role
     identifier name single-sign-on))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-domain-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "UpdateDomain"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-domain))
(common-lisp:progn
 (common-lisp:defun update-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description domain-identifier
                     glossary-terms identifier name)
   (common-lisp:declare
    (common-lisp:ignorable description domain-identifier glossary-terms
     identifier name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-environment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "UpdateEnvironment"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-environment))
(common-lisp:progn
 (common-lisp:defun update-environment-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id aws-account-region
                     description domain-identifier identifier name
                     user-parameters)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id aws-account-region description
     domain-identifier identifier name user-parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-environment-profile-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environment-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "UpdateEnvironmentProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-environment-profile))
(common-lisp:progn
 (common-lisp:defun update-glossary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description
                     domain-identifier identifier name status)
   (common-lisp:declare
    (common-lisp:ignorable client-token description domain-identifier
     identifier name status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-glossary-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/glossaries/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "UpdateGlossary"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-glossary))
(common-lisp:progn
 (common-lisp:defun update-glossary-term
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier glossary-identifier
                     identifier long-description name short-description status
                     term-relations)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier glossary-identifier identifier
     long-description name short-description status term-relations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-glossary-term-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/glossary-terms/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "UpdateGlossaryTerm"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-glossary-term))
(common-lisp:progn
 (common-lisp:defun update-group-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier group-identifier
                     status)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier group-identifier status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-group-profile-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/group-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'group-identifier))))
                                                        "UpdateGroupProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-group-profile))
(common-lisp:progn
 (common-lisp:defun update-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description domain-identifier
                     glossary-terms identifier name)
   (common-lisp:declare
    (common-lisp:ignorable description domain-identifier glossary-terms
     identifier name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-project-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/projects/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "UpdateProject"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-project))
(common-lisp:progn
 (common-lisp:defun update-subscription-grant-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-identifier domain-identifier
                     failure-cause identifier status target-name)
   (common-lisp:declare
    (common-lisp:ignorable asset-identifier domain-identifier failure-cause
     identifier status target-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-subscription-grant-status-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscription-grants/~A/status/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-identifier))))
                                                        "UpdateSubscriptionGrantStatus"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-subscription-grant-status))
(common-lisp:progn
 (common-lisp:defun update-subscription-request
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier
                     request-reason)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier identifier request-reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-subscription-request-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscription-requests/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "UpdateSubscriptionRequest"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-subscription-request))
(common-lisp:progn
 (common-lisp:defun update-subscription-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key applicable-asset-types
                     authorized-principals domain-identifier
                     environment-identifier identifier manage-access-role name
                     provider subscription-target-config)
   (common-lisp:declare
    (common-lisp:ignorable applicable-asset-types authorized-principals
     domain-identifier environment-identifier identifier manage-access-role
     name provider subscription-target-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-subscription-target-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environments/~A/subscription-targets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "UpdateSubscriptionTarget"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-subscription-target))
(common-lisp:progn
 (common-lisp:defun update-user-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier status type
                     user-identifier)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier status type user-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-user-profile-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/user-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-identifier))))
                                                        "UpdateUserProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-user-profile))
