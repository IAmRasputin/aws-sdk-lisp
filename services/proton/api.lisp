;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/proton/api
  (:use)
  (:nicknames #:aws/proton)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/proton/api)
(common-lisp:progn
 (common-lisp:defclass proton-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "proton"))
 (common-lisp:export 'proton-request))
(common-lisp:progn
 (common-lisp:define-condition proton-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'proton-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (accept-environment-account-connection-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-accept-environment-account-connection-input-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or environment-account-connection-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'accept-environment-account-connection-input
                    'make-accept-environment-account-connection-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-environment-account-connection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-environment-account-connection-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-environment-account-connection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (accept-environment-account-connection-output (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-accept-environment-account-connection-output-"))
   (environment-account-connection
    (common-lisp:error ":environmentaccountconnection is required") :type
    (common-lisp:or environment-account-connection common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'accept-environment-account-connection-output
                    'make-accept-environment-account-connection-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-environment-account-connection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-environment-account-connection-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-account-connection))
      (common-lisp:list
       (common-lisp:cons "environmentAccountConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-environment-account-connection-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (proton-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (account-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-account-settings-"))
   (pipeline-codebuild-role-arn common-lisp:nil :type
    (common-lisp:or role-arn-or-empty-string common-lisp:null))
   (pipeline-provisioning-repository common-lisp:nil :type
    (common-lisp:or repository-branch common-lisp:null))
   (pipeline-service-role-arn common-lisp:nil :type
    (common-lisp:or role-arn-or-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'account-settings 'make-account-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-codebuild-role-arn))
      (common-lisp:list
       (common-lisp:cons "pipelineCodebuildRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-provisioning-repository))
      (common-lisp:list
       (common-lisp:cons "pipelineProvisioningRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-service-role-arn))
      (common-lisp:list
       (common-lisp:cons "pipelineServiceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-settings))
   common-lisp:nil))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype aws-account-id () 'common-lisp:string)
(common-lisp:deftype blocker-status () 'common-lisp:string)
(common-lisp:deftype blocker-type () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-component-deployment-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-component-deployment-input-"))
   (component-name (common-lisp:error ":componentname is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-component-deployment-input
                    'make-cancel-component-deployment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-component-deployment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-component-deployment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "componentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-component-deployment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-component-deployment-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-component-deployment-output-"))
   (component (common-lisp:error ":component is required") :type
    (common-lisp:or component common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-component-deployment-output
                    'make-cancel-component-deployment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-component-deployment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-component-deployment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component))
      (common-lisp:list
       (common-lisp:cons "component"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-component-deployment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-environment-deployment-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-environment-deployment-input-"))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-environment-deployment-input
                    'make-cancel-environment-deployment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-environment-deployment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-environment-deployment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-environment-deployment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-environment-deployment-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-environment-deployment-output-"))
   (environment (common-lisp:error ":environment is required") :type
    (common-lisp:or environment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-environment-deployment-output
                    'make-cancel-environment-deployment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-environment-deployment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-environment-deployment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-environment-deployment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-service-instance-deployment-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-service-instance-deployment-input-"))
   (service-instance-name
    (common-lisp:error ":serviceinstancename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-service-instance-deployment-input
                    'make-cancel-service-instance-deployment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-service-instance-deployment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-service-instance-deployment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-instance-name))
      (common-lisp:list
       (common-lisp:cons "serviceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-service-instance-deployment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-service-instance-deployment-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-service-instance-deployment-output-"))
   (service-instance (common-lisp:error ":serviceinstance is required") :type
    (common-lisp:or service-instance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-service-instance-deployment-output
                    'make-cancel-service-instance-deployment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-service-instance-deployment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-service-instance-deployment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-instance))
      (common-lisp:list
       (common-lisp:cons "serviceInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-service-instance-deployment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-service-pipeline-deployment-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-service-pipeline-deployment-input-"))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-service-pipeline-deployment-input
                    'make-cancel-service-pipeline-deployment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-service-pipeline-deployment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-service-pipeline-deployment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-service-pipeline-deployment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-service-pipeline-deployment-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-service-pipeline-deployment-output-"))
   (pipeline (common-lisp:error ":pipeline is required") :type
    (common-lisp:or service-pipeline common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-service-pipeline-deployment-output
                    'make-cancel-service-pipeline-deployment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-service-pipeline-deployment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-service-pipeline-deployment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline))
      (common-lisp:list
       (common-lisp:cons "pipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-service-pipeline-deployment-output))
   common-lisp:nil))
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (compatible-environment-template (:copier common-lisp:nil)
      (:conc-name "struct-shape-compatible-environment-template-"))
   (major-version (common-lisp:error ":majorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'compatible-environment-template
                    'make-compatible-environment-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compatible-environment-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compatible-environment-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compatible-environment-template))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (compatible-environment-template-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-compatible-environment-template-input-"))
   (major-version (common-lisp:error ":majorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'compatible-environment-template-input
                    'make-compatible-environment-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compatible-environment-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compatible-environment-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compatible-environment-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype compatible-environment-template-input-list ()
   '(trivial-types:proper-list compatible-environment-template-input))
 (common-lisp:defun |make-compatible-environment-template-input-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            compatible-environment-template-input))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype compatible-environment-template-list ()
   '(trivial-types:proper-list compatible-environment-template))
 (common-lisp:defun |make-compatible-environment-template-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            compatible-environment-template))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (component (:copier common-lisp:nil)
      (:conc-name "struct-shape-component-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or component-arn common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (deployment-status (common-lisp:error ":deploymentstatus is required") :type
    (common-lisp:or deployment-status common-lisp:null))
   (deployment-status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (last-client-request-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (last-deployment-attempted-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-deployment-succeeded-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-at (common-lisp:error ":lastmodifiedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (service-instance-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (service-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (service-spec common-lisp:nil :type
    (common-lisp:or spec-contents common-lisp:null)))
 (common-lisp:export (common-lisp:list 'component 'make-component))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-status))
      (common-lisp:list
       (common-lisp:cons "deploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-status-message))
      (common-lisp:list
       (common-lisp:cons "deploymentStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-client-request-token))
      (common-lisp:list
       (common-lisp:cons "lastClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-attempted-at))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentAttemptedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-succeeded-at))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentSucceededAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-instance-name))
      (common-lisp:list
       (common-lisp:cons "serviceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-spec))
      (common-lisp:list
       (common-lisp:cons "serviceSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component))
   common-lisp:nil))
(common-lisp:deftype component-arn () 'common-lisp:string)
(common-lisp:deftype component-deployment-update-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (component-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-component-summary-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or component-arn common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (deployment-status (common-lisp:error ":deploymentstatus is required") :type
    (common-lisp:or deployment-status common-lisp:null))
   (deployment-status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (last-deployment-attempted-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-deployment-succeeded-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-at (common-lisp:error ":lastmodifiedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (service-instance-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (service-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'component-summary 'make-component-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-status))
      (common-lisp:list
       (common-lisp:cons "deploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-status-message))
      (common-lisp:list
       (common-lisp:cons "deploymentStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-attempted-at))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentAttemptedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-succeeded-at))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentSucceededAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-instance-name))
      (common-lisp:list
       (common-lisp:cons "serviceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype component-summary-list ()
   '(trivial-types:proper-list component-summary))
 (common-lisp:defun |make-component-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list component-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (proton-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (counts-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-counts-summary-"))
   (components common-lisp:nil :type
    (common-lisp:or resource-counts-summary common-lisp:null))
   (environment-templates common-lisp:nil :type
    (common-lisp:or resource-counts-summary common-lisp:null))
   (environments common-lisp:nil :type
    (common-lisp:or resource-counts-summary common-lisp:null))
   (pipelines common-lisp:nil :type
    (common-lisp:or resource-counts-summary common-lisp:null))
   (service-instances common-lisp:nil :type
    (common-lisp:or resource-counts-summary common-lisp:null))
   (service-templates common-lisp:nil :type
    (common-lisp:or resource-counts-summary common-lisp:null))
   (services common-lisp:nil :type
    (common-lisp:or resource-counts-summary common-lisp:null)))
 (common-lisp:export (common-lisp:list 'counts-summary 'make-counts-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input counts-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input counts-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'components))
      (common-lisp:list
       (common-lisp:cons "components"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-templates))
      (common-lisp:list
       (common-lisp:cons "environmentTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environments))
      (common-lisp:list
       (common-lisp:cons "environments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipelines))
      (common-lisp:list
       (common-lisp:cons "pipelines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-instances))
      (common-lisp:list
       (common-lisp:cons "serviceInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-templates))
      (common-lisp:list
       (common-lisp:cons "serviceTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'services))
      (common-lisp:list
       (common-lisp:cons "services"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input counts-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-component-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-component-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (environment-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (manifest (common-lisp:error ":manifest is required") :type
    (common-lisp:or template-manifest-contents common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (service-instance-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (service-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (service-spec common-lisp:nil :type
    (common-lisp:or spec-contents common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (template-file (common-lisp:error ":templatefile is required") :type
    (common-lisp:or template-file-contents common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-component-input 'make-create-component-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-component-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-component-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest))
      (common-lisp:list
       (common-lisp:cons "manifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-instance-name))
      (common-lisp:list
       (common-lisp:cons "serviceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-spec))
      (common-lisp:list
       (common-lisp:cons "serviceSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-file))
      (common-lisp:list
       (common-lisp:cons "templateFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-component-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-component-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-component-output-"))
   (component (common-lisp:error ":component is required") :type
    (common-lisp:or component common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-component-output 'make-create-component-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-component-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-component-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component))
      (common-lisp:list
       (common-lisp:cons "component"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-component-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-environment-account-connection-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-environment-account-connection-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (codebuild-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (component-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (management-account-id
    (common-lisp:error ":managementaccountid is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-environment-account-connection-input
                    'make-create-environment-account-connection-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-account-connection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-account-connection-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codebuild-role-arn))
      (common-lisp:list
       (common-lisp:cons "codebuildRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-role-arn))
      (common-lisp:list
       (common-lisp:cons "componentRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'management-account-id))
      (common-lisp:list
       (common-lisp:cons "managementAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-account-connection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-environment-account-connection-output (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-environment-account-connection-output-"))
   (environment-account-connection
    (common-lisp:error ":environmentaccountconnection is required") :type
    (common-lisp:or environment-account-connection common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-environment-account-connection-output
                    'make-create-environment-account-connection-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-account-connection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-account-connection-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-account-connection))
      (common-lisp:list
       (common-lisp:cons "environmentAccountConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-account-connection-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-environment-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-environment-input-"))
   (codebuild-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (component-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (environment-account-connection-id common-lisp:nil :type
    (common-lisp:or environment-account-connection-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (proton-service-role-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (provisioning-repository common-lisp:nil :type
    (common-lisp:or repository-branch-input common-lisp:null))
   (spec (common-lisp:error ":spec is required") :type
    (common-lisp:or spec-contents common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (template-major-version
    (common-lisp:error ":templatemajorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (template-minor-version common-lisp:nil :type
    (common-lisp:or template-version-part common-lisp:null))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-environment-input 'make-create-environment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codebuild-role-arn))
      (common-lisp:list
       (common-lisp:cons "codebuildRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-role-arn))
      (common-lisp:list
       (common-lisp:cons "componentRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-account-connection-id))
      (common-lisp:list
       (common-lisp:cons "environmentAccountConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'proton-service-role-arn))
      (common-lisp:list
       (common-lisp:cons "protonServiceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-repository))
      (common-lisp:list
       (common-lisp:cons "provisioningRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-major-version))
      (common-lisp:list
       (common-lisp:cons "templateMajorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-minor-version))
      (common-lisp:list
       (common-lisp:cons "templateMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-environment-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-environment-output-"))
   (environment (common-lisp:error ":environment is required") :type
    (common-lisp:or environment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-environment-output
                    'make-create-environment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-environment-template-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-environment-template-input-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or display-name common-lisp:null))
   (encryption-key common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (provisioning common-lisp:nil :type
    (common-lisp:or provisioning common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-environment-template-input
                    'make-create-environment-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "encryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provisioning))
      (common-lisp:list
       (common-lisp:cons "provisioning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-environment-template-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-environment-template-output-"))
   (environment-template (common-lisp:error ":environmenttemplate is required")
    :type (common-lisp:or environment-template common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-environment-template-output
                    'make-create-environment-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-template))
      (common-lisp:list
       (common-lisp:cons "environmentTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-environment-template-version-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-environment-template-version-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (major-version common-lisp:nil :type
    (common-lisp:or template-version-part common-lisp:null))
   (source (common-lisp:error ":source is required") :type
    (common-lisp:or template-version-source-input common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-environment-template-version-input
                    'make-create-environment-template-version-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-template-version-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-template-version-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-template-version-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-environment-template-version-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-environment-template-version-output-"))
   (environment-template-version
    (common-lisp:error ":environmenttemplateversion is required") :type
    (common-lisp:or environment-template-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-environment-template-version-output
                    'make-create-environment-template-version-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-template-version-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-template-version-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-template-version))
      (common-lisp:list
       (common-lisp:cons "environmentTemplateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-template-version-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-repository-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-repository-input-"))
   (connection-arn (common-lisp:error ":connectionarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (encryption-key common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (provider (common-lisp:error ":provider is required") :type
    (common-lisp:or repository-provider common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-repository-input 'make-create-repository-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "connectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "encryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-repository-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-repository-output-"))
   (repository (common-lisp:error ":repository is required") :type
    (common-lisp:or repository common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-repository-output 'make-create-repository-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-service-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-service-input-"))
   (branch-name common-lisp:nil :type
    (common-lisp:or git-branch-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (repository-connection-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (repository-id common-lisp:nil :type
    (common-lisp:or repository-id common-lisp:null))
   (spec (common-lisp:error ":spec is required") :type
    (common-lisp:or spec-contents common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (template-major-version
    (common-lisp:error ":templatemajorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (template-minor-version common-lisp:nil :type
    (common-lisp:or template-version-part common-lisp:null))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-service-input 'make-create-service-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-service-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-service-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-name))
      (common-lisp:list
       (common-lisp:cons "branchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-connection-arn))
      (common-lisp:list
       (common-lisp:cons "repositoryConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-id))
      (common-lisp:list
       (common-lisp:cons "repositoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-major-version))
      (common-lisp:list
       (common-lisp:cons "templateMajorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-minor-version))
      (common-lisp:list
       (common-lisp:cons "templateMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-service-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-service-instance-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-service-instance-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (spec (common-lisp:error ":spec is required") :type
    (common-lisp:or spec-contents common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (template-major-version common-lisp:nil :type
    (common-lisp:or template-version-part common-lisp:null))
   (template-minor-version common-lisp:nil :type
    (common-lisp:or template-version-part common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-service-instance-input
                    'make-create-service-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-instance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-major-version))
      (common-lisp:list
       (common-lisp:cons "templateMajorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-minor-version))
      (common-lisp:list
       (common-lisp:cons "templateMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-instance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-service-instance-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-service-instance-output-"))
   (service-instance (common-lisp:error ":serviceinstance is required") :type
    (common-lisp:or service-instance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-service-instance-output
                    'make-create-service-instance-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-instance-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-instance-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-instance))
      (common-lisp:list
       (common-lisp:cons "serviceInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-instance-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-service-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-service-output-"))
   (service (common-lisp:error ":service is required") :type
    (common-lisp:or service common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-service-output 'make-create-service-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-service-sync-config-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-service-sync-config-input-"))
   (branch (common-lisp:error ":branch is required") :type
    (common-lisp:or git-branch-name common-lisp:null))
   (file-path (common-lisp:error ":filepath is required") :type
    (common-lisp:or ops-file-path common-lisp:null))
   (repository-name (common-lisp:error ":repositoryname is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (repository-provider (common-lisp:error ":repositoryprovider is required")
    :type (common-lisp:or repository-provider common-lisp:null))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-service-sync-config-input
                    'make-create-service-sync-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-sync-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-sync-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-path))
      (common-lisp:list
       (common-lisp:cons "filePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-provider))
      (common-lisp:list
       (common-lisp:cons "repositoryProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-sync-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-service-sync-config-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-service-sync-config-output-"))
   (service-sync-config common-lisp:nil :type
    (common-lisp:or service-sync-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-service-sync-config-output
                    'make-create-service-sync-config-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-sync-config-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-sync-config-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-sync-config))
      (common-lisp:list
       (common-lisp:cons "serviceSyncConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-sync-config-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-service-template-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-service-template-input-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or display-name common-lisp:null))
   (encryption-key common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (pipeline-provisioning common-lisp:nil :type
    (common-lisp:or provisioning common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-service-template-input
                    'make-create-service-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "encryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-provisioning))
      (common-lisp:list
       (common-lisp:cons "pipelineProvisioning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-service-template-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-service-template-output-"))
   (service-template (common-lisp:error ":servicetemplate is required") :type
    (common-lisp:or service-template common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-service-template-output
                    'make-create-service-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-template))
      (common-lisp:list
       (common-lisp:cons "serviceTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-service-template-version-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-service-template-version-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (compatible-environment-templates
    (common-lisp:error ":compatibleenvironmenttemplates is required") :type
    (common-lisp:or compatible-environment-template-input-list
                    common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (major-version common-lisp:nil :type
    (common-lisp:or template-version-part common-lisp:null))
   (source (common-lisp:error ":source is required") :type
    (common-lisp:or template-version-source-input common-lisp:null))
   (supported-component-sources common-lisp:nil :type
    (common-lisp:or service-template-supported-component-source-input-list
                    common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-service-template-version-input
                    'make-create-service-template-version-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-template-version-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-template-version-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compatible-environment-templates))
      (common-lisp:list
       (common-lisp:cons "compatibleEnvironmentTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-component-sources))
      (common-lisp:list
       (common-lisp:cons "supportedComponentSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-template-version-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-service-template-version-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-service-template-version-output-"))
   (service-template-version
    (common-lisp:error ":servicetemplateversion is required") :type
    (common-lisp:or service-template-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-service-template-version-output
                    'make-create-service-template-version-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-template-version-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-template-version-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-template-version))
      (common-lisp:list
       (common-lisp:cons "serviceTemplateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-template-version-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-template-sync-config-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-template-sync-config-input-"))
   (branch (common-lisp:error ":branch is required") :type
    (common-lisp:or git-branch-name common-lisp:null))
   (repository-name (common-lisp:error ":repositoryname is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (repository-provider (common-lisp:error ":repositoryprovider is required")
    :type (common-lisp:or repository-provider common-lisp:null))
   (subdirectory common-lisp:nil :type
    (common-lisp:or subdirectory common-lisp:null))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (template-type (common-lisp:error ":templatetype is required") :type
    (common-lisp:or template-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-template-sync-config-input
                    'make-create-template-sync-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-template-sync-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-template-sync-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-provider))
      (common-lisp:list
       (common-lisp:cons "repositoryProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subdirectory))
      (common-lisp:list
       (common-lisp:cons "subdirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-type))
      (common-lisp:list
       (common-lisp:cons "templateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-template-sync-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-template-sync-config-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-template-sync-config-output-"))
   (template-sync-config common-lisp:nil :type
    (common-lisp:or template-sync-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-template-sync-config-output
                    'make-create-template-sync-config-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-template-sync-config-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-template-sync-config-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-sync-config))
      (common-lisp:list
       (common-lisp:cons "templateSyncConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-template-sync-config-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-component-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-component-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-component-input 'make-delete-component-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-component-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-component-output-"))
   (component common-lisp:nil :type
    (common-lisp:or component common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-component-output 'make-delete-component-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component))
      (common-lisp:list
       (common-lisp:cons "component"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-environment-account-connection-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-environment-account-connection-input-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or environment-account-connection-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-environment-account-connection-input
                    'make-delete-environment-account-connection-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-account-connection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-account-connection-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-account-connection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-environment-account-connection-output (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-environment-account-connection-output-"))
   (environment-account-connection common-lisp:nil :type
    (common-lisp:or environment-account-connection common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-environment-account-connection-output
                    'make-delete-environment-account-connection-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-account-connection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-account-connection-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-account-connection))
      (common-lisp:list
       (common-lisp:cons "environmentAccountConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-account-connection-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-environment-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-environment-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-environment-input 'make-delete-environment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-environment-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-environment-output-"))
   (environment common-lisp:nil :type
    (common-lisp:or environment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-environment-output
                    'make-delete-environment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-environment-template-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-environment-template-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-environment-template-input
                    'make-delete-environment-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-environment-template-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-environment-template-output-"))
   (environment-template common-lisp:nil :type
    (common-lisp:or environment-template common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-environment-template-output
                    'make-delete-environment-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-template))
      (common-lisp:list
       (common-lisp:cons "environmentTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-environment-template-version-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-environment-template-version-input-"))
   (major-version (common-lisp:error ":majorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (minor-version (common-lisp:error ":minorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-environment-template-version-input
                    'make-delete-environment-template-version-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-template-version-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-template-version-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minor-version))
      (common-lisp:list
       (common-lisp:cons "minorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-template-version-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-environment-template-version-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-environment-template-version-output-"))
   (environment-template-version common-lisp:nil :type
    (common-lisp:or environment-template-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-environment-template-version-output
                    'make-delete-environment-template-version-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-template-version-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-template-version-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-template-version))
      (common-lisp:list
       (common-lisp:cons "environmentTemplateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-template-version-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-repository-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-repository-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (provider (common-lisp:error ":provider is required") :type
    (common-lisp:or repository-provider common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-repository-input 'make-delete-repository-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-repository-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-repository-output-"))
   (repository common-lisp:nil :type
    (common-lisp:or repository common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-repository-output 'make-delete-repository-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-service-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-service-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-service-input 'make-delete-service-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-service-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-service-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-service-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-service-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-service-output-"))
   (service common-lisp:nil :type (common-lisp:or service common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-service-output 'make-delete-service-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-service-sync-config-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-service-sync-config-input-"))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-service-sync-config-input
                    'make-delete-service-sync-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-sync-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-sync-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-sync-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-service-sync-config-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-service-sync-config-output-"))
   (service-sync-config common-lisp:nil :type
    (common-lisp:or service-sync-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-service-sync-config-output
                    'make-delete-service-sync-config-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-sync-config-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-sync-config-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-sync-config))
      (common-lisp:list
       (common-lisp:cons "serviceSyncConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-sync-config-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-service-template-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-service-template-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-service-template-input
                    'make-delete-service-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-service-template-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-service-template-output-"))
   (service-template common-lisp:nil :type
    (common-lisp:or service-template common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-service-template-output
                    'make-delete-service-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-template))
      (common-lisp:list
       (common-lisp:cons "serviceTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-service-template-version-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-service-template-version-input-"))
   (major-version (common-lisp:error ":majorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (minor-version (common-lisp:error ":minorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-service-template-version-input
                    'make-delete-service-template-version-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-template-version-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-template-version-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minor-version))
      (common-lisp:list
       (common-lisp:cons "minorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-template-version-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-service-template-version-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-service-template-version-output-"))
   (service-template-version common-lisp:nil :type
    (common-lisp:or service-template-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-service-template-version-output
                    'make-delete-service-template-version-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-template-version-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-template-version-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-template-version))
      (common-lisp:list
       (common-lisp:cons "serviceTemplateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-template-version-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-template-sync-config-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-template-sync-config-input-"))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (template-type (common-lisp:error ":templatetype is required") :type
    (common-lisp:or template-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-template-sync-config-input
                    'make-delete-template-sync-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-sync-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-sync-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-type))
      (common-lisp:list
       (common-lisp:cons "templateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-sync-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-template-sync-config-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-template-sync-config-output-"))
   (template-sync-config common-lisp:nil :type
    (common-lisp:or template-sync-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-template-sync-config-output
                    'make-delete-template-sync-config-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-sync-config-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-sync-config-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-sync-config))
      (common-lisp:list
       (common-lisp:cons "templateSyncConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-sync-config-output))
   common-lisp:nil))
(common-lisp:deftype deployment-id () 'common-lisp:string)
(common-lisp:deftype deployment-status () 'common-lisp:string)
(common-lisp:deftype deployment-update-type () 'common-lisp:string)
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype display-name () 'common-lisp:string)
(common-lisp:deftype empty-next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (environment (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or environment-arn common-lisp:null))
   (codebuild-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (component-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (deployment-status (common-lisp:error ":deploymentstatus is required") :type
    (common-lisp:or deployment-status common-lisp:null))
   (deployment-status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (environment-account-connection-id common-lisp:nil :type
    (common-lisp:or environment-account-connection-id common-lisp:null))
   (environment-account-id common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (last-deployment-attempted-at
    (common-lisp:error ":lastdeploymentattemptedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-deployment-succeeded-at
    (common-lisp:error ":lastdeploymentsucceededat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (proton-service-role-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (provisioning common-lisp:nil :type
    (common-lisp:or provisioning common-lisp:null))
   (provisioning-repository common-lisp:nil :type
    (common-lisp:or repository-branch common-lisp:null))
   (spec common-lisp:nil :type (common-lisp:or spec-contents common-lisp:null))
   (template-major-version
    (common-lisp:error ":templatemajorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (template-minor-version
    (common-lisp:error ":templateminorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'environment 'make-environment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codebuild-role-arn))
      (common-lisp:list
       (common-lisp:cons "codebuildRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-role-arn))
      (common-lisp:list
       (common-lisp:cons "componentRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-status))
      (common-lisp:list
       (common-lisp:cons "deploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-status-message))
      (common-lisp:list
       (common-lisp:cons "deploymentStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-account-connection-id))
      (common-lisp:list
       (common-lisp:cons "environmentAccountConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-account-id))
      (common-lisp:list
       (common-lisp:cons "environmentAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-attempted-at))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentAttemptedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-succeeded-at))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentSucceededAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'proton-service-role-arn))
      (common-lisp:list
       (common-lisp:cons "protonServiceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provisioning))
      (common-lisp:list
       (common-lisp:cons "provisioning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-repository))
      (common-lisp:list
       (common-lisp:cons "provisioningRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-major-version))
      (common-lisp:list
       (common-lisp:cons "templateMajorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-minor-version))
      (common-lisp:list
       (common-lisp:cons "templateMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (environment-account-connection (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-account-connection-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or environment-account-connection-arn common-lisp:null))
   (codebuild-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (component-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (environment-account-id
    (common-lisp:error ":environmentaccountid is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or environment-account-connection-id common-lisp:null))
   (last-modified-at (common-lisp:error ":lastmodifiedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (management-account-id
    (common-lisp:error ":managementaccountid is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (requested-at (common-lisp:error ":requestedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or environment-account-connection-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'environment-account-connection
                    'make-environment-account-connection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-account-connection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-account-connection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codebuild-role-arn))
      (common-lisp:list
       (common-lisp:cons "codebuildRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-role-arn))
      (common-lisp:list
       (common-lisp:cons "componentRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-account-id))
      (common-lisp:list
       (common-lisp:cons "environmentAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'management-account-id))
      (common-lisp:list
       (common-lisp:cons "managementAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requested-at))
      (common-lisp:list
       (common-lisp:cons "requestedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-account-connection))
   common-lisp:nil))
(common-lisp:deftype environment-account-connection-arn () 'common-lisp:string)
(common-lisp:deftype environment-account-connection-id () 'common-lisp:string)
(common-lisp:deftype environment-account-connection-requester-account-type ()
  'common-lisp:string)
(common-lisp:deftype environment-account-connection-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype environment-account-connection-status-list ()
   '(trivial-types:proper-list environment-account-connection-status))
 (common-lisp:defun |make-environment-account-connection-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            environment-account-connection-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (environment-account-connection-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-account-connection-summary-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or environment-account-connection-arn common-lisp:null))
   (component-role-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (environment-account-id
    (common-lisp:error ":environmentaccountid is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or environment-account-connection-id common-lisp:null))
   (last-modified-at (common-lisp:error ":lastmodifiedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (management-account-id
    (common-lisp:error ":managementaccountid is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (requested-at (common-lisp:error ":requestedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or environment-account-connection-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'environment-account-connection-summary
                    'make-environment-account-connection-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-account-connection-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-account-connection-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-role-arn))
      (common-lisp:list
       (common-lisp:cons "componentRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-account-id))
      (common-lisp:list
       (common-lisp:cons "environmentAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'management-account-id))
      (common-lisp:list
       (common-lisp:cons "managementAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requested-at))
      (common-lisp:list
       (common-lisp:cons "requestedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-account-connection-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype environment-account-connection-summary-list ()
   '(trivial-types:proper-list environment-account-connection-summary))
 (common-lisp:defun |make-environment-account-connection-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            environment-account-connection-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype environment-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (environment-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-summary-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or environment-arn common-lisp:null))
   (component-role-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (deployment-status (common-lisp:error ":deploymentstatus is required") :type
    (common-lisp:or deployment-status common-lisp:null))
   (deployment-status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (environment-account-connection-id common-lisp:nil :type
    (common-lisp:or environment-account-connection-id common-lisp:null))
   (environment-account-id common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (last-deployment-attempted-at
    (common-lisp:error ":lastdeploymentattemptedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-deployment-succeeded-at
    (common-lisp:error ":lastdeploymentsucceededat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (proton-service-role-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (provisioning common-lisp:nil :type
    (common-lisp:or provisioning common-lisp:null))
   (template-major-version
    (common-lisp:error ":templatemajorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (template-minor-version
    (common-lisp:error ":templateminorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'environment-summary 'make-environment-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environment-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environment-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-role-arn))
      (common-lisp:list
       (common-lisp:cons "componentRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-status))
      (common-lisp:list
       (common-lisp:cons "deploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-status-message))
      (common-lisp:list
       (common-lisp:cons "deploymentStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-account-connection-id))
      (common-lisp:list
       (common-lisp:cons "environmentAccountConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-account-id))
      (common-lisp:list
       (common-lisp:cons "environmentAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-attempted-at))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentAttemptedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-succeeded-at))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentSucceededAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'proton-service-role-arn))
      (common-lisp:list
       (common-lisp:cons "protonServiceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provisioning))
      (common-lisp:list
       (common-lisp:cons "provisioning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-major-version))
      (common-lisp:list
       (common-lisp:cons "templateMajorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-minor-version))
      (common-lisp:list
       (common-lisp:cons "templateMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environment-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype environment-summary-list ()
   '(trivial-types:proper-list environment-summary))
 (common-lisp:defun |make-environment-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list environment-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (environment-template (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-template-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or environment-template-arn common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or display-name common-lisp:null))
   (encryption-key common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (last-modified-at (common-lisp:error ":lastmodifiedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (provisioning common-lisp:nil :type
    (common-lisp:or provisioning common-lisp:null))
   (recommended-version common-lisp:nil :type
    (common-lisp:or full-template-version-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'environment-template 'make-environment-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environment-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environment-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "encryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provisioning))
      (common-lisp:list
       (common-lisp:cons "provisioning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommended-version))
      (common-lisp:list
       (common-lisp:cons "recommendedVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environment-template))
   common-lisp:nil))
(common-lisp:deftype environment-template-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (environment-template-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-template-filter-"))
   (major-version (common-lisp:error ":majorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'environment-template-filter
                    'make-environment-template-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-template-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-template-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-template-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype environment-template-filter-list ()
   '(trivial-types:proper-list environment-template-filter))
 (common-lisp:defun |make-environment-template-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            environment-template-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (environment-template-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-template-summary-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or environment-template-arn common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or display-name common-lisp:null))
   (last-modified-at (common-lisp:error ":lastmodifiedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (provisioning common-lisp:nil :type
    (common-lisp:or provisioning common-lisp:null))
   (recommended-version common-lisp:nil :type
    (common-lisp:or full-template-version-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'environment-template-summary
                    'make-environment-template-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-template-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-template-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provisioning))
      (common-lisp:list
       (common-lisp:cons "provisioning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommended-version))
      (common-lisp:list
       (common-lisp:cons "recommendedVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-template-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype environment-template-summary-list ()
   '(trivial-types:proper-list environment-template-summary))
 (common-lisp:defun |make-environment-template-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            environment-template-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (environment-template-version (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-template-version-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or environment-template-version-arn common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (last-modified-at (common-lisp:error ":lastmodifiedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (major-version (common-lisp:error ":majorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (minor-version (common-lisp:error ":minorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (recommended-minor-version common-lisp:nil :type
    (common-lisp:or template-version-part common-lisp:null))
   (schema common-lisp:nil :type
    (common-lisp:or template-schema common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or template-version-status common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'environment-template-version
                    'make-environment-template-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-template-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-template-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minor-version))
      (common-lisp:list
       (common-lisp:cons "minorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommended-minor-version))
      (common-lisp:list
       (common-lisp:cons "recommendedMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-template-version))
   common-lisp:nil))
(common-lisp:deftype environment-template-version-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (environment-template-version-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-template-version-summary-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or environment-template-version-arn common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (last-modified-at (common-lisp:error ":lastmodifiedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (major-version (common-lisp:error ":majorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (minor-version (common-lisp:error ":minorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (recommended-minor-version common-lisp:nil :type
    (common-lisp:or template-version-part common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or template-version-status common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'environment-template-version-summary
                    'make-environment-template-version-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-template-version-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-template-version-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minor-version))
      (common-lisp:list
       (common-lisp:cons "minorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommended-minor-version))
      (common-lisp:list
       (common-lisp:cons "recommendedMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-template-version-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype environment-template-version-summary-list ()
   '(trivial-types:proper-list environment-template-version-summary))
 (common-lisp:defun |make-environment-template-version-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            environment-template-version-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype full-template-version-number () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-account-settings-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-account-settings-input-")))
 (common-lisp:export
  (common-lisp:list 'get-account-settings-input
                    'make-get-account-settings-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-account-settings-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-account-settings-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-account-settings-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-account-settings-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-account-settings-output-"))
   (account-settings common-lisp:nil :type
    (common-lisp:or account-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-account-settings-output
                    'make-get-account-settings-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-account-settings-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-account-settings-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-settings))
      (common-lisp:list
       (common-lisp:cons "accountSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-account-settings-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-component-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-component-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-component-input 'make-get-component-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-component-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-component-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-component-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-component-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-component-output-"))
   (component common-lisp:nil :type
    (common-lisp:or component common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-component-output 'make-get-component-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-component-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-component-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component))
      (common-lisp:list
       (common-lisp:cons "component"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-component-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-environment-account-connection-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-environment-account-connection-input-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or environment-account-connection-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-environment-account-connection-input
                    'make-get-environment-account-connection-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-account-connection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-account-connection-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-account-connection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-environment-account-connection-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-environment-account-connection-output-"))
   (environment-account-connection
    (common-lisp:error ":environmentaccountconnection is required") :type
    (common-lisp:or environment-account-connection common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-environment-account-connection-output
                    'make-get-environment-account-connection-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-account-connection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-account-connection-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-account-connection))
      (common-lisp:list
       (common-lisp:cons "environmentAccountConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-account-connection-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-environment-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-environment-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-environment-input 'make-get-environment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-environment-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-environment-output-"))
   (environment (common-lisp:error ":environment is required") :type
    (common-lisp:or environment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-environment-output 'make-get-environment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-environment-template-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-environment-template-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-environment-template-input
                    'make-get-environment-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-environment-template-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-environment-template-output-"))
   (environment-template (common-lisp:error ":environmenttemplate is required")
    :type (common-lisp:or environment-template common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-environment-template-output
                    'make-get-environment-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-template))
      (common-lisp:list
       (common-lisp:cons "environmentTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-environment-template-version-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-environment-template-version-input-"))
   (major-version (common-lisp:error ":majorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (minor-version (common-lisp:error ":minorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-environment-template-version-input
                    'make-get-environment-template-version-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-template-version-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-template-version-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minor-version))
      (common-lisp:list
       (common-lisp:cons "minorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-template-version-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-environment-template-version-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-environment-template-version-output-"))
   (environment-template-version
    (common-lisp:error ":environmenttemplateversion is required") :type
    (common-lisp:or environment-template-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-environment-template-version-output
                    'make-get-environment-template-version-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-template-version-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-template-version-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-template-version))
      (common-lisp:list
       (common-lisp:cons "environmentTemplateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-template-version-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-repository-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-repository-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (provider (common-lisp:error ":provider is required") :type
    (common-lisp:or repository-provider common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-repository-input 'make-get-repository-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-repository-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-repository-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-repository-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-repository-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-repository-output-"))
   (repository (common-lisp:error ":repository is required") :type
    (common-lisp:or repository common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-repository-output 'make-get-repository-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-repository-sync-status-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-repository-sync-status-input-"))
   (branch (common-lisp:error ":branch is required") :type
    (common-lisp:or git-branch-name common-lisp:null))
   (repository-name (common-lisp:error ":repositoryname is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (repository-provider (common-lisp:error ":repositoryprovider is required")
    :type (common-lisp:or repository-provider common-lisp:null))
   (sync-type (common-lisp:error ":synctype is required") :type
    (common-lisp:or sync-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-repository-sync-status-input
                    'make-get-repository-sync-status-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-sync-status-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-sync-status-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-provider))
      (common-lisp:list
       (common-lisp:cons "repositoryProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-type))
      (common-lisp:list
       (common-lisp:cons "syncType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-sync-status-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-repository-sync-status-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-repository-sync-status-output-"))
   (latest-sync common-lisp:nil :type
    (common-lisp:or repository-sync-attempt common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-repository-sync-status-output
                    'make-get-repository-sync-status-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-sync-status-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-sync-status-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-sync))
      (common-lisp:list
       (common-lisp:cons "latestSync"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-sync-status-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resources-summary-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resources-summary-input-")))
 (common-lisp:export
  (common-lisp:list 'get-resources-summary-input
                    'make-get-resources-summary-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resources-summary-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resources-summary-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resources-summary-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resources-summary-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resources-summary-output-"))
   (counts (common-lisp:error ":counts is required") :type
    (common-lisp:or counts-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resources-summary-output
                    'make-get-resources-summary-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resources-summary-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resources-summary-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'counts))
      (common-lisp:list
       (common-lisp:cons "counts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resources-summary-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-service-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-service-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-service-input 'make-get-service-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-service-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-service-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-service-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-service-instance-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-service-instance-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-service-instance-input
                    'make-get-service-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-instance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-instance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-service-instance-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-service-instance-output-"))
   (service-instance (common-lisp:error ":serviceinstance is required") :type
    (common-lisp:or service-instance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-service-instance-output
                    'make-get-service-instance-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-instance-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-instance-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-instance))
      (common-lisp:list
       (common-lisp:cons "serviceInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-instance-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-service-instance-sync-status-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-service-instance-sync-status-input-"))
   (service-instance-name
    (common-lisp:error ":serviceinstancename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-service-instance-sync-status-input
                    'make-get-service-instance-sync-status-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-instance-sync-status-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-instance-sync-status-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-instance-name))
      (common-lisp:list
       (common-lisp:cons "serviceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-instance-sync-status-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-service-instance-sync-status-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-service-instance-sync-status-output-"))
   (desired-state common-lisp:nil :type
    (common-lisp:or revision common-lisp:null))
   (latest-successful-sync common-lisp:nil :type
    (common-lisp:or resource-sync-attempt common-lisp:null))
   (latest-sync common-lisp:nil :type
    (common-lisp:or resource-sync-attempt common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-service-instance-sync-status-output
                    'make-get-service-instance-sync-status-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-instance-sync-status-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-instance-sync-status-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-state))
      (common-lisp:list
       (common-lisp:cons "desiredState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-successful-sync))
      (common-lisp:list
       (common-lisp:cons "latestSuccessfulSync"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-sync))
      (common-lisp:list
       (common-lisp:cons "latestSync"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-instance-sync-status-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-service-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-service-output-"))
   (service common-lisp:nil :type (common-lisp:or service common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-service-output 'make-get-service-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-service-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-service-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-service-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-service-sync-blocker-summary-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-service-sync-blocker-summary-input-"))
   (service-instance-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-service-sync-blocker-summary-input
                    'make-get-service-sync-blocker-summary-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-sync-blocker-summary-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-sync-blocker-summary-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-instance-name))
      (common-lisp:list
       (common-lisp:cons "serviceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-sync-blocker-summary-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-service-sync-blocker-summary-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-service-sync-blocker-summary-output-"))
   (service-sync-blocker-summary common-lisp:nil :type
    (common-lisp:or service-sync-blocker-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-service-sync-blocker-summary-output
                    'make-get-service-sync-blocker-summary-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-sync-blocker-summary-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-sync-blocker-summary-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-sync-blocker-summary))
      (common-lisp:list
       (common-lisp:cons "serviceSyncBlockerSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-sync-blocker-summary-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-service-sync-config-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-service-sync-config-input-"))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-service-sync-config-input
                    'make-get-service-sync-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-sync-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-sync-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-sync-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-service-sync-config-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-service-sync-config-output-"))
   (service-sync-config common-lisp:nil :type
    (common-lisp:or service-sync-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-service-sync-config-output
                    'make-get-service-sync-config-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-sync-config-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-sync-config-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-sync-config))
      (common-lisp:list
       (common-lisp:cons "serviceSyncConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-sync-config-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-service-template-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-service-template-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-service-template-input
                    'make-get-service-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-service-template-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-service-template-output-"))
   (service-template (common-lisp:error ":servicetemplate is required") :type
    (common-lisp:or service-template common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-service-template-output
                    'make-get-service-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-template))
      (common-lisp:list
       (common-lisp:cons "serviceTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-service-template-version-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-service-template-version-input-"))
   (major-version (common-lisp:error ":majorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (minor-version (common-lisp:error ":minorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-service-template-version-input
                    'make-get-service-template-version-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-template-version-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-template-version-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minor-version))
      (common-lisp:list
       (common-lisp:cons "minorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-template-version-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-service-template-version-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-service-template-version-output-"))
   (service-template-version
    (common-lisp:error ":servicetemplateversion is required") :type
    (common-lisp:or service-template-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-service-template-version-output
                    'make-get-service-template-version-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-template-version-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-template-version-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-template-version))
      (common-lisp:list
       (common-lisp:cons "serviceTemplateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-template-version-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-template-sync-config-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-template-sync-config-input-"))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (template-type (common-lisp:error ":templatetype is required") :type
    (common-lisp:or template-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-template-sync-config-input
                    'make-get-template-sync-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-template-sync-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-template-sync-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-type))
      (common-lisp:list
       (common-lisp:cons "templateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-template-sync-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-template-sync-config-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-template-sync-config-output-"))
   (template-sync-config common-lisp:nil :type
    (common-lisp:or template-sync-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-template-sync-config-output
                    'make-get-template-sync-config-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-template-sync-config-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-template-sync-config-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-sync-config))
      (common-lisp:list
       (common-lisp:cons "templateSyncConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-template-sync-config-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-template-sync-status-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-template-sync-status-input-"))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (template-type (common-lisp:error ":templatetype is required") :type
    (common-lisp:or template-type common-lisp:null))
   (template-version (common-lisp:error ":templateversion is required") :type
    (common-lisp:or template-version-part common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-template-sync-status-input
                    'make-get-template-sync-status-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-template-sync-status-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-template-sync-status-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-type))
      (common-lisp:list
       (common-lisp:cons "templateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-version))
      (common-lisp:list
       (common-lisp:cons "templateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-template-sync-status-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-template-sync-status-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-template-sync-status-output-"))
   (desired-state common-lisp:nil :type
    (common-lisp:or revision common-lisp:null))
   (latest-successful-sync common-lisp:nil :type
    (common-lisp:or resource-sync-attempt common-lisp:null))
   (latest-sync common-lisp:nil :type
    (common-lisp:or resource-sync-attempt common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-template-sync-status-output
                    'make-get-template-sync-status-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-template-sync-status-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-template-sync-status-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-state))
      (common-lisp:list
       (common-lisp:cons "desiredState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-successful-sync))
      (common-lisp:list
       (common-lisp:cons "latestSuccessfulSync"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-sync))
      (common-lisp:list
       (common-lisp:cons "latestSync"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-template-sync-status-output))
   common-lisp:nil))
(common-lisp:deftype git-branch-name () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (proton-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:deftype latest-sync-blockers ()
   '(trivial-types:proper-list sync-blocker))
 (common-lisp:defun |make-latest-sync-blockers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sync-blocker))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-component-outputs-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-component-outputs-input-"))
   (component-name (common-lisp:error ":componentname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or empty-next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-component-outputs-input
                    'make-list-component-outputs-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-component-outputs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-component-outputs-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "componentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-component-outputs-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-component-outputs-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-component-outputs-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or empty-next-token common-lisp:null))
   (outputs (common-lisp:error ":outputs is required") :type
    (common-lisp:or outputs-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-component-outputs-output
                    'make-list-component-outputs-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-component-outputs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-component-outputs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-component-outputs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-component-provisioned-resources-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-component-provisioned-resources-input-"))
   (component-name (common-lisp:error ":componentname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or empty-next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-component-provisioned-resources-input
                    'make-list-component-provisioned-resources-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-component-provisioned-resources-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-component-provisioned-resources-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "componentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-component-provisioned-resources-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-component-provisioned-resources-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-component-provisioned-resources-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or empty-next-token common-lisp:null))
   (provisioned-resources
    (common-lisp:error ":provisionedresources is required") :type
    (common-lisp:or provisioned-resource-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-component-provisioned-resources-output
                    'make-list-component-provisioned-resources-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-component-provisioned-resources-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-component-provisioned-resources-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-resources))
      (common-lisp:list
       (common-lisp:cons "provisionedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-component-provisioned-resources-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-components-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-components-input-"))
   (environment-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-page-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (service-instance-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (service-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-components-input 'make-list-components-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-components-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-components-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-instance-name))
      (common-lisp:list
       (common-lisp:cons "serviceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-components-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-components-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-components-output-"))
   (components (common-lisp:error ":components is required") :type
    (common-lisp:or component-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-components-output 'make-list-components-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-components-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-components-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'components))
      (common-lisp:list
       (common-lisp:cons "components"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-components-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-environment-account-connections-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-environment-account-connections-input-"))
   (environment-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-page-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (requested-by (common-lisp:error ":requestedby is required") :type
    (common-lisp:or environment-account-connection-requester-account-type
                    common-lisp:null))
   (statuses common-lisp:nil :type
    (common-lisp:or environment-account-connection-status-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-environment-account-connections-input
                    'make-list-environment-account-connections-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-account-connections-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-account-connections-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requested-by))
      (common-lisp:list
       (common-lisp:cons "requestedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statuses))
      (common-lisp:list
       (common-lisp:cons "statuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-account-connections-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-environment-account-connections-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-environment-account-connections-output-"))
   (environment-account-connections
    (common-lisp:error ":environmentaccountconnections is required") :type
    (common-lisp:or environment-account-connection-summary-list
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-environment-account-connections-output
                    'make-list-environment-account-connections-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-account-connections-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-account-connections-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-account-connections))
      (common-lisp:list
       (common-lisp:cons "environmentAccountConnections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-account-connections-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-environment-outputs-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-environment-outputs-input-"))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or empty-next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-environment-outputs-input
                    'make-list-environment-outputs-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-outputs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-outputs-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-outputs-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-environment-outputs-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-environment-outputs-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or empty-next-token common-lisp:null))
   (outputs (common-lisp:error ":outputs is required") :type
    (common-lisp:or outputs-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-environment-outputs-output
                    'make-list-environment-outputs-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-outputs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-outputs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-outputs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-environment-provisioned-resources-input (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-environment-provisioned-resources-input-"))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or empty-next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-environment-provisioned-resources-input
                    'make-list-environment-provisioned-resources-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-provisioned-resources-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-provisioned-resources-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-provisioned-resources-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-environment-provisioned-resources-output (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-environment-provisioned-resources-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or empty-next-token common-lisp:null))
   (provisioned-resources
    (common-lisp:error ":provisionedresources is required") :type
    (common-lisp:or provisioned-resource-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-environment-provisioned-resources-output
                    'make-list-environment-provisioned-resources-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-provisioned-resources-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-provisioned-resources-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-resources))
      (common-lisp:list
       (common-lisp:cons "provisionedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-provisioned-resources-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-environment-template-versions-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-environment-template-versions-input-"))
   (major-version common-lisp:nil :type
    (common-lisp:or template-version-part common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-page-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-environment-template-versions-input
                    'make-list-environment-template-versions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-template-versions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-template-versions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-template-versions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-environment-template-versions-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-environment-template-versions-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (template-versions (common-lisp:error ":templateversions is required") :type
    (common-lisp:or environment-template-version-summary-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-environment-template-versions-output
                    'make-list-environment-template-versions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-template-versions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-template-versions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-versions))
      (common-lisp:list
       (common-lisp:cons "templateVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-template-versions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-environment-templates-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-environment-templates-input-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-page-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-environment-templates-input
                    'make-list-environment-templates-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-templates-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-templates-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-templates-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-environment-templates-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-environment-templates-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (templates (common-lisp:error ":templates is required") :type
    (common-lisp:or environment-template-summary-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-environment-templates-output
                    'make-list-environment-templates-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-templates-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-templates-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'templates))
      (common-lisp:list
       (common-lisp:cons "templates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-templates-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-environments-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-environments-input-"))
   (environment-templates common-lisp:nil :type
    (common-lisp:or environment-template-filter-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-page-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-environments-input 'make-list-environments-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-templates))
      (common-lisp:list
       (common-lisp:cons "environmentTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-environments-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-environments-output-"))
   (environments (common-lisp:error ":environments is required") :type
    (common-lisp:or environment-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-environments-output 'make-list-environments-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environments))
      (common-lisp:list
       (common-lisp:cons "environments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-repositories-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-repositories-input-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-page-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-repositories-input 'make-list-repositories-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-repositories-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-repositories-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (repositories (common-lisp:error ":repositories is required") :type
    (common-lisp:or repository-summary-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-repositories-output 'make-list-repositories-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repositories))
      (common-lisp:list
       (common-lisp:cons "repositories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-repository-sync-definitions-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-repository-sync-definitions-input-"))
   (next-token common-lisp:nil :type
    (common-lisp:or empty-next-token common-lisp:null))
   (repository-name (common-lisp:error ":repositoryname is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (repository-provider (common-lisp:error ":repositoryprovider is required")
    :type (common-lisp:or repository-provider common-lisp:null))
   (sync-type (common-lisp:error ":synctype is required") :type
    (common-lisp:or sync-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-repository-sync-definitions-input
                    'make-list-repository-sync-definitions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-sync-definitions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-sync-definitions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-provider))
      (common-lisp:list
       (common-lisp:cons "repositoryProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-type))
      (common-lisp:list
       (common-lisp:cons "syncType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-sync-definitions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-repository-sync-definitions-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-repository-sync-definitions-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or empty-next-token common-lisp:null))
   (sync-definitions (common-lisp:error ":syncdefinitions is required") :type
    (common-lisp:or repository-sync-definition-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-repository-sync-definitions-output
                    'make-list-repository-sync-definitions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-sync-definitions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-sync-definitions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-definitions))
      (common-lisp:list
       (common-lisp:cons "syncDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-sync-definitions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-service-instance-outputs-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-service-instance-outputs-input-"))
   (next-token common-lisp:nil :type
    (common-lisp:or empty-next-token common-lisp:null))
   (service-instance-name
    (common-lisp:error ":serviceinstancename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-service-instance-outputs-input
                    'make-list-service-instance-outputs-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instance-outputs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instance-outputs-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-instance-name))
      (common-lisp:list
       (common-lisp:cons "serviceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instance-outputs-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-service-instance-outputs-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-service-instance-outputs-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or empty-next-token common-lisp:null))
   (outputs (common-lisp:error ":outputs is required") :type
    (common-lisp:or outputs-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-service-instance-outputs-output
                    'make-list-service-instance-outputs-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instance-outputs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instance-outputs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instance-outputs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-service-instance-provisioned-resources-input
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-service-instance-provisioned-resources-input-"))
   (next-token common-lisp:nil :type
    (common-lisp:or empty-next-token common-lisp:null))
   (service-instance-name
    (common-lisp:error ":serviceinstancename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-service-instance-provisioned-resources-input
                    'make-list-service-instance-provisioned-resources-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instance-provisioned-resources-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instance-provisioned-resources-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-instance-name))
      (common-lisp:list
       (common-lisp:cons "serviceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instance-provisioned-resources-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-service-instance-provisioned-resources-output
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-service-instance-provisioned-resources-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or empty-next-token common-lisp:null))
   (provisioned-resources
    (common-lisp:error ":provisionedresources is required") :type
    (common-lisp:or provisioned-resource-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-service-instance-provisioned-resources-output
                    'make-list-service-instance-provisioned-resources-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instance-provisioned-resources-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instance-provisioned-resources-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-resources))
      (common-lisp:list
       (common-lisp:cons "provisionedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instance-provisioned-resources-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-service-instances-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-service-instances-filter-"))
   (key common-lisp:nil :type
    (common-lisp:or list-service-instances-filter-by common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or list-service-instances-filter-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-service-instances-filter
                    'make-list-service-instances-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instances-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instances-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instances-filter))
   common-lisp:nil))
(common-lisp:deftype list-service-instances-filter-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype list-service-instances-filter-list ()
   '(trivial-types:proper-list list-service-instances-filter))
 (common-lisp:defun |make-list-service-instances-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-service-instances-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype list-service-instances-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-service-instances-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-service-instances-input-"))
   (filters common-lisp:nil :type
    (common-lisp:or list-service-instances-filter-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-page-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (service-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or list-service-instances-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-service-instances-input
                    'make-list-service-instances-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instances-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "sortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instances-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-service-instances-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-service-instances-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (service-instances (common-lisp:error ":serviceinstances is required") :type
    (common-lisp:or service-instance-summary-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-service-instances-output
                    'make-list-service-instances-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instances-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instances-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-instances))
      (common-lisp:list
       (common-lisp:cons "serviceInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instances-output))
   common-lisp:nil))
(common-lisp:deftype list-service-instances-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-service-pipeline-outputs-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-service-pipeline-outputs-input-"))
   (next-token common-lisp:nil :type
    (common-lisp:or empty-next-token common-lisp:null))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-service-pipeline-outputs-input
                    'make-list-service-pipeline-outputs-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-pipeline-outputs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-pipeline-outputs-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-pipeline-outputs-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-service-pipeline-outputs-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-service-pipeline-outputs-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or empty-next-token common-lisp:null))
   (outputs (common-lisp:error ":outputs is required") :type
    (common-lisp:or outputs-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-service-pipeline-outputs-output
                    'make-list-service-pipeline-outputs-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-pipeline-outputs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-pipeline-outputs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-pipeline-outputs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-service-pipeline-provisioned-resources-input
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-service-pipeline-provisioned-resources-input-"))
   (next-token common-lisp:nil :type
    (common-lisp:or empty-next-token common-lisp:null))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-service-pipeline-provisioned-resources-input
                    'make-list-service-pipeline-provisioned-resources-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-pipeline-provisioned-resources-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-pipeline-provisioned-resources-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-pipeline-provisioned-resources-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-service-pipeline-provisioned-resources-output
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-service-pipeline-provisioned-resources-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or empty-next-token common-lisp:null))
   (provisioned-resources
    (common-lisp:error ":provisionedresources is required") :type
    (common-lisp:or provisioned-resource-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-service-pipeline-provisioned-resources-output
                    'make-list-service-pipeline-provisioned-resources-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-pipeline-provisioned-resources-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-pipeline-provisioned-resources-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-resources))
      (common-lisp:list
       (common-lisp:cons "provisionedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-pipeline-provisioned-resources-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-service-template-versions-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-service-template-versions-input-"))
   (major-version common-lisp:nil :type
    (common-lisp:or template-version-part common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-page-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-service-template-versions-input
                    'make-list-service-template-versions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-template-versions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-template-versions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-template-versions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-service-template-versions-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-service-template-versions-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (template-versions (common-lisp:error ":templateversions is required") :type
    (common-lisp:or service-template-version-summary-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-service-template-versions-output
                    'make-list-service-template-versions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-template-versions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-template-versions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-versions))
      (common-lisp:list
       (common-lisp:cons "templateVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-template-versions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-service-templates-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-service-templates-input-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-page-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-service-templates-input
                    'make-list-service-templates-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-templates-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-templates-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-templates-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-service-templates-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-service-templates-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (templates (common-lisp:error ":templates is required") :type
    (common-lisp:or service-template-summary-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-service-templates-output
                    'make-list-service-templates-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-templates-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-templates-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'templates))
      (common-lisp:list
       (common-lisp:cons "templates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-templates-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-services-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-services-input-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-page-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-services-input 'make-list-services-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-services-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-services-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-services-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-services-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-services-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (services (common-lisp:error ":services is required") :type
    (common-lisp:or service-summary-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-services-output 'make-list-services-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-services-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-services-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'services))
      (common-lisp:list
       (common-lisp:cons "services"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-services-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-input-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-page-results common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-input
                    'make-list-tags-for-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-output-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-output
                    'make-list-tags-for-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   common-lisp:nil))
(common-lisp:deftype max-page-results () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (notify-resource-deployment-status-change-input (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-notify-resource-deployment-status-change-input-"))
   (deployment-id common-lisp:nil :type
    (common-lisp:or deployment-id common-lisp:null))
   (outputs common-lisp:nil :type
    (common-lisp:or notify-resource-deployment-status-change-input-outputs-list
                    common-lisp:null))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or resource-deployment-status common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or
     notify-resource-deployment-status-change-input-status-message-string
     common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'notify-resource-deployment-status-change-input
                    'make-notify-resource-deployment-status-change-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notify-resource-deployment-status-change-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notify-resource-deployment-status-change-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notify-resource-deployment-status-change-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype notify-resource-deployment-status-change-input-outputs-list
                      ()
   '(trivial-types:proper-list output))
 (common-lisp:defun |make-notify-resource-deployment-status-change-input-outputs-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output))
   aws-sdk/generator/shape::members))
(common-lisp:deftype notify-resource-deployment-status-change-input-status-message-string
                     ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (notify-resource-deployment-status-change-output (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-notify-resource-deployment-status-change-output-")))
 (common-lisp:export
  (common-lisp:list 'notify-resource-deployment-status-change-output
                    'make-notify-resource-deployment-status-change-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notify-resource-deployment-status-change-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notify-resource-deployment-status-change-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notify-resource-deployment-status-change-output))
   common-lisp:nil))
(common-lisp:deftype ops-file-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (output (:copier common-lisp:nil) (:conc-name "struct-shape-output-"))
   (key common-lisp:nil :type (common-lisp:or output-key common-lisp:null))
   (value-string common-lisp:nil :type
    (common-lisp:or output-value-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'output 'make-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-string))
      (common-lisp:list
       (common-lisp:cons "valueString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output))
   common-lisp:nil))
(common-lisp:deftype output-key () 'common-lisp:string)
(common-lisp:deftype output-value-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype outputs-list () '(trivial-types:proper-list output))
 (common-lisp:defun |make-outputs-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (provisioned-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-provisioned-resource-"))
   (identifier common-lisp:nil :type
    (common-lisp:or provisioned-resource-identifier common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or provisioned-resource-name common-lisp:null))
   (provisioning-engine common-lisp:nil :type
    (common-lisp:or provisioned-resource-engine common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'provisioned-resource 'make-provisioned-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input provisioned-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input provisioned-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provisioning-engine))
      (common-lisp:list
       (common-lisp:cons "provisioningEngine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input provisioned-resource))
   common-lisp:nil))
(common-lisp:deftype provisioned-resource-engine () 'common-lisp:string)
(common-lisp:deftype provisioned-resource-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype provisioned-resource-list ()
   '(trivial-types:proper-list provisioned-resource))
 (common-lisp:defun |make-provisioned-resource-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list provisioned-resource))
   aws-sdk/generator/shape::members))
(common-lisp:deftype provisioned-resource-name () 'common-lisp:string)
(common-lisp:deftype provisioning () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (reject-environment-account-connection-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-reject-environment-account-connection-input-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or environment-account-connection-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reject-environment-account-connection-input
                    'make-reject-environment-account-connection-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-environment-account-connection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-environment-account-connection-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-environment-account-connection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reject-environment-account-connection-output (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-reject-environment-account-connection-output-"))
   (environment-account-connection
    (common-lisp:error ":environmentaccountconnection is required") :type
    (common-lisp:or environment-account-connection common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reject-environment-account-connection-output
                    'make-reject-environment-account-connection-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-environment-account-connection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-environment-account-connection-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-account-connection))
      (common-lisp:list
       (common-lisp:cons "environmentAccountConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-environment-account-connection-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (repository (:copier common-lisp:nil)
      (:conc-name "struct-shape-repository-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or repository-arn common-lisp:null))
   (connection-arn (common-lisp:error ":connectionarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (encryption-key common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (provider (common-lisp:error ":provider is required") :type
    (common-lisp:or repository-provider common-lisp:null)))
 (common-lisp:export (common-lisp:list 'repository 'make-repository))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input repository))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input repository))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "connectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "encryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input repository))
   common-lisp:nil))
(common-lisp:deftype repository-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (repository-branch (:copier common-lisp:nil)
      (:conc-name "struct-shape-repository-branch-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or repository-arn common-lisp:null))
   (branch (common-lisp:error ":branch is required") :type
    (common-lisp:or git-branch-name common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (provider (common-lisp:error ":provider is required") :type
    (common-lisp:or repository-provider common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'repository-branch 'make-repository-branch))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input repository-branch))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input repository-branch))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input repository-branch))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (repository-branch-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-repository-branch-input-"))
   (branch (common-lisp:error ":branch is required") :type
    (common-lisp:or git-branch-name common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (provider (common-lisp:error ":provider is required") :type
    (common-lisp:or repository-provider common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'repository-branch-input 'make-repository-branch-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-branch-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-branch-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-branch-input))
   common-lisp:nil))
(common-lisp:deftype repository-id () 'common-lisp:string)
(common-lisp:deftype repository-name () 'common-lisp:string)
(common-lisp:deftype repository-provider () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (repository-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-repository-summary-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or repository-arn common-lisp:null))
   (connection-arn (common-lisp:error ":connectionarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (provider (common-lisp:error ":provider is required") :type
    (common-lisp:or repository-provider common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'repository-summary 'make-repository-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input repository-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input repository-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "connectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input repository-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype repository-summary-list ()
   '(trivial-types:proper-list repository-summary))
 (common-lisp:defun |make-repository-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list repository-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (repository-sync-attempt (:copier common-lisp:nil)
      (:conc-name "struct-shape-repository-sync-attempt-"))
   (events (common-lisp:error ":events is required") :type
    (common-lisp:or repository-sync-events common-lisp:null))
   (started-at (common-lisp:error ":startedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or repository-sync-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'repository-sync-attempt 'make-repository-sync-attempt))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-sync-attempt))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-sync-attempt))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-sync-attempt))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (repository-sync-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-repository-sync-definition-"))
   (branch (common-lisp:error ":branch is required") :type
    (common-lisp:or git-branch-name common-lisp:null))
   (directory (common-lisp:error ":directory is required") :type
    (common-lisp:or string common-lisp:null))
   (parent (common-lisp:error ":parent is required") :type
    (common-lisp:or string common-lisp:null))
   (target (common-lisp:error ":target is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'repository-sync-definition
                    'make-repository-sync-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-sync-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-sync-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory))
      (common-lisp:list
       (common-lisp:cons "directory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent))
      (common-lisp:list
       (common-lisp:cons "parent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-sync-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype repository-sync-definition-list ()
   '(trivial-types:proper-list repository-sync-definition))
 (common-lisp:defun |make-repository-sync-definition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            repository-sync-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (repository-sync-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-repository-sync-event-"))
   (event (common-lisp:error ":event is required") :type
    (common-lisp:or string common-lisp:null))
   (external-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (time (common-lisp:error ":time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'repository-sync-event 'make-repository-sync-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-sync-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-sync-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-sync-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype repository-sync-events ()
   '(trivial-types:proper-list repository-sync-event))
 (common-lisp:defun |make-repository-sync-events|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list repository-sync-event))
   aws-sdk/generator/shape::members))
(common-lisp:deftype repository-sync-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resource-counts-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-counts-summary-"))
   (behind-major common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (behind-minor common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (failed common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (total (common-lisp:error ":total is required") :type
    (common-lisp:or integer common-lisp:null))
   (up-to-date common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-counts-summary 'make-resource-counts-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-counts-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-counts-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'behind-major))
      (common-lisp:list
       (common-lisp:cons "behindMajor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'behind-minor))
      (common-lisp:list
       (common-lisp:cons "behindMinor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'up-to-date))
      (common-lisp:list
       (common-lisp:cons "upToDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-counts-summary))
   common-lisp:nil))
(common-lisp:deftype resource-deployment-status () 'common-lisp:string)
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:deftype resource-name-or-empty () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (proton-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-sync-attempt (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-sync-attempt-"))
   (events (common-lisp:error ":events is required") :type
    (common-lisp:or resource-sync-events common-lisp:null))
   (initial-revision (common-lisp:error ":initialrevision is required") :type
    (common-lisp:or revision common-lisp:null))
   (started-at (common-lisp:error ":startedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or resource-sync-status common-lisp:null))
   (target (common-lisp:error ":target is required") :type
    (common-lisp:or string common-lisp:null))
   (target-revision (common-lisp:error ":targetrevision is required") :type
    (common-lisp:or revision common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-sync-attempt 'make-resource-sync-attempt))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-sync-attempt))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-sync-attempt))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-revision))
      (common-lisp:list
       (common-lisp:cons "initialRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-revision))
      (common-lisp:list
       (common-lisp:cons "targetRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-sync-attempt))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-sync-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-sync-event-"))
   (event (common-lisp:error ":event is required") :type
    (common-lisp:or string common-lisp:null))
   (external-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (time (common-lisp:error ":time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-sync-event 'make-resource-sync-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-sync-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-sync-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-sync-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-sync-events ()
   '(trivial-types:proper-list resource-sync-event))
 (common-lisp:defun |make-resource-sync-events|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-sync-event))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-sync-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (revision (:copier common-lisp:nil) (:conc-name "struct-shape-revision-"))
   (branch (common-lisp:error ":branch is required") :type
    (common-lisp:or git-branch-name common-lisp:null))
   (directory (common-lisp:error ":directory is required") :type
    (common-lisp:or string common-lisp:null))
   (repository-name (common-lisp:error ":repositoryname is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (repository-provider (common-lisp:error ":repositoryprovider is required")
    :type (common-lisp:or repository-provider common-lisp:null))
   (sha (common-lisp:error ":sha is required") :type
    (common-lisp:or sha common-lisp:null)))
 (common-lisp:export (common-lisp:list 'revision 'make-revision))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input revision))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input revision))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory))
      (common-lisp:list
       (common-lisp:cons "directory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-provider))
      (common-lisp:list
       (common-lisp:cons "repositoryProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sha))
      (common-lisp:list
       (common-lisp:cons "sha"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input revision))
   common-lisp:nil))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype role-arn-or-empty-string () 'common-lisp:string)
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3object-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3object-source-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or s3bucket common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or s3key common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3object-source 'make-s3object-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3object-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3object-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3object-source))
   common-lisp:nil))
(common-lisp:deftype sha () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (service (:copier common-lisp:nil) (:conc-name "struct-shape-service-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or service-arn common-lisp:null))
   (branch-name common-lisp:nil :type
    (common-lisp:or git-branch-name common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (last-modified-at (common-lisp:error ":lastmodifiedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (pipeline common-lisp:nil :type
    (common-lisp:or service-pipeline common-lisp:null))
   (repository-connection-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (repository-id common-lisp:nil :type
    (common-lisp:or repository-id common-lisp:null))
   (spec (common-lisp:error ":spec is required") :type
    (common-lisp:or spec-contents common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or service-status common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'service 'make-service))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-name))
      (common-lisp:list
       (common-lisp:cons "branchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline))
      (common-lisp:list
       (common-lisp:cons "pipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-connection-arn))
      (common-lisp:list
       (common-lisp:cons "repositoryConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-id))
      (common-lisp:list
       (common-lisp:cons "repositoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service))
   common-lisp:nil))
(common-lisp:deftype service-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (service-instance (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-instance-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or service-instance-arn common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (deployment-status (common-lisp:error ":deploymentstatus is required") :type
    (common-lisp:or deployment-status common-lisp:null))
   (deployment-status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (last-client-request-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (last-deployment-attempted-at
    (common-lisp:error ":lastdeploymentattemptedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-deployment-succeeded-at
    (common-lisp:error ":lastdeploymentsucceededat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (spec common-lisp:nil :type (common-lisp:or spec-contents common-lisp:null))
   (template-major-version
    (common-lisp:error ":templatemajorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (template-minor-version
    (common-lisp:error ":templateminorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-instance 'make-service-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-status))
      (common-lisp:list
       (common-lisp:cons "deploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-status-message))
      (common-lisp:list
       (common-lisp:cons "deploymentStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-client-request-token))
      (common-lisp:list
       (common-lisp:cons "lastClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-attempted-at))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentAttemptedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-succeeded-at))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentSucceededAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-major-version))
      (common-lisp:list
       (common-lisp:cons "templateMajorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-minor-version))
      (common-lisp:list
       (common-lisp:cons "templateMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-instance))
   common-lisp:nil))
(common-lisp:deftype service-instance-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (service-instance-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-instance-summary-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or service-instance-arn common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (deployment-status (common-lisp:error ":deploymentstatus is required") :type
    (common-lisp:or deployment-status common-lisp:null))
   (deployment-status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (last-deployment-attempted-at
    (common-lisp:error ":lastdeploymentattemptedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-deployment-succeeded-at
    (common-lisp:error ":lastdeploymentsucceededat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (template-major-version
    (common-lisp:error ":templatemajorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (template-minor-version
    (common-lisp:error ":templateminorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-instance-summary 'make-service-instance-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-instance-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-instance-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-status))
      (common-lisp:list
       (common-lisp:cons "deploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-status-message))
      (common-lisp:list
       (common-lisp:cons "deploymentStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-attempted-at))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentAttemptedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-succeeded-at))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentSucceededAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-major-version))
      (common-lisp:list
       (common-lisp:cons "templateMajorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-minor-version))
      (common-lisp:list
       (common-lisp:cons "templateMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-instance-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-instance-summary-list ()
   '(trivial-types:proper-list service-instance-summary))
 (common-lisp:defun |make-service-instance-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            service-instance-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (service-pipeline (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-pipeline-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (deployment-status (common-lisp:error ":deploymentstatus is required") :type
    (common-lisp:or deployment-status common-lisp:null))
   (deployment-status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null))
   (last-deployment-attempted-at
    (common-lisp:error ":lastdeploymentattemptedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-deployment-succeeded-at
    (common-lisp:error ":lastdeploymentsucceededat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (spec common-lisp:nil :type (common-lisp:or spec-contents common-lisp:null))
   (template-major-version
    (common-lisp:error ":templatemajorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (template-minor-version
    (common-lisp:error ":templateminorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-pipeline 'make-service-pipeline))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-pipeline))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-pipeline))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-status))
      (common-lisp:list
       (common-lisp:cons "deploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-status-message))
      (common-lisp:list
       (common-lisp:cons "deploymentStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-attempted-at))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentAttemptedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-succeeded-at))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentSucceededAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-major-version))
      (common-lisp:list
       (common-lisp:cons "templateMajorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-minor-version))
      (common-lisp:list
       (common-lisp:cons "templateMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-pipeline))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (proton-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype service-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (service-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-summary-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or service-arn common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (last-modified-at (common-lisp:error ":lastmodifiedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or service-status common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'service-summary 'make-service-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-summary-list ()
   '(trivial-types:proper-list service-summary))
 (common-lisp:defun |make-service-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (service-sync-blocker-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-sync-blocker-summary-"))
   (latest-blockers common-lisp:nil :type
    (common-lisp:or latest-sync-blockers common-lisp:null))
   (service-instance-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-sync-blocker-summary
                    'make-service-sync-blocker-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-sync-blocker-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-sync-blocker-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-blockers))
      (common-lisp:list
       (common-lisp:cons "latestBlockers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-instance-name))
      (common-lisp:list
       (common-lisp:cons "serviceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-sync-blocker-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (service-sync-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-sync-config-"))
   (branch (common-lisp:error ":branch is required") :type
    (common-lisp:or git-branch-name common-lisp:null))
   (file-path (common-lisp:error ":filepath is required") :type
    (common-lisp:or ops-file-path common-lisp:null))
   (repository-name (common-lisp:error ":repositoryname is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (repository-provider (common-lisp:error ":repositoryprovider is required")
    :type (common-lisp:or repository-provider common-lisp:null))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-sync-config 'make-service-sync-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-sync-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-sync-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-path))
      (common-lisp:list
       (common-lisp:cons "filePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-provider))
      (common-lisp:list
       (common-lisp:cons "repositoryProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-sync-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (service-template (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-template-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or service-template-arn common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or display-name common-lisp:null))
   (encryption-key common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (last-modified-at (common-lisp:error ":lastmodifiedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (pipeline-provisioning common-lisp:nil :type
    (common-lisp:or provisioning common-lisp:null))
   (recommended-version common-lisp:nil :type
    (common-lisp:or full-template-version-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-template 'make-service-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "encryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-provisioning))
      (common-lisp:list
       (common-lisp:cons "pipelineProvisioning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommended-version))
      (common-lisp:list
       (common-lisp:cons "recommendedVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-template))
   common-lisp:nil))
(common-lisp:deftype service-template-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (service-template-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-template-summary-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or service-template-arn common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or display-name common-lisp:null))
   (last-modified-at (common-lisp:error ":lastmodifiedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (pipeline-provisioning common-lisp:nil :type
    (common-lisp:or provisioning common-lisp:null))
   (recommended-version common-lisp:nil :type
    (common-lisp:or full-template-version-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-template-summary 'make-service-template-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-template-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-template-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-provisioning))
      (common-lisp:list
       (common-lisp:cons "pipelineProvisioning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommended-version))
      (common-lisp:list
       (common-lisp:cons "recommendedVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-template-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-template-summary-list ()
   '(trivial-types:proper-list service-template-summary))
 (common-lisp:defun |make-service-template-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            service-template-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype service-template-supported-component-source-input-list ()
   '(trivial-types:proper-list
     service-template-supported-component-source-type))
 (common-lisp:defun |make-service-template-supported-component-source-input-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            service-template-supported-component-source-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype service-template-supported-component-source-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (service-template-version (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-template-version-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or service-template-version-arn common-lisp:null))
   (compatible-environment-templates
    (common-lisp:error ":compatibleenvironmenttemplates is required") :type
    (common-lisp:or compatible-environment-template-list common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (last-modified-at (common-lisp:error ":lastmodifiedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (major-version (common-lisp:error ":majorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (minor-version (common-lisp:error ":minorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (recommended-minor-version common-lisp:nil :type
    (common-lisp:or template-version-part common-lisp:null))
   (schema common-lisp:nil :type
    (common-lisp:or template-schema common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or template-version-status common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null))
   (supported-component-sources common-lisp:nil :type
    (common-lisp:or service-template-supported-component-source-input-list
                    common-lisp:null))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-template-version 'make-service-template-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-template-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-template-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compatible-environment-templates))
      (common-lisp:list
       (common-lisp:cons "compatibleEnvironmentTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minor-version))
      (common-lisp:list
       (common-lisp:cons "minorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommended-minor-version))
      (common-lisp:list
       (common-lisp:cons "recommendedMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-component-sources))
      (common-lisp:list
       (common-lisp:cons "supportedComponentSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-template-version))
   common-lisp:nil))
(common-lisp:deftype service-template-version-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (service-template-version-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-template-version-summary-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or service-template-version-arn common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (last-modified-at (common-lisp:error ":lastmodifiedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (major-version (common-lisp:error ":majorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (minor-version (common-lisp:error ":minorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (recommended-minor-version common-lisp:nil :type
    (common-lisp:or template-version-part common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or template-version-status common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-template-version-summary
                    'make-service-template-version-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-template-version-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-template-version-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minor-version))
      (common-lisp:list
       (common-lisp:cons "minorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommended-minor-version))
      (common-lisp:list
       (common-lisp:cons "recommendedMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-template-version-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-template-version-summary-list ()
   '(trivial-types:proper-list service-template-version-summary))
 (common-lisp:defun |make-service-template-version-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            service-template-version-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:deftype spec-contents () 'common-lisp:string)
(common-lisp:deftype status-message () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype subdirectory () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (sync-blocker (:copier common-lisp:nil)
      (:conc-name "struct-shape-sync-blocker-"))
   (contexts common-lisp:nil :type
    (common-lisp:or sync-blocker-contexts common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (created-reason (common-lisp:error ":createdreason is required") :type
    (common-lisp:or string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or string common-lisp:null))
   (resolved-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (resolved-reason common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or blocker-status common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or blocker-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'sync-blocker 'make-sync-blocker))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sync-blocker))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sync-blocker))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contexts))
      (common-lisp:list
       (common-lisp:cons "contexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-reason))
      (common-lisp:list
       (common-lisp:cons "createdReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolved-at))
      (common-lisp:list
       (common-lisp:cons "resolvedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolved-reason))
      (common-lisp:list
       (common-lisp:cons "resolvedReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sync-blocker))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sync-blocker-context (:copier common-lisp:nil)
      (:conc-name "struct-shape-sync-blocker-context-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or string common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sync-blocker-context 'make-sync-blocker-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sync-blocker-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sync-blocker-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sync-blocker-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sync-blocker-contexts ()
   '(trivial-types:proper-list sync-blocker-context))
 (common-lisp:defun |make-sync-blocker-contexts|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sync-blocker-context))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sync-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-input-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-output-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-output 'make-tag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-output))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype template-file-contents () 'common-lisp:string)
(common-lisp:deftype template-manifest-contents () 'common-lisp:string)
(common-lisp:deftype template-schema () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (template-sync-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-template-sync-config-"))
   (branch (common-lisp:error ":branch is required") :type
    (common-lisp:or git-branch-name common-lisp:null))
   (repository-name (common-lisp:error ":repositoryname is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (repository-provider (common-lisp:error ":repositoryprovider is required")
    :type (common-lisp:or repository-provider common-lisp:null))
   (subdirectory common-lisp:nil :type
    (common-lisp:or subdirectory common-lisp:null))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (template-type (common-lisp:error ":templatetype is required") :type
    (common-lisp:or template-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'template-sync-config 'make-template-sync-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-sync-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-sync-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-provider))
      (common-lisp:list
       (common-lisp:cons "repositoryProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subdirectory))
      (common-lisp:list
       (common-lisp:cons "subdirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-type))
      (common-lisp:list
       (common-lisp:cons "templateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-sync-config))
   common-lisp:nil))
(common-lisp:deftype template-type () 'common-lisp:string)
(common-lisp:deftype template-version-part () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (template-version-source-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-template-version-source-input-"))
   (s3 common-lisp:nil :type
    (common-lisp:or s3object-source common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'template-version-source-input
                    'make-template-version-source-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          template-version-source-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          template-version-source-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "s3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          template-version-source-input))
   common-lisp:nil))
(common-lisp:deftype template-version-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (proton-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-input-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "tagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-output-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-output 'make-untag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-account-settings-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-account-settings-input-"))
   (delete-pipeline-provisioning-repository common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (pipeline-codebuild-role-arn common-lisp:nil :type
    (common-lisp:or role-arn-or-empty-string common-lisp:null))
   (pipeline-provisioning-repository common-lisp:nil :type
    (common-lisp:or repository-branch-input common-lisp:null))
   (pipeline-service-role-arn common-lisp:nil :type
    (common-lisp:or role-arn-or-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-account-settings-input
                    'make-update-account-settings-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-account-settings-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-account-settings-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-pipeline-provisioning-repository))
      (common-lisp:list
       (common-lisp:cons "deletePipelineProvisioningRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-codebuild-role-arn))
      (common-lisp:list
       (common-lisp:cons "pipelineCodebuildRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-provisioning-repository))
      (common-lisp:list
       (common-lisp:cons "pipelineProvisioningRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-service-role-arn))
      (common-lisp:list
       (common-lisp:cons "pipelineServiceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-account-settings-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-account-settings-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-account-settings-output-"))
   (account-settings (common-lisp:error ":accountsettings is required") :type
    (common-lisp:or account-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-account-settings-output
                    'make-update-account-settings-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-account-settings-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-account-settings-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-settings))
      (common-lisp:list
       (common-lisp:cons "accountSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-account-settings-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-component-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-component-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (deployment-type (common-lisp:error ":deploymenttype is required") :type
    (common-lisp:or component-deployment-update-type common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (service-instance-name common-lisp:nil :type
    (common-lisp:or resource-name-or-empty common-lisp:null))
   (service-name common-lisp:nil :type
    (common-lisp:or resource-name-or-empty common-lisp:null))
   (service-spec common-lisp:nil :type
    (common-lisp:or spec-contents common-lisp:null))
   (template-file common-lisp:nil :type
    (common-lisp:or template-file-contents common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-component-input 'make-update-component-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-component-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-component-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-type))
      (common-lisp:list
       (common-lisp:cons "deploymentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-instance-name))
      (common-lisp:list
       (common-lisp:cons "serviceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-spec))
      (common-lisp:list
       (common-lisp:cons "serviceSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-file))
      (common-lisp:list
       (common-lisp:cons "templateFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-component-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-component-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-component-output-"))
   (component (common-lisp:error ":component is required") :type
    (common-lisp:or component common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-component-output 'make-update-component-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-component-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-component-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component))
      (common-lisp:list
       (common-lisp:cons "component"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-component-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-environment-account-connection-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-environment-account-connection-input-"))
   (codebuild-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (component-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or environment-account-connection-id common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-environment-account-connection-input
                    'make-update-environment-account-connection-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-account-connection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-account-connection-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codebuild-role-arn))
      (common-lisp:list
       (common-lisp:cons "codebuildRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-role-arn))
      (common-lisp:list
       (common-lisp:cons "componentRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-account-connection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-environment-account-connection-output (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-environment-account-connection-output-"))
   (environment-account-connection
    (common-lisp:error ":environmentaccountconnection is required") :type
    (common-lisp:or environment-account-connection common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-environment-account-connection-output
                    'make-update-environment-account-connection-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-account-connection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-account-connection-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-account-connection))
      (common-lisp:list
       (common-lisp:cons "environmentAccountConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-account-connection-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-environment-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-environment-input-"))
   (codebuild-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (component-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (deployment-type (common-lisp:error ":deploymenttype is required") :type
    (common-lisp:or deployment-update-type common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (environment-account-connection-id common-lisp:nil :type
    (common-lisp:or environment-account-connection-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (proton-service-role-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (provisioning-repository common-lisp:nil :type
    (common-lisp:or repository-branch-input common-lisp:null))
   (spec common-lisp:nil :type (common-lisp:or spec-contents common-lisp:null))
   (template-major-version common-lisp:nil :type
    (common-lisp:or template-version-part common-lisp:null))
   (template-minor-version common-lisp:nil :type
    (common-lisp:or template-version-part common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-environment-input 'make-update-environment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codebuild-role-arn))
      (common-lisp:list
       (common-lisp:cons "codebuildRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-role-arn))
      (common-lisp:list
       (common-lisp:cons "componentRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-type))
      (common-lisp:list
       (common-lisp:cons "deploymentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-account-connection-id))
      (common-lisp:list
       (common-lisp:cons "environmentAccountConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'proton-service-role-arn))
      (common-lisp:list
       (common-lisp:cons "protonServiceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-repository))
      (common-lisp:list
       (common-lisp:cons "provisioningRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-major-version))
      (common-lisp:list
       (common-lisp:cons "templateMajorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-minor-version))
      (common-lisp:list
       (common-lisp:cons "templateMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-environment-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-environment-output-"))
   (environment (common-lisp:error ":environment is required") :type
    (common-lisp:or environment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-environment-output
                    'make-update-environment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-environment-template-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-environment-template-input-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or display-name common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-environment-template-input
                    'make-update-environment-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-environment-template-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-environment-template-output-"))
   (environment-template (common-lisp:error ":environmenttemplate is required")
    :type (common-lisp:or environment-template common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-environment-template-output
                    'make-update-environment-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-template))
      (common-lisp:list
       (common-lisp:cons "environmentTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-environment-template-version-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-environment-template-version-input-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (major-version (common-lisp:error ":majorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (minor-version (common-lisp:error ":minorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or template-version-status common-lisp:null))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-environment-template-version-input
                    'make-update-environment-template-version-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-template-version-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-template-version-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minor-version))
      (common-lisp:list
       (common-lisp:cons "minorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-template-version-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-environment-template-version-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-environment-template-version-output-"))
   (environment-template-version
    (common-lisp:error ":environmenttemplateversion is required") :type
    (common-lisp:or environment-template-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-environment-template-version-output
                    'make-update-environment-template-version-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-template-version-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-template-version-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-template-version))
      (common-lisp:list
       (common-lisp:cons "environmentTemplateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-template-version-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-service-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-service-input-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (spec common-lisp:nil :type
    (common-lisp:or spec-contents common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-service-input 'make-update-service-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-service-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-service-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-service-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-service-instance-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-service-instance-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (deployment-type (common-lisp:error ":deploymenttype is required") :type
    (common-lisp:or deployment-update-type common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (spec common-lisp:nil :type (common-lisp:or spec-contents common-lisp:null))
   (template-major-version common-lisp:nil :type
    (common-lisp:or template-version-part common-lisp:null))
   (template-minor-version common-lisp:nil :type
    (common-lisp:or template-version-part common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-service-instance-input
                    'make-update-service-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-instance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-type))
      (common-lisp:list
       (common-lisp:cons "deploymentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-major-version))
      (common-lisp:list
       (common-lisp:cons "templateMajorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-minor-version))
      (common-lisp:list
       (common-lisp:cons "templateMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-instance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-service-instance-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-service-instance-output-"))
   (service-instance (common-lisp:error ":serviceinstance is required") :type
    (common-lisp:or service-instance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-service-instance-output
                    'make-update-service-instance-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-instance-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-instance-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-instance))
      (common-lisp:list
       (common-lisp:cons "serviceInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-instance-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-service-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-service-output-"))
   (service (common-lisp:error ":service is required") :type
    (common-lisp:or service common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-service-output 'make-update-service-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-service-pipeline-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-service-pipeline-input-"))
   (deployment-type (common-lisp:error ":deploymenttype is required") :type
    (common-lisp:or deployment-update-type common-lisp:null))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (spec (common-lisp:error ":spec is required") :type
    (common-lisp:or spec-contents common-lisp:null))
   (template-major-version common-lisp:nil :type
    (common-lisp:or template-version-part common-lisp:null))
   (template-minor-version common-lisp:nil :type
    (common-lisp:or template-version-part common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-service-pipeline-input
                    'make-update-service-pipeline-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-pipeline-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-pipeline-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-type))
      (common-lisp:list
       (common-lisp:cons "deploymentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-major-version))
      (common-lisp:list
       (common-lisp:cons "templateMajorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-minor-version))
      (common-lisp:list
       (common-lisp:cons "templateMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-pipeline-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-service-pipeline-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-service-pipeline-output-"))
   (pipeline (common-lisp:error ":pipeline is required") :type
    (common-lisp:or service-pipeline common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-service-pipeline-output
                    'make-update-service-pipeline-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-pipeline-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-pipeline-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline))
      (common-lisp:list
       (common-lisp:cons "pipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-pipeline-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-service-sync-blocker-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-service-sync-blocker-input-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or string common-lisp:null))
   (resolved-reason (common-lisp:error ":resolvedreason is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-service-sync-blocker-input
                    'make-update-service-sync-blocker-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-sync-blocker-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-sync-blocker-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolved-reason))
      (common-lisp:list
       (common-lisp:cons "resolvedReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-sync-blocker-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-service-sync-blocker-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-service-sync-blocker-output-"))
   (service-instance-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (service-sync-blocker (common-lisp:error ":servicesyncblocker is required")
    :type (common-lisp:or sync-blocker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-service-sync-blocker-output
                    'make-update-service-sync-blocker-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-sync-blocker-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-sync-blocker-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-instance-name))
      (common-lisp:list
       (common-lisp:cons "serviceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-sync-blocker))
      (common-lisp:list
       (common-lisp:cons "serviceSyncBlocker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-sync-blocker-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-service-sync-config-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-service-sync-config-input-"))
   (branch (common-lisp:error ":branch is required") :type
    (common-lisp:or git-branch-name common-lisp:null))
   (file-path (common-lisp:error ":filepath is required") :type
    (common-lisp:or ops-file-path common-lisp:null))
   (repository-name (common-lisp:error ":repositoryname is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (repository-provider (common-lisp:error ":repositoryprovider is required")
    :type (common-lisp:or repository-provider common-lisp:null))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-service-sync-config-input
                    'make-update-service-sync-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-sync-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-sync-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-path))
      (common-lisp:list
       (common-lisp:cons "filePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-provider))
      (common-lisp:list
       (common-lisp:cons "repositoryProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-sync-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-service-sync-config-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-service-sync-config-output-"))
   (service-sync-config common-lisp:nil :type
    (common-lisp:or service-sync-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-service-sync-config-output
                    'make-update-service-sync-config-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-sync-config-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-sync-config-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-sync-config))
      (common-lisp:list
       (common-lisp:cons "serviceSyncConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-sync-config-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-service-template-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-service-template-input-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or display-name common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-service-template-input
                    'make-update-service-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-service-template-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-service-template-output-"))
   (service-template (common-lisp:error ":servicetemplate is required") :type
    (common-lisp:or service-template common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-service-template-output
                    'make-update-service-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-template))
      (common-lisp:list
       (common-lisp:cons "serviceTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-service-template-version-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-service-template-version-input-"))
   (compatible-environment-templates common-lisp:nil :type
    (common-lisp:or compatible-environment-template-input-list
                    common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (major-version (common-lisp:error ":majorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (minor-version (common-lisp:error ":minorversion is required") :type
    (common-lisp:or template-version-part common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or template-version-status common-lisp:null))
   (supported-component-sources common-lisp:nil :type
    (common-lisp:or service-template-supported-component-source-input-list
                    common-lisp:null))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-service-template-version-input
                    'make-update-service-template-version-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-template-version-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-template-version-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compatible-environment-templates))
      (common-lisp:list
       (common-lisp:cons "compatibleEnvironmentTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minor-version))
      (common-lisp:list
       (common-lisp:cons "minorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-component-sources))
      (common-lisp:list
       (common-lisp:cons "supportedComponentSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-template-version-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-service-template-version-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-service-template-version-output-"))
   (service-template-version
    (common-lisp:error ":servicetemplateversion is required") :type
    (common-lisp:or service-template-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-service-template-version-output
                    'make-update-service-template-version-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-template-version-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-template-version-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-template-version))
      (common-lisp:list
       (common-lisp:cons "serviceTemplateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-template-version-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-template-sync-config-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-template-sync-config-input-"))
   (branch (common-lisp:error ":branch is required") :type
    (common-lisp:or git-branch-name common-lisp:null))
   (repository-name (common-lisp:error ":repositoryname is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (repository-provider (common-lisp:error ":repositoryprovider is required")
    :type (common-lisp:or repository-provider common-lisp:null))
   (subdirectory common-lisp:nil :type
    (common-lisp:or subdirectory common-lisp:null))
   (template-name (common-lisp:error ":templatename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (template-type (common-lisp:error ":templatetype is required") :type
    (common-lisp:or template-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-template-sync-config-input
                    'make-update-template-sync-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-template-sync-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-template-sync-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-provider))
      (common-lisp:list
       (common-lisp:cons "repositoryProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subdirectory))
      (common-lisp:list
       (common-lisp:cons "subdirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-type))
      (common-lisp:list
       (common-lisp:cons "templateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-template-sync-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-template-sync-config-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-template-sync-config-output-"))
   (template-sync-config common-lisp:nil :type
    (common-lisp:or template-sync-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-template-sync-config-output
                    'make-update-template-sync-config-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-template-sync-config-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-template-sync-config-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-sync-config))
      (common-lisp:list
       (common-lisp:cons "templateSyncConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-template-sync-config-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (proton-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun accept-environment-account-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-accept-environment-account-connection-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AcceptEnvironmentAccountConnection"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'accept-environment-account-connection))
(common-lisp:progn
 (common-lisp:defun cancel-component-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key component-name)
   (common-lisp:declare (common-lisp:ignorable component-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-component-deployment-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelComponentDeployment"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-component-deployment))
(common-lisp:progn
 (common-lisp:defun cancel-environment-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-name)
   (common-lisp:declare (common-lisp:ignorable environment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-environment-deployment-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelEnvironmentDeployment"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-environment-deployment))
(common-lisp:progn
 (common-lisp:defun cancel-service-instance-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-instance-name service-name)
   (common-lisp:declare
    (common-lisp:ignorable service-instance-name service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-service-instance-deployment-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelServiceInstanceDeployment"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-service-instance-deployment))
(common-lisp:progn
 (common-lisp:defun cancel-service-pipeline-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name)
   (common-lisp:declare (common-lisp:ignorable service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-service-pipeline-deployment-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelServicePipelineDeployment"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-service-pipeline-deployment))
(common-lisp:progn
 (common-lisp:defun create-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description environment-name
                     manifest name service-instance-name service-name
                     service-spec tags template-file)
   (common-lisp:declare
    (common-lisp:ignorable client-token description environment-name manifest
     name service-instance-name service-name service-spec tags template-file))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-component-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateComponent"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-component))
(common-lisp:progn
 (common-lisp:defun create-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key codebuild-role-arn component-role-arn
                     description environment-account-connection-id name
                     proton-service-role-arn provisioning-repository spec tags
                     template-major-version template-minor-version
                     template-name)
   (common-lisp:declare
    (common-lisp:ignorable codebuild-role-arn component-role-arn description
     environment-account-connection-id name proton-service-role-arn
     provisioning-repository spec tags template-major-version
     template-minor-version template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-environment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateEnvironment"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-environment))
(common-lisp:progn
 (common-lisp:defun create-environment-account-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token codebuild-role-arn
                     component-role-arn environment-name management-account-id
                     role-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token codebuild-role-arn component-role-arn
     environment-name management-account-id role-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-environment-account-connection-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateEnvironmentAccountConnection"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-environment-account-connection))
(common-lisp:progn
 (common-lisp:defun create-environment-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description display-name encryption-key
                     name provisioning tags)
   (common-lisp:declare
    (common-lisp:ignorable description display-name encryption-key name
     provisioning tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-environment-template-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateEnvironmentTemplate"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-environment-template))
(common-lisp:progn
 (common-lisp:defun create-environment-template-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description major-version
                     source tags template-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token description major-version source tags
     template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-environment-template-version-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateEnvironmentTemplateVersion"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-environment-template-version))
(common-lisp:progn
 (common-lisp:defun create-repository
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-arn encryption-key name
                     provider tags)
   (common-lisp:declare
    (common-lisp:ignorable connection-arn encryption-key name provider tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-repository-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateRepository"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-repository))
(common-lisp:progn
 (common-lisp:defun create-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key branch-name description name
                     repository-connection-arn repository-id spec tags
                     template-major-version template-minor-version
                     template-name)
   (common-lisp:declare
    (common-lisp:ignorable branch-name description name
     repository-connection-arn repository-id spec tags template-major-version
     template-minor-version template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-service-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateService"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-service))
(common-lisp:progn
 (common-lisp:defun create-service-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token name service-name spec tags
                     template-major-version template-minor-version)
   (common-lisp:declare
    (common-lisp:ignorable client-token name service-name spec tags
     template-major-version template-minor-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-service-instance-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateServiceInstance"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-service-instance))
(common-lisp:progn
 (common-lisp:defun create-service-sync-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key branch file-path repository-name
                     repository-provider service-name)
   (common-lisp:declare
    (common-lisp:ignorable branch file-path repository-name repository-provider
     service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-service-sync-config-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateServiceSyncConfig"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-service-sync-config))
(common-lisp:progn
 (common-lisp:defun create-service-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description display-name encryption-key
                     name pipeline-provisioning tags)
   (common-lisp:declare
    (common-lisp:ignorable description display-name encryption-key name
     pipeline-provisioning tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-service-template-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateServiceTemplate"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-service-template))
(common-lisp:progn
 (common-lisp:defun create-service-template-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token
                     compatible-environment-templates description major-version
                     source supported-component-sources tags template-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token compatible-environment-templates
     description major-version source supported-component-sources tags
     template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-service-template-version-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateServiceTemplateVersion"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-service-template-version))
(common-lisp:progn
 (common-lisp:defun create-template-sync-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key branch repository-name
                     repository-provider subdirectory template-name
                     template-type)
   (common-lisp:declare
    (common-lisp:ignorable branch repository-name repository-provider
     subdirectory template-name template-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-template-sync-config-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateTemplateSyncConfig"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-template-sync-config))
(common-lisp:progn
 (common-lisp:defun delete-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-component-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteComponent"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-component))
(common-lisp:progn
 (common-lisp:defun delete-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-environment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteEnvironment"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-environment))
(common-lisp:progn
 (common-lisp:defun delete-environment-account-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-environment-account-connection-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteEnvironmentAccountConnection"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-environment-account-connection))
(common-lisp:progn
 (common-lisp:defun delete-environment-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-environment-template-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteEnvironmentTemplate"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-environment-template))
(common-lisp:progn
 (common-lisp:defun delete-environment-template-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key major-version minor-version
                     template-name)
   (common-lisp:declare
    (common-lisp:ignorable major-version minor-version template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-environment-template-version-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteEnvironmentTemplateVersion"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-environment-template-version))
(common-lisp:progn
 (common-lisp:defun delete-repository
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name provider)
   (common-lisp:declare (common-lisp:ignorable name provider))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-repository-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRepository"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-repository))
(common-lisp:progn
 (common-lisp:defun delete-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-service-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteService"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-service))
(common-lisp:progn
 (common-lisp:defun delete-service-sync-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name)
   (common-lisp:declare (common-lisp:ignorable service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-service-sync-config-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteServiceSyncConfig"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-service-sync-config))
(common-lisp:progn
 (common-lisp:defun delete-service-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-service-template-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteServiceTemplate"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-service-template))
(common-lisp:progn
 (common-lisp:defun delete-service-template-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key major-version minor-version
                     template-name)
   (common-lisp:declare
    (common-lisp:ignorable major-version minor-version template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-service-template-version-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteServiceTemplateVersion"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-service-template-version))
(common-lisp:progn
 (common-lisp:defun delete-template-sync-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name template-type)
   (common-lisp:declare (common-lisp:ignorable template-name template-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-template-sync-config-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteTemplateSyncConfig"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-template-sync-config))
(common-lisp:progn
 (common-lisp:defun get-account-settings ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'proton-request :method "POST" :path "/"
                                :params
                                `(("Action" ,@"GetAccountSettings")
                                  ("Version" ,@"2020-07-20"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-account-settings))
(common-lisp:progn
 (common-lisp:defun get-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-component-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetComponent"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-component))
(common-lisp:progn
 (common-lisp:defun get-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-environment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetEnvironment"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-environment))
(common-lisp:progn
 (common-lisp:defun get-environment-account-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-environment-account-connection-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetEnvironmentAccountConnection"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-environment-account-connection))
(common-lisp:progn
 (common-lisp:defun get-environment-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-environment-template-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetEnvironmentTemplate"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-environment-template))
(common-lisp:progn
 (common-lisp:defun get-environment-template-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key major-version minor-version
                     template-name)
   (common-lisp:declare
    (common-lisp:ignorable major-version minor-version template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-environment-template-version-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetEnvironmentTemplateVersion"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-environment-template-version))
(common-lisp:progn
 (common-lisp:defun get-repository
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name provider)
   (common-lisp:declare (common-lisp:ignorable name provider))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-repository-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRepository"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-repository))
(common-lisp:progn
 (common-lisp:defun get-repository-sync-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key branch repository-name
                     repository-provider sync-type)
   (common-lisp:declare
    (common-lisp:ignorable branch repository-name repository-provider
     sync-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-repository-sync-status-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRepositorySyncStatus"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-repository-sync-status))
(common-lisp:progn
 (common-lisp:defun get-resources-summary ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'proton-request :method "POST" :path "/"
                                :params
                                `(("Action" ,@"GetResourcesSummary")
                                  ("Version" ,@"2020-07-20"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-resources-summary))
(common-lisp:progn
 (common-lisp:defun get-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-service-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetService"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-service))
(common-lisp:progn
 (common-lisp:defun get-service-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name service-name)
   (common-lisp:declare (common-lisp:ignorable name service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-service-instance-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetServiceInstance"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-service-instance))
(common-lisp:progn
 (common-lisp:defun get-service-instance-sync-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-instance-name service-name)
   (common-lisp:declare
    (common-lisp:ignorable service-instance-name service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-service-instance-sync-status-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetServiceInstanceSyncStatus"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-service-instance-sync-status))
(common-lisp:progn
 (common-lisp:defun get-service-sync-blocker-summary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-instance-name service-name)
   (common-lisp:declare
    (common-lisp:ignorable service-instance-name service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-service-sync-blocker-summary-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetServiceSyncBlockerSummary"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-service-sync-blocker-summary))
(common-lisp:progn
 (common-lisp:defun get-service-sync-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name)
   (common-lisp:declare (common-lisp:ignorable service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-service-sync-config-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetServiceSyncConfig"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-service-sync-config))
(common-lisp:progn
 (common-lisp:defun get-service-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-service-template-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetServiceTemplate"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-service-template))
(common-lisp:progn
 (common-lisp:defun get-service-template-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key major-version minor-version
                     template-name)
   (common-lisp:declare
    (common-lisp:ignorable major-version minor-version template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-service-template-version-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetServiceTemplateVersion"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-service-template-version))
(common-lisp:progn
 (common-lisp:defun get-template-sync-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name template-type)
   (common-lisp:declare (common-lisp:ignorable template-name template-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-template-sync-config-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetTemplateSyncConfig"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-template-sync-config))
(common-lisp:progn
 (common-lisp:defun get-template-sync-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name template-type
                     template-version)
   (common-lisp:declare
    (common-lisp:ignorable template-name template-type template-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-template-sync-status-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetTemplateSyncStatus"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-template-sync-status))
(common-lisp:progn
 (common-lisp:defun list-component-outputs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key component-name next-token)
   (common-lisp:declare (common-lisp:ignorable component-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-component-outputs-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListComponentOutputs"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-component-outputs))
(common-lisp:progn
 (common-lisp:defun list-component-provisioned-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key component-name next-token)
   (common-lisp:declare (common-lisp:ignorable component-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-component-provisioned-resources-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListComponentProvisionedResources"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-component-provisioned-resources))
(common-lisp:progn
 (common-lisp:defun list-components
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-name max-results next-token
                     service-instance-name service-name)
   (common-lisp:declare
    (common-lisp:ignorable environment-name max-results next-token
     service-instance-name service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-components-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListComponents"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-components))
(common-lisp:progn
 (common-lisp:defun list-environment-account-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-name max-results next-token
                     requested-by statuses)
   (common-lisp:declare
    (common-lisp:ignorable environment-name max-results next-token requested-by
     statuses))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-environment-account-connections-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListEnvironmentAccountConnections"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-environment-account-connections))
(common-lisp:progn
 (common-lisp:defun list-environment-outputs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-name next-token)
   (common-lisp:declare (common-lisp:ignorable environment-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-environment-outputs-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListEnvironmentOutputs"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-environment-outputs))
(common-lisp:progn
 (common-lisp:defun list-environment-provisioned-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-name next-token)
   (common-lisp:declare (common-lisp:ignorable environment-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-environment-provisioned-resources-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListEnvironmentProvisionedResources"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-environment-provisioned-resources))
(common-lisp:progn
 (common-lisp:defun list-environment-template-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key major-version max-results next-token
                     template-name)
   (common-lisp:declare
    (common-lisp:ignorable major-version max-results next-token template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-environment-template-versions-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListEnvironmentTemplateVersions"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-environment-template-versions))
(common-lisp:progn
 (common-lisp:defun list-environment-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-environment-templates-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListEnvironmentTemplates"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-environment-templates))
(common-lisp:progn
 (common-lisp:defun list-environments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-templates max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable environment-templates max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-environments-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListEnvironments"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-environments))
(common-lisp:progn
 (common-lisp:defun list-repositories
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-repositories-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListRepositories"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-repositories))
(common-lisp:progn
 (common-lisp:defun list-repository-sync-definitions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token repository-name
                     repository-provider sync-type)
   (common-lisp:declare
    (common-lisp:ignorable next-token repository-name repository-provider
     sync-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-repository-sync-definitions-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListRepositorySyncDefinitions"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-repository-sync-definitions))
(common-lisp:progn
 (common-lisp:defun list-service-instance-outputs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token service-instance-name
                     service-name)
   (common-lisp:declare
    (common-lisp:ignorable next-token service-instance-name service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-service-instance-outputs-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListServiceInstanceOutputs"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-service-instance-outputs))
(common-lisp:progn
 (common-lisp:defun list-service-instance-provisioned-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token service-instance-name
                     service-name)
   (common-lisp:declare
    (common-lisp:ignorable next-token service-instance-name service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-service-instance-provisioned-resources-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListServiceInstanceProvisionedResources"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-service-instance-provisioned-resources))
(common-lisp:progn
 (common-lisp:defun list-service-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token
                     service-name sort-by sort-order)
   (common-lisp:declare
    (common-lisp:ignorable filters max-results next-token service-name sort-by
     sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-service-instances-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListServiceInstances"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-service-instances))
(common-lisp:progn
 (common-lisp:defun list-service-pipeline-outputs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token service-name)
   (common-lisp:declare (common-lisp:ignorable next-token service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-service-pipeline-outputs-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListServicePipelineOutputs"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-service-pipeline-outputs))
(common-lisp:progn
 (common-lisp:defun list-service-pipeline-provisioned-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token service-name)
   (common-lisp:declare (common-lisp:ignorable next-token service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-service-pipeline-provisioned-resources-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListServicePipelineProvisionedResources"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-service-pipeline-provisioned-resources))
(common-lisp:progn
 (common-lisp:defun list-service-template-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key major-version max-results next-token
                     template-name)
   (common-lisp:declare
    (common-lisp:ignorable major-version max-results next-token template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-service-template-versions-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListServiceTemplateVersions"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-service-template-versions))
(common-lisp:progn
 (common-lisp:defun list-service-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-service-templates-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListServiceTemplates"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-service-templates))
(common-lisp:progn
 (common-lisp:defun list-services
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-services-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListServices"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-services))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token resource-arn)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun notify-resource-deployment-status-change
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id outputs resource-arn status
                     status-message)
   (common-lisp:declare
    (common-lisp:ignorable deployment-id outputs resource-arn status
     status-message))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-notify-resource-deployment-status-change-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "NotifyResourceDeploymentStatusChange"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'notify-resource-deployment-status-change))
(common-lisp:progn
 (common-lisp:defun reject-environment-account-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reject-environment-account-connection-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RejectEnvironmentAccountConnection"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reject-environment-account-connection))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-account-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key delete-pipeline-provisioning-repository
                     pipeline-codebuild-role-arn
                     pipeline-provisioning-repository
                     pipeline-service-role-arn)
   (common-lisp:declare
    (common-lisp:ignorable delete-pipeline-provisioning-repository
     pipeline-codebuild-role-arn pipeline-provisioning-repository
     pipeline-service-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-account-settings-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateAccountSettings"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-account-settings))
(common-lisp:progn
 (common-lisp:defun update-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token deployment-type description
                     name service-instance-name service-name service-spec
                     template-file)
   (common-lisp:declare
    (common-lisp:ignorable client-token deployment-type description name
     service-instance-name service-name service-spec template-file))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-component-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateComponent"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-component))
(common-lisp:progn
 (common-lisp:defun update-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key codebuild-role-arn component-role-arn
                     deployment-type description
                     environment-account-connection-id name
                     proton-service-role-arn provisioning-repository spec
                     template-major-version template-minor-version)
   (common-lisp:declare
    (common-lisp:ignorable codebuild-role-arn component-role-arn
     deployment-type description environment-account-connection-id name
     proton-service-role-arn provisioning-repository spec
     template-major-version template-minor-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-environment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateEnvironment"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-environment))
(common-lisp:progn
 (common-lisp:defun update-environment-account-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key codebuild-role-arn component-role-arn id
                     role-arn)
   (common-lisp:declare
    (common-lisp:ignorable codebuild-role-arn component-role-arn id role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-environment-account-connection-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateEnvironmentAccountConnection"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-environment-account-connection))
(common-lisp:progn
 (common-lisp:defun update-environment-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description display-name name)
   (common-lisp:declare (common-lisp:ignorable description display-name name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-environment-template-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateEnvironmentTemplate"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-environment-template))
(common-lisp:progn
 (common-lisp:defun update-environment-template-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description major-version minor-version
                     status template-name)
   (common-lisp:declare
    (common-lisp:ignorable description major-version minor-version status
     template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-environment-template-version-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateEnvironmentTemplateVersion"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-environment-template-version))
(common-lisp:progn
 (common-lisp:defun update-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description name spec)
   (common-lisp:declare (common-lisp:ignorable description name spec))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-service-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateService"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-service))
(common-lisp:progn
 (common-lisp:defun update-service-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token deployment-type name
                     service-name spec template-major-version
                     template-minor-version)
   (common-lisp:declare
    (common-lisp:ignorable client-token deployment-type name service-name spec
     template-major-version template-minor-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-service-instance-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateServiceInstance"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-service-instance))
(common-lisp:progn
 (common-lisp:defun update-service-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-type service-name spec
                     template-major-version template-minor-version)
   (common-lisp:declare
    (common-lisp:ignorable deployment-type service-name spec
     template-major-version template-minor-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-service-pipeline-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateServicePipeline"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-service-pipeline))
(common-lisp:progn
 (common-lisp:defun update-service-sync-blocker
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id resolved-reason)
   (common-lisp:declare (common-lisp:ignorable id resolved-reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-service-sync-blocker-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateServiceSyncBlocker"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-service-sync-blocker))
(common-lisp:progn
 (common-lisp:defun update-service-sync-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key branch file-path repository-name
                     repository-provider service-name)
   (common-lisp:declare
    (common-lisp:ignorable branch file-path repository-name repository-provider
     service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-service-sync-config-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateServiceSyncConfig"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-service-sync-config))
(common-lisp:progn
 (common-lisp:defun update-service-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description display-name name)
   (common-lisp:declare (common-lisp:ignorable description display-name name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-service-template-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateServiceTemplate"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-service-template))
(common-lisp:progn
 (common-lisp:defun update-service-template-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key compatible-environment-templates
                     description major-version minor-version status
                     supported-component-sources template-name)
   (common-lisp:declare
    (common-lisp:ignorable compatible-environment-templates description
     major-version minor-version status supported-component-sources
     template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-service-template-version-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateServiceTemplateVersion"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-service-template-version))
(common-lisp:progn
 (common-lisp:defun update-template-sync-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key branch repository-name
                     repository-provider subdirectory template-name
                     template-type)
   (common-lisp:declare
    (common-lisp:ignorable branch repository-name repository-provider
     subdirectory template-name template-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-template-sync-config-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateTemplateSyncConfig"
                                                        "2020-07-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-template-sync-config))
