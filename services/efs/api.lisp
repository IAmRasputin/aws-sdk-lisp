;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/efs/api
  (:use)
  (:nicknames #:aws/efs)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/efs/api)
(common-lisp:progn
 (common-lisp:defclass efs-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "efs" :protocol :rest-json))
 (common-lisp:export 'efs-request))
(common-lisp:progn
 (common-lisp:define-condition efs-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'efs-error))
(common-lisp:defvar *error-map*
  '(("AccessPointAlreadyExists" . access-point-already-exists)
    ("AccessPointLimitExceeded" . access-point-limit-exceeded)
    ("AccessPointNotFound" . access-point-not-found)
    ("AvailabilityZonesMismatch" . availability-zones-mismatch)
    ("BadRequest" . bad-request) ("DependencyTimeout" . dependency-timeout)
    ("FileSystemAlreadyExists" . file-system-already-exists)
    ("FileSystemInUse" . file-system-in-use)
    ("FileSystemLimitExceeded" . file-system-limit-exceeded)
    ("FileSystemNotFound" . file-system-not-found)
    ("IncorrectFileSystemLifeCycleState"
     . incorrect-file-system-life-cycle-state)
    ("IncorrectMountTargetState" . incorrect-mount-target-state)
    ("InsufficientThroughputCapacity" . insufficient-throughput-capacity)
    ("InternalServerError" . internal-server-error)
    ("InvalidPolicyException" . invalid-policy-exception)
    ("IpAddressInUse" . ip-address-in-use)
    ("MountTargetConflict" . mount-target-conflict)
    ("MountTargetNotFound" . mount-target-not-found)
    ("NetworkInterfaceLimitExceeded" . network-interface-limit-exceeded)
    ("NoFreeAddressesInSubnet" . no-free-addresses-in-subnet)
    ("PolicyNotFound" . policy-not-found)
    ("ReplicationNotFound" . replication-not-found)
    ("SecurityGroupLimitExceeded" . security-group-limit-exceeded)
    ("SecurityGroupNotFound" . security-group-not-found)
    ("SubnetNotFound" . subnet-not-found)
    ("ThrottlingException" . throttling-exception)
    ("ThroughputLimitExceeded" . throughput-limit-exceeded)
    ("TooManyRequests" . too-many-requests)
    ("UnsupportedAvailabilityZone" . unsupported-availability-zone)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-point-already-exists
     (efs-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       access-point-already-exists-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       access-point-already-exists-message)
      (access-point-id :initarg :access-point-id :initform common-lisp:nil
       :reader access-point-already-exists-access-point-id)))
 (common-lisp:export
  (common-lisp:list 'access-point-already-exists
                    'access-point-already-exists-error-code
                    'access-point-already-exists-message
                    'access-point-already-exists-access-point-id)))
(common-lisp:deftype access-point-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass access-point-description common-lisp:nil
                       ((life-cycle-state :initarg :life-cycle-state :type
                         (common-lisp:or life-cycle-state common-lisp:null)
                         :accessor %access-point-description-life-cycle-state
                         :initform common-lisp:nil)
                        (owner-id :initarg :owner-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %access-point-description-owner-id :initform
                         common-lisp:nil)
                        (root-directory :initarg :root-directory :type
                         (common-lisp:or root-directory common-lisp:null)
                         :accessor %access-point-description-root-directory
                         :initform common-lisp:nil)
                        (posix-user :initarg :posix-user :type
                         (common-lisp:or posix-user common-lisp:null) :accessor
                         %access-point-description-posix-user :initform
                         common-lisp:nil)
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor %access-point-description-file-system-id
                         :initform common-lisp:nil)
                        (access-point-arn :initarg :access-point-arn :type
                         (common-lisp:or access-point-arn common-lisp:null)
                         :accessor %access-point-description-access-point-arn
                         :initform common-lisp:nil)
                        (access-point-id :initarg :access-point-id :type
                         (common-lisp:or access-point-id common-lisp:null)
                         :accessor %access-point-description-access-point-id
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %access-point-description-tags :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %access-point-description-name :initform
                         common-lisp:nil)
                        (client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %access-point-description-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'access-point-description 'make-access-point-description))
 (common-lisp:defun make-access-point-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key life-cycle-state owner-id root-directory
                     posix-user file-system-id access-point-arn access-point-id
                     tags name client-token)
   (common-lisp:apply #'common-lisp:make-instance 'access-point-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          access-point-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          access-point-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-id))
      (common-lisp:list
       (common-lisp:cons "AccessPointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-arn))
      (common-lisp:list
       (common-lisp:cons "AccessPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "FileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'posix-user))
      (common-lisp:list
       (common-lisp:cons "PosixUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-directory))
      (common-lisp:list
       (common-lisp:cons "RootDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'life-cycle-state))
      (common-lisp:list
       (common-lisp:cons "LifeCycleState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          access-point-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype access-point-descriptions ()
   '(trivial-types:proper-list access-point-description))
 (common-lisp:defun |make-access-point-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            access-point-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype access-point-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition access-point-limit-exceeded
     (efs-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       access-point-limit-exceeded-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       access-point-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'access-point-limit-exceeded
                    'access-point-limit-exceeded-error-code
                    'access-point-limit-exceeded-message)))
(common-lisp:progn
 (common-lisp:define-condition access-point-not-found
     (efs-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       access-point-not-found-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       access-point-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'access-point-not-found 'access-point-not-found-error-code
                    'access-point-not-found-message)))
(common-lisp:deftype availability-zone-id () 'common-lisp:string)
(common-lisp:deftype availability-zone-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition availability-zones-mismatch
     (efs-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       availability-zones-mismatch-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       availability-zones-mismatch-message)))
 (common-lisp:export
  (common-lisp:list 'availability-zones-mismatch
                    'availability-zones-mismatch-error-code
                    'availability-zones-mismatch-message)))
(common-lisp:deftype aws-account-id () 'common-lisp:string)
(common-lisp:deftype backup () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass backup-policy common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %backup-policy-status :initform
                         (common-lisp:error ":status is required"))))
 (common-lisp:export (common-lisp:list 'backup-policy 'make-backup-policy))
 (common-lisp:defun make-backup-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance 'backup-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input backup-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input backup-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input backup-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backup-policy-description common-lisp:nil
                       ((backup-policy :initarg :backup-policy :type
                         (common-lisp:or backup-policy common-lisp:null)
                         :accessor %backup-policy-description-backup-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'backup-policy-description
                    'make-backup-policy-description))
 (common-lisp:defun make-backup-policy-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-policy)
   (common-lisp:apply #'common-lisp:make-instance 'backup-policy-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backup-policy-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backup-policy-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-policy))
      (common-lisp:list
       (common-lisp:cons "BackupPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backup-policy-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-request
     (efs-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       bad-request-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       bad-request-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request 'bad-request-error-code 'bad-request-message)))
(common-lisp:deftype bypass-policy-lockout-safety-check () 'common-lisp:boolean)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-access-point-request common-lisp:nil
                       ((root-directory :initarg :root-directory :type
                         (common-lisp:or root-directory common-lisp:null)
                         :accessor %create-access-point-request-root-directory
                         :initform common-lisp:nil)
                        (posix-user :initarg :posix-user :type
                         (common-lisp:or posix-user common-lisp:null) :accessor
                         %create-access-point-request-posix-user :initform
                         common-lisp:nil)
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor %create-access-point-request-file-system-id
                         :initform
                         (common-lisp:error ":file-system-id is required"))
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-access-point-request-tags :initform
                         common-lisp:nil)
                        (client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-access-point-request-client-token
                         :initform
                         (common-lisp:error ":client-token is required"))))
 (common-lisp:export
  (common-lisp:list 'create-access-point-request
                    'make-create-access-point-request))
 (common-lisp:defun make-create-access-point-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key root-directory posix-user file-system-id
                     tags client-token)
   (common-lisp:apply #'common-lisp:make-instance 'create-access-point-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "FileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'posix-user))
      (common-lisp:list
       (common-lisp:cons "PosixUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-directory))
      (common-lisp:list
       (common-lisp:cons "RootDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-file-system-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-file-system-request-tags :initform
                         common-lisp:nil)
                        (backup :initarg :backup :type
                         (common-lisp:or backup common-lisp:null) :accessor
                         %create-file-system-request-backup :initform
                         common-lisp:nil)
                        (availability-zone-name :initarg
                         :availability-zone-name :type
                         (common-lisp:or availability-zone-name
                                         common-lisp:null)
                         :accessor
                         %create-file-system-request-availability-zone-name
                         :initform common-lisp:nil)
                        (provisioned-throughput-in-mibps :initarg
                         :provisioned-throughput-in-mibps :type
                         (common-lisp:or provisioned-throughput-in-mibps
                                         common-lisp:null)
                         :accessor
                         %create-file-system-request-provisioned-throughput-in-mibps
                         :initform common-lisp:nil)
                        (throughput-mode :initarg :throughput-mode :type
                         (common-lisp:or throughput-mode common-lisp:null)
                         :accessor %create-file-system-request-throughput-mode
                         :initform common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         %create-file-system-request-kms-key-id :initform
                         common-lisp:nil)
                        (encrypted :initarg :encrypted :type
                         (common-lisp:or encrypted common-lisp:null) :accessor
                         %create-file-system-request-encrypted :initform
                         common-lisp:nil)
                        (performance-mode :initarg :performance-mode :type
                         (common-lisp:or performance-mode common-lisp:null)
                         :accessor %create-file-system-request-performance-mode
                         :initform common-lisp:nil)
                        (creation-token :initarg :creation-token :type
                         (common-lisp:or creation-token common-lisp:null)
                         :accessor %create-file-system-request-creation-token
                         :initform
                         (common-lisp:error ":creation-token is required"))))
 (common-lisp:export
  (common-lisp:list 'create-file-system-request
                    'make-create-file-system-request))
 (common-lisp:defun make-create-file-system-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags backup availability-zone-name
                     provisioned-throughput-in-mibps throughput-mode kms-key-id
                     encrypted performance-mode creation-token)
   (common-lisp:apply #'common-lisp:make-instance 'create-file-system-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-file-system-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-file-system-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-token))
      (common-lisp:list
       (common-lisp:cons "CreationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'performance-mode))
      (common-lisp:list
       (common-lisp:cons "PerformanceMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput-mode))
      (common-lisp:list
       (common-lisp:cons "ThroughputMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-throughput-in-mibps))
      (common-lisp:list
       (common-lisp:cons "ProvisionedThroughputInMibps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-name))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZoneName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup))
      (common-lisp:list
       (common-lisp:cons "Backup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-file-system-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-mount-target-request common-lisp:nil
                       ((security-groups :initarg :security-groups :type
                         (common-lisp:or security-groups common-lisp:null)
                         :accessor %create-mount-target-request-security-groups
                         :initform common-lisp:nil)
                        (ip-address :initarg :ip-address :type
                         (common-lisp:or ip-address common-lisp:null) :accessor
                         %create-mount-target-request-ip-address :initform
                         common-lisp:nil)
                        (subnet-id :initarg :subnet-id :type
                         (common-lisp:or subnet-id common-lisp:null) :accessor
                         %create-mount-target-request-subnet-id :initform
                         (common-lisp:error ":subnet-id is required"))
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor %create-mount-target-request-file-system-id
                         :initform
                         (common-lisp:error ":file-system-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-mount-target-request
                    'make-create-mount-target-request))
 (common-lisp:defun make-create-mount-target-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key security-groups ip-address subnet-id
                     file-system-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-mount-target-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-mount-target-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-mount-target-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "FileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-mount-target-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-replication-configuration-request common-lisp:nil
                       ((destinations :initarg :destinations :type
                         (common-lisp:or destinations-to-create
                                         common-lisp:null)
                         :accessor
                         %create-replication-configuration-request-destinations
                         :initform
                         (common-lisp:error ":destinations is required"))
                        (source-file-system-id :initarg :source-file-system-id
                         :type (common-lisp:or file-system-id common-lisp:null)
                         :accessor
                         %create-replication-configuration-request-source-file-system-id
                         :initform
                         (common-lisp:error
                          ":source-file-system-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-replication-configuration-request
                    'make-create-replication-configuration-request))
 (common-lisp:defun make-create-replication-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destinations source-file-system-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-replication-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-tags-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-tags-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor %create-tags-request-file-system-id
                         :initform
                         (common-lisp:error ":file-system-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-tags-request 'make-create-tags-request))
 (common-lisp:defun make-create-tags-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags file-system-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass creation-info common-lisp:nil
                       ((permissions :initarg :permissions :type
                         (common-lisp:or permissions common-lisp:null)
                         :accessor %creation-info-permissions :initform
                         (common-lisp:error ":permissions is required"))
                        (owner-gid :initarg :owner-gid :type
                         (common-lisp:or owner-gid common-lisp:null) :accessor
                         %creation-info-owner-gid :initform
                         (common-lisp:error ":owner-gid is required"))
                        (owner-uid :initarg :owner-uid :type
                         (common-lisp:or owner-uid common-lisp:null) :accessor
                         %creation-info-owner-uid :initform
                         (common-lisp:error ":owner-uid is required"))))
 (common-lisp:export (common-lisp:list 'creation-info 'make-creation-info))
 (common-lisp:defun make-creation-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key permissions owner-gid owner-uid)
   (common-lisp:apply #'common-lisp:make-instance 'creation-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input creation-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input creation-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-uid))
      (common-lisp:list
       (common-lisp:cons "OwnerUid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-gid))
      (common-lisp:list
       (common-lisp:cons "OwnerGid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input creation-info))
   common-lisp:nil))
(common-lisp:deftype creation-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-access-point-request common-lisp:nil
                       ((access-point-id :initarg :access-point-id :type
                         (common-lisp:or access-point-id common-lisp:null)
                         :accessor %delete-access-point-request-access-point-id
                         :initform
                         (common-lisp:error ":access-point-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-access-point-request
                    'make-delete-access-point-request))
 (common-lisp:defun make-delete-access-point-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key access-point-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-access-point-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-file-system-policy-request common-lisp:nil
                       ((file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor
                         %delete-file-system-policy-request-file-system-id
                         :initform
                         (common-lisp:error ":file-system-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-file-system-policy-request
                    'make-delete-file-system-policy-request))
 (common-lisp:defun make-delete-file-system-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key file-system-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-file-system-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-system-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-system-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-system-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-file-system-request common-lisp:nil
                       ((file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor %delete-file-system-request-file-system-id
                         :initform
                         (common-lisp:error ":file-system-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-file-system-request
                    'make-delete-file-system-request))
 (common-lisp:defun make-delete-file-system-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key file-system-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-file-system-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-system-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-system-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-system-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-mount-target-request common-lisp:nil
                       ((mount-target-id :initarg :mount-target-id :type
                         (common-lisp:or mount-target-id common-lisp:null)
                         :accessor %delete-mount-target-request-mount-target-id
                         :initform
                         (common-lisp:error ":mount-target-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-mount-target-request
                    'make-delete-mount-target-request))
 (common-lisp:defun make-delete-mount-target-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mount-target-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-mount-target-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-mount-target-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-mount-target-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-mount-target-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-replication-configuration-request common-lisp:nil
                       ((source-file-system-id :initarg :source-file-system-id
                         :type (common-lisp:or file-system-id common-lisp:null)
                         :accessor
                         %delete-replication-configuration-request-source-file-system-id
                         :initform
                         (common-lisp:error
                          ":source-file-system-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-replication-configuration-request
                    'make-delete-replication-configuration-request))
 (common-lisp:defun make-delete-replication-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-file-system-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-replication-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-tags-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         %delete-tags-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor %delete-tags-request-file-system-id
                         :initform
                         (common-lisp:error ":file-system-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-tags-request 'make-delete-tags-request))
 (common-lisp:defun make-delete-tags-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys file-system-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dependency-timeout
     (efs-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       dependency-timeout-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       dependency-timeout-message)))
 (common-lisp:export
  (common-lisp:list 'dependency-timeout 'dependency-timeout-error-code
                    'dependency-timeout-message)))
(common-lisp:progn
 (common-lisp:defclass describe-access-points-request common-lisp:nil
                       ((file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor
                         %describe-access-points-request-file-system-id
                         :initform common-lisp:nil)
                        (access-point-id :initarg :access-point-id :type
                         (common-lisp:or access-point-id common-lisp:null)
                         :accessor
                         %describe-access-points-request-access-point-id
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %describe-access-points-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %describe-access-points-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-access-points-request
                    'make-describe-access-points-request))
 (common-lisp:defun make-describe-access-points-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key file-system-id access-point-id next-token
                     max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-access-points-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-points-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-points-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-points-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-access-points-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %describe-access-points-response-next-token :initform
                         common-lisp:nil)
                        (access-points :initarg :access-points :type
                         (common-lisp:or access-point-descriptions
                                         common-lisp:null)
                         :accessor
                         %describe-access-points-response-access-points
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-access-points-response
                    'make-describe-access-points-response))
 (common-lisp:defun make-describe-access-points-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token access-points)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-access-points-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-points-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-points-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-points))
      (common-lisp:list
       (common-lisp:cons "AccessPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-points-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-preferences-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %describe-account-preferences-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %describe-account-preferences-request-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-account-preferences-request
                    'make-describe-account-preferences-request))
 (common-lisp:defun make-describe-account-preferences-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-preferences-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-preferences-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-preferences-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-preferences-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-preferences-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %describe-account-preferences-response-next-token
                         :initform common-lisp:nil)
                        (resource-id-preference :initarg
                         :resource-id-preference :type
                         (common-lisp:or resource-id-preference
                                         common-lisp:null)
                         :accessor
                         %describe-account-preferences-response-resource-id-preference
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-account-preferences-response
                    'make-describe-account-preferences-response))
 (common-lisp:defun make-describe-account-preferences-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token resource-id-preference)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-preferences-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-preferences-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-preferences-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-id-preference))
      (common-lisp:list
       (common-lisp:cons "ResourceIdPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-preferences-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-backup-policy-request common-lisp:nil
                       ((file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor
                         %describe-backup-policy-request-file-system-id
                         :initform
                         (common-lisp:error ":file-system-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-backup-policy-request
                    'make-describe-backup-policy-request))
 (common-lisp:defun make-describe-backup-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key file-system-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-backup-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-backup-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-backup-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-backup-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-file-system-policy-request common-lisp:nil
                       ((file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor
                         %describe-file-system-policy-request-file-system-id
                         :initform
                         (common-lisp:error ":file-system-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-file-system-policy-request
                    'make-describe-file-system-policy-request))
 (common-lisp:defun make-describe-file-system-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key file-system-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-file-system-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-file-system-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-file-system-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-file-system-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-file-systems-request common-lisp:nil
                       ((file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor
                         %describe-file-systems-request-file-system-id
                         :initform common-lisp:nil)
                        (creation-token :initarg :creation-token :type
                         (common-lisp:or creation-token common-lisp:null)
                         :accessor
                         %describe-file-systems-request-creation-token
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         %describe-file-systems-request-marker :initform
                         common-lisp:nil)
                        (max-items :initarg :max-items :type
                         (common-lisp:or max-items common-lisp:null) :accessor
                         %describe-file-systems-request-max-items :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-file-systems-request
                    'make-describe-file-systems-request))
 (common-lisp:defun make-describe-file-systems-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key file-system-id creation-token marker
                     max-items)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-file-systems-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-file-systems-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-file-systems-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-file-systems-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-file-systems-response common-lisp:nil
                       ((next-marker :initarg :next-marker :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         %describe-file-systems-response-next-marker :initform
                         common-lisp:nil)
                        (file-systems :initarg :file-systems :type
                         (common-lisp:or file-system-descriptions
                                         common-lisp:null)
                         :accessor %describe-file-systems-response-file-systems
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         %describe-file-systems-response-marker :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-file-systems-response
                    'make-describe-file-systems-response))
 (common-lisp:defun make-describe-file-systems-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-marker file-systems marker)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-file-systems-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-file-systems-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-file-systems-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-systems))
      (common-lisp:list
       (common-lisp:cons "FileSystems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-file-systems-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-lifecycle-configuration-request common-lisp:nil
                       ((file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor
                         %describe-lifecycle-configuration-request-file-system-id
                         :initform
                         (common-lisp:error ":file-system-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-lifecycle-configuration-request
                    'make-describe-lifecycle-configuration-request))
 (common-lisp:defun make-describe-lifecycle-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key file-system-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-lifecycle-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-lifecycle-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-lifecycle-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-lifecycle-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-mount-target-security-groups-request
                       common-lisp:nil
                       ((mount-target-id :initarg :mount-target-id :type
                         (common-lisp:or mount-target-id common-lisp:null)
                         :accessor
                         %describe-mount-target-security-groups-request-mount-target-id
                         :initform
                         (common-lisp:error ":mount-target-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-mount-target-security-groups-request
                    'make-describe-mount-target-security-groups-request))
 (common-lisp:defun make-describe-mount-target-security-groups-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mount-target-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-mount-target-security-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-mount-target-security-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-mount-target-security-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-mount-target-security-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-mount-target-security-groups-response
                       common-lisp:nil
                       ((security-groups :initarg :security-groups :type
                         (common-lisp:or security-groups common-lisp:null)
                         :accessor
                         %describe-mount-target-security-groups-response-security-groups
                         :initform
                         (common-lisp:error ":security-groups is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-mount-target-security-groups-response
                    'make-describe-mount-target-security-groups-response))
 (common-lisp:defun make-describe-mount-target-security-groups-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key security-groups)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-mount-target-security-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-mount-target-security-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-mount-target-security-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-mount-target-security-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-mount-targets-request common-lisp:nil
                       ((access-point-id :initarg :access-point-id :type
                         (common-lisp:or access-point-id common-lisp:null)
                         :accessor
                         %describe-mount-targets-request-access-point-id
                         :initform common-lisp:nil)
                        (mount-target-id :initarg :mount-target-id :type
                         (common-lisp:or mount-target-id common-lisp:null)
                         :accessor
                         %describe-mount-targets-request-mount-target-id
                         :initform common-lisp:nil)
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor
                         %describe-mount-targets-request-file-system-id
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         %describe-mount-targets-request-marker :initform
                         common-lisp:nil)
                        (max-items :initarg :max-items :type
                         (common-lisp:or max-items common-lisp:null) :accessor
                         %describe-mount-targets-request-max-items :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-mount-targets-request
                    'make-describe-mount-targets-request))
 (common-lisp:defun make-describe-mount-targets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key access-point-id mount-target-id
                     file-system-id marker max-items)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-mount-targets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-mount-targets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-mount-targets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-mount-targets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-mount-targets-response common-lisp:nil
                       ((next-marker :initarg :next-marker :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         %describe-mount-targets-response-next-marker :initform
                         common-lisp:nil)
                        (mount-targets :initarg :mount-targets :type
                         (common-lisp:or mount-target-descriptions
                                         common-lisp:null)
                         :accessor
                         %describe-mount-targets-response-mount-targets
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         %describe-mount-targets-response-marker :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-mount-targets-response
                    'make-describe-mount-targets-response))
 (common-lisp:defun make-describe-mount-targets-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-marker mount-targets marker)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-mount-targets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-mount-targets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-mount-targets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mount-targets))
      (common-lisp:list
       (common-lisp:cons "MountTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-mount-targets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-replication-configurations-request
                       common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %describe-replication-configurations-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %describe-replication-configurations-request-next-token
                         :initform common-lisp:nil)
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor
                         %describe-replication-configurations-request-file-system-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-replication-configurations-request
                    'make-describe-replication-configurations-request))
 (common-lisp:defun make-describe-replication-configurations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token file-system-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-replication-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-replication-configurations-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %describe-replication-configurations-response-next-token
                         :initform common-lisp:nil)
                        (replications :initarg :replications :type
                         (common-lisp:or replication-configuration-descriptions
                                         common-lisp:null)
                         :accessor
                         %describe-replication-configurations-response-replications
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-replication-configurations-response
                    'make-describe-replication-configurations-response))
 (common-lisp:defun make-describe-replication-configurations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token replications)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-replication-configurations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replications))
      (common-lisp:list
       (common-lisp:cons "Replications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-tags-request common-lisp:nil
                       ((file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor %describe-tags-request-file-system-id
                         :initform
                         (common-lisp:error ":file-system-id is required"))
                        (marker :initarg :marker :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         %describe-tags-request-marker :initform
                         common-lisp:nil)
                        (max-items :initarg :max-items :type
                         (common-lisp:or max-items common-lisp:null) :accessor
                         %describe-tags-request-max-items :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-tags-request 'make-describe-tags-request))
 (common-lisp:defun make-describe-tags-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key file-system-id marker max-items)
   (common-lisp:apply #'common-lisp:make-instance 'describe-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-tags-response common-lisp:nil
                       ((next-marker :initarg :next-marker :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         %describe-tags-response-next-marker :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %describe-tags-response-tags :initform
                         (common-lisp:error ":tags is required"))
                        (marker :initarg :marker :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         %describe-tags-response-marker :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-tags-response 'make-describe-tags-response))
 (common-lisp:defun make-describe-tags-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-marker tags marker)
   (common-lisp:apply #'common-lisp:make-instance 'describe-tags-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass destination common-lisp:nil
                       ((last-replicated-timestamp :initarg
                         :last-replicated-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %destination-last-replicated-timestamp :initform
                         common-lisp:nil)
                        (region :initarg :region :type
                         (common-lisp:or region-name common-lisp:null)
                         :accessor %destination-region :initform
                         (common-lisp:error ":region is required"))
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor %destination-file-system-id :initform
                         (common-lisp:error ":file-system-id is required"))
                        (status :initarg :status :type
                         (common-lisp:or replication-status common-lisp:null)
                         :accessor %destination-status :initform
                         (common-lisp:error ":status is required"))))
 (common-lisp:export (common-lisp:list 'destination 'make-destination))
 (common-lisp:defun make-destination
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-replicated-timestamp region
                     file-system-id status)
   (common-lisp:apply #'common-lisp:make-instance 'destination
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "FileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-replicated-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastReplicatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass destination-to-create common-lisp:nil
                       ((kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         %destination-to-create-kms-key-id :initform
                         common-lisp:nil)
                        (availability-zone-name :initarg
                         :availability-zone-name :type
                         (common-lisp:or availability-zone-name
                                         common-lisp:null)
                         :accessor
                         %destination-to-create-availability-zone-name
                         :initform common-lisp:nil)
                        (region :initarg :region :type
                         (common-lisp:or region-name common-lisp:null)
                         :accessor %destination-to-create-region :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'destination-to-create 'make-destination-to-create))
 (common-lisp:defun make-destination-to-create
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-key-id availability-zone-name region)
   (common-lisp:apply #'common-lisp:make-instance 'destination-to-create
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          destination-to-create))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          destination-to-create))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-name))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZoneName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          destination-to-create))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype destinations () '(trivial-types:proper-list destination))
 (common-lisp:defun |make-destinations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list destination))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype destinations-to-create ()
   '(trivial-types:proper-list destination-to-create))
 (common-lisp:defun |make-destinations-to-create|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list destination-to-create))
   aws-sdk/generator/shape::members))
(common-lisp:deftype encrypted () 'common-lisp:boolean)
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition file-system-already-exists
     (efs-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       file-system-already-exists-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       file-system-already-exists-message)
      (file-system-id :initarg :file-system-id :initform common-lisp:nil
       :reader file-system-already-exists-file-system-id)))
 (common-lisp:export
  (common-lisp:list 'file-system-already-exists
                    'file-system-already-exists-error-code
                    'file-system-already-exists-message
                    'file-system-already-exists-file-system-id)))
(common-lisp:deftype file-system-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass file-system-description common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %file-system-description-tags :initform
                         (common-lisp:error ":tags is required"))
                        (availability-zone-id :initarg :availability-zone-id
                         :type
                         (common-lisp:or availability-zone-id common-lisp:null)
                         :accessor
                         %file-system-description-availability-zone-id
                         :initform common-lisp:nil)
                        (availability-zone-name :initarg
                         :availability-zone-name :type
                         (common-lisp:or availability-zone-name
                                         common-lisp:null)
                         :accessor
                         %file-system-description-availability-zone-name
                         :initform common-lisp:nil)
                        (provisioned-throughput-in-mibps :initarg
                         :provisioned-throughput-in-mibps :type
                         (common-lisp:or provisioned-throughput-in-mibps
                                         common-lisp:null)
                         :accessor
                         %file-system-description-provisioned-throughput-in-mibps
                         :initform common-lisp:nil)
                        (throughput-mode :initarg :throughput-mode :type
                         (common-lisp:or throughput-mode common-lisp:null)
                         :accessor %file-system-description-throughput-mode
                         :initform common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         %file-system-description-kms-key-id :initform
                         common-lisp:nil)
                        (encrypted :initarg :encrypted :type
                         (common-lisp:or encrypted common-lisp:null) :accessor
                         %file-system-description-encrypted :initform
                         common-lisp:nil)
                        (performance-mode :initarg :performance-mode :type
                         (common-lisp:or performance-mode common-lisp:null)
                         :accessor %file-system-description-performance-mode
                         :initform
                         (common-lisp:error ":performance-mode is required"))
                        (size-in-bytes :initarg :size-in-bytes :type
                         (common-lisp:or file-system-size common-lisp:null)
                         :accessor %file-system-description-size-in-bytes
                         :initform
                         (common-lisp:error ":size-in-bytes is required"))
                        (number-of-mount-targets :initarg
                         :number-of-mount-targets :type
                         (common-lisp:or mount-target-count common-lisp:null)
                         :accessor
                         %file-system-description-number-of-mount-targets
                         :initform
                         (common-lisp:error
                          ":number-of-mount-targets is required"))
                        (name :initarg :name :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %file-system-description-name :initform
                         common-lisp:nil)
                        (life-cycle-state :initarg :life-cycle-state :type
                         (common-lisp:or life-cycle-state common-lisp:null)
                         :accessor %file-system-description-life-cycle-state
                         :initform
                         (common-lisp:error ":life-cycle-state is required"))
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %file-system-description-creation-time :initform
                         (common-lisp:error ":creation-time is required"))
                        (file-system-arn :initarg :file-system-arn :type
                         (common-lisp:or file-system-arn common-lisp:null)
                         :accessor %file-system-description-file-system-arn
                         :initform common-lisp:nil)
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor %file-system-description-file-system-id
                         :initform
                         (common-lisp:error ":file-system-id is required"))
                        (creation-token :initarg :creation-token :type
                         (common-lisp:or creation-token common-lisp:null)
                         :accessor %file-system-description-creation-token
                         :initform
                         (common-lisp:error ":creation-token is required"))
                        (owner-id :initarg :owner-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %file-system-description-owner-id :initform
                         (common-lisp:error ":owner-id is required"))))
 (common-lisp:export
  (common-lisp:list 'file-system-description 'make-file-system-description))
 (common-lisp:defun make-file-system-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags availability-zone-id
                     availability-zone-name provisioned-throughput-in-mibps
                     throughput-mode kms-key-id encrypted performance-mode
                     size-in-bytes number-of-mount-targets name
                     life-cycle-state creation-time file-system-arn
                     file-system-id creation-token owner-id)
   (common-lisp:apply #'common-lisp:make-instance 'file-system-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          file-system-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          file-system-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-token))
      (common-lisp:list
       (common-lisp:cons "CreationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "FileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-arn))
      (common-lisp:list
       (common-lisp:cons "FileSystemArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'life-cycle-state))
      (common-lisp:list
       (common-lisp:cons "LifeCycleState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-mount-targets))
      (common-lisp:list
       (common-lisp:cons "NumberOfMountTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "SizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'performance-mode))
      (common-lisp:list
       (common-lisp:cons "PerformanceMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput-mode))
      (common-lisp:list
       (common-lisp:cons "ThroughputMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-throughput-in-mibps))
      (common-lisp:list
       (common-lisp:cons "ProvisionedThroughputInMibps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-name))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZoneName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-id))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          file-system-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype file-system-descriptions ()
   '(trivial-types:proper-list file-system-description))
 (common-lisp:defun |make-file-system-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list file-system-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype file-system-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition file-system-in-use
     (efs-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       file-system-in-use-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       file-system-in-use-message)))
 (common-lisp:export
  (common-lisp:list 'file-system-in-use 'file-system-in-use-error-code
                    'file-system-in-use-message)))
(common-lisp:progn
 (common-lisp:define-condition file-system-limit-exceeded
     (efs-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       file-system-limit-exceeded-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       file-system-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'file-system-limit-exceeded
                    'file-system-limit-exceeded-error-code
                    'file-system-limit-exceeded-message)))
(common-lisp:progn
 (common-lisp:define-condition file-system-not-found
     (efs-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       file-system-not-found-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       file-system-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'file-system-not-found 'file-system-not-found-error-code
                    'file-system-not-found-message)))
(common-lisp:deftype file-system-nullable-size-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass file-system-policy-description common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %file-system-policy-description-policy :initform
                         common-lisp:nil)
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor
                         %file-system-policy-description-file-system-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'file-system-policy-description
                    'make-file-system-policy-description))
 (common-lisp:defun make-file-system-policy-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy file-system-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'file-system-policy-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          file-system-policy-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          file-system-policy-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "FileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          file-system-policy-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass file-system-size common-lisp:nil
                       ((value-in-standard :initarg :value-in-standard :type
                         (common-lisp:or file-system-nullable-size-value
                                         common-lisp:null)
                         :accessor %file-system-size-value-in-standard
                         :initform common-lisp:nil)
                        (value-in-ia :initarg :value-in-ia :type
                         (common-lisp:or file-system-nullable-size-value
                                         common-lisp:null)
                         :accessor %file-system-size-value-in-ia :initform
                         common-lisp:nil)
                        (timestamp :initarg :timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %file-system-size-timestamp :initform common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or file-system-size-value
                                         common-lisp:null)
                         :accessor %file-system-size-value :initform
                         (common-lisp:error ":value is required"))))
 (common-lisp:export
  (common-lisp:list 'file-system-size 'make-file-system-size))
 (common-lisp:defun make-file-system-size
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value-in-standard value-in-ia timestamp
                     value)
   (common-lisp:apply #'common-lisp:make-instance 'file-system-size
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input file-system-size))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input file-system-size))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-in-ia))
      (common-lisp:list
       (common-lisp:cons "ValueInIA"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-in-standard))
      (common-lisp:list
       (common-lisp:cons "ValueInStandard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input file-system-size))
   common-lisp:nil))
(common-lisp:deftype file-system-size-value () 'common-lisp:integer)
(common-lisp:deftype gid () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition incorrect-file-system-life-cycle-state
     (efs-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       incorrect-file-system-life-cycle-state-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       incorrect-file-system-life-cycle-state-message)))
 (common-lisp:export
  (common-lisp:list 'incorrect-file-system-life-cycle-state
                    'incorrect-file-system-life-cycle-state-error-code
                    'incorrect-file-system-life-cycle-state-message)))
(common-lisp:progn
 (common-lisp:define-condition incorrect-mount-target-state
     (efs-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       incorrect-mount-target-state-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       incorrect-mount-target-state-message)))
 (common-lisp:export
  (common-lisp:list 'incorrect-mount-target-state
                    'incorrect-mount-target-state-error-code
                    'incorrect-mount-target-state-message)))
(common-lisp:progn
 (common-lisp:define-condition insufficient-throughput-capacity
     (efs-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       insufficient-throughput-capacity-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       insufficient-throughput-capacity-message)))
 (common-lisp:export
  (common-lisp:list 'insufficient-throughput-capacity
                    'insufficient-throughput-capacity-error-code
                    'insufficient-throughput-capacity-message)))
(common-lisp:progn
 (common-lisp:define-condition internal-server-error
     (efs-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       internal-server-error-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       internal-server-error-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-error 'internal-server-error-error-code
                    'internal-server-error-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-policy-exception
     (efs-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       invalid-policy-exception-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-policy-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-policy-exception
                    'invalid-policy-exception-error-code
                    'invalid-policy-exception-message)))
(common-lisp:deftype ip-address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition ip-address-in-use
     (efs-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       ip-address-in-use-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       ip-address-in-use-message)))
 (common-lisp:export
  (common-lisp:list 'ip-address-in-use 'ip-address-in-use-error-code
                    'ip-address-in-use-message)))
(common-lisp:deftype kms-key-id () 'common-lisp:string)
(common-lisp:deftype life-cycle-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lifecycle-configuration-description common-lisp:nil
                       ((lifecycle-policies :initarg :lifecycle-policies :type
                         (common-lisp:or lifecycle-policies common-lisp:null)
                         :accessor
                         %lifecycle-configuration-description-lifecycle-policies
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lifecycle-configuration-description
                    'make-lifecycle-configuration-description))
 (common-lisp:defun make-lifecycle-configuration-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lifecycle-policies)
   (common-lisp:apply #'common-lisp:make-instance
                      'lifecycle-configuration-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-configuration-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-configuration-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-policies))
      (common-lisp:list
       (common-lisp:cons "LifecyclePolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-configuration-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lifecycle-policies ()
   '(trivial-types:proper-list lifecycle-policy))
 (common-lisp:defun |make-lifecycle-policies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lifecycle-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass lifecycle-policy common-lisp:nil
                       ((transition-to-primary-storage-class :initarg
                         :transition-to-primary-storage-class :type
                         (common-lisp:or
                          transition-to-primary-storage-class-rules
                          common-lisp:null)
                         :accessor
                         %lifecycle-policy-transition-to-primary-storage-class
                         :initform common-lisp:nil)
                        (transition-to-ia :initarg :transition-to-ia :type
                         (common-lisp:or transition-to-iarules
                                         common-lisp:null)
                         :accessor %lifecycle-policy-transition-to-ia :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lifecycle-policy 'make-lifecycle-policy))
 (common-lisp:defun make-lifecycle-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transition-to-primary-storage-class
                     transition-to-ia)
   (common-lisp:apply #'common-lisp:make-instance 'lifecycle-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lifecycle-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lifecycle-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transition-to-ia))
      (common-lisp:list
       (common-lisp:cons "TransitionToIA"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transition-to-primary-storage-class))
      (common-lisp:list
       (common-lisp:cons "TransitionToPrimaryStorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lifecycle-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-tags-for-resource-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-tags-for-resource-request-max-results
                         :initform common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results resource-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-tags-for-resource-response-next-token :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype marker () 'common-lisp:string)
(common-lisp:deftype max-items () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass modify-mount-target-security-groups-request
                       common-lisp:nil
                       ((security-groups :initarg :security-groups :type
                         (common-lisp:or security-groups common-lisp:null)
                         :accessor
                         %modify-mount-target-security-groups-request-security-groups
                         :initform common-lisp:nil)
                        (mount-target-id :initarg :mount-target-id :type
                         (common-lisp:or mount-target-id common-lisp:null)
                         :accessor
                         %modify-mount-target-security-groups-request-mount-target-id
                         :initform
                         (common-lisp:error ":mount-target-id is required"))))
 (common-lisp:export
  (common-lisp:list 'modify-mount-target-security-groups-request
                    'make-modify-mount-target-security-groups-request))
 (common-lisp:defun make-modify-mount-target-security-groups-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key security-groups mount-target-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-mount-target-security-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-mount-target-security-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-mount-target-security-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-mount-target-security-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition mount-target-conflict
     (efs-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       mount-target-conflict-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       mount-target-conflict-message)))
 (common-lisp:export
  (common-lisp:list 'mount-target-conflict 'mount-target-conflict-error-code
                    'mount-target-conflict-message)))
(common-lisp:deftype mount-target-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass mount-target-description common-lisp:nil
                       ((vpc-id :initarg :vpc-id :type
                         (common-lisp:or vpc-id common-lisp:null) :accessor
                         %mount-target-description-vpc-id :initform
                         common-lisp:nil)
                        (availability-zone-name :initarg
                         :availability-zone-name :type
                         (common-lisp:or availability-zone-name
                                         common-lisp:null)
                         :accessor
                         %mount-target-description-availability-zone-name
                         :initform common-lisp:nil)
                        (availability-zone-id :initarg :availability-zone-id
                         :type
                         (common-lisp:or availability-zone-id common-lisp:null)
                         :accessor
                         %mount-target-description-availability-zone-id
                         :initform common-lisp:nil)
                        (network-interface-id :initarg :network-interface-id
                         :type
                         (common-lisp:or network-interface-id common-lisp:null)
                         :accessor
                         %mount-target-description-network-interface-id
                         :initform common-lisp:nil)
                        (ip-address :initarg :ip-address :type
                         (common-lisp:or ip-address common-lisp:null) :accessor
                         %mount-target-description-ip-address :initform
                         common-lisp:nil)
                        (life-cycle-state :initarg :life-cycle-state :type
                         (common-lisp:or life-cycle-state common-lisp:null)
                         :accessor %mount-target-description-life-cycle-state
                         :initform
                         (common-lisp:error ":life-cycle-state is required"))
                        (subnet-id :initarg :subnet-id :type
                         (common-lisp:or subnet-id common-lisp:null) :accessor
                         %mount-target-description-subnet-id :initform
                         (common-lisp:error ":subnet-id is required"))
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor %mount-target-description-file-system-id
                         :initform
                         (common-lisp:error ":file-system-id is required"))
                        (mount-target-id :initarg :mount-target-id :type
                         (common-lisp:or mount-target-id common-lisp:null)
                         :accessor %mount-target-description-mount-target-id
                         :initform
                         (common-lisp:error ":mount-target-id is required"))
                        (owner-id :initarg :owner-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %mount-target-description-owner-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'mount-target-description 'make-mount-target-description))
 (common-lisp:defun make-mount-target-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-id availability-zone-name
                     availability-zone-id network-interface-id ip-address
                     life-cycle-state subnet-id file-system-id mount-target-id
                     owner-id)
   (common-lisp:apply #'common-lisp:make-instance 'mount-target-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mount-target-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mount-target-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mount-target-id))
      (common-lisp:list
       (common-lisp:cons "MountTargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "FileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'life-cycle-state))
      (common-lisp:list
       (common-lisp:cons "LifeCycleState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-id))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-name))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZoneName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mount-target-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype mount-target-descriptions ()
   '(trivial-types:proper-list mount-target-description))
 (common-lisp:defun |make-mount-target-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            mount-target-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype mount-target-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition mount-target-not-found
     (efs-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       mount-target-not-found-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       mount-target-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'mount-target-not-found 'mount-target-not-found-error-code
                    'mount-target-not-found-message)))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:deftype network-interface-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition network-interface-limit-exceeded
     (efs-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       network-interface-limit-exceeded-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       network-interface-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'network-interface-limit-exceeded
                    'network-interface-limit-exceeded-error-code
                    'network-interface-limit-exceeded-message)))
(common-lisp:progn
 (common-lisp:define-condition no-free-addresses-in-subnet
     (efs-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       no-free-addresses-in-subnet-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       no-free-addresses-in-subnet-message)))
 (common-lisp:export
  (common-lisp:list 'no-free-addresses-in-subnet
                    'no-free-addresses-in-subnet-error-code
                    'no-free-addresses-in-subnet-message)))
(common-lisp:deftype owner-gid () 'common-lisp:integer)
(common-lisp:deftype owner-uid () 'common-lisp:integer)
(common-lisp:deftype path () 'common-lisp:string)
(common-lisp:deftype performance-mode () 'common-lisp:string)
(common-lisp:deftype permissions () 'common-lisp:string)
(common-lisp:deftype policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition policy-not-found
     (efs-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       policy-not-found-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       policy-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'policy-not-found 'policy-not-found-error-code
                    'policy-not-found-message)))
(common-lisp:progn
 (common-lisp:defclass posix-user common-lisp:nil
                       ((secondary-gids :initarg :secondary-gids :type
                         (common-lisp:or secondary-gids common-lisp:null)
                         :accessor %posix-user-secondary-gids :initform
                         common-lisp:nil)
                        (gid :initarg :gid :type
                         (common-lisp:or gid common-lisp:null) :accessor
                         %posix-user-gid :initform
                         (common-lisp:error ":gid is required"))
                        (uid :initarg :uid :type
                         (common-lisp:or uid common-lisp:null) :accessor
                         %posix-user-uid :initform
                         (common-lisp:error ":uid is required"))))
 (common-lisp:export (common-lisp:list 'posix-user 'make-posix-user))
 (common-lisp:defun make-posix-user
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key secondary-gids gid uid)
   (common-lisp:apply #'common-lisp:make-instance 'posix-user
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input posix-user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input posix-user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uid))
      (common-lisp:list
       (common-lisp:cons "Uid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gid))
      (common-lisp:list
       (common-lisp:cons "Gid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secondary-gids))
      (common-lisp:list
       (common-lisp:cons "SecondaryGids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input posix-user))
   common-lisp:nil))
(common-lisp:deftype provisioned-throughput-in-mibps ()
  'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass put-account-preferences-request common-lisp:nil
                       ((resource-id-type :initarg :resource-id-type :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor
                         %put-account-preferences-request-resource-id-type
                         :initform
                         (common-lisp:error ":resource-id-type is required"))))
 (common-lisp:export
  (common-lisp:list 'put-account-preferences-request
                    'make-put-account-preferences-request))
 (common-lisp:defun make-put-account-preferences-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-id-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-account-preferences-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-account-preferences-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-account-preferences-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id-type))
      (common-lisp:list
       (common-lisp:cons "ResourceIdType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-account-preferences-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-account-preferences-response common-lisp:nil
                       ((resource-id-preference :initarg
                         :resource-id-preference :type
                         (common-lisp:or resource-id-preference
                                         common-lisp:null)
                         :accessor
                         %put-account-preferences-response-resource-id-preference
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-account-preferences-response
                    'make-put-account-preferences-response))
 (common-lisp:defun make-put-account-preferences-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-id-preference)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-account-preferences-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-account-preferences-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-account-preferences-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-id-preference))
      (common-lisp:list
       (common-lisp:cons "ResourceIdPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-account-preferences-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-backup-policy-request common-lisp:nil
                       ((backup-policy :initarg :backup-policy :type
                         (common-lisp:or backup-policy common-lisp:null)
                         :accessor %put-backup-policy-request-backup-policy
                         :initform
                         (common-lisp:error ":backup-policy is required"))
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor %put-backup-policy-request-file-system-id
                         :initform
                         (common-lisp:error ":file-system-id is required"))))
 (common-lisp:export
  (common-lisp:list 'put-backup-policy-request
                    'make-put-backup-policy-request))
 (common-lisp:defun make-put-backup-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-policy file-system-id)
   (common-lisp:apply #'common-lisp:make-instance 'put-backup-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-backup-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-backup-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-policy))
      (common-lisp:list
       (common-lisp:cons "BackupPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-backup-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-file-system-policy-request common-lisp:nil
                       ((bypass-policy-lockout-safety-check :initarg
                         :bypass-policy-lockout-safety-check :type
                         (common-lisp:or bypass-policy-lockout-safety-check
                                         common-lisp:null)
                         :accessor
                         %put-file-system-policy-request-bypass-policy-lockout-safety-check
                         :initform common-lisp:nil)
                        (policy :initarg :policy :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %put-file-system-policy-request-policy :initform
                         (common-lisp:error ":policy is required"))
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor
                         %put-file-system-policy-request-file-system-id
                         :initform
                         (common-lisp:error ":file-system-id is required"))))
 (common-lisp:export
  (common-lisp:list 'put-file-system-policy-request
                    'make-put-file-system-policy-request))
 (common-lisp:defun make-put-file-system-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bypass-policy-lockout-safety-check policy
                     file-system-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-file-system-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-file-system-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-file-system-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bypass-policy-lockout-safety-check))
      (common-lisp:list
       (common-lisp:cons "BypassPolicyLockoutSafetyCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-file-system-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-lifecycle-configuration-request common-lisp:nil
                       ((lifecycle-policies :initarg :lifecycle-policies :type
                         (common-lisp:or lifecycle-policies common-lisp:null)
                         :accessor
                         %put-lifecycle-configuration-request-lifecycle-policies
                         :initform
                         (common-lisp:error ":lifecycle-policies is required"))
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor
                         %put-lifecycle-configuration-request-file-system-id
                         :initform
                         (common-lisp:error ":file-system-id is required"))))
 (common-lisp:export
  (common-lisp:list 'put-lifecycle-configuration-request
                    'make-put-lifecycle-configuration-request))
 (common-lisp:defun make-put-lifecycle-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lifecycle-policies file-system-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-lifecycle-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-policies))
      (common-lisp:list
       (common-lisp:cons "LifecyclePolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-configuration-request))
   common-lisp:nil))
(common-lisp:deftype region-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass replication-configuration-description common-lisp:nil
                       ((destinations :initarg :destinations :type
                         (common-lisp:or destinations common-lisp:null)
                         :accessor
                         %replication-configuration-description-destinations
                         :initform
                         (common-lisp:error ":destinations is required"))
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %replication-configuration-description-creation-time
                         :initform
                         (common-lisp:error ":creation-time is required"))
                        (original-source-file-system-arn :initarg
                         :original-source-file-system-arn :type
                         (common-lisp:or file-system-arn common-lisp:null)
                         :accessor
                         %replication-configuration-description-original-source-file-system-arn
                         :initform
                         (common-lisp:error
                          ":original-source-file-system-arn is required"))
                        (source-file-system-arn :initarg
                         :source-file-system-arn :type
                         (common-lisp:or file-system-arn common-lisp:null)
                         :accessor
                         %replication-configuration-description-source-file-system-arn
                         :initform
                         (common-lisp:error
                          ":source-file-system-arn is required"))
                        (source-file-system-region :initarg
                         :source-file-system-region :type
                         (common-lisp:or region-name common-lisp:null)
                         :accessor
                         %replication-configuration-description-source-file-system-region
                         :initform
                         (common-lisp:error
                          ":source-file-system-region is required"))
                        (source-file-system-id :initarg :source-file-system-id
                         :type (common-lisp:or file-system-id common-lisp:null)
                         :accessor
                         %replication-configuration-description-source-file-system-id
                         :initform
                         (common-lisp:error
                          ":source-file-system-id is required"))))
 (common-lisp:export
  (common-lisp:list 'replication-configuration-description
                    'make-replication-configuration-description))
 (common-lisp:defun make-replication-configuration-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destinations creation-time
                     original-source-file-system-arn source-file-system-arn
                     source-file-system-region source-file-system-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'replication-configuration-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-file-system-id))
      (common-lisp:list
       (common-lisp:cons "SourceFileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-file-system-region))
      (common-lisp:list
       (common-lisp:cons "SourceFileSystemRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-file-system-arn))
      (common-lisp:list
       (common-lisp:cons "SourceFileSystemArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'original-source-file-system-arn))
      (common-lisp:list
       (common-lisp:cons "OriginalSourceFileSystemArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype replication-configuration-descriptions ()
   '(trivial-types:proper-list replication-configuration-description))
 (common-lisp:defun |make-replication-configuration-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            replication-configuration-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition replication-not-found
     (efs-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       replication-not-found-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       replication-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'replication-not-found 'replication-not-found-error-code
                    'replication-not-found-message)))
(common-lisp:deftype replication-status () 'common-lisp:string)
(common-lisp:deftype resource () 'common-lisp:string)
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-id-preference common-lisp:nil
                       ((resources :initarg :resources :type
                         (common-lisp:or resources common-lisp:null) :accessor
                         %resource-id-preference-resources :initform
                         common-lisp:nil)
                        (resource-id-type :initarg :resource-id-type :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %resource-id-preference-resource-id-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resource-id-preference 'make-resource-id-preference))
 (common-lisp:defun make-resource-id-preference
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resources resource-id-type)
   (common-lisp:apply #'common-lisp:make-instance 'resource-id-preference
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-id-preference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-id-preference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id-type))
      (common-lisp:list
       (common-lisp:cons "ResourceIdType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-id-preference))
   common-lisp:nil))
(common-lisp:deftype resource-id-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resources () '(trivial-types:proper-list resource))
 (common-lisp:defun |make-resources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass root-directory common-lisp:nil
                       ((creation-info :initarg :creation-info :type
                         (common-lisp:or creation-info common-lisp:null)
                         :accessor %root-directory-creation-info :initform
                         common-lisp:nil)
                        (path :initarg :path :type
                         (common-lisp:or path common-lisp:null) :accessor
                         %root-directory-path :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'root-directory 'make-root-directory))
 (common-lisp:defun make-root-directory
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creation-info path)
   (common-lisp:apply #'common-lisp:make-instance 'root-directory
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input root-directory))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input root-directory))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-info))
      (common-lisp:list
       (common-lisp:cons "CreationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input root-directory))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype secondary-gids () '(trivial-types:proper-list gid))
 (common-lisp:defun |make-secondary-gids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list gid))
   aws-sdk/generator/shape::members))
(common-lisp:deftype security-group () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition security-group-limit-exceeded
     (efs-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       security-group-limit-exceeded-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       security-group-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'security-group-limit-exceeded
                    'security-group-limit-exceeded-error-code
                    'security-group-limit-exceeded-message)))
(common-lisp:progn
 (common-lisp:define-condition security-group-not-found
     (efs-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       security-group-not-found-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       security-group-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'security-group-not-found
                    'security-group-not-found-error-code
                    'security-group-not-found-message)))
(common-lisp:progn
 (common-lisp:deftype security-groups ()
   '(trivial-types:proper-list security-group))
 (common-lisp:defun |make-security-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition subnet-not-found
     (efs-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       subnet-not-found-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       subnet-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'subnet-not-found 'subnet-not-found-error-code
                    'subnet-not-found-message)))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %tag-resource-request-resource-id :initform
                         (common-lisp:error ":resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-id)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (efs-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       throttling-exception-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-error-code
                    'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition throughput-limit-exceeded
     (efs-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       throughput-limit-exceeded-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       throughput-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'throughput-limit-exceeded
                    'throughput-limit-exceeded-error-code
                    'throughput-limit-exceeded-message)))
(common-lisp:deftype throughput-mode () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-requests
     (efs-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       too-many-requests-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests 'too-many-requests-error-code
                    'too-many-requests-message)))
(common-lisp:deftype transition-to-iarules () 'common-lisp:string)
(common-lisp:deftype transition-to-primary-storage-class-rules ()
  'common-lisp:string)
(common-lisp:deftype uid () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition unsupported-availability-zone
     (efs-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       unsupported-availability-zone-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       unsupported-availability-zone-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-availability-zone
                    'unsupported-availability-zone-error-code
                    'unsupported-availability-zone-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %untag-resource-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-id)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-file-system-request common-lisp:nil
                       ((provisioned-throughput-in-mibps :initarg
                         :provisioned-throughput-in-mibps :type
                         (common-lisp:or provisioned-throughput-in-mibps
                                         common-lisp:null)
                         :accessor
                         %update-file-system-request-provisioned-throughput-in-mibps
                         :initform common-lisp:nil)
                        (throughput-mode :initarg :throughput-mode :type
                         (common-lisp:or throughput-mode common-lisp:null)
                         :accessor %update-file-system-request-throughput-mode
                         :initform common-lisp:nil)
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor %update-file-system-request-file-system-id
                         :initform
                         (common-lisp:error ":file-system-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-file-system-request
                    'make-update-file-system-request))
 (common-lisp:defun make-update-file-system-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key provisioned-throughput-in-mibps
                     throughput-mode file-system-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-file-system-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-file-system-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-file-system-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput-mode))
      (common-lisp:list
       (common-lisp:cons "ThroughputMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-throughput-in-mibps))
      (common-lisp:list
       (common-lisp:cons "ProvisionedThroughputInMibps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-file-system-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (efs-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       validation-exception-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-error-code
                    'validation-exception-message)))
(common-lisp:deftype vpc-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-access-point
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token tags file-system-id
                     posix-user root-directory)
   (common-lisp:declare
    (common-lisp:ignorable client-token tags file-system-id posix-user
     root-directory))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-access-point-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'efs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/2015-02-01/access-points"
                                                        "CreateAccessPoint"
                                                        "2015-02-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-access-point))
(common-lisp:progn
 (common-lisp:defun create-file-system
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key creation-token performance-mode encrypted
                     kms-key-id throughput-mode provisioned-throughput-in-mibps
                     availability-zone-name backup tags)
   (common-lisp:declare
    (common-lisp:ignorable creation-token performance-mode encrypted kms-key-id
     throughput-mode provisioned-throughput-in-mibps availability-zone-name
     backup tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-file-system-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'efs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/2015-02-01/file-systems"
                                                        "CreateFileSystem"
                                                        "2015-02-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-file-system))
(common-lisp:progn
 (common-lisp:defun create-mount-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key file-system-id subnet-id ip-address
                     security-groups)
   (common-lisp:declare
    (common-lisp:ignorable file-system-id subnet-id ip-address
     security-groups))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-mount-target-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'efs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/2015-02-01/mount-targets"
                                                        "CreateMountTarget"
                                                        "2015-02-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-mount-target))
(common-lisp:progn
 (common-lisp:defun create-replication-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-file-system-id destinations)
   (common-lisp:declare
    (common-lisp:ignorable source-file-system-id destinations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-replication-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'efs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-02-01/file-systems/~A/replication-configuration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'source-file-system-id))))
                                                        "CreateReplicationConfiguration"
                                                        "2015-02-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-replication-configuration))
(common-lisp:progn
 (common-lisp:defun create-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key file-system-id tags)
   (common-lisp:declare (common-lisp:ignorable file-system-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'efs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-02-01/create-tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'file-system-id))))
                                                        "CreateTags"
                                                        "2015-02-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-tags))
(common-lisp:progn
 (common-lisp:defun delete-access-point
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-point-id)
   (common-lisp:declare (common-lisp:ignorable access-point-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-access-point-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'efs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-02-01/access-points/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'access-point-id))))
                                                        "DeleteAccessPoint"
                                                        "2015-02-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-access-point))
(common-lisp:progn
 (common-lisp:defun delete-file-system
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key file-system-id)
   (common-lisp:declare (common-lisp:ignorable file-system-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-file-system-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'efs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-02-01/file-systems/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'file-system-id))))
                                                        "DeleteFileSystem"
                                                        "2015-02-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-file-system))
(common-lisp:progn
 (common-lisp:defun delete-file-system-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key file-system-id)
   (common-lisp:declare (common-lisp:ignorable file-system-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-file-system-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'efs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-02-01/file-systems/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'file-system-id))))
                                                        "DeleteFileSystemPolicy"
                                                        "2015-02-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-file-system-policy))
(common-lisp:progn
 (common-lisp:defun delete-mount-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mount-target-id)
   (common-lisp:declare (common-lisp:ignorable mount-target-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-mount-target-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'efs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-02-01/mount-targets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mount-target-id))))
                                                        "DeleteMountTarget"
                                                        "2015-02-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-mount-target))
(common-lisp:progn
 (common-lisp:defun delete-replication-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-file-system-id)
   (common-lisp:declare (common-lisp:ignorable source-file-system-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-replication-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'efs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-02-01/file-systems/~A/replication-configuration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'source-file-system-id))))
                                                        "DeleteReplicationConfiguration"
                                                        "2015-02-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-replication-configuration))
(common-lisp:progn
 (common-lisp:defun delete-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key file-system-id tag-keys)
   (common-lisp:declare (common-lisp:ignorable file-system-id tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'efs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-02-01/delete-tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'file-system-id))))
                                                        "DeleteTags"
                                                        "2015-02-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-tags))
(common-lisp:progn
 (common-lisp:defun describe-access-points
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token access-point-id
                     file-system-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token access-point-id
     file-system-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-access-points-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'efs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/2015-02-01/access-points"
                                                        "DescribeAccessPoints"
                                                        "2015-02-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-access-points))
(common-lisp:progn
 (common-lisp:defun describe-account-preferences
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-account-preferences-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'efs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/2015-02-01/account-preferences"
                                                        "DescribeAccountPreferences"
                                                        "2015-02-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-account-preferences))
(common-lisp:progn
 (common-lisp:defun describe-backup-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key file-system-id)
   (common-lisp:declare (common-lisp:ignorable file-system-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-backup-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'efs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-02-01/file-systems/~A/backup-policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'file-system-id))))
                                                        "DescribeBackupPolicy"
                                                        "2015-02-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-backup-policy))
(common-lisp:progn
 (common-lisp:defun describe-file-system-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key file-system-id)
   (common-lisp:declare (common-lisp:ignorable file-system-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-file-system-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'efs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-02-01/file-systems/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'file-system-id))))
                                                        "DescribeFileSystemPolicy"
                                                        "2015-02-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-file-system-policy))
(common-lisp:progn
 (common-lisp:defun describe-file-systems
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-items marker creation-token
                     file-system-id)
   (common-lisp:declare
    (common-lisp:ignorable max-items marker creation-token file-system-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-file-systems-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'efs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/2015-02-01/file-systems"
                                                        "DescribeFileSystems"
                                                        "2015-02-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-file-systems))
(common-lisp:progn
 (common-lisp:defun describe-lifecycle-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key file-system-id)
   (common-lisp:declare (common-lisp:ignorable file-system-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-lifecycle-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'efs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-02-01/file-systems/~A/lifecycle-configuration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'file-system-id))))
                                                        "DescribeLifecycleConfiguration"
                                                        "2015-02-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-lifecycle-configuration))
(common-lisp:progn
 (common-lisp:defun describe-mount-target-security-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mount-target-id)
   (common-lisp:declare (common-lisp:ignorable mount-target-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-mount-target-security-groups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'efs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-02-01/mount-targets/~A/security-groups"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mount-target-id))))
                                                        "DescribeMountTargetSecurityGroups"
                                                        "2015-02-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-mount-target-security-groups))
(common-lisp:progn
 (common-lisp:defun describe-mount-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-items marker file-system-id
                     mount-target-id access-point-id)
   (common-lisp:declare
    (common-lisp:ignorable max-items marker file-system-id mount-target-id
     access-point-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-mount-targets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'efs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/2015-02-01/mount-targets"
                                                        "DescribeMountTargets"
                                                        "2015-02-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-mount-targets))
(common-lisp:progn
 (common-lisp:defun describe-replication-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key file-system-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable file-system-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-replication-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'efs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/2015-02-01/file-systems/replication-configurations"
                                                        "DescribeReplicationConfigurations"
                                                        "2015-02-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-replication-configurations))
(common-lisp:progn
 (common-lisp:defun describe-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-items marker file-system-id)
   (common-lisp:declare
    (common-lisp:ignorable max-items marker file-system-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'efs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-02-01/tags/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'file-system-id))))
                                                        "DescribeTags"
                                                        "2015-02-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-tags))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable resource-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'efs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-02-01/resource-tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-id))))
                                                        "ListTagsForResource"
                                                        "2015-02-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun modify-mount-target-security-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mount-target-id security-groups)
   (common-lisp:declare
    (common-lisp:ignorable mount-target-id security-groups))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-mount-target-security-groups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'efs-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-02-01/mount-targets/~A/security-groups"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mount-target-id))))
                                                        "ModifyMountTargetSecurityGroups"
                                                        "2015-02-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'modify-mount-target-security-groups))
(common-lisp:progn
 (common-lisp:defun put-account-preferences
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id-type)
   (common-lisp:declare (common-lisp:ignorable resource-id-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-account-preferences-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'efs-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/2015-02-01/account-preferences"
                                                        "PutAccountPreferences"
                                                        "2015-02-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-account-preferences))
(common-lisp:progn
 (common-lisp:defun put-backup-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key file-system-id backup-policy)
   (common-lisp:declare (common-lisp:ignorable file-system-id backup-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-backup-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'efs-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-02-01/file-systems/~A/backup-policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'file-system-id))))
                                                        "PutBackupPolicy"
                                                        "2015-02-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-backup-policy))
(common-lisp:progn
 (common-lisp:defun put-file-system-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key file-system-id policy
                     bypass-policy-lockout-safety-check)
   (common-lisp:declare
    (common-lisp:ignorable file-system-id policy
     bypass-policy-lockout-safety-check))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-file-system-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'efs-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-02-01/file-systems/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'file-system-id))))
                                                        "PutFileSystemPolicy"
                                                        "2015-02-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-file-system-policy))
(common-lisp:progn
 (common-lisp:defun put-lifecycle-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key file-system-id lifecycle-policies)
   (common-lisp:declare
    (common-lisp:ignorable file-system-id lifecycle-policies))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-lifecycle-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'efs-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-02-01/file-systems/~A/lifecycle-configuration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'file-system-id))))
                                                        "PutLifecycleConfiguration"
                                                        "2015-02-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-lifecycle-configuration))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id tags)
   (common-lisp:declare (common-lisp:ignorable resource-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'efs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-02-01/resource-tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-id))))
                                                        "TagResource"
                                                        "2015-02-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-id tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'efs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-02-01/resource-tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-id))))
                                                        "UntagResource"
                                                        "2015-02-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-file-system
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key file-system-id throughput-mode
                     provisioned-throughput-in-mibps)
   (common-lisp:declare
    (common-lisp:ignorable file-system-id throughput-mode
     provisioned-throughput-in-mibps))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-file-system-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'efs-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-02-01/file-systems/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'file-system-id))))
                                                        "UpdateFileSystem"
                                                        "2015-02-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-file-system))
