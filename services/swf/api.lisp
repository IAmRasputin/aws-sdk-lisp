;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/swf/api
  (:use)
  (:nicknames #:aws/swf)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/swf/api)
(common-lisp:progn
 (common-lisp:defclass swf-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "swf"))
 (common-lisp:export 'swf-request))
(common-lisp:progn
 (common-lisp:define-condition swf-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'swf-error))
(common-lisp:defvar *error-map*
  '(("DefaultUndefinedFault" . default-undefined-fault)
    ("DomainAlreadyExistsFault" . domain-already-exists-fault)
    ("DomainDeprecatedFault" . domain-deprecated-fault)
    ("LimitExceededFault" . limit-exceeded-fault)
    ("OperationNotPermittedFault" . operation-not-permitted-fault)
    ("TooManyTagsFault" . too-many-tags-fault)
    ("TypeAlreadyExistsFault" . type-already-exists-fault)
    ("TypeDeprecatedFault" . type-deprecated-fault)
    ("UnknownResourceFault" . unknown-resource-fault)
    ("WorkflowExecutionAlreadyStartedFault"
     . workflow-execution-already-started-fault)))
(common-lisp:deftype activity-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (activity-task (:copier common-lisp:nil)
      (:conc-name "struct-shape-activity-task-"))
   (task-token (common-lisp:error ":tasktoken is required") :type
    (common-lisp:or task-token common-lisp:null))
   (activity-id (common-lisp:error ":activityid is required") :type
    (common-lisp:or activity-id common-lisp:null))
   (started-event-id (common-lisp:error ":startedeventid is required") :type
    (common-lisp:or event-id common-lisp:null))
   (workflow-execution (common-lisp:error ":workflowexecution is required")
    :type (common-lisp:or workflow-execution common-lisp:null))
   (activity-type (common-lisp:error ":activitytype is required") :type
    (common-lisp:or activity-type common-lisp:null))
   (input common-lisp:nil :type (common-lisp:or data common-lisp:null)))
 (common-lisp:export (common-lisp:list 'activity-task 'make-activity-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input activity-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input activity-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-token))
      (common-lisp:list
       (common-lisp:cons "taskToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-id))
      (common-lisp:list
       (common-lisp:cons "activityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-event-id))
      (common-lisp:list
       (common-lisp:cons "startedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-execution))
      (common-lisp:list
       (common-lisp:cons "workflowExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-type))
      (common-lisp:list
       (common-lisp:cons "activityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input activity-task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (activity-task-cancel-requested-event-attributes (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-activity-task-cancel-requested-event-attributes-"))
   (decision-task-completed-event-id
    (common-lisp:error ":decisiontaskcompletedeventid is required") :type
    (common-lisp:or event-id common-lisp:null))
   (activity-id (common-lisp:error ":activityid is required") :type
    (common-lisp:or activity-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'activity-task-cancel-requested-event-attributes
                    'make-activity-task-cancel-requested-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activity-task-cancel-requested-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activity-task-cancel-requested-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decision-task-completed-event-id))
      (common-lisp:list
       (common-lisp:cons "decisionTaskCompletedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-id))
      (common-lisp:list
       (common-lisp:cons "activityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activity-task-cancel-requested-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (activity-task-canceled-event-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-activity-task-canceled-event-attributes-"))
   (details common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (scheduled-event-id (common-lisp:error ":scheduledeventid is required")
    :type (common-lisp:or event-id common-lisp:null))
   (started-event-id (common-lisp:error ":startedeventid is required") :type
    (common-lisp:or event-id common-lisp:null))
   (latest-cancel-requested-event-id common-lisp:nil :type
    (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'activity-task-canceled-event-attributes
                    'make-activity-task-canceled-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activity-task-canceled-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activity-task-canceled-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-event-id))
      (common-lisp:list
       (common-lisp:cons "scheduledEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-event-id))
      (common-lisp:list
       (common-lisp:cons "startedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-cancel-requested-event-id))
      (common-lisp:list
       (common-lisp:cons "latestCancelRequestedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activity-task-canceled-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (activity-task-completed-event-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-activity-task-completed-event-attributes-"))
   (result common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (scheduled-event-id (common-lisp:error ":scheduledeventid is required")
    :type (common-lisp:or event-id common-lisp:null))
   (started-event-id (common-lisp:error ":startedeventid is required") :type
    (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'activity-task-completed-event-attributes
                    'make-activity-task-completed-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activity-task-completed-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activity-task-completed-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-event-id))
      (common-lisp:list
       (common-lisp:cons "scheduledEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-event-id))
      (common-lisp:list
       (common-lisp:cons "startedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activity-task-completed-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (activity-task-failed-event-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-activity-task-failed-event-attributes-"))
   (reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (details common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (scheduled-event-id (common-lisp:error ":scheduledeventid is required")
    :type (common-lisp:or event-id common-lisp:null))
   (started-event-id (common-lisp:error ":startedeventid is required") :type
    (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'activity-task-failed-event-attributes
                    'make-activity-task-failed-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activity-task-failed-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activity-task-failed-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-event-id))
      (common-lisp:list
       (common-lisp:cons "scheduledEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-event-id))
      (common-lisp:list
       (common-lisp:cons "startedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activity-task-failed-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (activity-task-scheduled-event-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-activity-task-scheduled-event-attributes-"))
   (activity-type (common-lisp:error ":activitytype is required") :type
    (common-lisp:or activity-type common-lisp:null))
   (activity-id (common-lisp:error ":activityid is required") :type
    (common-lisp:or activity-id common-lisp:null))
   (input common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (control common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (schedule-to-start-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null))
   (schedule-to-close-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null))
   (start-to-close-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null))
   (task-list (common-lisp:error ":tasklist is required") :type
    (common-lisp:or task-list common-lisp:null))
   (task-priority common-lisp:nil :type
    (common-lisp:or task-priority common-lisp:null))
   (decision-task-completed-event-id
    (common-lisp:error ":decisiontaskcompletedeventid is required") :type
    (common-lisp:or event-id common-lisp:null))
   (heartbeat-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'activity-task-scheduled-event-attributes
                    'make-activity-task-scheduled-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activity-task-scheduled-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activity-task-scheduled-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-type))
      (common-lisp:list
       (common-lisp:cons "activityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-id))
      (common-lisp:list
       (common-lisp:cons "activityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control))
      (common-lisp:list
       (common-lisp:cons "control"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schedule-to-start-timeout))
      (common-lisp:list
       (common-lisp:cons "scheduleToStartTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schedule-to-close-timeout))
      (common-lisp:list
       (common-lisp:cons "scheduleToCloseTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-to-close-timeout))
      (common-lisp:list
       (common-lisp:cons "startToCloseTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-list))
      (common-lisp:list
       (common-lisp:cons "taskList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-priority))
      (common-lisp:list
       (common-lisp:cons "taskPriority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decision-task-completed-event-id))
      (common-lisp:list
       (common-lisp:cons "decisionTaskCompletedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'heartbeat-timeout))
      (common-lisp:list
       (common-lisp:cons "heartbeatTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activity-task-scheduled-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (activity-task-started-event-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-activity-task-started-event-attributes-"))
   (identity common-lisp:nil :type (common-lisp:or identity common-lisp:null))
   (scheduled-event-id (common-lisp:error ":scheduledeventid is required")
    :type (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'activity-task-started-event-attributes
                    'make-activity-task-started-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activity-task-started-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activity-task-started-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity))
      (common-lisp:list
       (common-lisp:cons "identity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-event-id))
      (common-lisp:list
       (common-lisp:cons "scheduledEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activity-task-started-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (activity-task-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-activity-task-status-"))
   (cancel-requested (common-lisp:error ":cancelrequested is required") :type
    (common-lisp:or canceled common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'activity-task-status 'make-activity-task-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input activity-task-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input activity-task-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cancel-requested))
      (common-lisp:list
       (common-lisp:cons "cancelRequested"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input activity-task-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (activity-task-timed-out-event-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-activity-task-timed-out-event-attributes-"))
   (timeout-type (common-lisp:error ":timeouttype is required") :type
    (common-lisp:or activity-task-timeout-type common-lisp:null))
   (scheduled-event-id (common-lisp:error ":scheduledeventid is required")
    :type (common-lisp:or event-id common-lisp:null))
   (started-event-id (common-lisp:error ":startedeventid is required") :type
    (common-lisp:or event-id common-lisp:null))
   (details common-lisp:nil :type
    (common-lisp:or limited-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'activity-task-timed-out-event-attributes
                    'make-activity-task-timed-out-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activity-task-timed-out-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activity-task-timed-out-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-type))
      (common-lisp:list
       (common-lisp:cons "timeoutType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-event-id))
      (common-lisp:list
       (common-lisp:cons "scheduledEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-event-id))
      (common-lisp:list
       (common-lisp:cons "startedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activity-task-timed-out-event-attributes))
   common-lisp:nil))
(common-lisp:deftype activity-task-timeout-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (activity-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-activity-type-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or version common-lisp:null)))
 (common-lisp:export (common-lisp:list 'activity-type 'make-activity-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input activity-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input activity-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input activity-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (activity-type-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-activity-type-configuration-"))
   (default-task-start-to-close-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null))
   (default-task-heartbeat-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null))
   (default-task-list common-lisp:nil :type
    (common-lisp:or task-list common-lisp:null))
   (default-task-priority common-lisp:nil :type
    (common-lisp:or task-priority common-lisp:null))
   (default-task-schedule-to-start-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null))
   (default-task-schedule-to-close-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'activity-type-configuration
                    'make-activity-type-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activity-type-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activity-type-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-task-start-to-close-timeout))
      (common-lisp:list
       (common-lisp:cons "defaultTaskStartToCloseTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-task-heartbeat-timeout))
      (common-lisp:list
       (common-lisp:cons "defaultTaskHeartbeatTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-task-list))
      (common-lisp:list
       (common-lisp:cons "defaultTaskList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-task-priority))
      (common-lisp:list
       (common-lisp:cons "defaultTaskPriority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-task-schedule-to-start-timeout))
      (common-lisp:list
       (common-lisp:cons "defaultTaskScheduleToStartTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-task-schedule-to-close-timeout))
      (common-lisp:list
       (common-lisp:cons "defaultTaskScheduleToCloseTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activity-type-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (activity-type-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-activity-type-detail-"))
   (type-info (common-lisp:error ":typeinfo is required") :type
    (common-lisp:or activity-type-info common-lisp:null))
   (configuration (common-lisp:error ":configuration is required") :type
    (common-lisp:or activity-type-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'activity-type-detail 'make-activity-type-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input activity-type-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input activity-type-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-info))
      (common-lisp:list
       (common-lisp:cons "typeInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input activity-type-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (activity-type-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-activity-type-info-"))
   (activity-type (common-lisp:error ":activitytype is required") :type
    (common-lisp:or activity-type common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or registration-status common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (creation-date (common-lisp:error ":creationdate is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (deprecation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'activity-type-info 'make-activity-type-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input activity-type-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input activity-type-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-type))
      (common-lisp:list
       (common-lisp:cons "activityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deprecation-date))
      (common-lisp:list
       (common-lisp:cons "deprecationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input activity-type-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype activity-type-info-list ()
   '(trivial-types:proper-list activity-type-info))
 (common-lisp:defun |make-activity-type-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list activity-type-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (activity-type-infos (:copier common-lisp:nil)
      (:conc-name "struct-shape-activity-type-infos-"))
   (type-infos (common-lisp:error ":typeinfos is required") :type
    (common-lisp:or activity-type-info-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'activity-type-infos 'make-activity-type-infos))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input activity-type-infos))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input activity-type-infos))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-infos))
      (common-lisp:list
       (common-lisp:cons "typeInfos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input activity-type-infos))
   common-lisp:nil))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-timer-decision-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-timer-decision-attributes-"))
   (timer-id (common-lisp:error ":timerid is required") :type
    (common-lisp:or timer-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-timer-decision-attributes
                    'make-cancel-timer-decision-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-timer-decision-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-timer-decision-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timer-id))
      (common-lisp:list
       (common-lisp:cons "timerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-timer-decision-attributes))
   common-lisp:nil))
(common-lisp:deftype cancel-timer-failed-cause () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-timer-failed-event-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-timer-failed-event-attributes-"))
   (timer-id (common-lisp:error ":timerid is required") :type
    (common-lisp:or timer-id common-lisp:null))
   (cause (common-lisp:error ":cause is required") :type
    (common-lisp:or cancel-timer-failed-cause common-lisp:null))
   (decision-task-completed-event-id
    (common-lisp:error ":decisiontaskcompletedeventid is required") :type
    (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-timer-failed-event-attributes
                    'make-cancel-timer-failed-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-timer-failed-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-timer-failed-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timer-id))
      (common-lisp:list
       (common-lisp:cons "timerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decision-task-completed-event-id))
      (common-lisp:list
       (common-lisp:cons "decisionTaskCompletedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-timer-failed-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-workflow-execution-decision-attributes (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-cancel-workflow-execution-decision-attributes-"))
   (details common-lisp:nil :type (common-lisp:or data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-workflow-execution-decision-attributes
                    'make-cancel-workflow-execution-decision-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-workflow-execution-decision-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-workflow-execution-decision-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-workflow-execution-decision-attributes))
   common-lisp:nil))
(common-lisp:deftype cancel-workflow-execution-failed-cause ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-workflow-execution-failed-event-attributes
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-cancel-workflow-execution-failed-event-attributes-"))
   (cause (common-lisp:error ":cause is required") :type
    (common-lisp:or cancel-workflow-execution-failed-cause common-lisp:null))
   (decision-task-completed-event-id
    (common-lisp:error ":decisiontaskcompletedeventid is required") :type
    (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-workflow-execution-failed-event-attributes
                    'make-cancel-workflow-execution-failed-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-workflow-execution-failed-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-workflow-execution-failed-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decision-task-completed-event-id))
      (common-lisp:list
       (common-lisp:cons "decisionTaskCompletedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-workflow-execution-failed-event-attributes))
   common-lisp:nil))
(common-lisp:deftype canceled () 'common-lisp:boolean)
(common-lisp:deftype cause-message () 'common-lisp:string)
(common-lisp:deftype child-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (child-workflow-execution-canceled-event-attributes
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-child-workflow-execution-canceled-event-attributes-"))
   (workflow-execution (common-lisp:error ":workflowexecution is required")
    :type (common-lisp:or workflow-execution common-lisp:null))
   (workflow-type (common-lisp:error ":workflowtype is required") :type
    (common-lisp:or workflow-type common-lisp:null))
   (details common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (initiated-event-id (common-lisp:error ":initiatedeventid is required")
    :type (common-lisp:or event-id common-lisp:null))
   (started-event-id (common-lisp:error ":startedeventid is required") :type
    (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'child-workflow-execution-canceled-event-attributes
                    'make-child-workflow-execution-canceled-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          child-workflow-execution-canceled-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          child-workflow-execution-canceled-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-execution))
      (common-lisp:list
       (common-lisp:cons "workflowExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-type))
      (common-lisp:list
       (common-lisp:cons "workflowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiated-event-id))
      (common-lisp:list
       (common-lisp:cons "initiatedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-event-id))
      (common-lisp:list
       (common-lisp:cons "startedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          child-workflow-execution-canceled-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (child-workflow-execution-completed-event-attributes
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-child-workflow-execution-completed-event-attributes-"))
   (workflow-execution (common-lisp:error ":workflowexecution is required")
    :type (common-lisp:or workflow-execution common-lisp:null))
   (workflow-type (common-lisp:error ":workflowtype is required") :type
    (common-lisp:or workflow-type common-lisp:null))
   (result common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (initiated-event-id (common-lisp:error ":initiatedeventid is required")
    :type (common-lisp:or event-id common-lisp:null))
   (started-event-id (common-lisp:error ":startedeventid is required") :type
    (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'child-workflow-execution-completed-event-attributes
                    'make-child-workflow-execution-completed-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          child-workflow-execution-completed-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          child-workflow-execution-completed-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-execution))
      (common-lisp:list
       (common-lisp:cons "workflowExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-type))
      (common-lisp:list
       (common-lisp:cons "workflowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiated-event-id))
      (common-lisp:list
       (common-lisp:cons "initiatedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-event-id))
      (common-lisp:list
       (common-lisp:cons "startedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          child-workflow-execution-completed-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (child-workflow-execution-failed-event-attributes
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-child-workflow-execution-failed-event-attributes-"))
   (workflow-execution (common-lisp:error ":workflowexecution is required")
    :type (common-lisp:or workflow-execution common-lisp:null))
   (workflow-type (common-lisp:error ":workflowtype is required") :type
    (common-lisp:or workflow-type common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (details common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (initiated-event-id (common-lisp:error ":initiatedeventid is required")
    :type (common-lisp:or event-id common-lisp:null))
   (started-event-id (common-lisp:error ":startedeventid is required") :type
    (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'child-workflow-execution-failed-event-attributes
                    'make-child-workflow-execution-failed-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          child-workflow-execution-failed-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          child-workflow-execution-failed-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-execution))
      (common-lisp:list
       (common-lisp:cons "workflowExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-type))
      (common-lisp:list
       (common-lisp:cons "workflowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiated-event-id))
      (common-lisp:list
       (common-lisp:cons "initiatedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-event-id))
      (common-lisp:list
       (common-lisp:cons "startedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          child-workflow-execution-failed-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (child-workflow-execution-started-event-attributes
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-child-workflow-execution-started-event-attributes-"))
   (workflow-execution (common-lisp:error ":workflowexecution is required")
    :type (common-lisp:or workflow-execution common-lisp:null))
   (workflow-type (common-lisp:error ":workflowtype is required") :type
    (common-lisp:or workflow-type common-lisp:null))
   (initiated-event-id (common-lisp:error ":initiatedeventid is required")
    :type (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'child-workflow-execution-started-event-attributes
                    'make-child-workflow-execution-started-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          child-workflow-execution-started-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          child-workflow-execution-started-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-execution))
      (common-lisp:list
       (common-lisp:cons "workflowExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-type))
      (common-lisp:list
       (common-lisp:cons "workflowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiated-event-id))
      (common-lisp:list
       (common-lisp:cons "initiatedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          child-workflow-execution-started-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (child-workflow-execution-terminated-event-attributes
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-child-workflow-execution-terminated-event-attributes-"))
   (workflow-execution (common-lisp:error ":workflowexecution is required")
    :type (common-lisp:or workflow-execution common-lisp:null))
   (workflow-type (common-lisp:error ":workflowtype is required") :type
    (common-lisp:or workflow-type common-lisp:null))
   (initiated-event-id (common-lisp:error ":initiatedeventid is required")
    :type (common-lisp:or event-id common-lisp:null))
   (started-event-id (common-lisp:error ":startedeventid is required") :type
    (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'child-workflow-execution-terminated-event-attributes
                    'make-child-workflow-execution-terminated-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          child-workflow-execution-terminated-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          child-workflow-execution-terminated-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-execution))
      (common-lisp:list
       (common-lisp:cons "workflowExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-type))
      (common-lisp:list
       (common-lisp:cons "workflowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiated-event-id))
      (common-lisp:list
       (common-lisp:cons "initiatedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-event-id))
      (common-lisp:list
       (common-lisp:cons "startedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          child-workflow-execution-terminated-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (child-workflow-execution-timed-out-event-attributes
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-child-workflow-execution-timed-out-event-attributes-"))
   (workflow-execution (common-lisp:error ":workflowexecution is required")
    :type (common-lisp:or workflow-execution common-lisp:null))
   (workflow-type (common-lisp:error ":workflowtype is required") :type
    (common-lisp:or workflow-type common-lisp:null))
   (timeout-type (common-lisp:error ":timeouttype is required") :type
    (common-lisp:or workflow-execution-timeout-type common-lisp:null))
   (initiated-event-id (common-lisp:error ":initiatedeventid is required")
    :type (common-lisp:or event-id common-lisp:null))
   (started-event-id (common-lisp:error ":startedeventid is required") :type
    (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'child-workflow-execution-timed-out-event-attributes
                    'make-child-workflow-execution-timed-out-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          child-workflow-execution-timed-out-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          child-workflow-execution-timed-out-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-execution))
      (common-lisp:list
       (common-lisp:cons "workflowExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-type))
      (common-lisp:list
       (common-lisp:cons "workflowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-type))
      (common-lisp:list
       (common-lisp:cons "timeoutType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiated-event-id))
      (common-lisp:list
       (common-lisp:cons "initiatedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-event-id))
      (common-lisp:list
       (common-lisp:cons "startedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          child-workflow-execution-timed-out-event-attributes))
   common-lisp:nil))
(common-lisp:deftype close-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (close-status-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-close-status-filter-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or close-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'close-status-filter 'make-close-status-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input close-status-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input close-status-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input close-status-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (complete-workflow-execution-decision-attributes (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-complete-workflow-execution-decision-attributes-"))
   (result common-lisp:nil :type (common-lisp:or data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'complete-workflow-execution-decision-attributes
                    'make-complete-workflow-execution-decision-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          complete-workflow-execution-decision-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          complete-workflow-execution-decision-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          complete-workflow-execution-decision-attributes))
   common-lisp:nil))
(common-lisp:deftype complete-workflow-execution-failed-cause ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (complete-workflow-execution-failed-event-attributes
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-complete-workflow-execution-failed-event-attributes-"))
   (cause (common-lisp:error ":cause is required") :type
    (common-lisp:or complete-workflow-execution-failed-cause common-lisp:null))
   (decision-task-completed-event-id
    (common-lisp:error ":decisiontaskcompletedeventid is required") :type
    (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'complete-workflow-execution-failed-event-attributes
                    'make-complete-workflow-execution-failed-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          complete-workflow-execution-failed-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          complete-workflow-execution-failed-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decision-task-completed-event-id))
      (common-lisp:list
       (common-lisp:cons "decisionTaskCompletedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          complete-workflow-execution-failed-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (continue-as-new-workflow-execution-decision-attributes
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-continue-as-new-workflow-execution-decision-attributes-"))
   (input common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (execution-start-to-close-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null))
   (task-list common-lisp:nil :type
    (common-lisp:or task-list common-lisp:null))
   (task-priority common-lisp:nil :type
    (common-lisp:or task-priority common-lisp:null))
   (task-start-to-close-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null))
   (child-policy common-lisp:nil :type
    (common-lisp:or child-policy common-lisp:null))
   (tag-list common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (workflow-type-version common-lisp:nil :type
    (common-lisp:or version common-lisp:null))
   (lambda-role common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'continue-as-new-workflow-execution-decision-attributes
                    'make-continue-as-new-workflow-execution-decision-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          continue-as-new-workflow-execution-decision-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          continue-as-new-workflow-execution-decision-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-start-to-close-timeout))
      (common-lisp:list
       (common-lisp:cons "executionStartToCloseTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-list))
      (common-lisp:list
       (common-lisp:cons "taskList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-priority))
      (common-lisp:list
       (common-lisp:cons "taskPriority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'task-start-to-close-timeout))
      (common-lisp:list
       (common-lisp:cons "taskStartToCloseTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-policy))
      (common-lisp:list
       (common-lisp:cons "childPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "tagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-type-version))
      (common-lisp:list
       (common-lisp:cons "workflowTypeVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-role))
      (common-lisp:list
       (common-lisp:cons "lambdaRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          continue-as-new-workflow-execution-decision-attributes))
   common-lisp:nil))
(common-lisp:deftype continue-as-new-workflow-execution-failed-cause ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (continue-as-new-workflow-execution-failed-event-attributes
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-continue-as-new-workflow-execution-failed-event-attributes-"))
   (cause (common-lisp:error ":cause is required") :type
    (common-lisp:or continue-as-new-workflow-execution-failed-cause
                    common-lisp:null))
   (decision-task-completed-event-id
    (common-lisp:error ":decisiontaskcompletedeventid is required") :type
    (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'continue-as-new-workflow-execution-failed-event-attributes
                    'make-continue-as-new-workflow-execution-failed-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          continue-as-new-workflow-execution-failed-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          continue-as-new-workflow-execution-failed-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decision-task-completed-event-id))
      (common-lisp:list
       (common-lisp:cons "decisionTaskCompletedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          continue-as-new-workflow-execution-failed-event-attributes))
   common-lisp:nil))
(common-lisp:deftype count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (count-closed-workflow-executions-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-count-closed-workflow-executions-input-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (start-time-filter common-lisp:nil :type
    (common-lisp:or execution-time-filter common-lisp:null))
   (close-time-filter common-lisp:nil :type
    (common-lisp:or execution-time-filter common-lisp:null))
   (execution-filter common-lisp:nil :type
    (common-lisp:or workflow-execution-filter common-lisp:null))
   (type-filter common-lisp:nil :type
    (common-lisp:or workflow-type-filter common-lisp:null))
   (tag-filter common-lisp:nil :type
    (common-lisp:or tag-filter common-lisp:null))
   (close-status-filter common-lisp:nil :type
    (common-lisp:or close-status-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'count-closed-workflow-executions-input
                    'make-count-closed-workflow-executions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          count-closed-workflow-executions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          count-closed-workflow-executions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time-filter))
      (common-lisp:list
       (common-lisp:cons "startTimeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'close-time-filter))
      (common-lisp:list
       (common-lisp:cons "closeTimeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-filter))
      (common-lisp:list
       (common-lisp:cons "executionFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-filter))
      (common-lisp:list
       (common-lisp:cons "typeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-filter))
      (common-lisp:list
       (common-lisp:cons "tagFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'close-status-filter))
      (common-lisp:list
       (common-lisp:cons "closeStatusFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          count-closed-workflow-executions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (count-open-workflow-executions-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-count-open-workflow-executions-input-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (start-time-filter (common-lisp:error ":starttimefilter is required") :type
    (common-lisp:or execution-time-filter common-lisp:null))
   (type-filter common-lisp:nil :type
    (common-lisp:or workflow-type-filter common-lisp:null))
   (tag-filter common-lisp:nil :type
    (common-lisp:or tag-filter common-lisp:null))
   (execution-filter common-lisp:nil :type
    (common-lisp:or workflow-execution-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'count-open-workflow-executions-input
                    'make-count-open-workflow-executions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          count-open-workflow-executions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          count-open-workflow-executions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time-filter))
      (common-lisp:list
       (common-lisp:cons "startTimeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-filter))
      (common-lisp:list
       (common-lisp:cons "typeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-filter))
      (common-lisp:list
       (common-lisp:cons "tagFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-filter))
      (common-lisp:list
       (common-lisp:cons "executionFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          count-open-workflow-executions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (count-pending-activity-tasks-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-count-pending-activity-tasks-input-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (task-list (common-lisp:error ":tasklist is required") :type
    (common-lisp:or task-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'count-pending-activity-tasks-input
                    'make-count-pending-activity-tasks-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          count-pending-activity-tasks-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          count-pending-activity-tasks-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-list))
      (common-lisp:list
       (common-lisp:cons "taskList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          count-pending-activity-tasks-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (count-pending-decision-tasks-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-count-pending-decision-tasks-input-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (task-list (common-lisp:error ":tasklist is required") :type
    (common-lisp:or task-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'count-pending-decision-tasks-input
                    'make-count-pending-decision-tasks-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          count-pending-decision-tasks-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          count-pending-decision-tasks-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-list))
      (common-lisp:list
       (common-lisp:cons "taskList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          count-pending-decision-tasks-input))
   common-lisp:nil))
(common-lisp:deftype data () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (decision (:copier common-lisp:nil) (:conc-name "struct-shape-decision-"))
   (decision-type (common-lisp:error ":decisiontype is required") :type
    (common-lisp:or decision-type common-lisp:null))
   (schedule-activity-task-decision-attributes common-lisp:nil :type
    (common-lisp:or schedule-activity-task-decision-attributes
                    common-lisp:null))
   (request-cancel-activity-task-decision-attributes common-lisp:nil :type
    (common-lisp:or request-cancel-activity-task-decision-attributes
                    common-lisp:null))
   (complete-workflow-execution-decision-attributes common-lisp:nil :type
    (common-lisp:or complete-workflow-execution-decision-attributes
                    common-lisp:null))
   (fail-workflow-execution-decision-attributes common-lisp:nil :type
    (common-lisp:or fail-workflow-execution-decision-attributes
                    common-lisp:null))
   (cancel-workflow-execution-decision-attributes common-lisp:nil :type
    (common-lisp:or cancel-workflow-execution-decision-attributes
                    common-lisp:null))
   (continue-as-new-workflow-execution-decision-attributes common-lisp:nil
    :type
    (common-lisp:or continue-as-new-workflow-execution-decision-attributes
                    common-lisp:null))
   (record-marker-decision-attributes common-lisp:nil :type
    (common-lisp:or record-marker-decision-attributes common-lisp:null))
   (start-timer-decision-attributes common-lisp:nil :type
    (common-lisp:or start-timer-decision-attributes common-lisp:null))
   (cancel-timer-decision-attributes common-lisp:nil :type
    (common-lisp:or cancel-timer-decision-attributes common-lisp:null))
   (signal-external-workflow-execution-decision-attributes common-lisp:nil
    :type
    (common-lisp:or signal-external-workflow-execution-decision-attributes
                    common-lisp:null))
   (request-cancel-external-workflow-execution-decision-attributes
    common-lisp:nil :type
    (common-lisp:or
     request-cancel-external-workflow-execution-decision-attributes
     common-lisp:null))
   (start-child-workflow-execution-decision-attributes common-lisp:nil :type
    (common-lisp:or start-child-workflow-execution-decision-attributes
                    common-lisp:null))
   (schedule-lambda-function-decision-attributes common-lisp:nil :type
    (common-lisp:or schedule-lambda-function-decision-attributes
                    common-lisp:null)))
 (common-lisp:export (common-lisp:list 'decision 'make-decision))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input decision))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input decision))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decision-type))
      (common-lisp:list
       (common-lisp:cons "decisionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schedule-activity-task-decision-attributes))
      (common-lisp:list
       (common-lisp:cons "scheduleActivityTaskDecisionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-cancel-activity-task-decision-attributes))
      (common-lisp:list
       (common-lisp:cons "requestCancelActivityTaskDecisionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'complete-workflow-execution-decision-attributes))
      (common-lisp:list
       (common-lisp:cons "completeWorkflowExecutionDecisionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fail-workflow-execution-decision-attributes))
      (common-lisp:list
       (common-lisp:cons "failWorkflowExecutionDecisionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cancel-workflow-execution-decision-attributes))
      (common-lisp:list
       (common-lisp:cons "cancelWorkflowExecutionDecisionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'continue-as-new-workflow-execution-decision-attributes))
      (common-lisp:list
       (common-lisp:cons "continueAsNewWorkflowExecutionDecisionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'record-marker-decision-attributes))
      (common-lisp:list
       (common-lisp:cons "recordMarkerDecisionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-timer-decision-attributes))
      (common-lisp:list
       (common-lisp:cons "startTimerDecisionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cancel-timer-decision-attributes))
      (common-lisp:list
       (common-lisp:cons "cancelTimerDecisionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'signal-external-workflow-execution-decision-attributes))
      (common-lisp:list
       (common-lisp:cons "signalExternalWorkflowExecutionDecisionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-cancel-external-workflow-execution-decision-attributes))
      (common-lisp:list
       (common-lisp:cons
        "requestCancelExternalWorkflowExecutionDecisionAttributes"
        (aws-sdk/generator/shape::input-params
         aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-child-workflow-execution-decision-attributes))
      (common-lisp:list
       (common-lisp:cons "startChildWorkflowExecutionDecisionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schedule-lambda-function-decision-attributes))
      (common-lisp:list
       (common-lisp:cons "scheduleLambdaFunctionDecisionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input decision))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype decision-list () '(trivial-types:proper-list decision))
 (common-lisp:defun |make-decision-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list decision))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (decision-task (:copier common-lisp:nil)
      (:conc-name "struct-shape-decision-task-"))
   (task-token (common-lisp:error ":tasktoken is required") :type
    (common-lisp:or task-token common-lisp:null))
   (started-event-id (common-lisp:error ":startedeventid is required") :type
    (common-lisp:or event-id common-lisp:null))
   (workflow-execution (common-lisp:error ":workflowexecution is required")
    :type (common-lisp:or workflow-execution common-lisp:null))
   (workflow-type (common-lisp:error ":workflowtype is required") :type
    (common-lisp:or workflow-type common-lisp:null))
   (events (common-lisp:error ":events is required") :type
    (common-lisp:or history-event-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or page-token common-lisp:null))
   (previous-started-event-id common-lisp:nil :type
    (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'decision-task 'make-decision-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input decision-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input decision-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-token))
      (common-lisp:list
       (common-lisp:cons "taskToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-event-id))
      (common-lisp:list
       (common-lisp:cons "startedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-execution))
      (common-lisp:list
       (common-lisp:cons "workflowExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-type))
      (common-lisp:list
       (common-lisp:cons "workflowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'previous-started-event-id))
      (common-lisp:list
       (common-lisp:cons "previousStartedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input decision-task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (decision-task-completed-event-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-decision-task-completed-event-attributes-"))
   (execution-context common-lisp:nil :type
    (common-lisp:or data common-lisp:null))
   (scheduled-event-id (common-lisp:error ":scheduledeventid is required")
    :type (common-lisp:or event-id common-lisp:null))
   (started-event-id (common-lisp:error ":startedeventid is required") :type
    (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'decision-task-completed-event-attributes
                    'make-decision-task-completed-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decision-task-completed-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decision-task-completed-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-context))
      (common-lisp:list
       (common-lisp:cons "executionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-event-id))
      (common-lisp:list
       (common-lisp:cons "scheduledEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-event-id))
      (common-lisp:list
       (common-lisp:cons "startedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decision-task-completed-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (decision-task-scheduled-event-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-decision-task-scheduled-event-attributes-"))
   (task-list (common-lisp:error ":tasklist is required") :type
    (common-lisp:or task-list common-lisp:null))
   (task-priority common-lisp:nil :type
    (common-lisp:or task-priority common-lisp:null))
   (start-to-close-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'decision-task-scheduled-event-attributes
                    'make-decision-task-scheduled-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decision-task-scheduled-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decision-task-scheduled-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-list))
      (common-lisp:list
       (common-lisp:cons "taskList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-priority))
      (common-lisp:list
       (common-lisp:cons "taskPriority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-to-close-timeout))
      (common-lisp:list
       (common-lisp:cons "startToCloseTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decision-task-scheduled-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (decision-task-started-event-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-decision-task-started-event-attributes-"))
   (identity common-lisp:nil :type (common-lisp:or identity common-lisp:null))
   (scheduled-event-id (common-lisp:error ":scheduledeventid is required")
    :type (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'decision-task-started-event-attributes
                    'make-decision-task-started-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decision-task-started-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decision-task-started-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity))
      (common-lisp:list
       (common-lisp:cons "identity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-event-id))
      (common-lisp:list
       (common-lisp:cons "scheduledEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decision-task-started-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (decision-task-timed-out-event-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-decision-task-timed-out-event-attributes-"))
   (timeout-type (common-lisp:error ":timeouttype is required") :type
    (common-lisp:or decision-task-timeout-type common-lisp:null))
   (scheduled-event-id (common-lisp:error ":scheduledeventid is required")
    :type (common-lisp:or event-id common-lisp:null))
   (started-event-id (common-lisp:error ":startedeventid is required") :type
    (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'decision-task-timed-out-event-attributes
                    'make-decision-task-timed-out-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decision-task-timed-out-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decision-task-timed-out-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-type))
      (common-lisp:list
       (common-lisp:cons "timeoutType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-event-id))
      (common-lisp:list
       (common-lisp:cons "scheduledEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-event-id))
      (common-lisp:list
       (common-lisp:cons "startedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decision-task-timed-out-event-attributes))
   common-lisp:nil))
(common-lisp:deftype decision-task-timeout-type () 'common-lisp:string)
(common-lisp:deftype decision-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition default-undefined-fault
     (swf-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       default-undefined-fault-message)))
 (common-lisp:export
  (common-lisp:list 'default-undefined-fault 'default-undefined-fault-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (deprecate-activity-type-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-deprecate-activity-type-input-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (activity-type (common-lisp:error ":activitytype is required") :type
    (common-lisp:or activity-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deprecate-activity-type-input
                    'make-deprecate-activity-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deprecate-activity-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deprecate-activity-type-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-type))
      (common-lisp:list
       (common-lisp:cons "activityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deprecate-activity-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deprecate-domain-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-deprecate-domain-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or domain-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deprecate-domain-input 'make-deprecate-domain-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deprecate-domain-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deprecate-domain-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deprecate-domain-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deprecate-workflow-type-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-deprecate-workflow-type-input-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (workflow-type (common-lisp:error ":workflowtype is required") :type
    (common-lisp:or workflow-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deprecate-workflow-type-input
                    'make-deprecate-workflow-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deprecate-workflow-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deprecate-workflow-type-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-type))
      (common-lisp:list
       (common-lisp:cons "workflowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deprecate-workflow-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-activity-type-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-activity-type-input-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (activity-type (common-lisp:error ":activitytype is required") :type
    (common-lisp:or activity-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-activity-type-input
                    'make-describe-activity-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-activity-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-activity-type-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-type))
      (common-lisp:list
       (common-lisp:cons "activityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-activity-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-domain-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-domain-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or domain-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-domain-input 'make-describe-domain-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-workflow-execution-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-workflow-execution-input-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (execution (common-lisp:error ":execution is required") :type
    (common-lisp:or workflow-execution common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-workflow-execution-input
                    'make-describe-workflow-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workflow-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workflow-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution))
      (common-lisp:list
       (common-lisp:cons "execution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workflow-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-workflow-type-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-workflow-type-input-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (workflow-type (common-lisp:error ":workflowtype is required") :type
    (common-lisp:or workflow-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-workflow-type-input
                    'make-describe-workflow-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workflow-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workflow-type-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-type))
      (common-lisp:list
       (common-lisp:cons "workflowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workflow-type-input))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition domain-already-exists-fault
     (swf-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       domain-already-exists-fault-message)))
 (common-lisp:export
  (common-lisp:list 'domain-already-exists-fault
                    'domain-already-exists-fault-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (domain-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-domain-configuration-"))
   (workflow-execution-retention-period-in-days
    (common-lisp:error ":workflowexecutionretentionperiodindays is required")
    :type (common-lisp:or duration-in-days common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'domain-configuration 'make-domain-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-execution-retention-period-in-days))
      (common-lisp:list
       (common-lisp:cons "workflowExecutionRetentionPeriodInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition domain-deprecated-fault
     (swf-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       domain-deprecated-fault-message)))
 (common-lisp:export
  (common-lisp:list 'domain-deprecated-fault 'domain-deprecated-fault-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (domain-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-domain-detail-"))
   (domain-info (common-lisp:error ":domaininfo is required") :type
    (common-lisp:or domain-info common-lisp:null))
   (configuration (common-lisp:error ":configuration is required") :type
    (common-lisp:or domain-configuration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'domain-detail 'make-domain-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-info))
      (common-lisp:list
       (common-lisp:cons "domainInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (domain-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-domain-info-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or registration-status common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'domain-info 'make-domain-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype domain-info-list ()
   '(trivial-types:proper-list domain-info))
 (common-lisp:defun |make-domain-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (domain-infos (:copier common-lisp:nil)
      (:conc-name "struct-shape-domain-infos-"))
   (domain-infos (common-lisp:error ":domaininfos is required") :type
    (common-lisp:or domain-info-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or page-token common-lisp:null)))
 (common-lisp:export (common-lisp:list 'domain-infos 'make-domain-infos))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-infos))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-infos))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-infos))
      (common-lisp:list
       (common-lisp:cons "domainInfos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-infos))
   common-lisp:nil))
(common-lisp:deftype domain-name () 'common-lisp:string)
(common-lisp:deftype duration-in-days () 'common-lisp:string)
(common-lisp:deftype duration-in-seconds () 'common-lisp:string)
(common-lisp:deftype duration-in-seconds-optional () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype event-id () 'common-lisp:integer)
(common-lisp:deftype event-type () 'common-lisp:string)
(common-lisp:deftype execution-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (execution-time-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-execution-time-filter-"))
   (oldest-date (common-lisp:error ":oldestdate is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (latest-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'execution-time-filter 'make-execution-time-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execution-time-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execution-time-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oldest-date))
      (common-lisp:list
       (common-lisp:cons "oldestDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-date))
      (common-lisp:list
       (common-lisp:cons "latestDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execution-time-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (external-workflow-execution-cancel-requested-event-attributes
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-external-workflow-execution-cancel-requested-event-attributes-"))
   (workflow-execution (common-lisp:error ":workflowexecution is required")
    :type (common-lisp:or workflow-execution common-lisp:null))
   (initiated-event-id (common-lisp:error ":initiatedeventid is required")
    :type (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'external-workflow-execution-cancel-requested-event-attributes
   'make-external-workflow-execution-cancel-requested-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          external-workflow-execution-cancel-requested-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          external-workflow-execution-cancel-requested-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-execution))
      (common-lisp:list
       (common-lisp:cons "workflowExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiated-event-id))
      (common-lisp:list
       (common-lisp:cons "initiatedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          external-workflow-execution-cancel-requested-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (external-workflow-execution-signaled-event-attributes
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-external-workflow-execution-signaled-event-attributes-"))
   (workflow-execution (common-lisp:error ":workflowexecution is required")
    :type (common-lisp:or workflow-execution common-lisp:null))
   (initiated-event-id (common-lisp:error ":initiatedeventid is required")
    :type (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'external-workflow-execution-signaled-event-attributes
                    'make-external-workflow-execution-signaled-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          external-workflow-execution-signaled-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          external-workflow-execution-signaled-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-execution))
      (common-lisp:list
       (common-lisp:cons "workflowExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiated-event-id))
      (common-lisp:list
       (common-lisp:cons "initiatedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          external-workflow-execution-signaled-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (fail-workflow-execution-decision-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-fail-workflow-execution-decision-attributes-"))
   (reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (details common-lisp:nil :type (common-lisp:or data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'fail-workflow-execution-decision-attributes
                    'make-fail-workflow-execution-decision-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fail-workflow-execution-decision-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fail-workflow-execution-decision-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fail-workflow-execution-decision-attributes))
   common-lisp:nil))
(common-lisp:deftype fail-workflow-execution-failed-cause ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (fail-workflow-execution-failed-event-attributes (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-fail-workflow-execution-failed-event-attributes-"))
   (cause (common-lisp:error ":cause is required") :type
    (common-lisp:or fail-workflow-execution-failed-cause common-lisp:null))
   (decision-task-completed-event-id
    (common-lisp:error ":decisiontaskcompletedeventid is required") :type
    (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'fail-workflow-execution-failed-event-attributes
                    'make-fail-workflow-execution-failed-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fail-workflow-execution-failed-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fail-workflow-execution-failed-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decision-task-completed-event-id))
      (common-lisp:list
       (common-lisp:cons "decisionTaskCompletedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fail-workflow-execution-failed-event-attributes))
   common-lisp:nil))
(common-lisp:deftype failure-reason () 'common-lisp:string)
(common-lisp:deftype function-id () 'common-lisp:string)
(common-lisp:deftype function-input () 'common-lisp:string)
(common-lisp:deftype function-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-workflow-execution-history-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-workflow-execution-history-input-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (execution (common-lisp:error ":execution is required") :type
    (common-lisp:or workflow-execution common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or page-token common-lisp:null))
   (maximum-page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (reverse-order common-lisp:nil :type
    (common-lisp:or reverse-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-workflow-execution-history-input
                    'make-get-workflow-execution-history-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-execution-history-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-execution-history-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution))
      (common-lisp:list
       (common-lisp:cons "execution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-page-size))
      (common-lisp:list
       (common-lisp:cons "maximumPageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reverse-order))
      (common-lisp:list
       (common-lisp:cons "reverseOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-execution-history-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (history (:copier common-lisp:nil) (:conc-name "struct-shape-history-"))
   (events (common-lisp:error ":events is required") :type
    (common-lisp:or history-event-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or page-token common-lisp:null)))
 (common-lisp:export (common-lisp:list 'history 'make-history))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input history))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input history))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input history))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (history-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-history-event-"))
   (event-timestamp (common-lisp:error ":eventtimestamp is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (event-type (common-lisp:error ":eventtype is required") :type
    (common-lisp:or event-type common-lisp:null))
   (event-id (common-lisp:error ":eventid is required") :type
    (common-lisp:or event-id common-lisp:null))
   (workflow-execution-started-event-attributes common-lisp:nil :type
    (common-lisp:or workflow-execution-started-event-attributes
                    common-lisp:null))
   (workflow-execution-completed-event-attributes common-lisp:nil :type
    (common-lisp:or workflow-execution-completed-event-attributes
                    common-lisp:null))
   (complete-workflow-execution-failed-event-attributes common-lisp:nil :type
    (common-lisp:or complete-workflow-execution-failed-event-attributes
                    common-lisp:null))
   (workflow-execution-failed-event-attributes common-lisp:nil :type
    (common-lisp:or workflow-execution-failed-event-attributes
                    common-lisp:null))
   (fail-workflow-execution-failed-event-attributes common-lisp:nil :type
    (common-lisp:or fail-workflow-execution-failed-event-attributes
                    common-lisp:null))
   (workflow-execution-timed-out-event-attributes common-lisp:nil :type
    (common-lisp:or workflow-execution-timed-out-event-attributes
                    common-lisp:null))
   (workflow-execution-canceled-event-attributes common-lisp:nil :type
    (common-lisp:or workflow-execution-canceled-event-attributes
                    common-lisp:null))
   (cancel-workflow-execution-failed-event-attributes common-lisp:nil :type
    (common-lisp:or cancel-workflow-execution-failed-event-attributes
                    common-lisp:null))
   (workflow-execution-continued-as-new-event-attributes common-lisp:nil :type
    (common-lisp:or workflow-execution-continued-as-new-event-attributes
                    common-lisp:null))
   (continue-as-new-workflow-execution-failed-event-attributes common-lisp:nil
    :type
    (common-lisp:or continue-as-new-workflow-execution-failed-event-attributes
                    common-lisp:null))
   (workflow-execution-terminated-event-attributes common-lisp:nil :type
    (common-lisp:or workflow-execution-terminated-event-attributes
                    common-lisp:null))
   (workflow-execution-cancel-requested-event-attributes common-lisp:nil :type
    (common-lisp:or workflow-execution-cancel-requested-event-attributes
                    common-lisp:null))
   (decision-task-scheduled-event-attributes common-lisp:nil :type
    (common-lisp:or decision-task-scheduled-event-attributes common-lisp:null))
   (decision-task-started-event-attributes common-lisp:nil :type
    (common-lisp:or decision-task-started-event-attributes common-lisp:null))
   (decision-task-completed-event-attributes common-lisp:nil :type
    (common-lisp:or decision-task-completed-event-attributes common-lisp:null))
   (decision-task-timed-out-event-attributes common-lisp:nil :type
    (common-lisp:or decision-task-timed-out-event-attributes common-lisp:null))
   (activity-task-scheduled-event-attributes common-lisp:nil :type
    (common-lisp:or activity-task-scheduled-event-attributes common-lisp:null))
   (activity-task-started-event-attributes common-lisp:nil :type
    (common-lisp:or activity-task-started-event-attributes common-lisp:null))
   (activity-task-completed-event-attributes common-lisp:nil :type
    (common-lisp:or activity-task-completed-event-attributes common-lisp:null))
   (activity-task-failed-event-attributes common-lisp:nil :type
    (common-lisp:or activity-task-failed-event-attributes common-lisp:null))
   (activity-task-timed-out-event-attributes common-lisp:nil :type
    (common-lisp:or activity-task-timed-out-event-attributes common-lisp:null))
   (activity-task-canceled-event-attributes common-lisp:nil :type
    (common-lisp:or activity-task-canceled-event-attributes common-lisp:null))
   (activity-task-cancel-requested-event-attributes common-lisp:nil :type
    (common-lisp:or activity-task-cancel-requested-event-attributes
                    common-lisp:null))
   (workflow-execution-signaled-event-attributes common-lisp:nil :type
    (common-lisp:or workflow-execution-signaled-event-attributes
                    common-lisp:null))
   (marker-recorded-event-attributes common-lisp:nil :type
    (common-lisp:or marker-recorded-event-attributes common-lisp:null))
   (record-marker-failed-event-attributes common-lisp:nil :type
    (common-lisp:or record-marker-failed-event-attributes common-lisp:null))
   (timer-started-event-attributes common-lisp:nil :type
    (common-lisp:or timer-started-event-attributes common-lisp:null))
   (timer-fired-event-attributes common-lisp:nil :type
    (common-lisp:or timer-fired-event-attributes common-lisp:null))
   (timer-canceled-event-attributes common-lisp:nil :type
    (common-lisp:or timer-canceled-event-attributes common-lisp:null))
   (start-child-workflow-execution-initiated-event-attributes common-lisp:nil
    :type
    (common-lisp:or start-child-workflow-execution-initiated-event-attributes
                    common-lisp:null))
   (child-workflow-execution-started-event-attributes common-lisp:nil :type
    (common-lisp:or child-workflow-execution-started-event-attributes
                    common-lisp:null))
   (child-workflow-execution-completed-event-attributes common-lisp:nil :type
    (common-lisp:or child-workflow-execution-completed-event-attributes
                    common-lisp:null))
   (child-workflow-execution-failed-event-attributes common-lisp:nil :type
    (common-lisp:or child-workflow-execution-failed-event-attributes
                    common-lisp:null))
   (child-workflow-execution-timed-out-event-attributes common-lisp:nil :type
    (common-lisp:or child-workflow-execution-timed-out-event-attributes
                    common-lisp:null))
   (child-workflow-execution-canceled-event-attributes common-lisp:nil :type
    (common-lisp:or child-workflow-execution-canceled-event-attributes
                    common-lisp:null))
   (child-workflow-execution-terminated-event-attributes common-lisp:nil :type
    (common-lisp:or child-workflow-execution-terminated-event-attributes
                    common-lisp:null))
   (signal-external-workflow-execution-initiated-event-attributes
    common-lisp:nil :type
    (common-lisp:or
     signal-external-workflow-execution-initiated-event-attributes
     common-lisp:null))
   (external-workflow-execution-signaled-event-attributes common-lisp:nil :type
    (common-lisp:or external-workflow-execution-signaled-event-attributes
                    common-lisp:null))
   (signal-external-workflow-execution-failed-event-attributes common-lisp:nil
    :type
    (common-lisp:or signal-external-workflow-execution-failed-event-attributes
                    common-lisp:null))
   (external-workflow-execution-cancel-requested-event-attributes
    common-lisp:nil :type
    (common-lisp:or
     external-workflow-execution-cancel-requested-event-attributes
     common-lisp:null))
   (request-cancel-external-workflow-execution-initiated-event-attributes
    common-lisp:nil :type
    (common-lisp:or
     request-cancel-external-workflow-execution-initiated-event-attributes
     common-lisp:null))
   (request-cancel-external-workflow-execution-failed-event-attributes
    common-lisp:nil :type
    (common-lisp:or
     request-cancel-external-workflow-execution-failed-event-attributes
     common-lisp:null))
   (schedule-activity-task-failed-event-attributes common-lisp:nil :type
    (common-lisp:or schedule-activity-task-failed-event-attributes
                    common-lisp:null))
   (request-cancel-activity-task-failed-event-attributes common-lisp:nil :type
    (common-lisp:or request-cancel-activity-task-failed-event-attributes
                    common-lisp:null))
   (start-timer-failed-event-attributes common-lisp:nil :type
    (common-lisp:or start-timer-failed-event-attributes common-lisp:null))
   (cancel-timer-failed-event-attributes common-lisp:nil :type
    (common-lisp:or cancel-timer-failed-event-attributes common-lisp:null))
   (start-child-workflow-execution-failed-event-attributes common-lisp:nil
    :type
    (common-lisp:or start-child-workflow-execution-failed-event-attributes
                    common-lisp:null))
   (lambda-function-scheduled-event-attributes common-lisp:nil :type
    (common-lisp:or lambda-function-scheduled-event-attributes
                    common-lisp:null))
   (lambda-function-started-event-attributes common-lisp:nil :type
    (common-lisp:or lambda-function-started-event-attributes common-lisp:null))
   (lambda-function-completed-event-attributes common-lisp:nil :type
    (common-lisp:or lambda-function-completed-event-attributes
                    common-lisp:null))
   (lambda-function-failed-event-attributes common-lisp:nil :type
    (common-lisp:or lambda-function-failed-event-attributes common-lisp:null))
   (lambda-function-timed-out-event-attributes common-lisp:nil :type
    (common-lisp:or lambda-function-timed-out-event-attributes
                    common-lisp:null))
   (schedule-lambda-function-failed-event-attributes common-lisp:nil :type
    (common-lisp:or schedule-lambda-function-failed-event-attributes
                    common-lisp:null))
   (start-lambda-function-failed-event-attributes common-lisp:nil :type
    (common-lisp:or start-lambda-function-failed-event-attributes
                    common-lisp:null)))
 (common-lisp:export (common-lisp:list 'history-event 'make-history-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input history-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input history-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-timestamp))
      (common-lisp:list
       (common-lisp:cons "eventTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type))
      (common-lisp:list
       (common-lisp:cons "eventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-execution-started-event-attributes))
      (common-lisp:list
       (common-lisp:cons "workflowExecutionStartedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-execution-completed-event-attributes))
      (common-lisp:list
       (common-lisp:cons "workflowExecutionCompletedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'complete-workflow-execution-failed-event-attributes))
      (common-lisp:list
       (common-lisp:cons "completeWorkflowExecutionFailedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-execution-failed-event-attributes))
      (common-lisp:list
       (common-lisp:cons "workflowExecutionFailedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fail-workflow-execution-failed-event-attributes))
      (common-lisp:list
       (common-lisp:cons "failWorkflowExecutionFailedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-execution-timed-out-event-attributes))
      (common-lisp:list
       (common-lisp:cons "workflowExecutionTimedOutEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-execution-canceled-event-attributes))
      (common-lisp:list
       (common-lisp:cons "workflowExecutionCanceledEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cancel-workflow-execution-failed-event-attributes))
      (common-lisp:list
       (common-lisp:cons "cancelWorkflowExecutionFailedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-execution-continued-as-new-event-attributes))
      (common-lisp:list
       (common-lisp:cons "workflowExecutionContinuedAsNewEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'continue-as-new-workflow-execution-failed-event-attributes))
      (common-lisp:list
       (common-lisp:cons "continueAsNewWorkflowExecutionFailedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-execution-terminated-event-attributes))
      (common-lisp:list
       (common-lisp:cons "workflowExecutionTerminatedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-execution-cancel-requested-event-attributes))
      (common-lisp:list
       (common-lisp:cons "workflowExecutionCancelRequestedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decision-task-scheduled-event-attributes))
      (common-lisp:list
       (common-lisp:cons "decisionTaskScheduledEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decision-task-started-event-attributes))
      (common-lisp:list
       (common-lisp:cons "decisionTaskStartedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decision-task-completed-event-attributes))
      (common-lisp:list
       (common-lisp:cons "decisionTaskCompletedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decision-task-timed-out-event-attributes))
      (common-lisp:list
       (common-lisp:cons "decisionTaskTimedOutEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-task-scheduled-event-attributes))
      (common-lisp:list
       (common-lisp:cons "activityTaskScheduledEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-task-started-event-attributes))
      (common-lisp:list
       (common-lisp:cons "activityTaskStartedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-task-completed-event-attributes))
      (common-lisp:list
       (common-lisp:cons "activityTaskCompletedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-task-failed-event-attributes))
      (common-lisp:list
       (common-lisp:cons "activityTaskFailedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-task-timed-out-event-attributes))
      (common-lisp:list
       (common-lisp:cons "activityTaskTimedOutEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-task-canceled-event-attributes))
      (common-lisp:list
       (common-lisp:cons "activityTaskCanceledEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-task-cancel-requested-event-attributes))
      (common-lisp:list
       (common-lisp:cons "activityTaskCancelRequestedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-execution-signaled-event-attributes))
      (common-lisp:list
       (common-lisp:cons "workflowExecutionSignaledEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'marker-recorded-event-attributes))
      (common-lisp:list
       (common-lisp:cons "markerRecordedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'record-marker-failed-event-attributes))
      (common-lisp:list
       (common-lisp:cons "recordMarkerFailedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timer-started-event-attributes))
      (common-lisp:list
       (common-lisp:cons "timerStartedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timer-fired-event-attributes))
      (common-lisp:list
       (common-lisp:cons "timerFiredEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timer-canceled-event-attributes))
      (common-lisp:list
       (common-lisp:cons "timerCanceledEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-child-workflow-execution-initiated-event-attributes))
      (common-lisp:list
       (common-lisp:cons "startChildWorkflowExecutionInitiatedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'child-workflow-execution-started-event-attributes))
      (common-lisp:list
       (common-lisp:cons "childWorkflowExecutionStartedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'child-workflow-execution-completed-event-attributes))
      (common-lisp:list
       (common-lisp:cons "childWorkflowExecutionCompletedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'child-workflow-execution-failed-event-attributes))
      (common-lisp:list
       (common-lisp:cons "childWorkflowExecutionFailedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'child-workflow-execution-timed-out-event-attributes))
      (common-lisp:list
       (common-lisp:cons "childWorkflowExecutionTimedOutEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'child-workflow-execution-canceled-event-attributes))
      (common-lisp:list
       (common-lisp:cons "childWorkflowExecutionCanceledEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'child-workflow-execution-terminated-event-attributes))
      (common-lisp:list
       (common-lisp:cons "childWorkflowExecutionTerminatedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'signal-external-workflow-execution-initiated-event-attributes))
      (common-lisp:list
       (common-lisp:cons
        "signalExternalWorkflowExecutionInitiatedEventAttributes"
        (aws-sdk/generator/shape::input-params
         aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-workflow-execution-signaled-event-attributes))
      (common-lisp:list
       (common-lisp:cons "externalWorkflowExecutionSignaledEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'signal-external-workflow-execution-failed-event-attributes))
      (common-lisp:list
       (common-lisp:cons "signalExternalWorkflowExecutionFailedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-workflow-execution-cancel-requested-event-attributes))
      (common-lisp:list
       (common-lisp:cons
        "externalWorkflowExecutionCancelRequestedEventAttributes"
        (aws-sdk/generator/shape::input-params
         aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-cancel-external-workflow-execution-initiated-event-attributes))
      (common-lisp:list
       (common-lisp:cons
        "requestCancelExternalWorkflowExecutionInitiatedEventAttributes"
        (aws-sdk/generator/shape::input-params
         aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-cancel-external-workflow-execution-failed-event-attributes))
      (common-lisp:list
       (common-lisp:cons
        "requestCancelExternalWorkflowExecutionFailedEventAttributes"
        (aws-sdk/generator/shape::input-params
         aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schedule-activity-task-failed-event-attributes))
      (common-lisp:list
       (common-lisp:cons "scheduleActivityTaskFailedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-cancel-activity-task-failed-event-attributes))
      (common-lisp:list
       (common-lisp:cons "requestCancelActivityTaskFailedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-timer-failed-event-attributes))
      (common-lisp:list
       (common-lisp:cons "startTimerFailedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cancel-timer-failed-event-attributes))
      (common-lisp:list
       (common-lisp:cons "cancelTimerFailedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-child-workflow-execution-failed-event-attributes))
      (common-lisp:list
       (common-lisp:cons "startChildWorkflowExecutionFailedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-scheduled-event-attributes))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionScheduledEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-started-event-attributes))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionStartedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-completed-event-attributes))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionCompletedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-failed-event-attributes))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionFailedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-timed-out-event-attributes))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionTimedOutEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schedule-lambda-function-failed-event-attributes))
      (common-lisp:list
       (common-lisp:cons "scheduleLambdaFunctionFailedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-lambda-function-failed-event-attributes))
      (common-lisp:list
       (common-lisp:cons "startLambdaFunctionFailedEventAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input history-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype history-event-list ()
   '(trivial-types:proper-list history-event))
 (common-lisp:defun |make-history-event-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list history-event))
   aws-sdk/generator/shape::members))
(common-lisp:deftype identity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-function-completed-event-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-function-completed-event-attributes-"))
   (scheduled-event-id (common-lisp:error ":scheduledeventid is required")
    :type (common-lisp:or event-id common-lisp:null))
   (started-event-id (common-lisp:error ":startedeventid is required") :type
    (common-lisp:or event-id common-lisp:null))
   (result common-lisp:nil :type (common-lisp:or data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lambda-function-completed-event-attributes
                    'make-lambda-function-completed-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-completed-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-completed-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-event-id))
      (common-lisp:list
       (common-lisp:cons "scheduledEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-event-id))
      (common-lisp:list
       (common-lisp:cons "startedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-completed-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-function-failed-event-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-function-failed-event-attributes-"))
   (scheduled-event-id (common-lisp:error ":scheduledeventid is required")
    :type (common-lisp:or event-id common-lisp:null))
   (started-event-id (common-lisp:error ":startedeventid is required") :type
    (common-lisp:or event-id common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (details common-lisp:nil :type (common-lisp:or data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lambda-function-failed-event-attributes
                    'make-lambda-function-failed-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-failed-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-failed-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-event-id))
      (common-lisp:list
       (common-lisp:cons "scheduledEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-event-id))
      (common-lisp:list
       (common-lisp:cons "startedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-failed-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-function-scheduled-event-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-function-scheduled-event-attributes-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or function-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or function-name common-lisp:null))
   (control common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (input common-lisp:nil :type
    (common-lisp:or function-input common-lisp:null))
   (start-to-close-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null))
   (decision-task-completed-event-id
    (common-lisp:error ":decisiontaskcompletedeventid is required") :type
    (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lambda-function-scheduled-event-attributes
                    'make-lambda-function-scheduled-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-scheduled-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-scheduled-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control))
      (common-lisp:list
       (common-lisp:cons "control"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-to-close-timeout))
      (common-lisp:list
       (common-lisp:cons "startToCloseTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decision-task-completed-event-id))
      (common-lisp:list
       (common-lisp:cons "decisionTaskCompletedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-scheduled-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-function-started-event-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-function-started-event-attributes-"))
   (scheduled-event-id (common-lisp:error ":scheduledeventid is required")
    :type (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lambda-function-started-event-attributes
                    'make-lambda-function-started-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-started-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-started-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-event-id))
      (common-lisp:list
       (common-lisp:cons "scheduledEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-started-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-function-timed-out-event-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-function-timed-out-event-attributes-"))
   (scheduled-event-id (common-lisp:error ":scheduledeventid is required")
    :type (common-lisp:or event-id common-lisp:null))
   (started-event-id (common-lisp:error ":startedeventid is required") :type
    (common-lisp:or event-id common-lisp:null))
   (timeout-type common-lisp:nil :type
    (common-lisp:or lambda-function-timeout-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lambda-function-timed-out-event-attributes
                    'make-lambda-function-timed-out-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-timed-out-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-timed-out-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-event-id))
      (common-lisp:list
       (common-lisp:cons "scheduledEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-event-id))
      (common-lisp:list
       (common-lisp:cons "startedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-type))
      (common-lisp:list
       (common-lisp:cons "timeoutType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-timed-out-event-attributes))
   common-lisp:nil))
(common-lisp:deftype lambda-function-timeout-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-fault
     (swf-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-fault-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-fault 'limit-exceeded-fault-message)))
(common-lisp:deftype limited-data () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-activity-types-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-activity-types-input-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (registration-status (common-lisp:error ":registrationstatus is required")
    :type (common-lisp:or registration-status common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or page-token common-lisp:null))
   (maximum-page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (reverse-order common-lisp:nil :type
    (common-lisp:or reverse-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-activity-types-input
                    'make-list-activity-types-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-activity-types-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-activity-types-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-status))
      (common-lisp:list
       (common-lisp:cons "registrationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-page-size))
      (common-lisp:list
       (common-lisp:cons "maximumPageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reverse-order))
      (common-lisp:list
       (common-lisp:cons "reverseOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-activity-types-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-closed-workflow-executions-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-closed-workflow-executions-input-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (start-time-filter common-lisp:nil :type
    (common-lisp:or execution-time-filter common-lisp:null))
   (close-time-filter common-lisp:nil :type
    (common-lisp:or execution-time-filter common-lisp:null))
   (execution-filter common-lisp:nil :type
    (common-lisp:or workflow-execution-filter common-lisp:null))
   (close-status-filter common-lisp:nil :type
    (common-lisp:or close-status-filter common-lisp:null))
   (type-filter common-lisp:nil :type
    (common-lisp:or workflow-type-filter common-lisp:null))
   (tag-filter common-lisp:nil :type
    (common-lisp:or tag-filter common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or page-token common-lisp:null))
   (maximum-page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (reverse-order common-lisp:nil :type
    (common-lisp:or reverse-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-closed-workflow-executions-input
                    'make-list-closed-workflow-executions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-closed-workflow-executions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-closed-workflow-executions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time-filter))
      (common-lisp:list
       (common-lisp:cons "startTimeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'close-time-filter))
      (common-lisp:list
       (common-lisp:cons "closeTimeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-filter))
      (common-lisp:list
       (common-lisp:cons "executionFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'close-status-filter))
      (common-lisp:list
       (common-lisp:cons "closeStatusFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-filter))
      (common-lisp:list
       (common-lisp:cons "typeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-filter))
      (common-lisp:list
       (common-lisp:cons "tagFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-page-size))
      (common-lisp:list
       (common-lisp:cons "maximumPageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reverse-order))
      (common-lisp:list
       (common-lisp:cons "reverseOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-closed-workflow-executions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-domains-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-domains-input-"))
   (next-page-token common-lisp:nil :type
    (common-lisp:or page-token common-lisp:null))
   (registration-status (common-lisp:error ":registrationstatus is required")
    :type (common-lisp:or registration-status common-lisp:null))
   (maximum-page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (reverse-order common-lisp:nil :type
    (common-lisp:or reverse-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-domains-input 'make-list-domains-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-domains-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-domains-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-status))
      (common-lisp:list
       (common-lisp:cons "registrationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-page-size))
      (common-lisp:list
       (common-lisp:cons "maximumPageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reverse-order))
      (common-lisp:list
       (common-lisp:cons "reverseOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-domains-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-open-workflow-executions-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-open-workflow-executions-input-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (start-time-filter (common-lisp:error ":starttimefilter is required") :type
    (common-lisp:or execution-time-filter common-lisp:null))
   (type-filter common-lisp:nil :type
    (common-lisp:or workflow-type-filter common-lisp:null))
   (tag-filter common-lisp:nil :type
    (common-lisp:or tag-filter common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or page-token common-lisp:null))
   (maximum-page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (reverse-order common-lisp:nil :type
    (common-lisp:or reverse-order common-lisp:null))
   (execution-filter common-lisp:nil :type
    (common-lisp:or workflow-execution-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-open-workflow-executions-input
                    'make-list-open-workflow-executions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-open-workflow-executions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-open-workflow-executions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time-filter))
      (common-lisp:list
       (common-lisp:cons "startTimeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-filter))
      (common-lisp:list
       (common-lisp:cons "typeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-filter))
      (common-lisp:list
       (common-lisp:cons "tagFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-page-size))
      (common-lisp:list
       (common-lisp:cons "maximumPageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reverse-order))
      (common-lisp:list
       (common-lisp:cons "reverseOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-filter))
      (common-lisp:list
       (common-lisp:cons "executionFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-open-workflow-executions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-input-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-input
                    'make-list-tags-for-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-output-"))
   (tags common-lisp:nil :type
    (common-lisp:or resource-tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-output
                    'make-list-tags-for-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-workflow-types-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-workflow-types-input-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (registration-status (common-lisp:error ":registrationstatus is required")
    :type (common-lisp:or registration-status common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or page-token common-lisp:null))
   (maximum-page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (reverse-order common-lisp:nil :type
    (common-lisp:or reverse-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-workflow-types-input
                    'make-list-workflow-types-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-types-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-types-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-status))
      (common-lisp:list
       (common-lisp:cons "registrationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-page-size))
      (common-lisp:list
       (common-lisp:cons "maximumPageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reverse-order))
      (common-lisp:list
       (common-lisp:cons "reverseOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-types-input))
   common-lisp:nil))
(common-lisp:deftype marker-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (marker-recorded-event-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-marker-recorded-event-attributes-"))
   (marker-name (common-lisp:error ":markername is required") :type
    (common-lisp:or marker-name common-lisp:null))
   (details common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (decision-task-completed-event-id
    (common-lisp:error ":decisiontaskcompletedeventid is required") :type
    (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'marker-recorded-event-attributes
                    'make-marker-recorded-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          marker-recorded-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          marker-recorded-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker-name))
      (common-lisp:list
       (common-lisp:cons "markerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decision-task-completed-event-id))
      (common-lisp:list
       (common-lisp:cons "decisionTaskCompletedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          marker-recorded-event-attributes))
   common-lisp:nil))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:deftype open-decision-tasks-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition operation-not-permitted-fault
     (swf-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       operation-not-permitted-fault-message)))
 (common-lisp:export
  (common-lisp:list 'operation-not-permitted-fault
                    'operation-not-permitted-fault-message)))
(common-lisp:deftype page-size () 'common-lisp:integer)
(common-lisp:deftype page-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (pending-task-count (:copier common-lisp:nil)
      (:conc-name "struct-shape-pending-task-count-"))
   (count (common-lisp:error ":count is required") :type
    (common-lisp:or count common-lisp:null))
   (truncated common-lisp:nil :type
    (common-lisp:or truncated common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pending-task-count 'make-pending-task-count))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pending-task-count))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pending-task-count))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'truncated))
      (common-lisp:list
       (common-lisp:cons "truncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pending-task-count))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (poll-for-activity-task-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-poll-for-activity-task-input-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (task-list (common-lisp:error ":tasklist is required") :type
    (common-lisp:or task-list common-lisp:null))
   (identity common-lisp:nil :type (common-lisp:or identity common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'poll-for-activity-task-input
                    'make-poll-for-activity-task-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          poll-for-activity-task-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          poll-for-activity-task-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-list))
      (common-lisp:list
       (common-lisp:cons "taskList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity))
      (common-lisp:list
       (common-lisp:cons "identity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          poll-for-activity-task-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (poll-for-decision-task-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-poll-for-decision-task-input-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (task-list (common-lisp:error ":tasklist is required") :type
    (common-lisp:or task-list common-lisp:null))
   (identity common-lisp:nil :type (common-lisp:or identity common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or page-token common-lisp:null))
   (maximum-page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (reverse-order common-lisp:nil :type
    (common-lisp:or reverse-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'poll-for-decision-task-input
                    'make-poll-for-decision-task-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          poll-for-decision-task-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          poll-for-decision-task-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-list))
      (common-lisp:list
       (common-lisp:cons "taskList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity))
      (common-lisp:list
       (common-lisp:cons "identity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-page-size))
      (common-lisp:list
       (common-lisp:cons "maximumPageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reverse-order))
      (common-lisp:list
       (common-lisp:cons "reverseOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          poll-for-decision-task-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (record-activity-task-heartbeat-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-record-activity-task-heartbeat-input-"))
   (task-token (common-lisp:error ":tasktoken is required") :type
    (common-lisp:or task-token common-lisp:null))
   (details common-lisp:nil :type
    (common-lisp:or limited-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'record-activity-task-heartbeat-input
                    'make-record-activity-task-heartbeat-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          record-activity-task-heartbeat-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          record-activity-task-heartbeat-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-token))
      (common-lisp:list
       (common-lisp:cons "taskToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          record-activity-task-heartbeat-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (record-marker-decision-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-record-marker-decision-attributes-"))
   (marker-name (common-lisp:error ":markername is required") :type
    (common-lisp:or marker-name common-lisp:null))
   (details common-lisp:nil :type (common-lisp:or data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'record-marker-decision-attributes
                    'make-record-marker-decision-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          record-marker-decision-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          record-marker-decision-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker-name))
      (common-lisp:list
       (common-lisp:cons "markerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          record-marker-decision-attributes))
   common-lisp:nil))
(common-lisp:deftype record-marker-failed-cause () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (record-marker-failed-event-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-record-marker-failed-event-attributes-"))
   (marker-name (common-lisp:error ":markername is required") :type
    (common-lisp:or marker-name common-lisp:null))
   (cause (common-lisp:error ":cause is required") :type
    (common-lisp:or record-marker-failed-cause common-lisp:null))
   (decision-task-completed-event-id
    (common-lisp:error ":decisiontaskcompletedeventid is required") :type
    (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'record-marker-failed-event-attributes
                    'make-record-marker-failed-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          record-marker-failed-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          record-marker-failed-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker-name))
      (common-lisp:list
       (common-lisp:cons "markerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decision-task-completed-event-id))
      (common-lisp:list
       (common-lisp:cons "decisionTaskCompletedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          record-marker-failed-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-activity-type-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-activity-type-input-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or version common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (default-task-start-to-close-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null))
   (default-task-heartbeat-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null))
   (default-task-list common-lisp:nil :type
    (common-lisp:or task-list common-lisp:null))
   (default-task-priority common-lisp:nil :type
    (common-lisp:or task-priority common-lisp:null))
   (default-task-schedule-to-start-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null))
   (default-task-schedule-to-close-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-activity-type-input
                    'make-register-activity-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-activity-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-activity-type-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-task-start-to-close-timeout))
      (common-lisp:list
       (common-lisp:cons "defaultTaskStartToCloseTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-task-heartbeat-timeout))
      (common-lisp:list
       (common-lisp:cons "defaultTaskHeartbeatTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-task-list))
      (common-lisp:list
       (common-lisp:cons "defaultTaskList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-task-priority))
      (common-lisp:list
       (common-lisp:cons "defaultTaskPriority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-task-schedule-to-start-timeout))
      (common-lisp:list
       (common-lisp:cons "defaultTaskScheduleToStartTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-task-schedule-to-close-timeout))
      (common-lisp:list
       (common-lisp:cons "defaultTaskScheduleToCloseTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-activity-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-domain-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-domain-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (workflow-execution-retention-period-in-days
    (common-lisp:error ":workflowexecutionretentionperiodindays is required")
    :type (common-lisp:or duration-in-days common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or resource-tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-domain-input 'make-register-domain-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-domain-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-domain-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-execution-retention-period-in-days))
      (common-lisp:list
       (common-lisp:cons "workflowExecutionRetentionPeriodInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-domain-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-workflow-type-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-workflow-type-input-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or version common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (default-task-start-to-close-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null))
   (default-execution-start-to-close-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null))
   (default-task-list common-lisp:nil :type
    (common-lisp:or task-list common-lisp:null))
   (default-task-priority common-lisp:nil :type
    (common-lisp:or task-priority common-lisp:null))
   (default-child-policy common-lisp:nil :type
    (common-lisp:or child-policy common-lisp:null))
   (default-lambda-role common-lisp:nil :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-workflow-type-input
                    'make-register-workflow-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-workflow-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-workflow-type-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-task-start-to-close-timeout))
      (common-lisp:list
       (common-lisp:cons "defaultTaskStartToCloseTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-execution-start-to-close-timeout))
      (common-lisp:list
       (common-lisp:cons "defaultExecutionStartToCloseTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-task-list))
      (common-lisp:list
       (common-lisp:cons "defaultTaskList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-task-priority))
      (common-lisp:list
       (common-lisp:cons "defaultTaskPriority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-child-policy))
      (common-lisp:list
       (common-lisp:cons "defaultChildPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-lambda-role))
      (common-lisp:list
       (common-lisp:cons "defaultLambdaRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-workflow-type-input))
   common-lisp:nil))
(common-lisp:deftype registration-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (request-cancel-activity-task-decision-attributes
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-request-cancel-activity-task-decision-attributes-"))
   (activity-id (common-lisp:error ":activityid is required") :type
    (common-lisp:or activity-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'request-cancel-activity-task-decision-attributes
                    'make-request-cancel-activity-task-decision-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          request-cancel-activity-task-decision-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          request-cancel-activity-task-decision-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-id))
      (common-lisp:list
       (common-lisp:cons "activityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          request-cancel-activity-task-decision-attributes))
   common-lisp:nil))
(common-lisp:deftype request-cancel-activity-task-failed-cause ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (request-cancel-activity-task-failed-event-attributes
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-request-cancel-activity-task-failed-event-attributes-"))
   (activity-id (common-lisp:error ":activityid is required") :type
    (common-lisp:or activity-id common-lisp:null))
   (cause (common-lisp:error ":cause is required") :type
    (common-lisp:or request-cancel-activity-task-failed-cause
                    common-lisp:null))
   (decision-task-completed-event-id
    (common-lisp:error ":decisiontaskcompletedeventid is required") :type
    (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'request-cancel-activity-task-failed-event-attributes
                    'make-request-cancel-activity-task-failed-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          request-cancel-activity-task-failed-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          request-cancel-activity-task-failed-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-id))
      (common-lisp:list
       (common-lisp:cons "activityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decision-task-completed-event-id))
      (common-lisp:list
       (common-lisp:cons "decisionTaskCompletedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          request-cancel-activity-task-failed-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (request-cancel-external-workflow-execution-decision-attributes
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-request-cancel-external-workflow-execution-decision-attributes-"))
   (workflow-id (common-lisp:error ":workflowid is required") :type
    (common-lisp:or workflow-id common-lisp:null))
   (run-id common-lisp:nil :type
    (common-lisp:or workflow-run-id-optional common-lisp:null))
   (control common-lisp:nil :type (common-lisp:or data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'request-cancel-external-workflow-execution-decision-attributes
   'make-request-cancel-external-workflow-execution-decision-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          request-cancel-external-workflow-execution-decision-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          request-cancel-external-workflow-execution-decision-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "workflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "runId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control))
      (common-lisp:list
       (common-lisp:cons "control"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          request-cancel-external-workflow-execution-decision-attributes))
   common-lisp:nil))
(common-lisp:deftype request-cancel-external-workflow-execution-failed-cause ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (request-cancel-external-workflow-execution-failed-event-attributes
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-request-cancel-external-workflow-execution-failed-event-attributes-"))
   (workflow-id (common-lisp:error ":workflowid is required") :type
    (common-lisp:or workflow-id common-lisp:null))
   (run-id common-lisp:nil :type
    (common-lisp:or workflow-run-id-optional common-lisp:null))
   (cause (common-lisp:error ":cause is required") :type
    (common-lisp:or request-cancel-external-workflow-execution-failed-cause
                    common-lisp:null))
   (initiated-event-id (common-lisp:error ":initiatedeventid is required")
    :type (common-lisp:or event-id common-lisp:null))
   (decision-task-completed-event-id
    (common-lisp:error ":decisiontaskcompletedeventid is required") :type
    (common-lisp:or event-id common-lisp:null))
   (control common-lisp:nil :type (common-lisp:or data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'request-cancel-external-workflow-execution-failed-event-attributes
   'make-request-cancel-external-workflow-execution-failed-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          request-cancel-external-workflow-execution-failed-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          request-cancel-external-workflow-execution-failed-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "workflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "runId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiated-event-id))
      (common-lisp:list
       (common-lisp:cons "initiatedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decision-task-completed-event-id))
      (common-lisp:list
       (common-lisp:cons "decisionTaskCompletedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control))
      (common-lisp:list
       (common-lisp:cons "control"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          request-cancel-external-workflow-execution-failed-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (request-cancel-external-workflow-execution-initiated-event-attributes
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-request-cancel-external-workflow-execution-initiated-event-attributes-"))
   (workflow-id (common-lisp:error ":workflowid is required") :type
    (common-lisp:or workflow-id common-lisp:null))
   (run-id common-lisp:nil :type
    (common-lisp:or workflow-run-id-optional common-lisp:null))
   (decision-task-completed-event-id
    (common-lisp:error ":decisiontaskcompletedeventid is required") :type
    (common-lisp:or event-id common-lisp:null))
   (control common-lisp:nil :type (common-lisp:or data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'request-cancel-external-workflow-execution-initiated-event-attributes
   'make-request-cancel-external-workflow-execution-initiated-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          request-cancel-external-workflow-execution-initiated-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          request-cancel-external-workflow-execution-initiated-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "workflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "runId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decision-task-completed-event-id))
      (common-lisp:list
       (common-lisp:cons "decisionTaskCompletedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control))
      (common-lisp:list
       (common-lisp:cons "control"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          request-cancel-external-workflow-execution-initiated-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (request-cancel-workflow-execution-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-request-cancel-workflow-execution-input-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (workflow-id (common-lisp:error ":workflowid is required") :type
    (common-lisp:or workflow-id common-lisp:null))
   (run-id common-lisp:nil :type
    (common-lisp:or workflow-run-id-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'request-cancel-workflow-execution-input
                    'make-request-cancel-workflow-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          request-cancel-workflow-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          request-cancel-workflow-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "workflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "runId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          request-cancel-workflow-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-tag (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or resource-tag-key common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or resource-tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource-tag 'make-resource-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-tag))
   common-lisp:nil))
(common-lisp:deftype resource-tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-tag-key-list ()
   '(trivial-types:proper-list resource-tag-key))
 (common-lisp:defun |make-resource-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype resource-tag-list ()
   '(trivial-types:proper-list resource-tag))
 (common-lisp:defun |make-resource-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (respond-activity-task-canceled-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-respond-activity-task-canceled-input-"))
   (task-token (common-lisp:error ":tasktoken is required") :type
    (common-lisp:or task-token common-lisp:null))
   (details common-lisp:nil :type (common-lisp:or data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'respond-activity-task-canceled-input
                    'make-respond-activity-task-canceled-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          respond-activity-task-canceled-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          respond-activity-task-canceled-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-token))
      (common-lisp:list
       (common-lisp:cons "taskToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          respond-activity-task-canceled-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (respond-activity-task-completed-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-respond-activity-task-completed-input-"))
   (task-token (common-lisp:error ":tasktoken is required") :type
    (common-lisp:or task-token common-lisp:null))
   (result common-lisp:nil :type (common-lisp:or data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'respond-activity-task-completed-input
                    'make-respond-activity-task-completed-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          respond-activity-task-completed-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          respond-activity-task-completed-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-token))
      (common-lisp:list
       (common-lisp:cons "taskToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          respond-activity-task-completed-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (respond-activity-task-failed-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-respond-activity-task-failed-input-"))
   (task-token (common-lisp:error ":tasktoken is required") :type
    (common-lisp:or task-token common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (details common-lisp:nil :type (common-lisp:or data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'respond-activity-task-failed-input
                    'make-respond-activity-task-failed-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          respond-activity-task-failed-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          respond-activity-task-failed-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-token))
      (common-lisp:list
       (common-lisp:cons "taskToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          respond-activity-task-failed-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (respond-decision-task-completed-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-respond-decision-task-completed-input-"))
   (task-token (common-lisp:error ":tasktoken is required") :type
    (common-lisp:or task-token common-lisp:null))
   (decisions common-lisp:nil :type
    (common-lisp:or decision-list common-lisp:null))
   (execution-context common-lisp:nil :type
    (common-lisp:or data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'respond-decision-task-completed-input
                    'make-respond-decision-task-completed-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          respond-decision-task-completed-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          respond-decision-task-completed-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-token))
      (common-lisp:list
       (common-lisp:cons "taskToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decisions))
      (common-lisp:list
       (common-lisp:cons "decisions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-context))
      (common-lisp:list
       (common-lisp:cons "executionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          respond-decision-task-completed-input))
   common-lisp:nil))
(common-lisp:deftype reverse-order () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (run (:copier common-lisp:nil) (:conc-name "struct-shape-run-"))
   (run-id common-lisp:nil :type
    (common-lisp:or workflow-run-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'run 'make-run))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input run))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input run))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "runId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input run))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (schedule-activity-task-decision-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-schedule-activity-task-decision-attributes-"))
   (activity-type (common-lisp:error ":activitytype is required") :type
    (common-lisp:or activity-type common-lisp:null))
   (activity-id (common-lisp:error ":activityid is required") :type
    (common-lisp:or activity-id common-lisp:null))
   (control common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (input common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (schedule-to-close-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null))
   (task-list common-lisp:nil :type
    (common-lisp:or task-list common-lisp:null))
   (task-priority common-lisp:nil :type
    (common-lisp:or task-priority common-lisp:null))
   (schedule-to-start-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null))
   (start-to-close-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null))
   (heartbeat-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'schedule-activity-task-decision-attributes
                    'make-schedule-activity-task-decision-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schedule-activity-task-decision-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schedule-activity-task-decision-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-type))
      (common-lisp:list
       (common-lisp:cons "activityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-id))
      (common-lisp:list
       (common-lisp:cons "activityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control))
      (common-lisp:list
       (common-lisp:cons "control"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schedule-to-close-timeout))
      (common-lisp:list
       (common-lisp:cons "scheduleToCloseTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-list))
      (common-lisp:list
       (common-lisp:cons "taskList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-priority))
      (common-lisp:list
       (common-lisp:cons "taskPriority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schedule-to-start-timeout))
      (common-lisp:list
       (common-lisp:cons "scheduleToStartTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-to-close-timeout))
      (common-lisp:list
       (common-lisp:cons "startToCloseTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'heartbeat-timeout))
      (common-lisp:list
       (common-lisp:cons "heartbeatTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schedule-activity-task-decision-attributes))
   common-lisp:nil))
(common-lisp:deftype schedule-activity-task-failed-cause () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (schedule-activity-task-failed-event-attributes (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-schedule-activity-task-failed-event-attributes-"))
   (activity-type (common-lisp:error ":activitytype is required") :type
    (common-lisp:or activity-type common-lisp:null))
   (activity-id (common-lisp:error ":activityid is required") :type
    (common-lisp:or activity-id common-lisp:null))
   (cause (common-lisp:error ":cause is required") :type
    (common-lisp:or schedule-activity-task-failed-cause common-lisp:null))
   (decision-task-completed-event-id
    (common-lisp:error ":decisiontaskcompletedeventid is required") :type
    (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'schedule-activity-task-failed-event-attributes
                    'make-schedule-activity-task-failed-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schedule-activity-task-failed-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schedule-activity-task-failed-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-type))
      (common-lisp:list
       (common-lisp:cons "activityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-id))
      (common-lisp:list
       (common-lisp:cons "activityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decision-task-completed-event-id))
      (common-lisp:list
       (common-lisp:cons "decisionTaskCompletedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schedule-activity-task-failed-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (schedule-lambda-function-decision-attributes (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-schedule-lambda-function-decision-attributes-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or function-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or function-name common-lisp:null))
   (control common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (input common-lisp:nil :type
    (common-lisp:or function-input common-lisp:null))
   (start-to-close-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'schedule-lambda-function-decision-attributes
                    'make-schedule-lambda-function-decision-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schedule-lambda-function-decision-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schedule-lambda-function-decision-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control))
      (common-lisp:list
       (common-lisp:cons "control"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-to-close-timeout))
      (common-lisp:list
       (common-lisp:cons "startToCloseTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schedule-lambda-function-decision-attributes))
   common-lisp:nil))
(common-lisp:deftype schedule-lambda-function-failed-cause ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (schedule-lambda-function-failed-event-attributes
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-schedule-lambda-function-failed-event-attributes-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or function-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or function-name common-lisp:null))
   (cause (common-lisp:error ":cause is required") :type
    (common-lisp:or schedule-lambda-function-failed-cause common-lisp:null))
   (decision-task-completed-event-id
    (common-lisp:error ":decisiontaskcompletedeventid is required") :type
    (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'schedule-lambda-function-failed-event-attributes
                    'make-schedule-lambda-function-failed-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schedule-lambda-function-failed-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schedule-lambda-function-failed-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decision-task-completed-event-id))
      (common-lisp:list
       (common-lisp:cons "decisionTaskCompletedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schedule-lambda-function-failed-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (signal-external-workflow-execution-decision-attributes
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-signal-external-workflow-execution-decision-attributes-"))
   (workflow-id (common-lisp:error ":workflowid is required") :type
    (common-lisp:or workflow-id common-lisp:null))
   (run-id common-lisp:nil :type
    (common-lisp:or workflow-run-id-optional common-lisp:null))
   (signal-name (common-lisp:error ":signalname is required") :type
    (common-lisp:or signal-name common-lisp:null))
   (input common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (control common-lisp:nil :type (common-lisp:or data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'signal-external-workflow-execution-decision-attributes
                    'make-signal-external-workflow-execution-decision-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          signal-external-workflow-execution-decision-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          signal-external-workflow-execution-decision-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "workflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "runId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal-name))
      (common-lisp:list
       (common-lisp:cons "signalName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control))
      (common-lisp:list
       (common-lisp:cons "control"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          signal-external-workflow-execution-decision-attributes))
   common-lisp:nil))
(common-lisp:deftype signal-external-workflow-execution-failed-cause ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (signal-external-workflow-execution-failed-event-attributes
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-signal-external-workflow-execution-failed-event-attributes-"))
   (workflow-id (common-lisp:error ":workflowid is required") :type
    (common-lisp:or workflow-id common-lisp:null))
   (run-id common-lisp:nil :type
    (common-lisp:or workflow-run-id-optional common-lisp:null))
   (cause (common-lisp:error ":cause is required") :type
    (common-lisp:or signal-external-workflow-execution-failed-cause
                    common-lisp:null))
   (initiated-event-id (common-lisp:error ":initiatedeventid is required")
    :type (common-lisp:or event-id common-lisp:null))
   (decision-task-completed-event-id
    (common-lisp:error ":decisiontaskcompletedeventid is required") :type
    (common-lisp:or event-id common-lisp:null))
   (control common-lisp:nil :type (common-lisp:or data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'signal-external-workflow-execution-failed-event-attributes
                    'make-signal-external-workflow-execution-failed-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          signal-external-workflow-execution-failed-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          signal-external-workflow-execution-failed-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "workflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "runId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiated-event-id))
      (common-lisp:list
       (common-lisp:cons "initiatedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decision-task-completed-event-id))
      (common-lisp:list
       (common-lisp:cons "decisionTaskCompletedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control))
      (common-lisp:list
       (common-lisp:cons "control"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          signal-external-workflow-execution-failed-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (signal-external-workflow-execution-initiated-event-attributes
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-signal-external-workflow-execution-initiated-event-attributes-"))
   (workflow-id (common-lisp:error ":workflowid is required") :type
    (common-lisp:or workflow-id common-lisp:null))
   (run-id common-lisp:nil :type
    (common-lisp:or workflow-run-id-optional common-lisp:null))
   (signal-name (common-lisp:error ":signalname is required") :type
    (common-lisp:or signal-name common-lisp:null))
   (input common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (decision-task-completed-event-id
    (common-lisp:error ":decisiontaskcompletedeventid is required") :type
    (common-lisp:or event-id common-lisp:null))
   (control common-lisp:nil :type (common-lisp:or data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'signal-external-workflow-execution-initiated-event-attributes
   'make-signal-external-workflow-execution-initiated-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          signal-external-workflow-execution-initiated-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          signal-external-workflow-execution-initiated-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "workflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "runId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal-name))
      (common-lisp:list
       (common-lisp:cons "signalName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decision-task-completed-event-id))
      (common-lisp:list
       (common-lisp:cons "decisionTaskCompletedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control))
      (common-lisp:list
       (common-lisp:cons "control"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          signal-external-workflow-execution-initiated-event-attributes))
   common-lisp:nil))
(common-lisp:deftype signal-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (signal-workflow-execution-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-signal-workflow-execution-input-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (workflow-id (common-lisp:error ":workflowid is required") :type
    (common-lisp:or workflow-id common-lisp:null))
   (run-id common-lisp:nil :type
    (common-lisp:or workflow-run-id-optional common-lisp:null))
   (signal-name (common-lisp:error ":signalname is required") :type
    (common-lisp:or signal-name common-lisp:null))
   (input common-lisp:nil :type (common-lisp:or data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'signal-workflow-execution-input
                    'make-signal-workflow-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          signal-workflow-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          signal-workflow-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "workflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "runId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal-name))
      (common-lisp:list
       (common-lisp:cons "signalName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          signal-workflow-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-child-workflow-execution-decision-attributes
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-start-child-workflow-execution-decision-attributes-"))
   (workflow-type (common-lisp:error ":workflowtype is required") :type
    (common-lisp:or workflow-type common-lisp:null))
   (workflow-id (common-lisp:error ":workflowid is required") :type
    (common-lisp:or workflow-id common-lisp:null))
   (control common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (input common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (execution-start-to-close-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null))
   (task-list common-lisp:nil :type
    (common-lisp:or task-list common-lisp:null))
   (task-priority common-lisp:nil :type
    (common-lisp:or task-priority common-lisp:null))
   (task-start-to-close-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null))
   (child-policy common-lisp:nil :type
    (common-lisp:or child-policy common-lisp:null))
   (tag-list common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (lambda-role common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-child-workflow-execution-decision-attributes
                    'make-start-child-workflow-execution-decision-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-child-workflow-execution-decision-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-child-workflow-execution-decision-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-type))
      (common-lisp:list
       (common-lisp:cons "workflowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "workflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control))
      (common-lisp:list
       (common-lisp:cons "control"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-start-to-close-timeout))
      (common-lisp:list
       (common-lisp:cons "executionStartToCloseTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-list))
      (common-lisp:list
       (common-lisp:cons "taskList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-priority))
      (common-lisp:list
       (common-lisp:cons "taskPriority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'task-start-to-close-timeout))
      (common-lisp:list
       (common-lisp:cons "taskStartToCloseTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-policy))
      (common-lisp:list
       (common-lisp:cons "childPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "tagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-role))
      (common-lisp:list
       (common-lisp:cons "lambdaRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-child-workflow-execution-decision-attributes))
   common-lisp:nil))
(common-lisp:deftype start-child-workflow-execution-failed-cause ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-child-workflow-execution-failed-event-attributes
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-start-child-workflow-execution-failed-event-attributes-"))
   (workflow-type (common-lisp:error ":workflowtype is required") :type
    (common-lisp:or workflow-type common-lisp:null))
   (cause (common-lisp:error ":cause is required") :type
    (common-lisp:or start-child-workflow-execution-failed-cause
                    common-lisp:null))
   (workflow-id (common-lisp:error ":workflowid is required") :type
    (common-lisp:or workflow-id common-lisp:null))
   (initiated-event-id (common-lisp:error ":initiatedeventid is required")
    :type (common-lisp:or event-id common-lisp:null))
   (decision-task-completed-event-id
    (common-lisp:error ":decisiontaskcompletedeventid is required") :type
    (common-lisp:or event-id common-lisp:null))
   (control common-lisp:nil :type (common-lisp:or data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-child-workflow-execution-failed-event-attributes
                    'make-start-child-workflow-execution-failed-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-child-workflow-execution-failed-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-child-workflow-execution-failed-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-type))
      (common-lisp:list
       (common-lisp:cons "workflowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "workflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiated-event-id))
      (common-lisp:list
       (common-lisp:cons "initiatedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decision-task-completed-event-id))
      (common-lisp:list
       (common-lisp:cons "decisionTaskCompletedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control))
      (common-lisp:list
       (common-lisp:cons "control"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-child-workflow-execution-failed-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-child-workflow-execution-initiated-event-attributes
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-start-child-workflow-execution-initiated-event-attributes-"))
   (workflow-id (common-lisp:error ":workflowid is required") :type
    (common-lisp:or workflow-id common-lisp:null))
   (workflow-type (common-lisp:error ":workflowtype is required") :type
    (common-lisp:or workflow-type common-lisp:null))
   (control common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (input common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (execution-start-to-close-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null))
   (task-list (common-lisp:error ":tasklist is required") :type
    (common-lisp:or task-list common-lisp:null))
   (task-priority common-lisp:nil :type
    (common-lisp:or task-priority common-lisp:null))
   (decision-task-completed-event-id
    (common-lisp:error ":decisiontaskcompletedeventid is required") :type
    (common-lisp:or event-id common-lisp:null))
   (child-policy (common-lisp:error ":childpolicy is required") :type
    (common-lisp:or child-policy common-lisp:null))
   (task-start-to-close-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null))
   (tag-list common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (lambda-role common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-child-workflow-execution-initiated-event-attributes
                    'make-start-child-workflow-execution-initiated-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-child-workflow-execution-initiated-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-child-workflow-execution-initiated-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "workflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-type))
      (common-lisp:list
       (common-lisp:cons "workflowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control))
      (common-lisp:list
       (common-lisp:cons "control"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-start-to-close-timeout))
      (common-lisp:list
       (common-lisp:cons "executionStartToCloseTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-list))
      (common-lisp:list
       (common-lisp:cons "taskList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-priority))
      (common-lisp:list
       (common-lisp:cons "taskPriority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decision-task-completed-event-id))
      (common-lisp:list
       (common-lisp:cons "decisionTaskCompletedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-policy))
      (common-lisp:list
       (common-lisp:cons "childPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'task-start-to-close-timeout))
      (common-lisp:list
       (common-lisp:cons "taskStartToCloseTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "tagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-role))
      (common-lisp:list
       (common-lisp:cons "lambdaRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-child-workflow-execution-initiated-event-attributes))
   common-lisp:nil))
(common-lisp:deftype start-lambda-function-failed-cause () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-lambda-function-failed-event-attributes (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-start-lambda-function-failed-event-attributes-"))
   (scheduled-event-id common-lisp:nil :type
    (common-lisp:or event-id common-lisp:null))
   (cause common-lisp:nil :type
    (common-lisp:or start-lambda-function-failed-cause common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or cause-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-lambda-function-failed-event-attributes
                    'make-start-lambda-function-failed-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-lambda-function-failed-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-lambda-function-failed-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-event-id))
      (common-lisp:list
       (common-lisp:cons "scheduledEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-lambda-function-failed-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-timer-decision-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-timer-decision-attributes-"))
   (timer-id (common-lisp:error ":timerid is required") :type
    (common-lisp:or timer-id common-lisp:null))
   (control common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (start-to-fire-timeout (common-lisp:error ":starttofiretimeout is required")
    :type (common-lisp:or duration-in-seconds common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-timer-decision-attributes
                    'make-start-timer-decision-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-timer-decision-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-timer-decision-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timer-id))
      (common-lisp:list
       (common-lisp:cons "timerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control))
      (common-lisp:list
       (common-lisp:cons "control"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-to-fire-timeout))
      (common-lisp:list
       (common-lisp:cons "startToFireTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-timer-decision-attributes))
   common-lisp:nil))
(common-lisp:deftype start-timer-failed-cause () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-timer-failed-event-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-timer-failed-event-attributes-"))
   (timer-id (common-lisp:error ":timerid is required") :type
    (common-lisp:or timer-id common-lisp:null))
   (cause (common-lisp:error ":cause is required") :type
    (common-lisp:or start-timer-failed-cause common-lisp:null))
   (decision-task-completed-event-id
    (common-lisp:error ":decisiontaskcompletedeventid is required") :type
    (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-timer-failed-event-attributes
                    'make-start-timer-failed-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-timer-failed-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-timer-failed-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timer-id))
      (common-lisp:list
       (common-lisp:cons "timerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decision-task-completed-event-id))
      (common-lisp:list
       (common-lisp:cons "decisionTaskCompletedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-timer-failed-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-workflow-execution-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-workflow-execution-input-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (workflow-id (common-lisp:error ":workflowid is required") :type
    (common-lisp:or workflow-id common-lisp:null))
   (workflow-type (common-lisp:error ":workflowtype is required") :type
    (common-lisp:or workflow-type common-lisp:null))
   (task-list common-lisp:nil :type
    (common-lisp:or task-list common-lisp:null))
   (task-priority common-lisp:nil :type
    (common-lisp:or task-priority common-lisp:null))
   (input common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (execution-start-to-close-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null))
   (tag-list common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (task-start-to-close-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null))
   (child-policy common-lisp:nil :type
    (common-lisp:or child-policy common-lisp:null))
   (lambda-role common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-workflow-execution-input
                    'make-start-workflow-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-workflow-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-workflow-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "workflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-type))
      (common-lisp:list
       (common-lisp:cons "workflowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-list))
      (common-lisp:list
       (common-lisp:cons "taskList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-priority))
      (common-lisp:list
       (common-lisp:cons "taskPriority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-start-to-close-timeout))
      (common-lisp:list
       (common-lisp:cons "executionStartToCloseTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "tagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'task-start-to-close-timeout))
      (common-lisp:list
       (common-lisp:cons "taskStartToCloseTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-policy))
      (common-lisp:list
       (common-lisp:cons "childPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-role))
      (common-lisp:list
       (common-lisp:cons "lambdaRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-workflow-execution-input))
   common-lisp:nil))
(common-lisp:deftype tag () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-filter-"))
   (tag (common-lisp:error ":tag is required") :type
    (common-lisp:or tag common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag-filter 'make-tag-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag))
      (common-lisp:list
       (common-lisp:cons "tag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-input-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or resource-tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (task-list (:copier common-lisp:nil)
      (:conc-name "struct-shape-task-list-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'task-list 'make-task-list))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input task-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input task-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input task-list))
   common-lisp:nil))
(common-lisp:deftype task-priority () 'common-lisp:string)
(common-lisp:deftype task-token () 'common-lisp:string)
(common-lisp:deftype terminate-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (terminate-workflow-execution-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-terminate-workflow-execution-input-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (workflow-id (common-lisp:error ":workflowid is required") :type
    (common-lisp:or workflow-id common-lisp:null))
   (run-id common-lisp:nil :type
    (common-lisp:or workflow-run-id-optional common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or terminate-reason common-lisp:null))
   (details common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (child-policy common-lisp:nil :type
    (common-lisp:or child-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'terminate-workflow-execution-input
                    'make-terminate-workflow-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-workflow-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-workflow-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "workflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "runId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-policy))
      (common-lisp:list
       (common-lisp:cons "childPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-workflow-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (timer-canceled-event-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-timer-canceled-event-attributes-"))
   (timer-id (common-lisp:error ":timerid is required") :type
    (common-lisp:or timer-id common-lisp:null))
   (started-event-id (common-lisp:error ":startedeventid is required") :type
    (common-lisp:or event-id common-lisp:null))
   (decision-task-completed-event-id
    (common-lisp:error ":decisiontaskcompletedeventid is required") :type
    (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'timer-canceled-event-attributes
                    'make-timer-canceled-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          timer-canceled-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          timer-canceled-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timer-id))
      (common-lisp:list
       (common-lisp:cons "timerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-event-id))
      (common-lisp:list
       (common-lisp:cons "startedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decision-task-completed-event-id))
      (common-lisp:list
       (common-lisp:cons "decisionTaskCompletedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          timer-canceled-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (timer-fired-event-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-timer-fired-event-attributes-"))
   (timer-id (common-lisp:error ":timerid is required") :type
    (common-lisp:or timer-id common-lisp:null))
   (started-event-id (common-lisp:error ":startedeventid is required") :type
    (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'timer-fired-event-attributes
                    'make-timer-fired-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          timer-fired-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          timer-fired-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timer-id))
      (common-lisp:list
       (common-lisp:cons "timerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-event-id))
      (common-lisp:list
       (common-lisp:cons "startedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          timer-fired-event-attributes))
   common-lisp:nil))
(common-lisp:deftype timer-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (timer-started-event-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-timer-started-event-attributes-"))
   (timer-id (common-lisp:error ":timerid is required") :type
    (common-lisp:or timer-id common-lisp:null))
   (control common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (start-to-fire-timeout (common-lisp:error ":starttofiretimeout is required")
    :type (common-lisp:or duration-in-seconds common-lisp:null))
   (decision-task-completed-event-id
    (common-lisp:error ":decisiontaskcompletedeventid is required") :type
    (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'timer-started-event-attributes
                    'make-timer-started-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          timer-started-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          timer-started-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timer-id))
      (common-lisp:list
       (common-lisp:cons "timerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control))
      (common-lisp:list
       (common-lisp:cons "control"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-to-fire-timeout))
      (common-lisp:list
       (common-lisp:cons "startToFireTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decision-task-completed-event-id))
      (common-lisp:list
       (common-lisp:cons "decisionTaskCompletedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          timer-started-event-attributes))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-fault
     (swf-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-fault-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-fault 'too-many-tags-fault-message)))
(common-lisp:deftype truncated () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition type-already-exists-fault
     (swf-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       type-already-exists-fault-message)))
 (common-lisp:export
  (common-lisp:list 'type-already-exists-fault
                    'type-already-exists-fault-message)))
(common-lisp:progn
 (common-lisp:define-condition type-deprecated-fault
     (swf-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       type-deprecated-fault-message)))
 (common-lisp:export
  (common-lisp:list 'type-deprecated-fault 'type-deprecated-fault-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (undeprecate-activity-type-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-undeprecate-activity-type-input-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (activity-type (common-lisp:error ":activitytype is required") :type
    (common-lisp:or activity-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'undeprecate-activity-type-input
                    'make-undeprecate-activity-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          undeprecate-activity-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          undeprecate-activity-type-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-type))
      (common-lisp:list
       (common-lisp:cons "activityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          undeprecate-activity-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (undeprecate-domain-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-undeprecate-domain-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or domain-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'undeprecate-domain-input 'make-undeprecate-domain-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          undeprecate-domain-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          undeprecate-domain-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          undeprecate-domain-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (undeprecate-workflow-type-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-undeprecate-workflow-type-input-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (workflow-type (common-lisp:error ":workflowtype is required") :type
    (common-lisp:or workflow-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'undeprecate-workflow-type-input
                    'make-undeprecate-workflow-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          undeprecate-workflow-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          undeprecate-workflow-type-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-type))
      (common-lisp:list
       (common-lisp:cons "workflowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          undeprecate-workflow-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition unknown-resource-fault
     (swf-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unknown-resource-fault-message)))
 (common-lisp:export
  (common-lisp:list 'unknown-resource-fault 'unknown-resource-fault-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-input-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or resource-tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "tagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:deftype version () 'common-lisp:string)
(common-lisp:deftype version-optional () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-execution (:copier common-lisp:nil)
      (:conc-name "struct-shape-workflow-execution-"))
   (workflow-id (common-lisp:error ":workflowid is required") :type
    (common-lisp:or workflow-id common-lisp:null))
   (run-id (common-lisp:error ":runid is required") :type
    (common-lisp:or workflow-run-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workflow-execution 'make-workflow-execution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow-execution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow-execution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "workflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "runId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow-execution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition workflow-execution-already-started-fault
     (swf-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       workflow-execution-already-started-fault-message)))
 (common-lisp:export
  (common-lisp:list 'workflow-execution-already-started-fault
                    'workflow-execution-already-started-fault-message)))
(common-lisp:deftype workflow-execution-cancel-requested-cause ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-execution-cancel-requested-event-attributes
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-workflow-execution-cancel-requested-event-attributes-"))
   (external-workflow-execution common-lisp:nil :type
    (common-lisp:or workflow-execution common-lisp:null))
   (external-initiated-event-id common-lisp:nil :type
    (common-lisp:or event-id common-lisp:null))
   (cause common-lisp:nil :type
    (common-lisp:or workflow-execution-cancel-requested-cause
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workflow-execution-cancel-requested-event-attributes
                    'make-workflow-execution-cancel-requested-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-cancel-requested-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-cancel-requested-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-workflow-execution))
      (common-lisp:list
       (common-lisp:cons "externalWorkflowExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-initiated-event-id))
      (common-lisp:list
       (common-lisp:cons "externalInitiatedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-cancel-requested-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-execution-canceled-event-attributes (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-workflow-execution-canceled-event-attributes-"))
   (details common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (decision-task-completed-event-id
    (common-lisp:error ":decisiontaskcompletedeventid is required") :type
    (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workflow-execution-canceled-event-attributes
                    'make-workflow-execution-canceled-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-canceled-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-canceled-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decision-task-completed-event-id))
      (common-lisp:list
       (common-lisp:cons "decisionTaskCompletedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-canceled-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-execution-completed-event-attributes (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-workflow-execution-completed-event-attributes-"))
   (result common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (decision-task-completed-event-id
    (common-lisp:error ":decisiontaskcompletedeventid is required") :type
    (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workflow-execution-completed-event-attributes
                    'make-workflow-execution-completed-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-completed-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-completed-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decision-task-completed-event-id))
      (common-lisp:list
       (common-lisp:cons "decisionTaskCompletedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-completed-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-execution-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-workflow-execution-configuration-"))
   (task-start-to-close-timeout
    (common-lisp:error ":taskstarttoclosetimeout is required") :type
    (common-lisp:or duration-in-seconds common-lisp:null))
   (execution-start-to-close-timeout
    (common-lisp:error ":executionstarttoclosetimeout is required") :type
    (common-lisp:or duration-in-seconds common-lisp:null))
   (task-list (common-lisp:error ":tasklist is required") :type
    (common-lisp:or task-list common-lisp:null))
   (task-priority common-lisp:nil :type
    (common-lisp:or task-priority common-lisp:null))
   (child-policy (common-lisp:error ":childpolicy is required") :type
    (common-lisp:or child-policy common-lisp:null))
   (lambda-role common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workflow-execution-configuration
                    'make-workflow-execution-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'task-start-to-close-timeout))
      (common-lisp:list
       (common-lisp:cons "taskStartToCloseTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-start-to-close-timeout))
      (common-lisp:list
       (common-lisp:cons "executionStartToCloseTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-list))
      (common-lisp:list
       (common-lisp:cons "taskList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-priority))
      (common-lisp:list
       (common-lisp:cons "taskPriority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-policy))
      (common-lisp:list
       (common-lisp:cons "childPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-role))
      (common-lisp:list
       (common-lisp:cons "lambdaRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-execution-continued-as-new-event-attributes
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-workflow-execution-continued-as-new-event-attributes-"))
   (input common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (decision-task-completed-event-id
    (common-lisp:error ":decisiontaskcompletedeventid is required") :type
    (common-lisp:or event-id common-lisp:null))
   (new-execution-run-id (common-lisp:error ":newexecutionrunid is required")
    :type (common-lisp:or workflow-run-id common-lisp:null))
   (execution-start-to-close-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null))
   (task-list (common-lisp:error ":tasklist is required") :type
    (common-lisp:or task-list common-lisp:null))
   (task-priority common-lisp:nil :type
    (common-lisp:or task-priority common-lisp:null))
   (task-start-to-close-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null))
   (child-policy (common-lisp:error ":childpolicy is required") :type
    (common-lisp:or child-policy common-lisp:null))
   (tag-list common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (workflow-type (common-lisp:error ":workflowtype is required") :type
    (common-lisp:or workflow-type common-lisp:null))
   (lambda-role common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workflow-execution-continued-as-new-event-attributes
                    'make-workflow-execution-continued-as-new-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-continued-as-new-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-continued-as-new-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decision-task-completed-event-id))
      (common-lisp:list
       (common-lisp:cons "decisionTaskCompletedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-execution-run-id))
      (common-lisp:list
       (common-lisp:cons "newExecutionRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-start-to-close-timeout))
      (common-lisp:list
       (common-lisp:cons "executionStartToCloseTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-list))
      (common-lisp:list
       (common-lisp:cons "taskList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-priority))
      (common-lisp:list
       (common-lisp:cons "taskPriority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'task-start-to-close-timeout))
      (common-lisp:list
       (common-lisp:cons "taskStartToCloseTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-policy))
      (common-lisp:list
       (common-lisp:cons "childPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "tagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-type))
      (common-lisp:list
       (common-lisp:cons "workflowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-role))
      (common-lisp:list
       (common-lisp:cons "lambdaRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-continued-as-new-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-execution-count (:copier common-lisp:nil)
      (:conc-name "struct-shape-workflow-execution-count-"))
   (count (common-lisp:error ":count is required") :type
    (common-lisp:or count common-lisp:null))
   (truncated common-lisp:nil :type
    (common-lisp:or truncated common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workflow-execution-count 'make-workflow-execution-count))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-count))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-count))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'truncated))
      (common-lisp:list
       (common-lisp:cons "truncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-count))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-execution-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-workflow-execution-detail-"))
   (execution-info (common-lisp:error ":executioninfo is required") :type
    (common-lisp:or workflow-execution-info common-lisp:null))
   (execution-configuration
    (common-lisp:error ":executionconfiguration is required") :type
    (common-lisp:or workflow-execution-configuration common-lisp:null))
   (open-counts (common-lisp:error ":opencounts is required") :type
    (common-lisp:or workflow-execution-open-counts common-lisp:null))
   (latest-activity-task-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (latest-execution-context common-lisp:nil :type
    (common-lisp:or data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workflow-execution-detail
                    'make-workflow-execution-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-info))
      (common-lisp:list
       (common-lisp:cons "executionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-configuration))
      (common-lisp:list
       (common-lisp:cons "executionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-counts))
      (common-lisp:list
       (common-lisp:cons "openCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-activity-task-timestamp))
      (common-lisp:list
       (common-lisp:cons "latestActivityTaskTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-execution-context))
      (common-lisp:list
       (common-lisp:cons "latestExecutionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-execution-failed-event-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-workflow-execution-failed-event-attributes-"))
   (reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (details common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (decision-task-completed-event-id
    (common-lisp:error ":decisiontaskcompletedeventid is required") :type
    (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workflow-execution-failed-event-attributes
                    'make-workflow-execution-failed-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-failed-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-failed-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decision-task-completed-event-id))
      (common-lisp:list
       (common-lisp:cons "decisionTaskCompletedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-failed-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-execution-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-workflow-execution-filter-"))
   (workflow-id (common-lisp:error ":workflowid is required") :type
    (common-lisp:or workflow-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workflow-execution-filter
                    'make-workflow-execution-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "workflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-execution-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-workflow-execution-info-"))
   (execution (common-lisp:error ":execution is required") :type
    (common-lisp:or workflow-execution common-lisp:null))
   (workflow-type (common-lisp:error ":workflowtype is required") :type
    (common-lisp:or workflow-type common-lisp:null))
   (start-timestamp (common-lisp:error ":starttimestamp is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (close-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (execution-status (common-lisp:error ":executionstatus is required") :type
    (common-lisp:or execution-status common-lisp:null))
   (close-status common-lisp:nil :type
    (common-lisp:or close-status common-lisp:null))
   (parent common-lisp:nil :type
    (common-lisp:or workflow-execution common-lisp:null))
   (tag-list common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (cancel-requested common-lisp:nil :type
    (common-lisp:or canceled common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workflow-execution-info 'make-workflow-execution-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution))
      (common-lisp:list
       (common-lisp:cons "execution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-type))
      (common-lisp:list
       (common-lisp:cons "workflowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-timestamp))
      (common-lisp:list
       (common-lisp:cons "startTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'close-timestamp))
      (common-lisp:list
       (common-lisp:cons "closeTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-status))
      (common-lisp:list
       (common-lisp:cons "executionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'close-status))
      (common-lisp:list
       (common-lisp:cons "closeStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent))
      (common-lisp:list
       (common-lisp:cons "parent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "tagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cancel-requested))
      (common-lisp:list
       (common-lisp:cons "cancelRequested"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype workflow-execution-info-list ()
   '(trivial-types:proper-list workflow-execution-info))
 (common-lisp:defun |make-workflow-execution-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workflow-execution-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-execution-infos (:copier common-lisp:nil)
      (:conc-name "struct-shape-workflow-execution-infos-"))
   (execution-infos (common-lisp:error ":executioninfos is required") :type
    (common-lisp:or workflow-execution-info-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workflow-execution-infos 'make-workflow-execution-infos))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-infos))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-infos))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-infos))
      (common-lisp:list
       (common-lisp:cons "executionInfos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-infos))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-execution-open-counts (:copier common-lisp:nil)
      (:conc-name "struct-shape-workflow-execution-open-counts-"))
   (open-activity-tasks (common-lisp:error ":openactivitytasks is required")
    :type (common-lisp:or count common-lisp:null))
   (open-decision-tasks (common-lisp:error ":opendecisiontasks is required")
    :type (common-lisp:or open-decision-tasks-count common-lisp:null))
   (open-timers (common-lisp:error ":opentimers is required") :type
    (common-lisp:or count common-lisp:null))
   (open-child-workflow-executions
    (common-lisp:error ":openchildworkflowexecutions is required") :type
    (common-lisp:or count common-lisp:null))
   (open-lambda-functions common-lisp:nil :type
    (common-lisp:or count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workflow-execution-open-counts
                    'make-workflow-execution-open-counts))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-open-counts))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-open-counts))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-activity-tasks))
      (common-lisp:list
       (common-lisp:cons "openActivityTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-decision-tasks))
      (common-lisp:list
       (common-lisp:cons "openDecisionTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-timers))
      (common-lisp:list
       (common-lisp:cons "openTimers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-child-workflow-executions))
      (common-lisp:list
       (common-lisp:cons "openChildWorkflowExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-lambda-functions))
      (common-lisp:list
       (common-lisp:cons "openLambdaFunctions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-open-counts))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-execution-signaled-event-attributes (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-workflow-execution-signaled-event-attributes-"))
   (signal-name (common-lisp:error ":signalname is required") :type
    (common-lisp:or signal-name common-lisp:null))
   (input common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (external-workflow-execution common-lisp:nil :type
    (common-lisp:or workflow-execution common-lisp:null))
   (external-initiated-event-id common-lisp:nil :type
    (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workflow-execution-signaled-event-attributes
                    'make-workflow-execution-signaled-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-signaled-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-signaled-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal-name))
      (common-lisp:list
       (common-lisp:cons "signalName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-workflow-execution))
      (common-lisp:list
       (common-lisp:cons "externalWorkflowExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-initiated-event-id))
      (common-lisp:list
       (common-lisp:cons "externalInitiatedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-signaled-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-execution-started-event-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-workflow-execution-started-event-attributes-"))
   (input common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (execution-start-to-close-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null))
   (task-start-to-close-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null))
   (child-policy (common-lisp:error ":childpolicy is required") :type
    (common-lisp:or child-policy common-lisp:null))
   (task-list (common-lisp:error ":tasklist is required") :type
    (common-lisp:or task-list common-lisp:null))
   (task-priority common-lisp:nil :type
    (common-lisp:or task-priority common-lisp:null))
   (workflow-type (common-lisp:error ":workflowtype is required") :type
    (common-lisp:or workflow-type common-lisp:null))
   (tag-list common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (continued-execution-run-id common-lisp:nil :type
    (common-lisp:or workflow-run-id-optional common-lisp:null))
   (parent-workflow-execution common-lisp:nil :type
    (common-lisp:or workflow-execution common-lisp:null))
   (parent-initiated-event-id common-lisp:nil :type
    (common-lisp:or event-id common-lisp:null))
   (lambda-role common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workflow-execution-started-event-attributes
                    'make-workflow-execution-started-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-started-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-started-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-start-to-close-timeout))
      (common-lisp:list
       (common-lisp:cons "executionStartToCloseTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'task-start-to-close-timeout))
      (common-lisp:list
       (common-lisp:cons "taskStartToCloseTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-policy))
      (common-lisp:list
       (common-lisp:cons "childPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-list))
      (common-lisp:list
       (common-lisp:cons "taskList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-priority))
      (common-lisp:list
       (common-lisp:cons "taskPriority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-type))
      (common-lisp:list
       (common-lisp:cons "workflowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "tagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'continued-execution-run-id))
      (common-lisp:list
       (common-lisp:cons "continuedExecutionRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-workflow-execution))
      (common-lisp:list
       (common-lisp:cons "parentWorkflowExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-initiated-event-id))
      (common-lisp:list
       (common-lisp:cons "parentInitiatedEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-role))
      (common-lisp:list
       (common-lisp:cons "lambdaRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-started-event-attributes))
   common-lisp:nil))
(common-lisp:deftype workflow-execution-terminated-cause () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-execution-terminated-event-attributes (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-workflow-execution-terminated-event-attributes-"))
   (reason common-lisp:nil :type
    (common-lisp:or terminate-reason common-lisp:null))
   (details common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (child-policy (common-lisp:error ":childpolicy is required") :type
    (common-lisp:or child-policy common-lisp:null))
   (cause common-lisp:nil :type
    (common-lisp:or workflow-execution-terminated-cause common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workflow-execution-terminated-event-attributes
                    'make-workflow-execution-terminated-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-terminated-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-terminated-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-policy))
      (common-lisp:list
       (common-lisp:cons "childPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-terminated-event-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-execution-timed-out-event-attributes (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-workflow-execution-timed-out-event-attributes-"))
   (timeout-type (common-lisp:error ":timeouttype is required") :type
    (common-lisp:or workflow-execution-timeout-type common-lisp:null))
   (child-policy (common-lisp:error ":childpolicy is required") :type
    (common-lisp:or child-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workflow-execution-timed-out-event-attributes
                    'make-workflow-execution-timed-out-event-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-timed-out-event-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-timed-out-event-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-type))
      (common-lisp:list
       (common-lisp:cons "timeoutType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-policy))
      (common-lisp:list
       (common-lisp:cons "childPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-timed-out-event-attributes))
   common-lisp:nil))
(common-lisp:deftype workflow-execution-timeout-type () 'common-lisp:string)
(common-lisp:deftype workflow-id () 'common-lisp:string)
(common-lisp:deftype workflow-run-id () 'common-lisp:string)
(common-lisp:deftype workflow-run-id-optional () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-workflow-type-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or version common-lisp:null)))
 (common-lisp:export (common-lisp:list 'workflow-type 'make-workflow-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-type-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-workflow-type-configuration-"))
   (default-task-start-to-close-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null))
   (default-execution-start-to-close-timeout common-lisp:nil :type
    (common-lisp:or duration-in-seconds-optional common-lisp:null))
   (default-task-list common-lisp:nil :type
    (common-lisp:or task-list common-lisp:null))
   (default-task-priority common-lisp:nil :type
    (common-lisp:or task-priority common-lisp:null))
   (default-child-policy common-lisp:nil :type
    (common-lisp:or child-policy common-lisp:null))
   (default-lambda-role common-lisp:nil :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workflow-type-configuration
                    'make-workflow-type-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workflow-type-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workflow-type-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-task-start-to-close-timeout))
      (common-lisp:list
       (common-lisp:cons "defaultTaskStartToCloseTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-execution-start-to-close-timeout))
      (common-lisp:list
       (common-lisp:cons "defaultExecutionStartToCloseTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-task-list))
      (common-lisp:list
       (common-lisp:cons "defaultTaskList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-task-priority))
      (common-lisp:list
       (common-lisp:cons "defaultTaskPriority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-child-policy))
      (common-lisp:list
       (common-lisp:cons "defaultChildPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-lambda-role))
      (common-lisp:list
       (common-lisp:cons "defaultLambdaRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workflow-type-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-type-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-workflow-type-detail-"))
   (type-info (common-lisp:error ":typeinfo is required") :type
    (common-lisp:or workflow-type-info common-lisp:null))
   (configuration (common-lisp:error ":configuration is required") :type
    (common-lisp:or workflow-type-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workflow-type-detail 'make-workflow-type-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow-type-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow-type-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-info))
      (common-lisp:list
       (common-lisp:cons "typeInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow-type-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-type-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-workflow-type-filter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or version-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workflow-type-filter 'make-workflow-type-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow-type-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow-type-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow-type-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-type-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-workflow-type-info-"))
   (workflow-type (common-lisp:error ":workflowtype is required") :type
    (common-lisp:or workflow-type common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or registration-status common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (creation-date (common-lisp:error ":creationdate is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (deprecation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workflow-type-info 'make-workflow-type-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow-type-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow-type-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-type))
      (common-lisp:list
       (common-lisp:cons "workflowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deprecation-date))
      (common-lisp:list
       (common-lisp:cons "deprecationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow-type-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype workflow-type-info-list ()
   '(trivial-types:proper-list workflow-type-info))
 (common-lisp:defun |make-workflow-type-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workflow-type-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-type-infos (:copier common-lisp:nil)
      (:conc-name "struct-shape-workflow-type-infos-"))
   (type-infos (common-lisp:error ":typeinfos is required") :type
    (common-lisp:or workflow-type-info-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workflow-type-infos 'make-workflow-type-infos))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow-type-infos))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow-type-infos))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-infos))
      (common-lisp:list
       (common-lisp:cons "typeInfos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow-type-infos))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun count-closed-workflow-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain start-time-filter
                     close-time-filter execution-filter type-filter tag-filter
                     close-status-filter)
   (common-lisp:declare
    (common-lisp:ignorable domain start-time-filter close-time-filter
     execution-filter type-filter tag-filter close-status-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-count-closed-workflow-executions-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CountClosedWorkflowExecutions"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'count-closed-workflow-executions))
(common-lisp:progn
 (common-lisp:defun count-open-workflow-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain start-time-filter type-filter
                     tag-filter execution-filter)
   (common-lisp:declare
    (common-lisp:ignorable domain start-time-filter type-filter tag-filter
     execution-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-count-open-workflow-executions-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CountOpenWorkflowExecutions"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'count-open-workflow-executions))
(common-lisp:progn
 (common-lisp:defun count-pending-activity-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain task-list)
   (common-lisp:declare (common-lisp:ignorable domain task-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-count-pending-activity-tasks-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CountPendingActivityTasks"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'count-pending-activity-tasks))
(common-lisp:progn
 (common-lisp:defun count-pending-decision-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain task-list)
   (common-lisp:declare (common-lisp:ignorable domain task-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-count-pending-decision-tasks-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CountPendingDecisionTasks"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'count-pending-decision-tasks))
(common-lisp:progn
 (common-lisp:defun deprecate-activity-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain activity-type)
   (common-lisp:declare (common-lisp:ignorable domain activity-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deprecate-activity-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeprecateActivityType"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deprecate-activity-type))
(common-lisp:progn
 (common-lisp:defun deprecate-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deprecate-domain-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeprecateDomain"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deprecate-domain))
(common-lisp:progn
 (common-lisp:defun deprecate-workflow-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain workflow-type)
   (common-lisp:declare (common-lisp:ignorable domain workflow-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deprecate-workflow-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeprecateWorkflowType"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deprecate-workflow-type))
(common-lisp:progn
 (common-lisp:defun describe-activity-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain activity-type)
   (common-lisp:declare (common-lisp:ignorable domain activity-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-activity-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeActivityType"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-activity-type))
(common-lisp:progn
 (common-lisp:defun describe-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-domain-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDomain"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-domain))
(common-lisp:progn
 (common-lisp:defun describe-workflow-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain execution)
   (common-lisp:declare (common-lisp:ignorable domain execution))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-workflow-execution-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeWorkflowExecution"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-workflow-execution))
(common-lisp:progn
 (common-lisp:defun describe-workflow-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain workflow-type)
   (common-lisp:declare (common-lisp:ignorable domain workflow-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-workflow-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeWorkflowType"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-workflow-type))
(common-lisp:progn
 (common-lisp:defun get-workflow-execution-history
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain execution next-page-token
                     maximum-page-size reverse-order)
   (common-lisp:declare
    (common-lisp:ignorable domain execution next-page-token maximum-page-size
     reverse-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-workflow-execution-history-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetWorkflowExecutionHistory"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-workflow-execution-history))
(common-lisp:progn
 (common-lisp:defun list-activity-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain name registration-status
                     next-page-token maximum-page-size reverse-order)
   (common-lisp:declare
    (common-lisp:ignorable domain name registration-status next-page-token
     maximum-page-size reverse-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-activity-types-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListActivityTypes"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-activity-types))
(common-lisp:progn
 (common-lisp:defun list-closed-workflow-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain start-time-filter
                     close-time-filter execution-filter close-status-filter
                     type-filter tag-filter next-page-token maximum-page-size
                     reverse-order)
   (common-lisp:declare
    (common-lisp:ignorable domain start-time-filter close-time-filter
     execution-filter close-status-filter type-filter tag-filter
     next-page-token maximum-page-size reverse-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-closed-workflow-executions-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListClosedWorkflowExecutions"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-closed-workflow-executions))
(common-lisp:progn
 (common-lisp:defun list-domains
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-page-token registration-status
                     maximum-page-size reverse-order)
   (common-lisp:declare
    (common-lisp:ignorable next-page-token registration-status
     maximum-page-size reverse-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-domains-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDomains"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-domains))
(common-lisp:progn
 (common-lisp:defun list-open-workflow-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain start-time-filter type-filter
                     tag-filter next-page-token maximum-page-size reverse-order
                     execution-filter)
   (common-lisp:declare
    (common-lisp:ignorable domain start-time-filter type-filter tag-filter
     next-page-token maximum-page-size reverse-order execution-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-open-workflow-executions-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListOpenWorkflowExecutions"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-open-workflow-executions))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-workflow-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain name registration-status
                     next-page-token maximum-page-size reverse-order)
   (common-lisp:declare
    (common-lisp:ignorable domain name registration-status next-page-token
     maximum-page-size reverse-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-workflow-types-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListWorkflowTypes"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-workflow-types))
(common-lisp:progn
 (common-lisp:defun poll-for-activity-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain task-list identity)
   (common-lisp:declare (common-lisp:ignorable domain task-list identity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-poll-for-activity-task-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PollForActivityTask"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'poll-for-activity-task))
(common-lisp:progn
 (common-lisp:defun poll-for-decision-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain task-list identity next-page-token
                     maximum-page-size reverse-order)
   (common-lisp:declare
    (common-lisp:ignorable domain task-list identity next-page-token
     maximum-page-size reverse-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-poll-for-decision-task-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PollForDecisionTask"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'poll-for-decision-task))
(common-lisp:progn
 (common-lisp:defun record-activity-task-heartbeat
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-token details)
   (common-lisp:declare (common-lisp:ignorable task-token details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-record-activity-task-heartbeat-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RecordActivityTaskHeartbeat"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'record-activity-task-heartbeat))
(common-lisp:progn
 (common-lisp:defun register-activity-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain name version description
                     default-task-start-to-close-timeout
                     default-task-heartbeat-timeout default-task-list
                     default-task-priority
                     default-task-schedule-to-start-timeout
                     default-task-schedule-to-close-timeout)
   (common-lisp:declare
    (common-lisp:ignorable domain name version description
     default-task-start-to-close-timeout default-task-heartbeat-timeout
     default-task-list default-task-priority
     default-task-schedule-to-start-timeout
     default-task-schedule-to-close-timeout))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-activity-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RegisterActivityType"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-activity-type))
(common-lisp:progn
 (common-lisp:defun register-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description
                     workflow-execution-retention-period-in-days tags)
   (common-lisp:declare
    (common-lisp:ignorable name description
     workflow-execution-retention-period-in-days tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-domain-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RegisterDomain"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-domain))
(common-lisp:progn
 (common-lisp:defun register-workflow-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain name version description
                     default-task-start-to-close-timeout
                     default-execution-start-to-close-timeout default-task-list
                     default-task-priority default-child-policy
                     default-lambda-role)
   (common-lisp:declare
    (common-lisp:ignorable domain name version description
     default-task-start-to-close-timeout
     default-execution-start-to-close-timeout default-task-list
     default-task-priority default-child-policy default-lambda-role))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-workflow-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RegisterWorkflowType"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-workflow-type))
(common-lisp:progn
 (common-lisp:defun request-cancel-workflow-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain workflow-id run-id)
   (common-lisp:declare (common-lisp:ignorable domain workflow-id run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-request-cancel-workflow-execution-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RequestCancelWorkflowExecution"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'request-cancel-workflow-execution))
(common-lisp:progn
 (common-lisp:defun respond-activity-task-canceled
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-token details)
   (common-lisp:declare (common-lisp:ignorable task-token details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-respond-activity-task-canceled-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RespondActivityTaskCanceled"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'respond-activity-task-canceled))
(common-lisp:progn
 (common-lisp:defun respond-activity-task-completed
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-token result)
   (common-lisp:declare (common-lisp:ignorable task-token result))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-respond-activity-task-completed-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RespondActivityTaskCompleted"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'respond-activity-task-completed))
(common-lisp:progn
 (common-lisp:defun respond-activity-task-failed
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-token reason details)
   (common-lisp:declare (common-lisp:ignorable task-token reason details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-respond-activity-task-failed-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RespondActivityTaskFailed"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'respond-activity-task-failed))
(common-lisp:progn
 (common-lisp:defun respond-decision-task-completed
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-token decisions execution-context)
   (common-lisp:declare
    (common-lisp:ignorable task-token decisions execution-context))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-respond-decision-task-completed-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RespondDecisionTaskCompleted"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'respond-decision-task-completed))
(common-lisp:progn
 (common-lisp:defun signal-workflow-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain workflow-id run-id signal-name
                     input)
   (common-lisp:declare
    (common-lisp:ignorable domain workflow-id run-id signal-name input))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-signal-workflow-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SignalWorkflowExecution"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'signal-workflow-execution))
(common-lisp:progn
 (common-lisp:defun start-workflow-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain workflow-id workflow-type
                     task-list task-priority input
                     execution-start-to-close-timeout tag-list
                     task-start-to-close-timeout child-policy lambda-role)
   (common-lisp:declare
    (common-lisp:ignorable domain workflow-id workflow-type task-list
     task-priority input execution-start-to-close-timeout tag-list
     task-start-to-close-timeout child-policy lambda-role))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-workflow-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartWorkflowExecution"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-workflow-execution))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun terminate-workflow-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain workflow-id run-id reason details
                     child-policy)
   (common-lisp:declare
    (common-lisp:ignorable domain workflow-id run-id reason details
     child-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-terminate-workflow-execution-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TerminateWorkflowExecution"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'terminate-workflow-execution))
(common-lisp:progn
 (common-lisp:defun undeprecate-activity-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain activity-type)
   (common-lisp:declare (common-lisp:ignorable domain activity-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-undeprecate-activity-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UndeprecateActivityType"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'undeprecate-activity-type))
(common-lisp:progn
 (common-lisp:defun undeprecate-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-undeprecate-domain-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UndeprecateDomain"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'undeprecate-domain))
(common-lisp:progn
 (common-lisp:defun undeprecate-workflow-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain workflow-type)
   (common-lisp:declare (common-lisp:ignorable domain workflow-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-undeprecate-workflow-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UndeprecateWorkflowType"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'undeprecate-workflow-type))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'swf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"
                                                        "2012-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
