;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/chime-sdk-messaging/api
  (:use)
  (:nicknames #:aws/chime-sdk-messaging)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/chime-sdk-messaging/api)
(common-lisp:progn
 (common-lisp:defclass chime-sdk-messaging-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "chime-sdk-messaging"
                        :protocol :rest-json))
 (common-lisp:export 'chime-sdk-messaging-request))
(common-lisp:progn
 (common-lisp:define-condition chime-sdk-messaging-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'chime-sdk-messaging-error))
(common-lisp:defvar *error-map*
  '(("BadRequestException" . bad-request-exception)
    ("ConflictException" . conflict-exception)
    ("ForbiddenException" . forbidden-exception)
    ("NotFoundException" . not-found-exception)
    ("ResourceLimitExceededException" . resource-limit-exceeded-exception)
    ("ServiceFailureException" . service-failure-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("ThrottledClientException" . throttled-client-exception)
    ("UnauthorizedClientException" . unauthorized-client-exception)))
(common-lisp:deftype allow-notifications () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (app-instance-user-membership-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-app-instance-user-membership-summary-"))
   (type common-lisp:nil :type
    (common-lisp:or channel-membership-type common-lisp:null))
   (read-marker-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (sub-channel-id common-lisp:nil :type
    (common-lisp:or sub-channel-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'app-instance-user-membership-summary
                    'make-app-instance-user-membership-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          app-instance-user-membership-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          app-instance-user-membership-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-marker-timestamp))
      (common-lisp:list
       (common-lisp:cons "ReadMarkerTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-channel-id))
      (common-lisp:list
       (common-lisp:cons "SubChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          app-instance-user-membership-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-channel-flow-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-channel-flow-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (channel-flow-arn (common-lisp:error ":channel-flow-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-channel-flow-request
                    'make-associate-channel-flow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-channel-flow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-channel-flow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-flow-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelFlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-channel-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (chime-sdk-messaging-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       bad-request-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-code
                    'bad-request-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-channel-memberships (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-channel-memberships-"))
   (invited-by common-lisp:nil :type
    (common-lisp:or identity common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or channel-membership-type common-lisp:null))
   (members common-lisp:nil :type (common-lisp:or members common-lisp:null))
   (channel-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (sub-channel-id common-lisp:nil :type
    (common-lisp:or sub-channel-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-channel-memberships
                    'make-batch-channel-memberships))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-channel-memberships))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-channel-memberships))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invited-by))
      (common-lisp:list
       (common-lisp:cons "InvitedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "Members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-channel-id))
      (common-lisp:list
       (common-lisp:cons "SubChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-channel-memberships))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-create-channel-membership-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-create-channel-membership-error-"))
   (member-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (error-code common-lisp:nil :type
    (common-lisp:or error-code common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-create-channel-membership-error
                    'make-batch-create-channel-membership-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-channel-membership-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-channel-membership-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-arn))
      (common-lisp:list
       (common-lisp:cons "MemberArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-channel-membership-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-create-channel-membership-errors ()
   '(trivial-types:proper-list batch-create-channel-membership-error))
 (common-lisp:defun |make-batch-create-channel-membership-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-create-channel-membership-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-create-channel-membership-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-create-channel-membership-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or channel-membership-type common-lisp:null))
   (member-arns (common-lisp:error ":member-arns is required") :type
    (common-lisp:or member-arns common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (sub-channel-id common-lisp:nil :type
    (common-lisp:or sub-channel-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-create-channel-membership-request
                    'make-batch-create-channel-membership-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-channel-membership-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-channel-membership-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-arns))
      (common-lisp:list
       (common-lisp:cons "MemberArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-channel-id))
      (common-lisp:list
       (common-lisp:cons "SubChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-channel-membership-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-create-channel-membership-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-create-channel-membership-response-"))
   (batch-channel-memberships common-lisp:nil :type
    (common-lisp:or batch-channel-memberships common-lisp:null))
   (errors common-lisp:nil :type
    (common-lisp:or batch-create-channel-membership-errors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-create-channel-membership-response
                    'make-batch-create-channel-membership-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-channel-membership-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-channel-membership-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-channel-memberships))
      (common-lisp:list
       (common-lisp:cons "BatchChannelMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-channel-membership-response))
   common-lisp:nil))
(common-lisp:deftype callback-id-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (channel (:copier common-lisp:nil) (:conc-name "struct-shape-channel-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-resource-name common-lisp:null))
   (channel-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (mode common-lisp:nil :type (common-lisp:or channel-mode common-lisp:null))
   (privacy common-lisp:nil :type
    (common-lisp:or channel-privacy common-lisp:null))
   (metadata common-lisp:nil :type (common-lisp:or metadata common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or identity common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-message-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (channel-flow-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (elastic-channel-configuration common-lisp:nil :type
    (common-lisp:or elastic-channel-configuration common-lisp:null))
   (expiration-settings common-lisp:nil :type
    (common-lisp:or expiration-settings common-lisp:null)))
 (common-lisp:export (common-lisp:list 'channel 'make-channel))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'privacy))
      (common-lisp:list
       (common-lisp:cons "Privacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-message-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastMessageTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-flow-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelFlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elastic-channel-configuration))
      (common-lisp:list
       (common-lisp:cons "ElasticChannelConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-settings))
      (common-lisp:list
       (common-lisp:cons "ExpirationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (channel-associated-with-flow-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-channel-associated-with-flow-summary-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-resource-name common-lisp:null))
   (channel-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (mode common-lisp:nil :type (common-lisp:or channel-mode common-lisp:null))
   (privacy common-lisp:nil :type
    (common-lisp:or channel-privacy common-lisp:null))
   (metadata common-lisp:nil :type (common-lisp:or metadata common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'channel-associated-with-flow-summary
                    'make-channel-associated-with-flow-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          channel-associated-with-flow-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          channel-associated-with-flow-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'privacy))
      (common-lisp:list
       (common-lisp:cons "Privacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          channel-associated-with-flow-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype channel-associated-with-flow-summary-list ()
   '(trivial-types:proper-list channel-associated-with-flow-summary))
 (common-lisp:defun |make-channel-associated-with-flow-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            channel-associated-with-flow-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (channel-ban (:copier common-lisp:nil)
      (:conc-name "struct-shape-channel-ban-"))
   (member common-lisp:nil :type (common-lisp:or identity common-lisp:null))
   (channel-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or identity common-lisp:null)))
 (common-lisp:export (common-lisp:list 'channel-ban 'make-channel-ban))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel-ban))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel-ban))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member))
      (common-lisp:list
       (common-lisp:cons "Member"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel-ban))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (channel-ban-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-channel-ban-summary-"))
   (member common-lisp:nil :type (common-lisp:or identity common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'channel-ban-summary 'make-channel-ban-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel-ban-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel-ban-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member))
      (common-lisp:list
       (common-lisp:cons "Member"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel-ban-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype channel-ban-summary-list ()
   '(trivial-types:proper-list channel-ban-summary))
 (common-lisp:defun |make-channel-ban-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list channel-ban-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (channel-flow (:copier common-lisp:nil)
      (:conc-name "struct-shape-channel-flow-"))
   (channel-flow-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (processors common-lisp:nil :type
    (common-lisp:or processor-list common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-resource-name common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'channel-flow 'make-channel-flow))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel-flow))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel-flow))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-flow-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelFlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processors))
      (common-lisp:list
       (common-lisp:cons "Processors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel-flow))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (channel-flow-callback-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-channel-flow-callback-request-"))
   (callback-id (common-lisp:error ":callback-id is required") :type
    (common-lisp:or callback-id-type common-lisp:null))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (delete-resource common-lisp:nil :type
    (common-lisp:or non-nullable-boolean common-lisp:null))
   (channel-message (common-lisp:error ":channel-message is required") :type
    (common-lisp:or channel-message-callback common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'channel-flow-callback-request
                    'make-channel-flow-callback-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          channel-flow-callback-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          channel-flow-callback-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'callback-id))
      (common-lisp:list
       (common-lisp:cons "CallbackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-resource))
      (common-lisp:list
       (common-lisp:cons "DeleteResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-message))
      (common-lisp:list
       (common-lisp:cons "ChannelMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          channel-flow-callback-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (channel-flow-callback-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-channel-flow-callback-response-"))
   (channel-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (callback-id common-lisp:nil :type
    (common-lisp:or callback-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'channel-flow-callback-response
                    'make-channel-flow-callback-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          channel-flow-callback-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          channel-flow-callback-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'callback-id))
      (common-lisp:list
       (common-lisp:cons "CallbackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          channel-flow-callback-response))
   common-lisp:nil))
(common-lisp:deftype channel-flow-execution-order () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (channel-flow-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-channel-flow-summary-"))
   (channel-flow-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-resource-name common-lisp:null))
   (processors common-lisp:nil :type
    (common-lisp:or processor-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'channel-flow-summary 'make-channel-flow-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel-flow-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel-flow-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-flow-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelFlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processors))
      (common-lisp:list
       (common-lisp:cons "Processors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel-flow-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype channel-flow-summary-list ()
   '(trivial-types:proper-list channel-flow-summary))
 (common-lisp:defun |make-channel-flow-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list channel-flow-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype channel-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype channel-member-arns ()
   '(trivial-types:proper-list chime-arn))
 (common-lisp:defun |make-channel-member-arns|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list chime-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (channel-membership (:copier common-lisp:nil)
      (:conc-name "struct-shape-channel-membership-"))
   (invited-by common-lisp:nil :type
    (common-lisp:or identity common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or channel-membership-type common-lisp:null))
   (member common-lisp:nil :type (common-lisp:or identity common-lisp:null))
   (channel-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (sub-channel-id common-lisp:nil :type
    (common-lisp:or sub-channel-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'channel-membership 'make-channel-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invited-by))
      (common-lisp:list
       (common-lisp:cons "InvitedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member))
      (common-lisp:list
       (common-lisp:cons "Member"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-channel-id))
      (common-lisp:list
       (common-lisp:cons "SubChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (channel-membership-for-app-instance-user-summary
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-channel-membership-for-app-instance-user-summary-"))
   (channel-summary common-lisp:nil :type
    (common-lisp:or channel-summary common-lisp:null))
   (app-instance-user-membership-summary common-lisp:nil :type
    (common-lisp:or app-instance-user-membership-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'channel-membership-for-app-instance-user-summary
                    'make-channel-membership-for-app-instance-user-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          channel-membership-for-app-instance-user-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          channel-membership-for-app-instance-user-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-summary))
      (common-lisp:list
       (common-lisp:cons "ChannelSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-instance-user-membership-summary))
      (common-lisp:list
       (common-lisp:cons "AppInstanceUserMembershipSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          channel-membership-for-app-instance-user-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype channel-membership-for-app-instance-user-summary-list ()
   '(trivial-types:proper-list
     channel-membership-for-app-instance-user-summary))
 (common-lisp:defun |make-channel-membership-for-app-instance-user-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            channel-membership-for-app-instance-user-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (channel-membership-preferences (:copier common-lisp:nil)
      (:conc-name "struct-shape-channel-membership-preferences-"))
   (push-notifications common-lisp:nil :type
    (common-lisp:or push-notification-preferences common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'channel-membership-preferences
                    'make-channel-membership-preferences))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          channel-membership-preferences))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          channel-membership-preferences))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'push-notifications))
      (common-lisp:list
       (common-lisp:cons "PushNotifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          channel-membership-preferences))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (channel-membership-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-channel-membership-summary-"))
   (member common-lisp:nil :type (common-lisp:or identity common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'channel-membership-summary
                    'make-channel-membership-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          channel-membership-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          channel-membership-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member))
      (common-lisp:list
       (common-lisp:cons "Member"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          channel-membership-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype channel-membership-summary-list ()
   '(trivial-types:proper-list channel-membership-summary))
 (common-lisp:defun |make-channel-membership-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            channel-membership-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype channel-membership-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (channel-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-channel-message-"))
   (channel-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (message-id common-lisp:nil :type
    (common-lisp:or message-id common-lisp:null))
   (content common-lisp:nil :type (common-lisp:or content common-lisp:null))
   (metadata common-lisp:nil :type (common-lisp:or metadata common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or channel-message-type common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-edited-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (sender common-lisp:nil :type (common-lisp:or identity common-lisp:null))
   (redacted common-lisp:nil :type
    (common-lisp:or non-nullable-boolean common-lisp:null))
   (persistence common-lisp:nil :type
    (common-lisp:or channel-message-persistence-type common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or channel-message-status-structure common-lisp:null))
   (message-attributes common-lisp:nil :type
    (common-lisp:or message-attribute-map common-lisp:null))
   (sub-channel-id common-lisp:nil :type
    (common-lisp:or sub-channel-id common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or content-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'channel-message 'make-channel-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "MessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-edited-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastEditedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender))
      (common-lisp:list
       (common-lisp:cons "Sender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redacted))
      (common-lisp:list
       (common-lisp:cons "Redacted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persistence))
      (common-lisp:list
       (common-lisp:cons "Persistence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-attributes))
      (common-lisp:list
       (common-lisp:cons "MessageAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-channel-id))
      (common-lisp:list
       (common-lisp:cons "SubChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (channel-message-callback (:copier common-lisp:nil)
      (:conc-name "struct-shape-channel-message-callback-"))
   (message-id (common-lisp:error ":message-id is required") :type
    (common-lisp:or message-id common-lisp:null))
   (content common-lisp:nil :type
    (common-lisp:or non-empty-content common-lisp:null))
   (metadata common-lisp:nil :type (common-lisp:or metadata common-lisp:null))
   (push-notification common-lisp:nil :type
    (common-lisp:or push-notification-configuration common-lisp:null))
   (message-attributes common-lisp:nil :type
    (common-lisp:or message-attribute-map common-lisp:null))
   (sub-channel-id common-lisp:nil :type
    (common-lisp:or sub-channel-id common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or content-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'channel-message-callback 'make-channel-message-callback))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          channel-message-callback))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          channel-message-callback))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "MessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'push-notification))
      (common-lisp:list
       (common-lisp:cons "PushNotification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-attributes))
      (common-lisp:list
       (common-lisp:cons "MessageAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-channel-id))
      (common-lisp:list
       (common-lisp:cons "SubChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          channel-message-callback))
   common-lisp:nil))
(common-lisp:deftype channel-message-persistence-type () 'common-lisp:string)
(common-lisp:deftype channel-message-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (channel-message-status-structure (:copier common-lisp:nil)
      (:conc-name "struct-shape-channel-message-status-structure-"))
   (value common-lisp:nil :type
    (common-lisp:or channel-message-status common-lisp:null))
   (detail common-lisp:nil :type
    (common-lisp:or status-detail common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'channel-message-status-structure
                    'make-channel-message-status-structure))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          channel-message-status-structure))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          channel-message-status-structure))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detail))
      (common-lisp:list
       (common-lisp:cons "Detail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          channel-message-status-structure))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (channel-message-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-channel-message-summary-"))
   (message-id common-lisp:nil :type
    (common-lisp:or message-id common-lisp:null))
   (content common-lisp:nil :type (common-lisp:or content common-lisp:null))
   (metadata common-lisp:nil :type (common-lisp:or metadata common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or channel-message-type common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-edited-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (sender common-lisp:nil :type (common-lisp:or identity common-lisp:null))
   (redacted common-lisp:nil :type
    (common-lisp:or non-nullable-boolean common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or channel-message-status-structure common-lisp:null))
   (message-attributes common-lisp:nil :type
    (common-lisp:or message-attribute-map common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or content-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'channel-message-summary 'make-channel-message-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          channel-message-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          channel-message-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "MessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-edited-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastEditedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender))
      (common-lisp:list
       (common-lisp:cons "Sender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redacted))
      (common-lisp:list
       (common-lisp:cons "Redacted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-attributes))
      (common-lisp:list
       (common-lisp:cons "MessageAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          channel-message-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype channel-message-summary-list ()
   '(trivial-types:proper-list channel-message-summary))
 (common-lisp:defun |make-channel-message-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list channel-message-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype channel-message-type () 'common-lisp:string)
(common-lisp:deftype channel-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (channel-moderated-by-app-instance-user-summary (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-channel-moderated-by-app-instance-user-summary-"))
   (channel-summary common-lisp:nil :type
    (common-lisp:or channel-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'channel-moderated-by-app-instance-user-summary
                    'make-channel-moderated-by-app-instance-user-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          channel-moderated-by-app-instance-user-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          channel-moderated-by-app-instance-user-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-summary))
      (common-lisp:list
       (common-lisp:cons "ChannelSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          channel-moderated-by-app-instance-user-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype channel-moderated-by-app-instance-user-summary-list ()
   '(trivial-types:proper-list channel-moderated-by-app-instance-user-summary))
 (common-lisp:defun |make-channel-moderated-by-app-instance-user-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            channel-moderated-by-app-instance-user-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (channel-moderator (:copier common-lisp:nil)
      (:conc-name "struct-shape-channel-moderator-"))
   (moderator common-lisp:nil :type (common-lisp:or identity common-lisp:null))
   (channel-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or identity common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'channel-moderator 'make-channel-moderator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel-moderator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel-moderator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'moderator))
      (common-lisp:list
       (common-lisp:cons "Moderator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel-moderator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype channel-moderator-arns ()
   '(trivial-types:proper-list chime-arn))
 (common-lisp:defun |make-channel-moderator-arns|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list chime-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (channel-moderator-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-channel-moderator-summary-"))
   (moderator common-lisp:nil :type
    (common-lisp:or identity common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'channel-moderator-summary
                    'make-channel-moderator-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          channel-moderator-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          channel-moderator-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'moderator))
      (common-lisp:list
       (common-lisp:cons "Moderator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          channel-moderator-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype channel-moderator-summary-list ()
   '(trivial-types:proper-list channel-moderator-summary))
 (common-lisp:defun |make-channel-moderator-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            channel-moderator-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype channel-privacy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (channel-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-channel-summary-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-resource-name common-lisp:null))
   (channel-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (mode common-lisp:nil :type (common-lisp:or channel-mode common-lisp:null))
   (privacy common-lisp:nil :type
    (common-lisp:or channel-privacy common-lisp:null))
   (metadata common-lisp:nil :type (common-lisp:or metadata common-lisp:null))
   (last-message-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'channel-summary 'make-channel-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'privacy))
      (common-lisp:list
       (common-lisp:cons "Privacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-message-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastMessageTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype channel-summary-list ()
   '(trivial-types:proper-list channel-summary))
 (common-lisp:defun |make-channel-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list channel-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype chime-arn () 'common-lisp:string)
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (chime-sdk-messaging-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       conflict-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-code
                    'conflict-exception-message)))
(common-lisp:deftype content () 'common-lisp:string)
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-channel-ban-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-channel-ban-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (member-arn (common-lisp:error ":member-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-channel-ban-request
                    'make-create-channel-ban-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-ban-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-ban-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-arn))
      (common-lisp:list
       (common-lisp:cons "MemberArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-ban-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-channel-ban-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-channel-ban-response-"))
   (channel-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (member common-lisp:nil :type (common-lisp:or identity common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-channel-ban-response
                    'make-create-channel-ban-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-ban-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-ban-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member))
      (common-lisp:list
       (common-lisp:cons "Member"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-ban-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-channel-flow-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-channel-flow-request-"))
   (app-instance-arn (common-lisp:error ":app-instance-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (processors (common-lisp:error ":processors is required") :type
    (common-lisp:or processor-list common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or non-empty-resource-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-channel-flow-request
                    'make-create-channel-flow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-flow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-instance-arn))
      (common-lisp:list
       (common-lisp:cons "AppInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processors))
      (common-lisp:list
       (common-lisp:cons "Processors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-channel-flow-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-channel-flow-response-"))
   (channel-flow-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-channel-flow-response
                    'make-create-channel-flow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-flow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-flow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-flow-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelFlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-flow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-channel-membership-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-channel-membership-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (member-arn (common-lisp:error ":member-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or channel-membership-type common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (sub-channel-id common-lisp:nil :type
    (common-lisp:or sub-channel-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-channel-membership-request
                    'make-create-channel-membership-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-membership-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-membership-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-arn))
      (common-lisp:list
       (common-lisp:cons "MemberArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-channel-id))
      (common-lisp:list
       (common-lisp:cons "SubChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-membership-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-channel-membership-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-channel-membership-response-"))
   (channel-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (member common-lisp:nil :type (common-lisp:or identity common-lisp:null))
   (sub-channel-id common-lisp:nil :type
    (common-lisp:or sub-channel-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-channel-membership-response
                    'make-create-channel-membership-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-membership-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-membership-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member))
      (common-lisp:list
       (common-lisp:cons "Member"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-channel-id))
      (common-lisp:list
       (common-lisp:cons "SubChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-membership-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-channel-moderator-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-channel-moderator-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (channel-moderator-arn
    (common-lisp:error ":channel-moderator-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-channel-moderator-request
                    'make-create-channel-moderator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-moderator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-moderator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'channel-moderator-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelModeratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-moderator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-channel-moderator-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-channel-moderator-response-"))
   (channel-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (channel-moderator common-lisp:nil :type
    (common-lisp:or identity common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-channel-moderator-response
                    'make-create-channel-moderator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-moderator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-moderator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-moderator))
      (common-lisp:list
       (common-lisp:cons "ChannelModerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-moderator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-channel-request-"))
   (app-instance-arn (common-lisp:error ":app-instance-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or non-empty-resource-name common-lisp:null))
   (mode common-lisp:nil :type (common-lisp:or channel-mode common-lisp:null))
   (privacy common-lisp:nil :type
    (common-lisp:or channel-privacy common-lisp:null))
   (metadata common-lisp:nil :type (common-lisp:or metadata common-lisp:null))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or client-request-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (channel-id common-lisp:nil :type
    (common-lisp:or channel-id common-lisp:null))
   (member-arns common-lisp:nil :type
    (common-lisp:or channel-member-arns common-lisp:null))
   (moderator-arns common-lisp:nil :type
    (common-lisp:or channel-moderator-arns common-lisp:null))
   (elastic-channel-configuration common-lisp:nil :type
    (common-lisp:or elastic-channel-configuration common-lisp:null))
   (expiration-settings common-lisp:nil :type
    (common-lisp:or expiration-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-channel-request 'make-create-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-instance-arn))
      (common-lisp:list
       (common-lisp:cons "AppInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'privacy))
      (common-lisp:list
       (common-lisp:cons "Privacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "ChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-arns))
      (common-lisp:list
       (common-lisp:cons "MemberArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'moderator-arns))
      (common-lisp:list
       (common-lisp:cons "ModeratorArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elastic-channel-configuration))
      (common-lisp:list
       (common-lisp:cons "ElasticChannelConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-settings))
      (common-lisp:list
       (common-lisp:cons "ExpirationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-channel-response-"))
   (channel-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-channel-response 'make-create-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-channel-ban-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-channel-ban-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (member-arn (common-lisp:error ":member-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-channel-ban-request
                    'make-delete-channel-ban-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-ban-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-ban-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-ban-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-channel-flow-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-channel-flow-request-"))
   (channel-flow-arn (common-lisp:error ":channel-flow-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-channel-flow-request
                    'make-delete-channel-flow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-channel-membership-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-channel-membership-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (member-arn (common-lisp:error ":member-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (sub-channel-id common-lisp:nil :type
    (common-lisp:or sub-channel-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-channel-membership-request
                    'make-delete-channel-membership-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-membership-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-membership-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-membership-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-channel-message-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-channel-message-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (message-id (common-lisp:error ":message-id is required") :type
    (common-lisp:or message-id common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (sub-channel-id common-lisp:nil :type
    (common-lisp:or sub-channel-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-channel-message-request
                    'make-delete-channel-message-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-message-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-message-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-message-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-channel-moderator-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-channel-moderator-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (channel-moderator-arn
    (common-lisp:error ":channel-moderator-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-channel-moderator-request
                    'make-delete-channel-moderator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-moderator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-moderator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-moderator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-channel-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-channel-request 'make-delete-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-messaging-streaming-configurations-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-messaging-streaming-configurations-request-"))
   (app-instance-arn (common-lisp:error ":app-instance-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-messaging-streaming-configurations-request
                    'make-delete-messaging-streaming-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-messaging-streaming-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-messaging-streaming-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-messaging-streaming-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-channel-ban-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-channel-ban-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (member-arn (common-lisp:error ":member-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-channel-ban-request
                    'make-describe-channel-ban-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-ban-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-ban-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-ban-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-channel-ban-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-channel-ban-response-"))
   (channel-ban common-lisp:nil :type
    (common-lisp:or channel-ban common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-channel-ban-response
                    'make-describe-channel-ban-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-ban-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-ban-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-ban))
      (common-lisp:list
       (common-lisp:cons "ChannelBan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-ban-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-channel-flow-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-channel-flow-request-"))
   (channel-flow-arn (common-lisp:error ":channel-flow-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-channel-flow-request
                    'make-describe-channel-flow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-channel-flow-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-channel-flow-response-"))
   (channel-flow common-lisp:nil :type
    (common-lisp:or channel-flow common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-channel-flow-response
                    'make-describe-channel-flow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-flow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-flow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-flow))
      (common-lisp:list
       (common-lisp:cons "ChannelFlow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-flow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-channel-membership-for-app-instance-user-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-channel-membership-for-app-instance-user-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (app-instance-user-arn
    (common-lisp:error ":app-instance-user-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-channel-membership-for-app-instance-user-request
                    'make-describe-channel-membership-for-app-instance-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-membership-for-app-instance-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-membership-for-app-instance-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-membership-for-app-instance-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-channel-membership-for-app-instance-user-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-channel-membership-for-app-instance-user-response-"))
   (channel-membership common-lisp:nil :type
    (common-lisp:or channel-membership-for-app-instance-user-summary
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-channel-membership-for-app-instance-user-response
                    'make-describe-channel-membership-for-app-instance-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-membership-for-app-instance-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-membership-for-app-instance-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-membership))
      (common-lisp:list
       (common-lisp:cons "ChannelMembership"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-membership-for-app-instance-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-channel-membership-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-channel-membership-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (member-arn (common-lisp:error ":member-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (sub-channel-id common-lisp:nil :type
    (common-lisp:or sub-channel-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-channel-membership-request
                    'make-describe-channel-membership-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-membership-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-membership-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-membership-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-channel-membership-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-channel-membership-response-"))
   (channel-membership common-lisp:nil :type
    (common-lisp:or channel-membership common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-channel-membership-response
                    'make-describe-channel-membership-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-membership-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-membership-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-membership))
      (common-lisp:list
       (common-lisp:cons "ChannelMembership"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-membership-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-channel-moderated-by-app-instance-user-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-channel-moderated-by-app-instance-user-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (app-instance-user-arn
    (common-lisp:error ":app-instance-user-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-channel-moderated-by-app-instance-user-request
                    'make-describe-channel-moderated-by-app-instance-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-moderated-by-app-instance-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-moderated-by-app-instance-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-moderated-by-app-instance-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-channel-moderated-by-app-instance-user-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-channel-moderated-by-app-instance-user-response-"))
   (channel common-lisp:nil :type
    (common-lisp:or channel-moderated-by-app-instance-user-summary
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-channel-moderated-by-app-instance-user-response
                    'make-describe-channel-moderated-by-app-instance-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-moderated-by-app-instance-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-moderated-by-app-instance-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "Channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-moderated-by-app-instance-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-channel-moderator-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-channel-moderator-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (channel-moderator-arn
    (common-lisp:error ":channel-moderator-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-channel-moderator-request
                    'make-describe-channel-moderator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-moderator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-moderator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-moderator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-channel-moderator-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-channel-moderator-response-"))
   (channel-moderator common-lisp:nil :type
    (common-lisp:or channel-moderator common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-channel-moderator-response
                    'make-describe-channel-moderator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-moderator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-moderator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-moderator))
      (common-lisp:list
       (common-lisp:cons "ChannelModerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-moderator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-channel-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-channel-request 'make-describe-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-channel-response-"))
   (channel common-lisp:nil :type (common-lisp:or channel common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-channel-response
                    'make-describe-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "Channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-channel-flow-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-channel-flow-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (channel-flow-arn (common-lisp:error ":channel-flow-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-channel-flow-request
                    'make-disassociate-channel-flow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-channel-flow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-channel-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-channel-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (elastic-channel-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-elastic-channel-configuration-"))
   (maximum-sub-channels
    (common-lisp:error ":maximum-sub-channels is required") :type
    (common-lisp:or maximum-sub-channels common-lisp:null))
   (target-memberships-per-sub-channel
    (common-lisp:error ":target-memberships-per-sub-channel is required") :type
    (common-lisp:or target-memberships-per-sub-channel common-lisp:null))
   (minimum-membership-percentage
    (common-lisp:error ":minimum-membership-percentage is required") :type
    (common-lisp:or minimum-membership-percentage common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'elastic-channel-configuration
                    'make-elastic-channel-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          elastic-channel-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          elastic-channel-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-sub-channels))
      (common-lisp:list
       (common-lisp:cons "MaximumSubChannels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-memberships-per-sub-channel))
      (common-lisp:list
       (common-lisp:cons "TargetMembershipsPerSubChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-membership-percentage))
      (common-lisp:list
       (common-lisp:cons "MinimumMembershipPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          elastic-channel-configuration))
   common-lisp:nil))
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:deftype expiration-criterion () 'common-lisp:string)
(common-lisp:deftype expiration-days () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (expiration-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-expiration-settings-"))
   (expiration-days (common-lisp:error ":expiration-days is required") :type
    (common-lisp:or expiration-days common-lisp:null))
   (expiration-criterion
    (common-lisp:error ":expiration-criterion is required") :type
    (common-lisp:or expiration-criterion common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'expiration-settings 'make-expiration-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input expiration-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input expiration-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-days))
      (common-lisp:list
       (common-lisp:cons "ExpirationDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expiration-criterion))
      (common-lisp:list
       (common-lisp:cons "ExpirationCriterion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input expiration-settings))
   common-lisp:nil))
(common-lisp:deftype fallback-action () 'common-lisp:string)
(common-lisp:deftype filter-rule () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition forbidden-exception
     (chime-sdk-messaging-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       forbidden-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       forbidden-exception-message)))
 (common-lisp:export
  (common-lisp:list 'forbidden-exception 'forbidden-exception-code
                    'forbidden-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-channel-membership-preferences-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-channel-membership-preferences-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (member-arn (common-lisp:error ":member-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-channel-membership-preferences-request
                    'make-get-channel-membership-preferences-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-channel-membership-preferences-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-channel-membership-preferences-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-channel-membership-preferences-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-channel-membership-preferences-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-channel-membership-preferences-response-"))
   (channel-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (member common-lisp:nil :type (common-lisp:or identity common-lisp:null))
   (preferences common-lisp:nil :type
    (common-lisp:or channel-membership-preferences common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-channel-membership-preferences-response
                    'make-get-channel-membership-preferences-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-channel-membership-preferences-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-channel-membership-preferences-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member))
      (common-lisp:list
       (common-lisp:cons "Member"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preferences))
      (common-lisp:list
       (common-lisp:cons "Preferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-channel-membership-preferences-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-channel-message-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-channel-message-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (message-id (common-lisp:error ":message-id is required") :type
    (common-lisp:or message-id common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (sub-channel-id common-lisp:nil :type
    (common-lisp:or sub-channel-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-channel-message-request
                    'make-get-channel-message-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-channel-message-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-channel-message-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-channel-message-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-channel-message-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-channel-message-response-"))
   (channel-message common-lisp:nil :type
    (common-lisp:or channel-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-channel-message-response
                    'make-get-channel-message-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-channel-message-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-channel-message-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-message))
      (common-lisp:list
       (common-lisp:cons "ChannelMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-channel-message-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-channel-message-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-channel-message-status-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (message-id (common-lisp:error ":message-id is required") :type
    (common-lisp:or message-id common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (sub-channel-id common-lisp:nil :type
    (common-lisp:or sub-channel-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-channel-message-status-request
                    'make-get-channel-message-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-channel-message-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-channel-message-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-channel-message-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-channel-message-status-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-channel-message-status-response-"))
   (status common-lisp:nil :type
    (common-lisp:or channel-message-status-structure common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-channel-message-status-response
                    'make-get-channel-message-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-channel-message-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-channel-message-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-channel-message-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-messaging-session-endpoint-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-messaging-session-endpoint-request-")))
 (common-lisp:export
  (common-lisp:list 'get-messaging-session-endpoint-request
                    'make-get-messaging-session-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-messaging-session-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-messaging-session-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-messaging-session-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-messaging-session-endpoint-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-messaging-session-endpoint-response-"))
   (endpoint common-lisp:nil :type
    (common-lisp:or messaging-session-endpoint common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-messaging-session-endpoint-response
                    'make-get-messaging-session-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-messaging-session-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-messaging-session-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-messaging-session-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-messaging-streaming-configurations-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-messaging-streaming-configurations-request-"))
   (app-instance-arn (common-lisp:error ":app-instance-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-messaging-streaming-configurations-request
                    'make-get-messaging-streaming-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-messaging-streaming-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-messaging-streaming-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-messaging-streaming-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-messaging-streaming-configurations-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-messaging-streaming-configurations-response-"))
   (streaming-configurations common-lisp:nil :type
    (common-lisp:or streaming-configuration-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-messaging-streaming-configurations-response
                    'make-get-messaging-streaming-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-messaging-streaming-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-messaging-streaming-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'streaming-configurations))
      (common-lisp:list
       (common-lisp:cons "StreamingConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-messaging-streaming-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (identity (:copier common-lisp:nil) (:conc-name "struct-shape-identity-"))
   (arn common-lisp:nil :type (common-lisp:or chime-arn common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'identity 'make-identity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input identity))
   common-lisp:nil))
(common-lisp:deftype invocation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-configuration-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or lambda-function-arn common-lisp:null))
   (invocation-type (common-lisp:error ":invocation-type is required") :type
    (common-lisp:or invocation-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lambda-configuration 'make-lambda-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lambda-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lambda-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-type))
      (common-lisp:list
       (common-lisp:cons "InvocationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lambda-configuration))
   common-lisp:nil))
(common-lisp:deftype lambda-function-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-channel-bans-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-channel-bans-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-channel-bans-request
                    'make-list-channel-bans-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-bans-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-bans-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-bans-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-channel-bans-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-channel-bans-response-"))
   (channel-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (channel-bans common-lisp:nil :type
    (common-lisp:or channel-ban-summary-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-channel-bans-response
                    'make-list-channel-bans-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-bans-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-bans-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-bans))
      (common-lisp:list
       (common-lisp:cons "ChannelBans"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-bans-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-channel-flows-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-channel-flows-request-"))
   (app-instance-arn (common-lisp:error ":app-instance-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-channel-flows-request
                    'make-list-channel-flows-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-flows-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-flows-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-flows-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-channel-flows-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-channel-flows-response-"))
   (channel-flows common-lisp:nil :type
    (common-lisp:or channel-flow-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-channel-flows-response
                    'make-list-channel-flows-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-flows-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-flows-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-flows))
      (common-lisp:list
       (common-lisp:cons "ChannelFlows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-flows-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-channel-memberships-for-app-instance-user-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-channel-memberships-for-app-instance-user-request-"))
   (app-instance-user-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-channel-memberships-for-app-instance-user-request
                    'make-list-channel-memberships-for-app-instance-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-memberships-for-app-instance-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-memberships-for-app-instance-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-memberships-for-app-instance-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-channel-memberships-for-app-instance-user-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-channel-memberships-for-app-instance-user-response-"))
   (channel-memberships common-lisp:nil :type
    (common-lisp:or channel-membership-for-app-instance-user-summary-list
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-channel-memberships-for-app-instance-user-response
                    'make-list-channel-memberships-for-app-instance-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-memberships-for-app-instance-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-memberships-for-app-instance-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-memberships))
      (common-lisp:list
       (common-lisp:cons "ChannelMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-memberships-for-app-instance-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-channel-memberships-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-channel-memberships-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or channel-membership-type common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (sub-channel-id common-lisp:nil :type
    (common-lisp:or sub-channel-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-channel-memberships-request
                    'make-list-channel-memberships-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-memberships-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-memberships-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-memberships-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-channel-memberships-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-channel-memberships-response-"))
   (channel-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (channel-memberships common-lisp:nil :type
    (common-lisp:or channel-membership-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-channel-memberships-response
                    'make-list-channel-memberships-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-memberships-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-memberships-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-memberships))
      (common-lisp:list
       (common-lisp:cons "ChannelMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-memberships-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-channel-messages-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-channel-messages-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (not-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (not-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (sub-channel-id common-lisp:nil :type
    (common-lisp:or sub-channel-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-channel-messages-request
                    'make-list-channel-messages-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-messages-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-messages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-messages-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-channel-messages-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-channel-messages-response-"))
   (channel-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (channel-messages common-lisp:nil :type
    (common-lisp:or channel-message-summary-list common-lisp:null))
   (sub-channel-id common-lisp:nil :type
    (common-lisp:or sub-channel-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-channel-messages-response
                    'make-list-channel-messages-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-messages-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-messages-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-messages))
      (common-lisp:list
       (common-lisp:cons "ChannelMessages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-channel-id))
      (common-lisp:list
       (common-lisp:cons "SubChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-messages-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-channel-moderators-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-channel-moderators-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-channel-moderators-request
                    'make-list-channel-moderators-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-moderators-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-moderators-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-moderators-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-channel-moderators-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-channel-moderators-response-"))
   (channel-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (channel-moderators common-lisp:nil :type
    (common-lisp:or channel-moderator-summary-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-channel-moderators-response
                    'make-list-channel-moderators-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-moderators-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-moderators-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-moderators))
      (common-lisp:list
       (common-lisp:cons "ChannelModerators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channel-moderators-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-channels-associated-with-channel-flow-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-channels-associated-with-channel-flow-request-"))
   (channel-flow-arn (common-lisp:error ":channel-flow-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-channels-associated-with-channel-flow-request
                    'make-list-channels-associated-with-channel-flow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-associated-with-channel-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-associated-with-channel-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-associated-with-channel-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-channels-associated-with-channel-flow-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-channels-associated-with-channel-flow-response-"))
   (channels common-lisp:nil :type
    (common-lisp:or channel-associated-with-flow-summary-list
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-channels-associated-with-channel-flow-response
                    'make-list-channels-associated-with-channel-flow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-associated-with-channel-flow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-associated-with-channel-flow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "Channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-associated-with-channel-flow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-channels-moderated-by-app-instance-user-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-channels-moderated-by-app-instance-user-request-"))
   (app-instance-user-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-channels-moderated-by-app-instance-user-request
                    'make-list-channels-moderated-by-app-instance-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-moderated-by-app-instance-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-moderated-by-app-instance-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-moderated-by-app-instance-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-channels-moderated-by-app-instance-user-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-channels-moderated-by-app-instance-user-response-"))
   (channels common-lisp:nil :type
    (common-lisp:or channel-moderated-by-app-instance-user-summary-list
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-channels-moderated-by-app-instance-user-response
                    'make-list-channels-moderated-by-app-instance-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-moderated-by-app-instance-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-moderated-by-app-instance-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "Channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-moderated-by-app-instance-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-channels-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-channels-request-"))
   (app-instance-arn (common-lisp:error ":app-instance-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (privacy common-lisp:nil :type
    (common-lisp:or channel-privacy common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-channels-request 'make-list-channels-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-channels-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-channels-response-"))
   (channels common-lisp:nil :type
    (common-lisp:or channel-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-channels-response 'make-list-channels-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "Channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-sub-channels-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sub-channels-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sub-channels-request
                    'make-list-sub-channels-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sub-channels-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sub-channels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sub-channels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-sub-channels-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sub-channels-response-"))
   (channel-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (sub-channels common-lisp:nil :type
    (common-lisp:or sub-channel-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sub-channels-response
                    'make-list-sub-channels-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sub-channels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sub-channels-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-channels))
      (common-lisp:list
       (common-lisp:cons "SubChannels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sub-channels-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype maximum-sub-channels () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype member-arns () '(trivial-types:proper-list chime-arn))
 (common-lisp:defun |make-member-arns|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list chime-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype members () '(trivial-types:proper-list identity))
 (common-lisp:defun |make-members|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list identity))
   aws-sdk/generator/shape::members))
(common-lisp:deftype membership-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype message-attribute-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-message-attribute-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype message-attribute-name () 'common-lisp:string)
(common-lisp:deftype message-attribute-string-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype message-attribute-string-values ()
   '(trivial-types:proper-list message-attribute-string-value))
 (common-lisp:defun |make-message-attribute-string-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            message-attribute-string-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (message-attribute-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-message-attribute-value-"))
   (string-values common-lisp:nil :type
    (common-lisp:or message-attribute-string-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'message-attribute-value 'make-message-attribute-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          message-attribute-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          message-attribute-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-values))
      (common-lisp:list
       (common-lisp:cons "StringValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          message-attribute-value))
   common-lisp:nil))
(common-lisp:deftype message-id () 'common-lisp:string)
(common-lisp:deftype messaging-data-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (messaging-session-endpoint (:copier common-lisp:nil)
      (:conc-name "struct-shape-messaging-session-endpoint-"))
   (url common-lisp:nil :type (common-lisp:or url-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'messaging-session-endpoint
                    'make-messaging-session-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          messaging-session-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          messaging-session-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          messaging-session-endpoint))
   common-lisp:nil))
(common-lisp:deftype metadata () 'common-lisp:string)
(common-lisp:deftype minimum-membership-percentage () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype non-empty-content () 'common-lisp:string)
(common-lisp:deftype non-empty-resource-name () 'common-lisp:string)
(common-lisp:deftype non-nullable-boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (chime-sdk-messaging-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       not-found-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-code
                    'not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (processor (:copier common-lisp:nil)
      (:conc-name "struct-shape-processor-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or non-empty-resource-name common-lisp:null))
   (configuration (common-lisp:error ":configuration is required") :type
    (common-lisp:or processor-configuration common-lisp:null))
   (execution-order (common-lisp:error ":execution-order is required") :type
    (common-lisp:or channel-flow-execution-order common-lisp:null))
   (fallback-action (common-lisp:error ":fallback-action is required") :type
    (common-lisp:or fallback-action common-lisp:null)))
 (common-lisp:export (common-lisp:list 'processor 'make-processor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input processor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input processor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-order))
      (common-lisp:list
       (common-lisp:cons "ExecutionOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fallback-action))
      (common-lisp:list
       (common-lisp:cons "FallbackAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input processor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (processor-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-processor-configuration-"))
   (lambda (common-lisp:error ":lambda is required") :type
    (common-lisp:or lambda-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'processor-configuration 'make-processor-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          processor-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          processor-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda))
      (common-lisp:list
       (common-lisp:cons "Lambda"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          processor-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype processor-list () '(trivial-types:proper-list processor))
 (common-lisp:defun |make-processor-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list processor))
   aws-sdk/generator/shape::members))
(common-lisp:deftype push-notification-body () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (push-notification-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-push-notification-configuration-"))
   (title common-lisp:nil :type
    (common-lisp:or push-notification-title common-lisp:null))
   (body common-lisp:nil :type
    (common-lisp:or push-notification-body common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or push-notification-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'push-notification-configuration
                    'make-push-notification-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          push-notification-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          push-notification-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          push-notification-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (push-notification-preferences (:copier common-lisp:nil)
      (:conc-name "struct-shape-push-notification-preferences-"))
   (allow-notifications (common-lisp:error ":allow-notifications is required")
    :type (common-lisp:or allow-notifications common-lisp:null))
   (filter-rule common-lisp:nil :type
    (common-lisp:or filter-rule common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'push-notification-preferences
                    'make-push-notification-preferences))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          push-notification-preferences))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          push-notification-preferences))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-notifications))
      (common-lisp:list
       (common-lisp:cons "AllowNotifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-rule))
      (common-lisp:list
       (common-lisp:cons "FilterRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          push-notification-preferences))
   common-lisp:nil))
(common-lisp:deftype push-notification-title () 'common-lisp:string)
(common-lisp:deftype push-notification-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (put-channel-expiration-settings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-channel-expiration-settings-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (chime-bearer common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (expiration-settings common-lisp:nil :type
    (common-lisp:or expiration-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-channel-expiration-settings-request
                    'make-put-channel-expiration-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-channel-expiration-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-channel-expiration-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-settings))
      (common-lisp:list
       (common-lisp:cons "ExpirationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-channel-expiration-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-channel-expiration-settings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-channel-expiration-settings-response-"))
   (channel-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (expiration-settings common-lisp:nil :type
    (common-lisp:or expiration-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-channel-expiration-settings-response
                    'make-put-channel-expiration-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-channel-expiration-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-channel-expiration-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-settings))
      (common-lisp:list
       (common-lisp:cons "ExpirationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-channel-expiration-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-channel-membership-preferences-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-channel-membership-preferences-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (member-arn (common-lisp:error ":member-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (preferences (common-lisp:error ":preferences is required") :type
    (common-lisp:or channel-membership-preferences common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-channel-membership-preferences-request
                    'make-put-channel-membership-preferences-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-channel-membership-preferences-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-channel-membership-preferences-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preferences))
      (common-lisp:list
       (common-lisp:cons "Preferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-channel-membership-preferences-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-channel-membership-preferences-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-channel-membership-preferences-response-"))
   (channel-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (member common-lisp:nil :type (common-lisp:or identity common-lisp:null))
   (preferences common-lisp:nil :type
    (common-lisp:or channel-membership-preferences common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-channel-membership-preferences-response
                    'make-put-channel-membership-preferences-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-channel-membership-preferences-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-channel-membership-preferences-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member))
      (common-lisp:list
       (common-lisp:cons "Member"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preferences))
      (common-lisp:list
       (common-lisp:cons "Preferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-channel-membership-preferences-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-messaging-streaming-configurations-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-put-messaging-streaming-configurations-request-"))
   (app-instance-arn (common-lisp:error ":app-instance-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (streaming-configurations
    (common-lisp:error ":streaming-configurations is required") :type
    (common-lisp:or streaming-configuration-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-messaging-streaming-configurations-request
                    'make-put-messaging-streaming-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-messaging-streaming-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-messaging-streaming-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'streaming-configurations))
      (common-lisp:list
       (common-lisp:cons "StreamingConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-messaging-streaming-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-messaging-streaming-configurations-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-put-messaging-streaming-configurations-response-"))
   (streaming-configurations common-lisp:nil :type
    (common-lisp:or streaming-configuration-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-messaging-streaming-configurations-response
                    'make-put-messaging-streaming-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-messaging-streaming-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-messaging-streaming-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'streaming-configurations))
      (common-lisp:list
       (common-lisp:cons "StreamingConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-messaging-streaming-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (redact-channel-message-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-redact-channel-message-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (message-id (common-lisp:error ":message-id is required") :type
    (common-lisp:or message-id common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (sub-channel-id common-lisp:nil :type
    (common-lisp:or sub-channel-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'redact-channel-message-request
                    'make-redact-channel-message-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redact-channel-message-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redact-channel-message-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-channel-id))
      (common-lisp:list
       (common-lisp:cons "SubChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redact-channel-message-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (redact-channel-message-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-redact-channel-message-response-"))
   (channel-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (message-id common-lisp:nil :type
    (common-lisp:or message-id common-lisp:null))
   (sub-channel-id common-lisp:nil :type
    (common-lisp:or sub-channel-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'redact-channel-message-response
                    'make-redact-channel-message-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redact-channel-message-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redact-channel-message-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "MessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-channel-id))
      (common-lisp:list
       (common-lisp:cons "SubChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redact-channel-message-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-limit-exceeded-exception
     (chime-sdk-messaging-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       resource-limit-exceeded-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       resource-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-limit-exceeded-exception
                    'resource-limit-exceeded-exception-code
                    'resource-limit-exceeded-exception-message)))
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (search-channels-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-channels-request-"))
   (chime-bearer common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (fields (common-lisp:error ":fields is required") :type
    (common-lisp:or search-fields common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-channels-request 'make-search-channels-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-channels-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-channels-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "Fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-channels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-channels-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-channels-response-"))
   (channels common-lisp:nil :type
    (common-lisp:or channel-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-channels-response 'make-search-channels-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-channels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-channels-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "Channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-channels-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-field-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or search-field-key common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or search-field-values common-lisp:null))
   (operator (common-lisp:error ":operator is required") :type
    (common-lisp:or search-field-operator common-lisp:null)))
 (common-lisp:export (common-lisp:list 'search-field 'make-search-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "Operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-field))
   common-lisp:nil))
(common-lisp:deftype search-field-key () 'common-lisp:string)
(common-lisp:deftype search-field-operator () 'common-lisp:string)
(common-lisp:deftype search-field-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype search-field-values ()
   '(trivial-types:proper-list search-field-value))
 (common-lisp:defun |make-search-field-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-field-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype search-fields ()
   '(trivial-types:proper-list search-field))
 (common-lisp:defun |make-search-fields|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (send-channel-message-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-channel-message-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (content (common-lisp:error ":content is required") :type
    (common-lisp:or non-empty-content common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or channel-message-type common-lisp:null))
   (persistence (common-lisp:error ":persistence is required") :type
    (common-lisp:or channel-message-persistence-type common-lisp:null))
   (metadata common-lisp:nil :type (common-lisp:or metadata common-lisp:null))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or client-request-token common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (push-notification common-lisp:nil :type
    (common-lisp:or push-notification-configuration common-lisp:null))
   (message-attributes common-lisp:nil :type
    (common-lisp:or message-attribute-map common-lisp:null))
   (sub-channel-id common-lisp:nil :type
    (common-lisp:or sub-channel-id common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or content-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-channel-message-request
                    'make-send-channel-message-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-channel-message-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-channel-message-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persistence))
      (common-lisp:list
       (common-lisp:cons "Persistence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'push-notification))
      (common-lisp:list
       (common-lisp:cons "PushNotification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-attributes))
      (common-lisp:list
       (common-lisp:cons "MessageAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-channel-id))
      (common-lisp:list
       (common-lisp:cons "SubChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-channel-message-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (send-channel-message-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-channel-message-response-"))
   (channel-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (message-id common-lisp:nil :type
    (common-lisp:or message-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or channel-message-status-structure common-lisp:null))
   (sub-channel-id common-lisp:nil :type
    (common-lisp:or sub-channel-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-channel-message-response
                    'make-send-channel-message-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-channel-message-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-channel-message-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "MessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-channel-id))
      (common-lisp:list
       (common-lisp:cons "SubChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-channel-message-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-failure-exception
     (chime-sdk-messaging-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       service-failure-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       service-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-failure-exception 'service-failure-exception-code
                    'service-failure-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (chime-sdk-messaging-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       service-unavailable-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-code
                    'service-unavailable-exception-message)))
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:deftype status-detail () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (streaming-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-streaming-configuration-"))
   (data-type (common-lisp:error ":data-type is required") :type
    (common-lisp:or messaging-data-type common-lisp:null))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'streaming-configuration 'make-streaming-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          streaming-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          streaming-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          streaming-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype streaming-configuration-list ()
   '(trivial-types:proper-list streaming-configuration))
 (common-lisp:defun |make-streaming-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list streaming-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype sub-channel-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (sub-channel-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-sub-channel-summary-"))
   (sub-channel-id common-lisp:nil :type
    (common-lisp:or sub-channel-id common-lisp:null))
   (membership-count common-lisp:nil :type
    (common-lisp:or membership-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sub-channel-summary 'make-sub-channel-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sub-channel-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sub-channel-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-channel-id))
      (common-lisp:list
       (common-lisp:cons "SubChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-count))
      (common-lisp:list
       (common-lisp:cons "MembershipCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sub-channel-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sub-channel-summary-list ()
   '(trivial-types:proper-list sub-channel-summary))
 (common-lisp:defun |make-sub-channel-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sub-channel-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype target-memberships-per-sub-channel () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition throttled-client-exception
     (chime-sdk-messaging-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       throttled-client-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       throttled-client-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttled-client-exception
                    'throttled-client-exception-code
                    'throttled-client-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unauthorized-client-exception
     (chime-sdk-messaging-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       unauthorized-client-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       unauthorized-client-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unauthorized-client-exception
                    'unauthorized-client-exception-code
                    'unauthorized-client-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-channel-flow-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-channel-flow-request-"))
   (channel-flow-arn (common-lisp:error ":channel-flow-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (processors (common-lisp:error ":processors is required") :type
    (common-lisp:or processor-list common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or non-empty-resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-channel-flow-request
                    'make-update-channel-flow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-flow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processors))
      (common-lisp:list
       (common-lisp:cons "Processors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-channel-flow-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-channel-flow-response-"))
   (channel-flow-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-channel-flow-response
                    'make-update-channel-flow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-flow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-flow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-flow-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelFlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-flow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-channel-message-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-channel-message-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (message-id (common-lisp:error ":message-id is required") :type
    (common-lisp:or message-id common-lisp:null))
   (content (common-lisp:error ":content is required") :type
    (common-lisp:or non-empty-content common-lisp:null))
   (metadata common-lisp:nil :type (common-lisp:or metadata common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (sub-channel-id common-lisp:nil :type
    (common-lisp:or sub-channel-id common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or content-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-channel-message-request
                    'make-update-channel-message-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-message-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-message-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-channel-id))
      (common-lisp:list
       (common-lisp:cons "SubChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-message-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-channel-message-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-channel-message-response-"))
   (channel-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null))
   (message-id common-lisp:nil :type
    (common-lisp:or message-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or channel-message-status-structure common-lisp:null))
   (sub-channel-id common-lisp:nil :type
    (common-lisp:or sub-channel-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-channel-message-response
                    'make-update-channel-message-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-message-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-message-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "MessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-channel-id))
      (common-lisp:list
       (common-lisp:cons "SubChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-message-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-channel-read-marker-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-channel-read-marker-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-channel-read-marker-request
                    'make-update-channel-read-marker-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-read-marker-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-read-marker-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-read-marker-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-channel-read-marker-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-channel-read-marker-response-"))
   (channel-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-channel-read-marker-response
                    'make-update-channel-read-marker-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-read-marker-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-read-marker-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-read-marker-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-channel-request-"))
   (channel-arn (common-lisp:error ":channel-arn is required") :type
    (common-lisp:or chime-arn common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-resource-name common-lisp:null))
   (mode common-lisp:nil :type (common-lisp:or channel-mode common-lisp:null))
   (metadata common-lisp:nil :type (common-lisp:or metadata common-lisp:null))
   (chime-bearer (common-lisp:error ":chime-bearer is required") :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-channel-request 'make-update-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chime-bearer))
      (common-lisp:cons "x-amz-chime-bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-channel-response-"))
   (channel-arn common-lisp:nil :type
    (common-lisp:or chime-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-channel-response 'make-update-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-response))
   common-lisp:nil))
(common-lisp:deftype url-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun associate-channel-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn channel-flow-arn
                     chime-bearer)
   (common-lisp:declare
    (common-lisp:ignorable channel-arn channel-flow-arn chime-bearer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-channel-flow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "PUT"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/channels/~A/channel-flow"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))))
        "AssociateChannelFlow" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-channel-flow))
(common-lisp:progn
 (common-lisp:defun batch-create-channel-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn type member-arns chime-bearer
                     sub-channel-id)
   (common-lisp:declare
    (common-lisp:ignorable channel-arn type member-arns chime-bearer
     sub-channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-create-channel-membership-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "POST"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/channels/~A/memberships?operation=batch-create"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))))
        "BatchCreateChannelMembership" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-create-channel-membership))
(common-lisp:progn
 (common-lisp:defun channel-flow-callback
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key callback-id channel-arn delete-resource
                     channel-message)
   (common-lisp:declare
    (common-lisp:ignorable callback-id channel-arn delete-resource
     channel-message))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-channel-flow-callback-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "POST"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/channels/~A?operation=channel-flow-callback"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))))
        "ChannelFlowCallback" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'channel-flow-callback))
(common-lisp:progn
 (common-lisp:defun create-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-instance-arn name mode privacy
                     metadata client-request-token tags chime-bearer channel-id
                     member-arns moderator-arns elastic-channel-configuration
                     expiration-settings)
   (common-lisp:declare
    (common-lisp:ignorable app-instance-arn name mode privacy metadata
     client-request-token tags chime-bearer channel-id member-arns
     moderator-arns elastic-channel-configuration expiration-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "POST"
        :rest-json "/channels" "CreateChannel" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-channel))
(common-lisp:progn
 (common-lisp:defun create-channel-ban
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn member-arn chime-bearer)
   (common-lisp:declare
    (common-lisp:ignorable channel-arn member-arn chime-bearer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-channel-ban-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "POST"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/channels/~A/bans"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))))
        "CreateChannelBan" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-channel-ban))
(common-lisp:progn
 (common-lisp:defun create-channel-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-instance-arn processors name tags
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable app-instance-arn processors name tags
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-channel-flow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "POST"
        :rest-json "/channel-flows" "CreateChannelFlow" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-channel-flow))
(common-lisp:progn
 (common-lisp:defun create-channel-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn member-arn type chime-bearer
                     sub-channel-id)
   (common-lisp:declare
    (common-lisp:ignorable channel-arn member-arn type chime-bearer
     sub-channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-channel-membership-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "POST"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/channels/~A/memberships"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))))
        "CreateChannelMembership" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-channel-membership))
(common-lisp:progn
 (common-lisp:defun create-channel-moderator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn channel-moderator-arn
                     chime-bearer)
   (common-lisp:declare
    (common-lisp:ignorable channel-arn channel-moderator-arn chime-bearer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-channel-moderator-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "POST"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/channels/~A/moderators"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))))
        "CreateChannelModerator" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-channel-moderator))
(common-lisp:progn
 (common-lisp:defun delete-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn chime-bearer)
   (common-lisp:declare (common-lisp:ignorable channel-arn chime-bearer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input
        "DELETE" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/channels/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))))
        "DeleteChannel" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-channel))
(common-lisp:progn
 (common-lisp:defun delete-channel-ban
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn member-arn chime-bearer)
   (common-lisp:declare
    (common-lisp:ignorable channel-arn member-arn chime-bearer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-channel-ban-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input
        "DELETE" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/channels/~A/bans/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'member-arn))))
        "DeleteChannelBan" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-channel-ban))
(common-lisp:progn
 (common-lisp:defun delete-channel-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-flow-arn)
   (common-lisp:declare (common-lisp:ignorable channel-flow-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-channel-flow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input
        "DELETE" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/channel-flows/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-flow-arn))))
        "DeleteChannelFlow" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-channel-flow))
(common-lisp:progn
 (common-lisp:defun delete-channel-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn member-arn chime-bearer
                     sub-channel-id)
   (common-lisp:declare
    (common-lisp:ignorable channel-arn member-arn chime-bearer sub-channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-channel-membership-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input
        "DELETE" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/channels/~A/memberships/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'member-arn))))
        "DeleteChannelMembership" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-channel-membership))
(common-lisp:progn
 (common-lisp:defun delete-channel-message
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn message-id chime-bearer
                     sub-channel-id)
   (common-lisp:declare
    (common-lisp:ignorable channel-arn message-id chime-bearer sub-channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-channel-message-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input
        "DELETE" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/channels/~A/messages/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'message-id))))
        "DeleteChannelMessage" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-channel-message))
(common-lisp:progn
 (common-lisp:defun delete-channel-moderator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn channel-moderator-arn
                     chime-bearer)
   (common-lisp:declare
    (common-lisp:ignorable channel-arn channel-moderator-arn chime-bearer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-channel-moderator-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input
        "DELETE" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/channels/~A/moderators/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-moderator-arn))))
        "DeleteChannelModerator" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-channel-moderator))
(common-lisp:progn
 (common-lisp:defun delete-messaging-streaming-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-instance-arn)
   (common-lisp:declare (common-lisp:ignorable app-instance-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-messaging-streaming-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input
        "DELETE" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/app-instances/~A/streaming-configurations"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'app-instance-arn))))
        "DeleteMessagingStreamingConfigurations" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-messaging-streaming-configurations))
(common-lisp:progn
 (common-lisp:defun describe-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn chime-bearer)
   (common-lisp:declare (common-lisp:ignorable channel-arn chime-bearer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/channels/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))))
        "DescribeChannel" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-channel))
(common-lisp:progn
 (common-lisp:defun describe-channel-ban
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn member-arn chime-bearer)
   (common-lisp:declare
    (common-lisp:ignorable channel-arn member-arn chime-bearer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-channel-ban-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/channels/~A/bans/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'member-arn))))
        "DescribeChannelBan" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-channel-ban))
(common-lisp:progn
 (common-lisp:defun describe-channel-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-flow-arn)
   (common-lisp:declare (common-lisp:ignorable channel-flow-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-channel-flow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/channel-flows/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-flow-arn))))
        "DescribeChannelFlow" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-channel-flow))
(common-lisp:progn
 (common-lisp:defun describe-channel-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn member-arn chime-bearer
                     sub-channel-id)
   (common-lisp:declare
    (common-lisp:ignorable channel-arn member-arn chime-bearer sub-channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-channel-membership-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/channels/~A/memberships/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'member-arn))))
        "DescribeChannelMembership" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-channel-membership))
(common-lisp:progn
 (common-lisp:defun describe-channel-membership-for-app-instance-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn app-instance-user-arn
                     chime-bearer)
   (common-lisp:declare
    (common-lisp:ignorable channel-arn app-instance-user-arn chime-bearer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-channel-membership-for-app-instance-user-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/channels/~A?scope=app-instance-user-membership"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))))
        "DescribeChannelMembershipForAppInstanceUser" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-channel-membership-for-app-instance-user))
(common-lisp:progn
 (common-lisp:defun describe-channel-moderated-by-app-instance-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn app-instance-user-arn
                     chime-bearer)
   (common-lisp:declare
    (common-lisp:ignorable channel-arn app-instance-user-arn chime-bearer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-channel-moderated-by-app-instance-user-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/channels/~A?scope=app-instance-user-moderated-channel"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))))
        "DescribeChannelModeratedByAppInstanceUser" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-channel-moderated-by-app-instance-user))
(common-lisp:progn
 (common-lisp:defun describe-channel-moderator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn channel-moderator-arn
                     chime-bearer)
   (common-lisp:declare
    (common-lisp:ignorable channel-arn channel-moderator-arn chime-bearer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-channel-moderator-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/channels/~A/moderators/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-moderator-arn))))
        "DescribeChannelModerator" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-channel-moderator))
(common-lisp:progn
 (common-lisp:defun disassociate-channel-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn channel-flow-arn
                     chime-bearer)
   (common-lisp:declare
    (common-lisp:ignorable channel-arn channel-flow-arn chime-bearer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-channel-flow-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input
        "DELETE" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/channels/~A/channel-flow/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-flow-arn))))
        "DisassociateChannelFlow" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-channel-flow))
(common-lisp:progn
 (common-lisp:defun get-channel-membership-preferences
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn member-arn chime-bearer)
   (common-lisp:declare
    (common-lisp:ignorable channel-arn member-arn chime-bearer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-channel-membership-preferences-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/channels/~A/memberships/~A/preferences"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'member-arn))))
        "GetChannelMembershipPreferences" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-channel-membership-preferences))
(common-lisp:progn
 (common-lisp:defun get-channel-message
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn message-id chime-bearer
                     sub-channel-id)
   (common-lisp:declare
    (common-lisp:ignorable channel-arn message-id chime-bearer sub-channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-channel-message-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/channels/~A/messages/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'message-id))))
        "GetChannelMessage" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-channel-message))
(common-lisp:progn
 (common-lisp:defun get-channel-message-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn message-id chime-bearer
                     sub-channel-id)
   (common-lisp:declare
    (common-lisp:ignorable channel-arn message-id chime-bearer sub-channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-channel-message-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/channels/~A/messages/~A?scope=message-status"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'message-id))))
        "GetChannelMessageStatus" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-channel-message-status))
(common-lisp:progn
 (common-lisp:defun get-messaging-session-endpoint ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'chime-sdk-messaging-request :method "GET"
                                :path "/endpoints/messaging-session" :protocol
                                :rest-json :operation
                                "GetMessagingSessionEndpoint" :params
                                `(("Action" ,@"GetMessagingSessionEndpoint")
                                  ("Version" ,@"2021-05-15"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-messaging-session-endpoint))
(common-lisp:progn
 (common-lisp:defun get-messaging-streaming-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-instance-arn)
   (common-lisp:declare (common-lisp:ignorable app-instance-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-messaging-streaming-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/app-instances/~A/streaming-configurations"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'app-instance-arn))))
        "GetMessagingStreamingConfigurations" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-messaging-streaming-configurations))
(common-lisp:progn
 (common-lisp:defun list-channel-bans
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn max-results next-token
                     chime-bearer)
   (common-lisp:declare
    (common-lisp:ignorable channel-arn max-results next-token chime-bearer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-channel-bans-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/channels/~A/bans"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))))
        "ListChannelBans" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-channel-bans))
(common-lisp:progn
 (common-lisp:defun list-channel-flows
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-instance-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable app-instance-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-channel-flows-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "GET"
        :rest-json "/channel-flows" "ListChannelFlows" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-channel-flows))
(common-lisp:progn
 (common-lisp:defun list-channel-memberships
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn type max-results next-token
                     chime-bearer sub-channel-id)
   (common-lisp:declare
    (common-lisp:ignorable channel-arn type max-results next-token chime-bearer
     sub-channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-channel-memberships-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/channels/~A/memberships"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))))
        "ListChannelMemberships" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-channel-memberships))
(common-lisp:progn
 (common-lisp:defun list-channel-memberships-for-app-instance-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-instance-user-arn max-results
                     next-token chime-bearer)
   (common-lisp:declare
    (common-lisp:ignorable app-instance-user-arn max-results next-token
     chime-bearer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-channel-memberships-for-app-instance-user-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "GET"
        :rest-json "/channels?scope=app-instance-user-memberships"
        "ListChannelMembershipsForAppInstanceUser" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-channel-memberships-for-app-instance-user))
(common-lisp:progn
 (common-lisp:defun list-channel-messages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn sort-order not-before
                     not-after max-results next-token chime-bearer
                     sub-channel-id)
   (common-lisp:declare
    (common-lisp:ignorable channel-arn sort-order not-before not-after
     max-results next-token chime-bearer sub-channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-channel-messages-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/channels/~A/messages"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))))
        "ListChannelMessages" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-channel-messages))
(common-lisp:progn
 (common-lisp:defun list-channel-moderators
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn max-results next-token
                     chime-bearer)
   (common-lisp:declare
    (common-lisp:ignorable channel-arn max-results next-token chime-bearer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-channel-moderators-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/channels/~A/moderators"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))))
        "ListChannelModerators" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-channel-moderators))
(common-lisp:progn
 (common-lisp:defun list-channels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-instance-arn privacy max-results
                     next-token chime-bearer)
   (common-lisp:declare
    (common-lisp:ignorable app-instance-arn privacy max-results next-token
     chime-bearer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-channels-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "GET"
        :rest-json "/channels" "ListChannels" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-channels))
(common-lisp:progn
 (common-lisp:defun list-channels-associated-with-channel-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-flow-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable channel-flow-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-channels-associated-with-channel-flow-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "GET"
        :rest-json "/channels?scope=channel-flow-associations"
        "ListChannelsAssociatedWithChannelFlow" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-channels-associated-with-channel-flow))
(common-lisp:progn
 (common-lisp:defun list-channels-moderated-by-app-instance-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-instance-user-arn max-results
                     next-token chime-bearer)
   (common-lisp:declare
    (common-lisp:ignorable app-instance-user-arn max-results next-token
     chime-bearer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-channels-moderated-by-app-instance-user-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "GET"
        :rest-json "/channels?scope=app-instance-user-moderated-channels"
        "ListChannelsModeratedByAppInstanceUser" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-channels-moderated-by-app-instance-user))
(common-lisp:progn
 (common-lisp:defun list-sub-channels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn chime-bearer max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable channel-arn chime-bearer max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-sub-channels-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/channels/~A/subchannels"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))))
        "ListSubChannels" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-sub-channels))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "GET"
        :rest-json "/tags" "ListTagsForResource" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-channel-expiration-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn chime-bearer
                     expiration-settings)
   (common-lisp:declare
    (common-lisp:ignorable channel-arn chime-bearer expiration-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-channel-expiration-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "PUT"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/channels/~A/expiration-settings"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))))
        "PutChannelExpirationSettings" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-channel-expiration-settings))
(common-lisp:progn
 (common-lisp:defun put-channel-membership-preferences
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn member-arn chime-bearer
                     preferences)
   (common-lisp:declare
    (common-lisp:ignorable channel-arn member-arn chime-bearer preferences))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-channel-membership-preferences-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "PUT"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/channels/~A/memberships/~A/preferences"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'member-arn))))
        "PutChannelMembershipPreferences" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-channel-membership-preferences))
(common-lisp:progn
 (common-lisp:defun put-messaging-streaming-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-instance-arn
                     streaming-configurations)
   (common-lisp:declare
    (common-lisp:ignorable app-instance-arn streaming-configurations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-messaging-streaming-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "PUT"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/app-instances/~A/streaming-configurations"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'app-instance-arn))))
        "PutMessagingStreamingConfigurations" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-messaging-streaming-configurations))
(common-lisp:progn
 (common-lisp:defun redact-channel-message
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn message-id chime-bearer
                     sub-channel-id)
   (common-lisp:declare
    (common-lisp:ignorable channel-arn message-id chime-bearer sub-channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-redact-channel-message-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "POST"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/channels/~A/messages/~A?operation=redact"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'message-id))))
        "RedactChannelMessage" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'redact-channel-message))
(common-lisp:progn
 (common-lisp:defun search-channels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key chime-bearer fields max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable chime-bearer fields max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-channels-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "POST"
        :rest-json "/channels?operation=search" "SearchChannels" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-channels))
(common-lisp:progn
 (common-lisp:defun send-channel-message
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn content type persistence
                     metadata client-request-token chime-bearer
                     push-notification message-attributes sub-channel-id
                     content-type)
   (common-lisp:declare
    (common-lisp:ignorable channel-arn content type persistence metadata
     client-request-token chime-bearer push-notification message-attributes
     sub-channel-id content-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-channel-message-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "POST"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/channels/~A/messages"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))))
        "SendChannelMessage" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'send-channel-message))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "POST"
        :rest-json "/tags?operation=tag-resource" "TagResource" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "POST"
        :rest-json "/tags?operation=untag-resource" "UntagResource"
        "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn name mode metadata
                     chime-bearer)
   (common-lisp:declare
    (common-lisp:ignorable channel-arn name mode metadata chime-bearer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "PUT"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/channels/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))))
        "UpdateChannel" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-channel))
(common-lisp:progn
 (common-lisp:defun update-channel-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-flow-arn processors name)
   (common-lisp:declare
    (common-lisp:ignorable channel-flow-arn processors name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-channel-flow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "PUT"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/channel-flows/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-flow-arn))))
        "UpdateChannelFlow" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-channel-flow))
(common-lisp:progn
 (common-lisp:defun update-channel-message
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn message-id content metadata
                     chime-bearer sub-channel-id content-type)
   (common-lisp:declare
    (common-lisp:ignorable channel-arn message-id content metadata chime-bearer
     sub-channel-id content-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-channel-message-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "PUT"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/channels/~A/messages/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'message-id))))
        "UpdateChannelMessage" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-channel-message))
(common-lisp:progn
 (common-lisp:defun update-channel-read-marker
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-arn chime-bearer)
   (common-lisp:declare (common-lisp:ignorable channel-arn chime-bearer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-channel-read-marker-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-messaging-request aws-sdk/generator/operation::input "PUT"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/channels/~A/readMarker"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-arn))))
        "UpdateChannelReadMarker" "2021-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-channel-read-marker))
